<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>读《曾国藩传》1</title>
      <link href="/2022/02/13/reading-notes-of-Biography-zeng-guo-fan/"/>
      <url>/2022/02/13/reading-notes-of-Biography-zeng-guo-fan/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>春节期间读了<a href="https://book.douban.com/subject/30377678/" target="_blank" rel="noopener">《曾国藩传》(作者，张宏杰)</a>。虽然从小学到高中都有历史课，并顺利毕业，但是我的历史其实是不合格的。对于这片土地上的过去，连一知半解也谈不上。历史是任人打扮的小姑娘，所以在读历史类书籍，需要多看资料，并且多思考，勿只听一家之言。</p><hr><p>以下是对书中内容的一些摘录:</p><p>凡物亲历艰苦而得者，食之弥安也</p><p><span class="under0"><strong> 艰难的科举过程还塑造了曾国藩独特的人生哲学，那就是“尚拙”：崇尚笨拙。今人尚巧。办事越巧妙，越少费力气，越走捷径，当然就越好。很多人办事，都追求高效率，甚至不择手段。然而曾国藩不这样。曾国藩说：“天下之至拙，能胜天下之至巧。”就是说，笨拙胜过机巧。办事笨拙，才靠得住。</strong></span></p><p>作为一个笨人，曾国藩发现下笨功夫有下笨功夫的好处。</p><ul><li>第一，笨拙的人没有智力资本，因此比别人更虚心，更肯付出。</li><li>第二，笨拙的人从小接受挫折教育多，总是失败，因此“逆商”也就是逆境商数比较高，抗打击能力特别强。</li><li>第三，笨拙的人不懂取巧，不走捷径，遇到问题只知硬钻过去，因此做事不留死角。他考秀才考了七次，举人和进士却考得顺利，就是因为他基础打得牢。开了窍后，就能一顺百顺。<br><span class="under0"><strong> 相反，那些有小聪明的人不愿意下笨功夫，遇到困难绕着走，基础打得松松垮垮，结果走不远。所以，“笨拙”看起来慢，其实越到后来就走得越快，就好比盖房子，因为基础打得牢，房子就盖得比别人高。</strong></span></li></ul><p>然而，到了翰林院，他才知道什么叫学术，什么叫心性之学，才发现自己是多么鄙陋。他认真研读明代大儒王阳明的《传习录》。王阳明少年时曾问自己的私塾老师：“何为第一等事？”什么是天下最重要的事？塾师回答说：“唯读书登第耳！”那当然是读书做官。王阳明却不以为然，回答说：“登第恐未为第一等事，或（也许是）读书学圣贤耳！”科场上的胜利不是最重要的事，人生最重要的事是做圣贤！<span class="under0"><strong> 后来王阳明进士考试，也经过两次落第。人人都以落第为耻，但王阳明却说：“世以不得第为耻，吾以不得第动心为耻。”大家都以落第为耻，我却以落第后不能保持平常心为耻！</strong></span></p><p>唐鉴和倭仁告诉他，日记不是这个写法。记日记最重要的目的是反省自己。“静海先生每夜必记‘日省录’数条，虽造次颠沛，亦不闲一天，甚欲学之。”唐鉴每天晚上都要记几条自省录，来督责、规范自己。即使在路上，或者有什么紧急事务，也不打破这个规律。</p><p>唐鉴还推荐他向倭仁学习写日记之法：“又言近时河南倭艮峰仁前辈用功最笃实，每日自朝至寝，一言一动，坐作饮食，皆有札记。或心有私欲不克，外有不及检者皆记出。”<span class="under0"><strong> 首先，要把写日记当成生活中的一件大事，日记要用恭楷来写，因为这样反映一种诚敬的心态。日记中规定的，就一定要做到。其次，日记的作用是“研几”，几就是细节，就是抓住生活中的细节，通过每一个细节来改变自己，而不是在细节上轻轻滑过去。一个细节上滑过，整个自我管理的工程都可能垮塌，所以在写日记时要反思一整天的活动，不光是要逐一反思自己的行为，甚至要反思检查自己大脑中转过的每一个念头。</strong></span>曾国藩曾这样描述倭仁的日课：“每日有日课册，一日之中一念之差、一事之失、一言一默皆笔之于书。书皆楷字，三月则订一本。自乙未年起，今三十本矣。”曾国藩于是就效仿倭仁，从道光二十二年（1842）十月一日开始恭楷写日记。把一天做了什么事、说了什么话，都要细细地过一遍，然后反省哪件事做得不对，哪句话说得不对，“痛自警醒”，记载下来，深刻反省。他在给弟弟们的信中介绍说：余自十月初一日起亦照艮峰样，每日一念一事，皆写之于册，以便触目克治，亦写楷书。……余向来有无恒之弊，自此次写日课本子起，可保终身有恒矣。既然自我完善，首先当然就要抓紧时间，不能再“闲游荒业”“闲谈荒功”“溺情于奕”。从十月二日起，曾国藩给自己规定了以下基本学习日程：每日楷书写日记，每日读史十页，每日记茶余偶谈一则。这是必须完成的课程下限，除此之外，他还每日读《易》，练习作文。通过记日记的方式，曾国藩提高了学习效率。他也通过这种方式，对自己的性格、脾气进行反省。他在日记中把自己跟郑小珊打架这件事记述了一遍，然后进行分析，这件事虽然两个人都有毛病，但是圣人教导说，改过要从自己做起，而且改过要从速，意识到了马上就要改。所以他撂下笔，马上就去向郑小珊赔罪。郑小珊也很感动，本来是俩人都有错，结果曾国藩主动道歉，于是两个人把酒言欢，尽释前嫌。对于自己最爱犯的“言不由衷”“虚伪”“浮夸”，他在日记中也是高度警惕。他反省道：“予此病甚深。孔子之所谓巧令，孟子之所谓，其我之谓乎？……试思此求悦于人之念，君子乎？女子小人乎？”也就是说，动不动就随口夸人，这正是孔子所说的“巧令”，是小人行径。曾国藩反思，评论人夸奖人要慎重，这样人家才会拿自己的话当回事。“我诚能言必忠信，不欺人，不妄语，积久人自知之。不赞，人亦不怪。苟有试而誉人，人且引以为重。若日日誉人，人必不重我言矣！欺人自欺，灭忠信，丧廉耻，皆在于此，切戒切戒！”</p><p><span class="under0"><strong> 经过不断的失败，曾国藩领悟到，这些性格深处的缺陷，并不像戒除一项单纯的嗜好，或者割去一个良性肿瘤那么简单。吸烟有形有迹，戒烟只需要做到一条：手不碰烟具即可。而更多的性格弱点是深植于人的本性之中的。它是多年形成的，与人的其他部分血肉交融成一个整体，远比烟瘾复杂、隐蔽，并非可以用解剖刀单独挑出来割掉的。“学做圣人”是终生的事业。许多根深蒂固的缺点、毛病，通过一时半会儿的“猛火煮”，不会彻底改掉，只有用一生的时间去“慢火温”，才有可能慢慢化解。因此，在修身起始阶段，重要的是猛。在进行阶段，更重要的是韧。在自我完善的过程中，一个人肯定会经受无数次的反复、失败、挫折甚至倒退。关键是不能放弃。</strong></span></p><p>清代名臣张英在《聪训斋语》中说：“人生以择友为第一事。”就是说，交友，是人生第一大事。为什么呢？因为那时候没广播没电视没大学。一个人获取知识信息，在外想获得帮助，全要靠朋友。所以朋友的多少，朋友的质量，决定了一个人的视野能有多宽广。</p><p>一个人的声望是晋升的重要基础。曾国藩潜心学术，热心公益，在皇帝心目中形象比较清新端正，这是他迅速升官的重要背景。</p><p>他说：“无他，熟读《大学》<span class="under0"><strong>‘知止而后有定，定而后能静，静而后能安，安而后能虑，虑而后能得</strong></span>’数语，尽之矣。”曾国藩说他“行军有伸有缩，有开有合”，可以说是一个军事天才。</p><p>在极端痛苦中，他拿起了朋友向他推荐的老庄著作。几千年前的圣人之言给了他意想不到的启示，让他恍然见到了另一片天地。他像一个闭关的和尚一样把自己关在屋子里，一坐就是一整天，把自己起兵以来的种种情形在大脑中一遍遍地过。渐渐地，曾国藩静下心来了。曾国藩反思到，自己在官场上一再碰壁，碰得鼻青脸肿，不光是皇帝小心眼，大臣多私心，自己的个性、脾气、气质、风格上的诸多缺陷，也是重要原因。回想自己以前为人处世，总是怀着强烈的道德优越感，自以为居心正大，人浊我清，因此高己卑人，锋芒毕露，说话太冲，办事太直，当然容易引起他人的反感。他翻阅旧日信稿，发现了当日武昌告急时，他请求骆秉章发兵援救的一封信。写这封信时，他觉得字字有理有据，今天读来，却发现字字如锥如芒。信中称湖南湖北“唇齿利害之间，此不待智者而知也”，不仅没有一点儿商量的口气，而且还略带嘲讽之意。为了防止骆秉章干预他募练水师，他又在信中早早地表明态度：“其水路筹备一端，则听侍（曾自称）在此兴办，老前辈不必分虑及之。断不可又派员别为措置。”仍是一副舍我其谁、比谁都高明的架势。怪不得当日骆秉章批评他刚愎自用。骆秉章回信的原话是说他：“行事犹是独行己见，不能择善而从，故进言者安于缄默，引身而退。”说他做事听不进别人意见，所以也就没人愿意给他出主意。当时听了这话，他不以为然，今天想来，才发现确实说到了自己的痛处。他在给弟弟的信中承认说：“余生平在家在外，行事尚不十分悖谬，惟说些利害话，至今悔憾无极！”曾国藩回忆起在湖南时朋友们对他的批评：“近日友朋致书规我，多疑我近于妒功嫉能，忮薄险狠者之所为，遂使我愤恨无已……仆之不能推诚与人，盖有岁年。”朋友们不能理解他，难道都是因为不明大义，身处局外？他自己就没有任何责任？“行有不得，反求诸己”这句圣人之言，他虽然耳熟能详，实际上没有真正做到过。他又想起弟弟对自己的批评：“曾记咸丰七年冬，余咎骆文、文、耆待我之薄，温甫则曰：‘兄之面色，每予人以难堪。’”温甫是三弟曾国华。亲兄弟比别人说话更直接。确实，面对官场同僚，他确实常以圣贤自命，而以小人目人，面色如铁，话语如刀。不光是对同僚，就是对自己的亲兄弟，他也成天一副“唯我正确”“你们都不争气”的神气，处处批评教训，弄得当年国荃、国华到北京投奔他，结果都待不了多久就返乡了。设身处地，推己及人，那些自尊心受挫的同僚当然也会以冷面冷心甚至排斥辱骂来对待他。曾国藩在家中致信各位好友，请大家给他多提意见，帮自己总结经验教训。</p><p><span class="under0"><strong>曾国藩终于认识到，行事过于方刚者，表面上似乎是强者，实际上却是弱者。这片土地上真正的强者，是表面上看起来柔弱退让之人。所谓“天下之至柔，驰骋天下之至坚”，“江海所以能为百谷王者，以其善下之”。所谓“大柔非柔，至刚无刚”。中国社会的潜规则是不可能一下子被扫荡的。那些他以前所看不起的虚伪、麻木、圆滑、机诈，是在这片土地上生存的必需手段。只有必要时和光同尘，圆滑柔软，才能顺利通过一个个困难的隘口。只有海纳百川，兼收并蓄，才能调动各方面的力量，达到胜利的彼岸。</strong></span></p><p>并说湘军现在顿兵坚城之下，很难马上得手，即使能够很快攻下安庆，倘若丢掉苏、常，也是得不偿失的。曾国藩接过了两江总督的官帽，却坚决反对咸丰皇帝的附加条件，拒绝撤围安庆。古今中外，具有雄才大略的用兵者，无不能够始终从战略的高度来把握问题，能够透过暂时的纷乱看到重点，在利害交织中看清本质，牢牢把握好长远与眼前、全局与局部的关系。</p><p>曾国藩始终具有强烈的全局观念，他曾经夫子自道地说：“我对于大利大害所在，都能悉心考究。”他还说，“用兵以审势为第一要义”，“‘势’则指大计大局”。还说应该从大的地方去分清界限，不要斤斤于小处去剖析微芒。这个大利大害、大计大局，就是战略重心的所在。所以湘军虽然在局部的战斗中会吃败仗，但在战略态势上却总是处于有利位置。而太平天国尽管在局部的战役上取得了一些胜利，但整个战略态势却越来越不利。这是湘军最终能够将太平天国镇压下去的重要原因之一。</p><p><span class="under0"><strong>战略上有一条基本的原则，就是致人而不致于人，也就是要迫使对方按照自己的战略安排行动，迫使对方跟着我们的步子走，而不是按照对方的战略安排行动。说白了，就是将战略的主动权掌握在自己的手中。</strong></span></p><p>两江总督是清代光绪朝以前唯一统辖三省的总督：江苏、江西和安徽。三个省为什么叫两江呢？<strong>这是因为明代的江苏和安徽是一个省，叫江南省。</strong>两江地区正当中国南北之接合部，在军事上十分重要，在经济上更举足轻重。两江所征收的漕粮，占全国漕粮总数的一半以上。因此牵动着全国的财政命脉。</p><p><span class="under0"><strong>“天下无易境，天下无难境；终身有乐处，终身有忧处”。大功克成之际，往往烦恼尤多。</strong></span></p><p>这是曾国藩在遇到困难阻碍时的一贯心态。很多大人物都喜欢其他人如同秋草伏风一样，偃伏在自己脚下，让自己的所有决定都得到“坚决贯彻”，“理解的要执行，不理解的也要执行”。曾国藩却不是这样。他的斋名为求阙，一生勤求己过，最喜欢听别人的批评。越是位高权重，他越是主动听取逆耳之言，以克除自己身上的“意气”“客气”和“矜气”。他曾说：“安得一二好友，胸襟旷达、萧然自得者，与之相处，砭吾之短。”他有意识地在身边安排几个耿直高洁之人，时时给自己指出缺点。“身旁须有一胸襟恬淡者，时时伺余之短，以相箴规，不使矜心生于不自觉。”在给朋友的信中，也经常请求他们“常惠箴言，并赐危论”。</p><p>仰观宇宙之大，俯察品类之盛，他悟到，人力其实是很弱小的。古今亿万年无有穷期，人生其间数十寒暑，仅须臾耳。……事变万端，美名百途，人生才力之所能办者，不过太仓之一粒耳。</p><p>除了这封重要的信之外，<span class="under0"><strong>曾国藩还反复讲过很多劝诫的话。比如：“古来大战争、大事业，人谋仅占十分之三，天意恒居十分之七。往往积劳之人非即成名之人，成名之人非即享福之人。”真正出力的人不一定成名，而成名的人不一定能享福，这都是常见的事。“富贵功名皆人世浮荣，惟胸次浩大是真正受用。”富贵功名都是给别人看的，只有心胸开阔，自己才能得到好处。“功不必自己出，名不必自己成，总以保全身体，莫生肝病为要。”</strong></span></p><p>对朝廷的猜忌，曾国藩早就有心理准备。他熟读史书，更精通易理。《易传》中说：“日中则昃，月盈则亏。”当一个人的地位、权势、声望达到顶点的时候，也就是要走下坡路的时候。稍微处理不慎，会带来无法预计的危险。因此，越是辉煌的时候，越应该努力保持清醒的头脑，趋福避祸。怎么趋吉避凶呢？关键是处理好权和利两个字。</p><p>曾国藩的遗嘱与普通人不同，其中并没有什么遗产分割之类的常见内容，重心是放在对后代品性的期许上。他把自己一生为人处世最重要的心得又向儿子们交代一次，那就是为人一定要做到“不忮不求”。余生平略涉儒先之书，见圣贤教人修身，千言万语，而要以不忮不求为重。<span class="under0"><strong>忮者，嫉贤害能，妒功争宠，所谓怠者不能修，忌者畏人修之类也。求者，贪利贪名，怀土怀惠，所谓未得患得，既得患失之类也。忮不常见，每发露于名业相侔、势位相埒之人；求不常见，每发露于货财相接、仕进相妨之际。将欲造福，先去忮心，所谓人能充无欲害人之心，则仁不可胜用也。将欲立品，先去求心，所谓人能充无穿窬之心，而义不可胜用也。忮不去，满怀皆是荆棘；求不去，满腔日即卑污。余于此二者常加克治，恨尚未能扫除净尽。</strong></span>尔等欲心地干净，宜于此二者下功夫，并愿子孙世世戒之。人这辈子，最难去除的是嫉妒和贪求。所谓“不忮”，就是克制自己的嫉妒心。“不求”，就是克制自己的贪求心。这两点听起来似乎是老生常谈，事实上很多人，特别是很多当世名公，都处理不好。嫉妒经常出现在功名事业差不多的人之间，贪求常出现在升官发财之际。连左宗棠、郭嵩焘这样的大人物事实上都常在这两点上犯错误。所以他专门强调，这两点不去除，则既难立品，又妨造福。希望曾氏后人能克掉这两点，做到“心地干净”。</p><p>凡办大事，半由人力，半由天事</p><p><span class="under0"><strong>天地之道，刚柔互用，不可偏废，太柔则靡，太刚则折</strong></span></p><p>凡事皆有极困极难之时，打得通便是好汉</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Git文件名大小写敏感问题</title>
      <link href="/2022/02/09/git-fileName-case-sensitive/"/>
      <url>/2022/02/09/git-fileName-case-sensitive/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>前阵子在项目开发的时候遇到一个问题：代码在我本地(Mac)跑起来是正常的，丢到<code>github actions</code>跑的时候总是报错。排查了很久，最终发现是因为Git文件名大小写敏感导致的问题，本文做下记录。</p><hr><p>当时有个组件命名是<code>test.tsx</code>，然后我改成了<code>Test.tsx</code>。代码文件中引入该组件的地方也变成了<code>../../path/Test.tsx</code>。但是在<code>github actions</code>的机器上执行的时候却提示找不到文件。</p><p><span class="under0"><strong>因为 mac/windows 环境下 Git在不设置大小写敏感规则的时候默认大小写是不敏感，github actions跑的机器是 Linux 的，而 Linux 下 Git是默认大小写敏感的。</strong></span> 所以我本地机器(Mac)跑的时候是正常的。</p><p>我本地虽然改了文件名为<code>Test.tsx</code>，可是mac环境下大小写是不敏感的，所以<code>Test.tsx</code>还是处理成的<code>test.tsx</code>，git(git status)是没有变更的，导致提交在github仓库中的文件名仍然是<code>test.tsx</code>。可是代码中的引用路径已经是<code>../path/Test.tsx</code>了，所以在<code>webpack</code>打包编译的时候(Linux环境)就会找不到文件。</p><hr><h3 id="解决办法"><a href="#解决办法" class="headerlink" title=" 解决办法 "></a><strong> 解决办法 </strong></h3><p>方法一<br>删除文件，重新添加文件。（删除之前记得备份下文件内容）</p><p>方法二<br>设置Git大小写敏感（这个方法我没有实际试过）<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git config core.ignorecase false</span><br></pre></td></tr></table></figure></p><hr><h3 id="杂感"><a href="#杂感" class="headerlink" title=" 杂感 "></a><strong> 杂感 </strong></h3><p>这个问题其实我上大学时，遇到过一次，不过时间长了就忘记了，所以本次特意做下记录，避免再犯。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://blog.csdn.net/u013707249/article/details/79135639" target="_blank" rel="noopener">git 大小写问题 踩坑笔记</a></li><li><a href="https://blog.csdn.net/u011350541/article/details/86517435" target="_blank" rel="noopener">git修改文件夹/文件名大小写敏感问题解决</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2021年总结：畅想2020</title>
      <link href="/2022/01/09/2021-summary/"/>
      <url>/2022/01/09/2021-summary/</url>
      
        <content type="html"><![CDATA[<p>人一上了年纪就容易想从前。</p><p>从前，我上小学的时候，被要求写作文想象2020年的世界。上五年级以前，我都生活在彭水，一个小县城。作文里我堆砌了一些词语，2020年的世界到处是高楼大厦，川流不息。后来初一(2009年)去市里上学，发现重庆已经那样了。2020年新冠的出现，是我作文里没想到的，可见畅想十多年后的事情是多么的不靠谱。</p><p>我从小就不喜欢写作文，更讨厌写日记。奈何人小力薄，昧着良心，在日记和作文里撒了很多谎。长大了发现，世界本就充斥着许多谎言，很多人都在一本正经地说着谎话。说谎话会红脸的样子想起来还有点纯真得可爱。希望以后我的小孩，不会被要求作文畅想2050年。</p><p>星霜荏苒，简单记录下我的2021年</p><hr><p><strong>感情</strong></p><p>今年我很多时间都在路上。我高频地往返于成都和重庆之间。受益于成渝经济圈带来的高铁提速，现在从成都到重庆，高铁只需要1个小时了。我经常周五下班后，从成都东站坐高铁到沙坪坝。周一早上再从重庆坐高铁回成都上班。</p><p>我其实是一个懒人，两地往返的是为了周末和女朋友团聚。</p><p><img src="/img/杂文/2021-summary/5.jpg" alt="5.jpeg"><br><img src="/img/杂文/2021-summary/6.jpeg" alt="6.jpeg"></p><p>求婚</p><p><img src="/img/杂文/2021-summary/7.jpg" alt="7.jpg"></p><hr><p><strong>我买</strong></p><p>21年经济上最大支出，就是买房。比较遗憾的是，虽然买的是超高层，但没足够的钱买看江的户型以及没有买到满意的楼层。</p><p><img src="/img/杂文/2021-summary/2.jpeg" alt="2.jpeg"></p><p>另外还买了一个车位，虽然我没有车，甚至驾照都快过期还没考下来</p><p><img src="/img/杂文/2021-summary/3.jpeg" alt="3.jpeg"></p><p>当然我也背上了贷款。目前还在攒装修钱。</p><p>在2021年最后一天，买了保险，我给自己配置了重疾险 + 寿险 + 意外险 + 医疗险。今年一个观点的改变，在进行投资之前，应该先配置保险。其实买保险的想法2020年就有了，当时因为购房之类的事情，拖了很久。</p><p><span class="under0"> <strong> 人生和编程类似，需要做一些兜底，对异常情况做一些处理。虽然我目前还比较年轻，但是黑天鹅是不可预测的。不过买保险只能对冲一些经济上的风险，更重要的还是有良好的生活习惯，健康生活。</strong></span></p><hr><p><strong>我读</strong></p><p>2021年累计看了17本书，如下：<br>《沧浪之水》<br>《被重置的人生》<br>《阿城精选集》<br>《寻找无双》<br>《卡夫卡全集（插图本）：第1卷》<br>《青春》<br>《有限和无限游戏》<br>《30岁后，我靠投资生活2》<br>《卓有成效的管理者》<br>《精益创业》<br>《孙子兵法》<br>《结构性改革》<br>《分析与思考》<br>《世界是部金融史》<br>《中国历代政府得失》<br>《政治的人生》<br>《毛泽东选集》1/2/3卷</p><p>这里我想稍微谈谈《被重置的人生》这本书。《被重置的人生》是一个年轻人患了白血病，在治疗期间所写的日记。作者最后还是去世了。</p><p>常常可以在新闻上或者书上看到多少人死去，但是数字比较抽象。作者通过日记把治疗的过程清晰的记录下来，尽管作者已经很乐观，但我读起来十分揪心痛苦，这本书最后我没忍心读完。</p><hr><p><strong>减肥</strong></p><p>今年花了两个月瘦了30斤，从168斤瘦到137斤。在减肥这件事上，我是比较失败的。因为这已经是我第二次减肥了。</p><p>这里分享一点我失败的经验，仅供参考。 <span class="under0"> <strong> 关于减肥，我主要是通过控制饮食+锻炼，最重要的一点是，要坚持下去。</strong> </span><br>饮食部分，我的核心策略是高蛋白少碳水。<br>早餐我主要是吃全麦面包，或者做三明治。午饭和晚饭，少吃主食，吃菜比较多，主要是高蛋白的一些食物，比如鸡肉，鱼肉，牛肉，鸡蛋。 一定不要节食，最好选择自己能坚持下去的食物，毕竟好吃才能坚持下去。   </p><p>除了散步，锻炼主要分为燃脂运动和力量训练。</p><p>燃脂运动<br>开合跳 x 30<br>深蹲跳 x 30<br>勾腿跳 x 30<br>高抬腿 x 30<br>每次四组。</p><p>力量训练，器械我使用的是哑铃和弹力带<br>站姿二头弯举 x 15<br>俯身三头臂屈伸 x 15<br>背部划船 x 15<br>肩膀推举 x 20<br>侧平举 * 15<br>每次三到四组 </p><p><img src="/img/杂文/2021-summary/1.jpeg" alt="1.jpeg"></p><hr><p><strong>编程</strong></p><p>和往年一样，大部分代码都是在公司上班写的。</p><p>此外2021年末，我业余写了一个软件，第一个版本目前写好了80%，还有待进一步打磨。希望今年第二季度能够正式对外提供服务。</p><p>我的博客<a href="http://www.sail.name。2021年PV总计21682，" target="_blank" rel="noopener">www.sail.name。2021年PV总计21682，</a> UV总计20819。大部分流量都是我学生时代写的博客所带来的，这两年写得越来越少了。<br><img src="/img/杂文/2021-summary/9.jpeg" alt="9.jpeg"></p><p>博客用户访问时间和程序员的作息比较一致。</p><p><img src="/img/杂文/2021-summary/8.jpeg" alt="8.jpeg"></p><hr><p>时间飞逝，一晃眼已经毕业两年半了。希望2022年过得更舒服一点。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>详解lsof命令</title>
      <link href="/2021/11/06/lsof-detail/"/>
      <url>/2021/11/06/lsof-detail/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对<code>lsof</code>命令的一点记录。</p><p>要详细的学习某个shell命令，可以参考我之前的博文<a href="https://www.sail.name/2020/09/19/solve-your-shell-command-troubles-in-ten-minutes/">《十分钟解决你的shell命令烦恼》</a></p><hr><h3 id="杀死占用某个端口的进程"><a href="#杀死占用某个端口的进程" class="headerlink" title=" 杀死占用某个端口的进程 "></a><strong> 杀死占用某个端口的进程 </strong></h3><p>在mac/linux上我们如何杀死占用某个端口的进程，比如3000端口。执行<code>lsof -i tcp:3000</code> 或 <code>lsof -i :3000</code>，得到以下结果<br><img src="/img/linux/lsof-detail/1.png" alt="1.png"><br>可以看PID(进程标识符)，为94611，执行 <code>kill 94611</code>即可。</p><hr><h3 id="输出列含义"><a href="#输出列含义" class="headerlink" title=" 输出列含义 "></a><strong> 输出列含义 </strong></h3><p>这里补充下上图<code>lsof</code>命令输出的各列的含义。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">COMMAND: 进程的名称</span><br><span class="line">PID: 进程标识符</span><br><span class="line">USER: 进程所有者</span><br><span class="line">FD: 文件描述符，应用程序通过文件描述符识别该文件</span><br><span class="line">TYPE: 文件类型</span><br><span class="line">DEVICE: 以逗号分隔设备编号(磁盘名称)</span><br><span class="line">SIZE: 文件的大小(bytes)</span><br><span class="line">NODE: 索引节点(文件在磁盘上的标识)</span><br><span class="line">NAME: 打开文件的确切名称</span><br></pre></td></tr></table></figure><h4 id="FD-文件描述符列表"><a href="#FD-文件描述符列表" class="headerlink" title=" FD(文件描述符列表) "></a><strong> FD(文件描述符列表) </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">cwd：表示current work dirctory，即：应用程序的当前工作目录，这是该应用程序启动的目录，除非它本身对这个目录进行更改</span><br><span class="line">txt：该类型的文件是程序代码，如应用程序二进制文件本身或共享库，如上列表中显示的 /sbin/init 程序</span><br><span class="line">lnn：library references (AIX);</span><br><span class="line">er：FD information error (see NAME column);</span><br><span class="line">jld：jail directory (FreeBSD);</span><br><span class="line">ltx：shared library text (code and data);</span><br><span class="line">mxx ：hex memory-mapped type number xx.</span><br><span class="line">m86：DOS Merge mapped file;</span><br><span class="line">mem：memory-mapped file;</span><br><span class="line">mmap：memory-mapped device;</span><br><span class="line">pd：parent directory;</span><br><span class="line">rtd：root directory;</span><br><span class="line">tr：kernel trace file (OpenBSD);</span><br><span class="line">v86  VP/ix mapped file;</span><br><span class="line">0：表示标准输出</span><br><span class="line">1：表示标准输入</span><br><span class="line">2：表示标准错误</span><br></pre></td></tr></table></figure><p>一般在标准输出、标准错误、标准输入后还跟着文件状态模式：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">u：表示该文件被打开并处于读取/写入模式。</span><br><span class="line">r：表示该文件被打开并处于只读模式。</span><br><span class="line">w：表示该文件被打开并处于。</span><br><span class="line">空格：表示该文件的状态模式为unknow，且没有锁定。</span><br><span class="line">-：表示该文件的状态模式为unknow，且被锁定。</span><br></pre></td></tr></table></figure><h4 id="TYPE-文件类型"><a href="#TYPE-文件类型" class="headerlink" title=" TYPE(文件类型) "></a><strong> TYPE(文件类型) </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">REG：文件</span><br><span class="line">DIR：表示目录。</span><br><span class="line">CHR：表示字符类型。</span><br><span class="line">BLK：块设备类型。</span><br><span class="line">UNIX： UNIX 域套接字。</span><br><span class="line">FIFO：先进先出 (FIFO) 队列。</span><br><span class="line">IPv4：网际协议 (IP) 套接字。</span><br></pre></td></tr></table></figure><hr><h3 id="lsof常用参数以及实战"><a href="#lsof常用参数以及实战" class="headerlink" title=" lsof常用参数以及实战 "></a><strong> lsof常用参数以及实战 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-a：列出打开文件存在的进程；</span><br><span class="line">-c&lt;进程名&gt;：列出指定进程所打开的文件；</span><br><span class="line">-g：列出GID号进程详情；</span><br><span class="line">-d&lt;文件号&gt;：列出占用该文件号的进程；</span><br><span class="line">+d&lt;目录&gt;：列出目录下被打开的文件；</span><br><span class="line">+D&lt;目录&gt;：递归列出目录下被打开的文件；</span><br><span class="line">-n&lt;目录&gt;：列出使用NFS的文件；</span><br><span class="line">-i&lt;条件&gt;：列出符合条件的进程。（4、6、协议、:端口、 @ip ）</span><br><span class="line">-p&lt;进程号&gt;：列出指定进程号所打开的文件；</span><br><span class="line">-u：列出UID号进程详情；</span><br><span class="line">-h：显示帮助信息；</span><br><span class="line">-v：显示版本信息</span><br></pre></td></tr></table></figure><h4 id="查看哪些进程打开了某个文件"><a href="#查看哪些进程打开了某个文件" class="headerlink" title=" 查看哪些进程打开了某个文件 "></a><strong> 查看哪些进程打开了某个文件 </strong></h4><p><code>lsof /Library/Fonts/Arial.ttf</code><br><img src="/img/linux/lsof-detail/3.png" alt="3.png"><br><code>lsof /dev/null</code><br><img src="/img/linux/lsof-detail/2.png" alt="2.png"></p><h4 id="查看哪些进程打开了某个目录"><a href="#查看哪些进程打开了某个目录" class="headerlink" title=" 查看哪些进程打开了某个目录 "></a><strong> 查看哪些进程打开了某个目录 </strong></h4><p><code>lsof ~/learn/repo/blog</code></p><h4 id="查看某个进程程序所打开的文件信息"><a href="#查看某个进程程序所打开的文件信息" class="headerlink" title=" 查看某个进程程序所打开的文件信息 "></a><strong> 查看某个进程程序所打开的文件信息 </strong></h4><p><code>lsof -c mysql</code>，查看mysql这个进程打开的文件</p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://linuxtools-rst.readthedocs.io/zh_CN/latest/tool/lsof.html" target="_blank" rel="noopener">3. lsof 一切皆文件</a></li><li><a href="https://www.cnblogs.com/sparkdev/p/10271351.html" target="_blank" rel="noopener">Linux lsof 命令</a></li><li><a href="https://man.linuxde.net/lsof" target="_blank" rel="noopener">lsof命令</a></li><li><a href="https://blog.csdn.net/ch717828/article/details/46663595" target="_blank" rel="noopener">Mac系统查看端口占用和杀死进程</a></li><li><a href="https://man7.org/linux/man-pages/man8/lsof.8.html" target="_blank" rel="noopener">lsof(8) — Linux manual page</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu20中安装MySQL5.7</title>
      <link href="/2021/10/18/install-mysql57-in-ubuntu20/"/>
      <url>/2021/10/18/install-mysql57-in-ubuntu20/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对在<code>Ubuntu20.04</code>中安装<code>MySQL5.7</code>的记录</p><hr><h3 id="安装MySQL"><a href="#安装MySQL" class="headerlink" title=" 安装MySQL "></a><strong> 安装MySQL </strong></h3><p>首先在MySQL官网根据你的需求找到所需要安装的版本链接</p><ul><li><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></li><li><a href="https://downloads.mysql.com/archives/community/" target="_blank" rel="noopener">https://downloads.mysql.com/archives/community/</a></li></ul><p><img src="/img/mysql/1.png" alt="1.png"></p><p><strong> 下载deb安装包 </strong><br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://dev.mysql.com/get/Downloads/MySQL-5.7/mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</span><br></pre></td></tr></table></figure></p><p><strong> 新建目录 </strong><br><code>mkdir mysql5.7.31</code><br><code>mv mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar ./mysql5.7.31</code></p><p><strong> 解压 </strong><br><code>cd mysql5.7.31</code><br><code>sudo tar -vxf mysql-server_5.7.31-1ubuntu18.04_amd64.deb-bundle.tar</code></p><p><strong> 解压出来的deb安装包如下 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">libmysqlclient20_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-community-source_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-common_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-testsuite_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">libmysqlclient-dev_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-community-client_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-community-server_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">libmysqld-dev_5.7.31-1ubuntu18.04_amd64.deb</span><br><span class="line">mysql-community-test_5.7.31-1ubuntu18.04_amd64.deb</span><br></pre></td></tr></table></figure></p><p><strong> 删除2个测试相关的包 </strong><br><code>sudo rm -f mysql-testsuite_5.7.31-1ubuntu18.04_amd64.deb</code><br><code>sudo rm -f mysql-community-test_5.7.31-1ubuntu18.04_amd64.deb</code></p><p><strong> 安装依赖 </strong><br><code>sudo apt-get install libtinfo5</code><br><code>sudo apt-get install libmecab2</code></p><p><strong> 使用deb安装 </strong><br><code>sudo dpkg -i mysql-*.deb</code></p><hr><h3 id="基本命令"><a href="#基本命令" class="headerlink" title=" 基本命令 "></a><strong> 基本命令 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#启动mysql</span><br><span class="line">sudo service mysql start</span><br><span class="line"></span><br><span class="line">#停止mysql</span><br><span class="line">sudo service mysql stop</span><br><span class="line"></span><br><span class="line">#重启mysql</span><br><span class="line">sudo service mysql restart</span><br><span class="line"></span><br><span class="line">#查看mysql状态</span><br><span class="line">sudo service mysql status</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://viencoding.com/article/295" target="_blank" rel="noopener">Ubuntu20安装MySQL5.7</a></li><li><a href="https://www.jianshu.com/p/ba48f1e386f0" target="_blank" rel="noopener">Ubuntu20.04 安装 MySQL5.7</a></li><li><a href="https://cloud.tencent.com/developer/article/1655900" target="_blank" rel="noopener">Ubuntu安装mysql5.7（诲人不倦，记点干货）</a></li><li><a href="https://www.cnblogs.com/MaggieForest/p/14868085.html" target="_blank" rel="noopener">ubuntu20.04 安装mysql5.7配置</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeError:Cannot read property &#39;COLLATION&#39; of undefined</title>
      <link href="/2021/09/26/TypeError-Cannot-read-property-COLLATION-of-undefined/"/>
      <url>/2021/09/26/TypeError-Cannot-read-property-COLLATION-of-undefined/</url>
      
        <content type="html"><![CDATA[<p>最近用nest写应用的时候，orm用的是<code>typeorm</code>遇到了一个报错。<br><code>ERROR [TypeOrmModule] Unable to connect to the database. TypeError: Cannot read property &#39;COLLATION&#39; of undefined</code></p><p>折腾了半天，发现是数据库库名首字母大写导致的。最后我将库名从<code>Bookkeeping</code>改成了<code>bookkeeping</code>就可以了。把这个记录下来了，帮助后面踩坑的朋友。</p><p><strong><span class="under0">日常编码的时候还是要养成良好的习惯，比如不要用中文命名文件夹，数据库/表名，用小写。就可以直接避免类似的问题。</span></strong></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://github.com/typeorm/typeorm/issues/2403" target="_blank" rel="noopener">TypeError: Cannot read property ‘COLLATION’ of undefined</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> TypeOrm </category>
          
          <category> nest </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS中字符和ASCII码相互转换</title>
      <link href="/2021/09/25/convert-letter-to-ascii-code-in-js/"/>
      <url>/2021/09/25/convert-letter-to-ascii-code-in-js/</url>
      
        <content type="html"><![CDATA[<p>最近碰到了一个需要把数组和字母相互转换的场景。</p><p>在JS中可以通过<code>charCodeAt</code>把字母转换成<code>ASCII码</code>，也可以通过<code>fromCharCode</code>把数字转换成字母</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'A'</span>.charCodeAt()</span><br><span class="line"># 65</span><br><span class="line"></span><br><span class="line"><span class="string">'Z'</span>.charCodeAt()</span><br><span class="line"># 90</span><br><span class="line"></span><br><span class="line"><span class="string">'a'</span>.charCodeAt()</span><br><span class="line"># 97</span><br><span class="line"></span><br><span class="line"><span class="string">'z'</span>.charCodeAt()</span><br><span class="line"># 122</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">65</span>)</span><br><span class="line"># 'A'</span><br></pre></td></tr></table></figure><hr><h3 id="charCodeAt"><a href="#charCodeAt" class="headerlink" title=" charCodeAt "></a><strong> charCodeAt </strong></h3><p><code>charCodeAt()</code> 方法返回 0 到 65535 之间的整数，表示给定索引处的 UTF-16 代码单元</p><ul><li>语法: <code>str.charCodeAt(index)</code></li><li>参数<code>index</code>: 一个大于等于 0，小于字符串长度的整数。如果不是一个数值，则默认为 0。</li><li>返回值: 指定 <code>index</code> 处字符的 <code>UTF-16</code> 代码单元值的一个数字；如果 <code>index</code> 超出范围，<code>charCodeAt()</code> 返回 <code>NaN</code>。</li></ul><p>举个例子<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'今天你吃了吗'</span>.charCodeAt(<span class="number">1</span>) 返回<span class="string">'天'</span>的UTF<span class="number">-16</span> 代码单元</span><br><span class="line"># 22825</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">22825</span>)</span><br><span class="line"># '天'</span><br></pre></td></tr></table></figure></p><h3 id="charAt"><a href="#charAt" class="headerlink" title=" charAt "></a><strong> charAt </strong></h3><p><code>charAt</code>方法则是返回一个字符串指定位置的字符</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">'一个字符串中返回指定的字符'</span>.charAt(<span class="number">3</span>)</span><br><span class="line"># '符'</span><br></pre></td></tr></table></figure><h3 id="fromCharCode"><a href="#fromCharCode" class="headerlink" title=" fromCharCode "></a><strong> fromCharCode </strong></h3><p>静态 <code>String.fromCharCode()</code> 方法返回由指定的 <code>UTF-16</code> 代码单元序列创建的字符串<br>这个<code>fromCharCode</code>方法可以传入多个参数<br><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">String</span>.fromCharCode(<span class="number">65</span>, <span class="number">66</span>)</span><br><span class="line"># 'AB'</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://es6.ruanyifeng.com/#docs/string-methods#String-fromCodePoint" target="_blank" rel="noopener">String.fromCodePoint()</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/charCodeAt" target="_blank" rel="noopener">charCodeAt</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《精益创业》</title>
      <link href="/2021/06/15/reading-notes-of-the-learn-startup/"/>
      <url>/2021/06/15/reading-notes-of-the-learn-startup/</url>
      
        <content type="html"><![CDATA[<p>知名科幻小说家科利·多克托罗（CoryDoctorow）曾说：“铁匠在啤酒中洒下眼泪，悲叹自己没有办法在铁路时代卖马掌，但是这并不会使他们的马掌更受欢迎。那些学习变成机械师的铁匠才会保住自己的饭碗。”我对这句名言的理解是：企业唯有快速顺应时代才能赢得未来，产品生产方式必须因时代而变。对于创业公司来说更是如此。</p><p><span class="under0"><strong>埃里克的《精益创业》作了一个优秀的提炼：目标顾客—小范围实验—反馈修改—产品迭代—获得核心认知—高速增长。</strong></span></p><p>创业的第一阶段是把想法变成产品。这时开发的产品是精简的原型，投入最少的金钱和精力开发出体现核心价值的产品。此时创业者们率领精干的成员，用类似特种部队的组织方式，在有限的资源和时间窗口内用很短的时间做出产品，并快速投入市场，通过不断的小规模实验，获得顾客反馈，进而不断迭代，让产品得到市场验证。</p><p>幸运的是，我的几位搭档都愿意尝试新方法。他们和我一样对传统思考方式的失败忍无可忍。同时，我们也有幸获得硅谷前辈史蒂夫·布兰克（SteveBlank）的垂青，他成为了我们的投资人和顾问。2004年的时候史蒂夫便开始宣扬一个新想法：应该把新创企业的业务及营销视为和工程及产品开发同样重要的职能，因此它们也需要一套同等严格的方法作为指导。他把这种方法称为“客户开发”（CustomerDevelopment），它为我作为一个创业者的日常工作提供了透视和指南。</p><p>开发—测量—认知。新创企业的基本活动是把点子转化为产品，衡量顾客的反馈，然后认识到是应该改弦更张还是坚守不移。所有成功的新创企业的流程步骤都应该以加速这个反馈循环为宗旨。</p><p>创新核算。为了提高创业成果，并让创新者们负起相应责任，我们需要关注那些乏味的细枝末节：如何衡量进度，如何确定阶段性目标，以及如何优先分配工作。这需要为新创企业设计一套新的核算制度，让每个人都肩负职</p><p>精益创业的名称来源于精益生产。后者是由丰田公司的大野耐一和新乡重夫发展出来的。精益的思考方法大大改变了供应链和生产系统的运作方式。它的原则中包括了吸取每位员工的知识和创造力、把每批次的规模缩小、实时生产和库存管理，以及加快循环周期。精益生产让全世界懂得价值创造活动和浪费之间的差异，揭示了如何由内而外地将质量融入产品之中。</p><p>换言之，精益创业是研究创新产品开发的一种新方式，强调要同时兼具快速循环运作和对顾客的认知、远大的理想，以及壮志雄心。</p><p><strong>汽车里第二个重要的反馈循环在驾车人和方向盘之间。这一反馈循环的作用方式无比自然，以致我们常常没有意识到，但正是对方向的控制，使驾驶汽车与其他大多数运输方式区别开来。如果你每日通勤，你大概对路线熟悉到不能再熟悉了，你的双手似乎自动就能代你驾驶。我们甚至可以在睡梦中驶过这条路线。然而，如果我要你闭上眼睛，准确写下你是如何到达办公室的，不是街道方向，而是你需要做出的每个动作，包括每次用手转动方向盘、踩下脚踏板。当你慢慢回想，你会发现，驾驶的动作极其复杂，要一一写出来几乎不可能。与之相反，一艘火箭需要的仅仅是预设好的校验。它必须依据最精确的动作指令发射：每次推进、每次助推器点火，以及每次改变航向。须知千里之堤，溃于蚁穴，在发射时哪怕最微小的失误，也会导致过后远在千里之外的灾难性结果。<span class="under0">可悲的是，太多关于创业的商业计划看上去更像是火箭发射，而不是汽车驾驶。这些计划细致入微地制定了要采取的步骤，以及期望的结果，活像是要发射火箭。他们陷入了一种危险境地，哪怕假设中有细小错误，也会带来惨痛后果。</span></strong></p><p>相反，精益创业的方式是教你如何驾驭一家新创企业。你需要的不是基于众多假设制订复杂的计划，而是可以通过转动方向盘进行不断调整，我们把这个过程称为“开发—测量—认知”的反馈循环。通过这样一个驾驭过程，我们可以知道何时以及是否到了急转弯时刻，我把这个时刻称为“转型”时刻。或者，我们是否应该“坚持”走在当前的道路上。一旦引擎加快转速，精益创业提供了以最大加速度扩充和发展业务的方法。在这个驾驶过程中，你总是清楚知道目的地所在。如果你要去上班，就不会因为临时改道或转错了方向而放弃。你还是会专心致志地驶向你要到达的地点。新创企业也有一个清晰的方向，一个脑海中的目的地：创造一项成功改变世界的业务。我把它称为新创企业的愿景。为了实现这个愿景，企业制定了战略，包括商业模式、产品方案计划、对合作方和竞争对手的看法，以及谁是顾客的设想。产品是这个战略的最终结果</p><p>一贯特立独行的库克要我把想法付诸实践，于是我向7000多名财捷员工作了一次同步直播的演讲。在这场演讲中，我解释了精益创业的理论，重复了我的定义：一个在极端不确定情况下的开发新产品和新服务的组织。</p><p>作为一名创业者，我最烦恼的是公司有没有朝着建立成功业务的方向迈进。同时，作为一个工程师出身的管理者，我在衡量工作进展时通常会考虑工作是否按计划进行、质量是否达到较高标准，以及成本是否在预算范围之内。身为创业者多年以后，我开始怀疑这种衡量方法是否正确。万一我们发现自己开发的东西没人要怎么办？果真如此的话，我们是否按时、按预算开发出产品又有什么意义呢？每天下班回家，我唯一知道的事情就是这一天我又让大家忙碌了一番，还花了不少钱。我希望团队付出的努力能让大家向目标靠得更近些。<span class="under0"><strong>如果我们最后选错了方向，那只能自我安慰说，至少我们学到了一些重要的东西。很不幸，“学习”二字是书本里用以掩饰执行失败的惯用借口。它也是经理人无法兑现承诺时的救命稻草。创业者处于只许成功不许失败的压力之下，一旦需要说明学到了哪些东西，就会变得超级有创造力。我们这些人都能搬出一大堆故事，因为我们的工作、职业生涯、信誉都仰赖于此。</strong></span></p><p><span class="under0"><strong>但是，对于那些跟随创业者跨入未知世界的员工，向创业团队投入宝贵金钱、时间和精力的投资者，或大大小小依赖创业革新生存的组织来说，学习是苍白无力的说辞。你无法把学习拿去银行，你没法用它投资或消费，你不能把它给予顾客或回报合伙人。如此说来，学习在创业企业和管理圈中名声不佳，又有什么好奇怪的呢？</strong></span></p><p>但如果创业的根本目的是在极不确定的情况下建立组织机构，那么它最重要的功能就是学习。<span class="under0"><strong>为了要实现愿景，我们必须明确我们的哪些策略是可行的，哪些是过激的。我们必须了解顾客真正需要的是什么，而不是他们自己说要什么，或者我们认为他们应该要什么。我们必须认清自己是否朝着可持续企业之路发展成长。在精益创业模式中，我们要重建“学习”的概念。我将之称为“经证实的认知”。</strong></span>经证实的认知不是事后诸葛亮，也不是用于掩饰失败的好听说法。经证实的认知是说明新创企业进展情况的一种严格方式，而通常这些进展情况被极端不确定的企业成长环境所掩盖。它也是一个实证的展示过程，让团队发现新创企业当下和未来商业前景的真相。它更加切实、精确，而且比市场预测或传统的商业计划更快速。成功地执行一项无意义的计划是导致失败的致命原因，而经证实的认知则是解决这个问题的首要方法。</p><p>我不由得想，鉴于我的工作最终变成一次对时间和精力的浪费，那么在过去的六个月里，我还不如躺在沙滩上啜一口鸡尾酒，也许对公司来说也没什么损失。真需要我这个人吗？如果我什么都不做岂不更好？就像我在本章开头时提到的，当人们痛苦地要为自己的失败寻找理由的时候，总有那么最后一招。我安慰自己说，第一个产品不管是不是个错误，如果没有开发它，我们就不会掌握对顾客的这些重要认知，也不会知道我们的战略有缺陷。这个借口有些道理：早期关键几个月中的所学所知，把IMVU领上了最终获得突破性成功的道路。<strong>在一段时间里，用“学习”这种慰藉令我稍加释怀，但放松是短暂的。最困扰我的问题是：如果那几个月的目标是要获得关于顾客的这些重要认知，为什么我们耗费了如此长的时间？在这些必须学得的重要经验教训上，我们做了多大努力？如果我没有一门心思地关注如何增添功能、修补漏洞、把产品做得更好，我们是否能更早认识到那些经验教训？</strong></p><p>取而代之的方法是学着把各行业中每个新创企业视为一次大型实验。<strong><span class="under0">问题不是“这项产品能开发出来吗”，在现代经济中，几乎每件想象得到的产品都能被开发制造出来。所以更贴切的问题是“需要开发这个产品吗”和“围绕这一系列的产品和服务，我们能建立一项可持续的业务吗”。要回答这些问题，我们需要一种方法，系统地把商业计划分解成其基本的组成部分，并且实证地测试每个部分。换言之，我们需要科学的方法。在精益创业的模式中，新创企业要做的每件事，包括每种产品、每项功能、每次营销活动都被视为一次实验，用来获取“经证实的认知”。</span></strong>我们会在第四章里看到，这种实验的方法通用于各行业各部门。</p><p>化整为零第一步要做的是把大的愿景分解成一个个独立的部分。<strong><span class="under0">我把创业者最重要的两个假设称为价值假设和增长假设。“价值假设”（valuehypothesis）衡量的是当顾客使用某种产品或服务时，它是不是真的实现了其价值。员工感到捐献他们的时间是否有价值的指标是什么？</span></strong>我们当然可以调查收集他们的观点，但由于大多数人很难客观地评估自身感受，所以结果可能不怎么准确。而实验可以提供更精确的评估。什么能马上体现出参与者从志愿工作中获取的价值？我们可以寻找机会让少量员工参加志愿工作，接着看看他们的保留率，其中有多少人再次报名？当员工自愿在这项工作中投入时间和注意力时，这就是一个有力的指标，证明员工觉得自身的工作是有意义的。<strong><span class="under0">“增长假设”（growthhypothesis）是用来测试新顾客如何发现一种产品或服务的。</span></strong>我们也来作个类似的分析。一旦志愿项目确立并运作起来，怎样在员工中传播，从早期少数参与者发展到公司上下的大规模参与？这个项目较可能的扩大方式是病毒式增长。如果想法正确，最重要的衡量指标就是员工行为：早期的参与者会积极地把情况介绍给其他员工吗？</p><p>马克说，“过去，产品经理说‘我就是要这个。’工程师会回复，‘我会把它开发出来。’<strong><span class="under0">而现在，我会要求团队成员先提出以下4个问题：1．顾客认同你正在解决的问题就是他们面对的问题吗？2．如果有解决问题的方法，顾客会为之埋单吗？3．他们会向我们购买吗？4．我们能够开发出解决问题的方法吗？</span></strong>”产品开发的常见倾向是直接跳到第4个问题，在确认顾客真有问题之前就去开发解决方案。</p><p>他们的挑战就是要跳脱出以往的思路，不要把信心寄托在调查完备的计划上。要知道，计划这种管理工具只在具备长期稳定运营记录的情况下才管用。但是，你难道真觉得我们周围的世界每天都一成不变吗？改变既有思维方式固然困难，但它对新创企业的成功却至关重要。我希望，本书将帮助经理人和创业者实现这种改变。</p><p><strong><span class="under0">我们要做的是集中精力，尽量把反馈循环流程的总时间缩减到最短。</span></strong></p><p>正如在精益生产的概念中，认识到在何时何地投入精力，可以节省时间和金钱。</p><p>要把科学的方法运用到新创企业中，我们必须找出哪些假设是需要测试的。我认为这是新创企业的计划中风险最大的部分，这部分内容全要依赖“信念飞跃”（Leapoffaith）式的大胆假设。其中最重要的两个假设是“价值假设”和“增长假设”。它们对调控新创企业增长引擎的各种可变因素起到影响作用。新创企业的每次重复试车，都是为了要加速引擎，促使其发动。一旦运作开始，这个过程会不断重复，逐步推进到更高的档位上。</p><p><strong><span class="under0">一旦明确了这些大胆的假设，第一步要做的，就是用一个最小化的可行产品（minimumviableproduct,MVP）尽快进入“开发”阶段。所谓MVP的产品版本可以让我们花最少的力气、最短的开发时间，经历一次完整的“开发—测量—认知”循环。这个最小化可行产品少了很多日后可能相当重要的功能特性。但是，从某种角度来说，开发MVP需要投入额外的工作：因为我们必须能衡量它的影响力。比如，开发出的原型产品只用于工程师和设计师的内部品质测评是不够的，我们还必须把它推向潜在顾客，评估他们的反应。我们甚至还需要把这个原型产品销售给顾客，这一点我们接下来就会谈到。</span></strong></p><p>那时我听到很多人批评Facebook早期的投资人，声称Facebook“没有商业模式”，而且根据其投资人的评估价值，网站只能达到普通收入水平。人们在Facebook这件事上看到了互联网爆发时代的回潮，当时收入很低的公司筹到大量现金，用来追求“吸引眼球”和“迅速扩充”的战略。很多互联网时代的新创企业所设计的赚钱方式，就是把买来的眼球效应再转卖给其他广告商。事实上，那些失败的互联网企业和中间商差不多，实际上就是花钱购买顾客关注度，然后再把这些关注卖给其他人。但是，Facebook使用的增长引擎不同，因而它和过去那些企业不一样。网站没有靠烧钱招徕客户，它的高使用量意味着每天都累积了大量的用户关注度。对广告商来说，客户关注度是否有价值从来不是个问题，问题只是他们打算为此付多少钱而已。很多创业者有志创建下一个Facebook，但是，当他们尝试借鉴Facebook的经验，或其他著名新创企业的成功故事时，很快就糊涂了。Facebook的经验到底要告诉新创企业什么？不要在早期向顾客收费？还是不要在市场营销上花钱？这些问题无法用抽象的方式来回答；因为针对任何策略技巧都能找出无数反例。但是，正如我们在第一篇中所见，新创企业要通过实验来决定，在其独特环境中哪些技巧是可行的。新创企业的战略任务就是弄清到底要提出哪些正确的问题。</p><p>“适逢其时其地”之外有不少著名创业家看起来是因为生逢其时其地，从而赚得盆满钵满。可是，在每个生逢其时其地的成功创业家之外，还有很多也身处相同时间地点的人，他们的创业却以失败告终。在20世纪早期，包括亨利·福特（HenryFord）在内有近500位创业企业家。想象一下，作为汽车行业的一个创业者，受过最先进的工程学训练，处在一个史上最可观的市场机遇的起点上，但绝大多数人却一无所获。5在Facebook的故事中，我们看到了相同的情形，它遭遇了先期进入市场的其他校园社交网络，而竞争对手的先发优势最终却不值一提。成功案例和失败案例之间的差别在于，成功的创业者高瞻远瞩，有能力和工具去发现他们的计划中哪些部分运作顺利，哪些部分误入歧途，然后相应调整策略。</p><p>正如我们在Facebook的案例中所见，有两个“信念飞跃”非常突出：价值创建假设和增长假设。</p><p><strong><span class="under0">同样的情况对增长也适用。从价值的角度来考虑，创业者非常需要了解新创企业增长背后的原因，避免很多价值破坏类的增长。比如，一项业务的增长是通过不断向投资人募款，以及大量付费广告取得的，却没有开发出创造价值的产品。我把这样的企业叫做“升平戏院”，它粉饰成功的表象，让自己看上去像那么回事儿。创新核算的目的之一，就是帮助把伪新创企业和真正的创新者区别开来。这一点会在第七章中深入讨论。传统的核算方法把用于成熟企业的标准套用在新创企业身上，但是用这些指标预测新创企业的前景并不靠谱。想想亚马逊公司这样的企业，在通往突破性成功的道路上，曾一度经历了巨额亏损。</span></strong></p><p>和传统核算方式类似的是，创新核算需要新创企业拥有并维护一个定量的财务模型，用以严格衡量企业的发展情况。但是在企业创立早期，尚无足够数据形成有根据的假设，来决定这个模型该是什么样子。新创企业最早的策略计划很可能是凭着直觉预感来的，这是一件好事。而要把这些直觉转化成数据，借用史蒂夫·布兰克的名言，创业者必须“走出办公大楼”，开始学习。</p><p><strong><span class="under0">数据当然具有说服力，但我常常提醒创业者：人亦是重要的衡量指标。不管在企业和顾客之间有多少中介物，最终端的顾客才是会呼吸、会思考、会作出购买决定的个体。他们的行为可以衡量，并会发生改变。即便是在以大机构为销售目标的商业对商业（B2B）的模式中，记得每个业务单位是由个体组成的这一点，会对你大有裨益。所有成功的销售模式，都要依靠把迥然不同的个体从其组成的整体组织中分解出来。</span></strong></p><p>分析瘫痪症当创业者进行市场调研并和顾客交谈的时候，有两种危险永远存在。“跟着感觉走”的创业派总是等不及要赶紧开始，不想花时间分析他们的战略。通常在几次仓促的顾客访谈后，就迫不及待地要动手开发。不幸的是，由于顾客并不真的知道自己要什么，结果令这些创业者很容易自以为走在正确的道路上。另一些企业家可能成为分析瘫痪症的受害者，无休止地调整计划。这种情况下，和顾客交谈、阅读调研报告以及在白板上改变策略都同样无济于事。大多数创业者的计划中的问题并不是因为没有依据成熟的战略原则，而是立足的事实点就错了。可悲的是，由于产品和顾客之间微妙的互动，这类错误大多数无法在理论分析中察觉到。如果分析太多是危险的，而不分析又会招致失败，那么创业者怎么知道何时应该停止分析、动手开发呢？第六章的主题“最小化可行产品”的概念就是答案。</p><p><strong><span class="under0">一个最小化可行产品（MVP）有助创业者尽早开启学习认知的历程。它并不一定是想象中的最小型产品；它是用最快的方式，以最少精力完成“开发—测量—认知”的反馈循环。传统的产品开发通常要耗费很长的筹划时间，反复推敲，尽量把产品做到完美。与之相反，最小化可行产品的目的则是开启学习认知的流程，而不是结束这个流程。与原型或概念测试不同的是，最小化可行产品并非用于回答产品设计或技术方面的问题，而是以验证基本的商业假设为目标。</span></strong></p><p>根据最小化可行产品的复杂程度，它可以从一次极简单的“冒烟测试”（其作用比广告多不了多少），到一个存在问题、缺失某些功能的早期产品原型。<strong><span class="under0">我们无法用公式来确定一个最小化可行产品到底该多复杂，而要靠判断。所幸这种判断不难作出：大多数创业者和产品开发人员大大高估了一个最小化可行产品所要具备的功能。当遇有疑问，就化繁为简。</span></strong></p><p>举个例子，有一项服务以赠送一个月免费试用的方法来销售，顾客必须先注册试用，才能使用这项服务。那么，这项业务模式的一个明显假设就是，当顾客对这项服务有一定了解之后，他们就会注册试用。要考虑的关键问题是，顾客是否真的会为了一些承诺的功能（即价值假设）而注册试用。<strong><span class="under0">或许在商业模型某处，在试算表内的某栏中有一行写道：“顾客看到免费提供试用后注册的百分比。”我们可能会预测这个数字是10％。请仔细想想，这其实是一个“信念飞跃”的问题。它应该用大写字母并以红色加粗体标示出来：我们假设10％的顾客会注册。大多数创业者处理这种问题的方式是先开发产品，然后再来验看顾客对产品的反应。我认为这种方式会导致许多浪费，因此已经落伍了。首先，如果最终发现我们开发的东西没有人要，那么所有努力将化为时间和金钱上的无谓消耗。如果顾客不注册试用的话，他们就无法体验到未来那些令人惊喜的功能。即使他们注册了，还是有很多浪费的可能。比如，我们到底需要开发多少功能来吸引早期使用者？要知道每项额外功能都是一种浪费。同时，如果我们延迟测试那些额外功能，那么在学习认知和循环周期方面，也意味着巨大的潜在成本。最小化可行产品的经验教训在于，不管某项工作在当时看起来多么重要，只要在开启认知流程所需之外的，都是浪费。</span></strong></p><p>在这个案例中，一段视频就是最小化可行产品。它证实了休斯顿“信念飞跃”的假设，即顾客确实需要他正在开发的产品。这不是因为顾客在小组座谈中那么说，也不是因为它比其他业务更具有希望，而是由顾客真实的注册数量决定的</p><p>不久之后，他们便打造了一项可观的服务产品，起先是在奥斯汀地区，最终推广到全美范围。这一路上，产品开发团队始终着眼于把有用的功能提升扩大，而不是想着发明一些将来才可能用得上的东西。结果，他们在开发投入中发生的浪费，远比同类企业在传统情况下浪费的少得多。</p><p>把这个案例和小企业的案例相对照十分重要。在小企业中，CEO、创始人、总裁和企业业主亲自服务顾客是极为常见的。但在贵宾式最小化可行产品的情形中，个人化服务不是产品，而是企业增长模式的一种学习认知活动，用于检测信念飞跃式的假设。事实上，贵宾式最小化可行产品的常见结果是证明公司原本设定的增长模式无效，由此清楚表明采用其他方式的必要性。即便最初的最小化可行产品让公司赢利，也不意味着原定模式一定有效。如果没有真正可行的增长模式，很多公司见了一些蝇头小利就会沾沾自喜、故步自封，却没意识到一次转型（改变方向或战略）也许会带来重大增长。唯一确认的方式就是在真实顾客那里系统地检测这个增长模式。</p><p>最小化可行产品最烦人的地方之一，是对传统质量观念的挑战。最好的专业人员和制作人员都致力开发高质量产品，因为这关乎骄傲。现代生产流程以高质量作为一种提升效率的方式，它们遵从质量管理大师爱德华·戴明（W.EdwardsDeming）的格言：顾客是生产流程中最重要的部分。这意味着，我们必须全神贯注于顾客认为有价值的生产结果上。如果在工作流程中容忍粗枝大叶的话，将不可避免地形成多余的差别化产品。这种差别化在顾客眼中就是质量参差的产品，好一点儿的需要重新返工，糟一些的会导致顾客流失。大多数现代商业和工程业哲学关注的首要原则，都是为顾客创建高品质的体验。这也是六西格玛、精益生产、设计思想、极限编程和软件工艺运动的基础所在。这些对质量问题讨论的前提是，企业已经了解哪些产品特质在顾客眼里是有价值的。而新创企业作这种假设是要冒风险的。通常情况下，我们甚至不确定谁是顾客。<strong><span class="under0">因此，对新创企业而言，我信奉的质量原则是：如果我们不知道谁是顾客，我们也不知道什么是质量。</span></strong></p><p><strong><span class="under0">一家成功的新创企业迟早要直面快速跟进者的竞争。先发优势几乎起不了太大的作用。而避开消费者的那种秘密开发状态所争取的时间，也几乎不可能带来起步优势。唯一的取胜之道是比任何人学得更快。</span></strong></p><p>最后，要知道最小化可行产品常常带来坏消息，作好接受这些事实的准备，会对你有所裨益。<strong><span class="under0">最小化可行产品和传统的概念测试或产品原型不同，它并非用于解决设计或技术问题，而是要解答一系列商业问题。</span></strong></p><p>解决这种两难境遇的方法是下决心重复实验。<strong>你必须事先就坚定不移地承诺：无论最小化可行产品的测试结果如何，都不放弃希望。成功的创业者既不会一看到麻烦冒头就退避三舍，也不会一条道走到黑。他们兼有坚持不懈和灵活应变的特质。最小化可行产品只是学习认知过程中的第一步。在这条道路上经历多次反复后，你可能会认识到产品或战略中有部分瑕疵，然后到了决定改变的时刻（即我所说的转型），用另一种不同的方式实现你的理想。</strong></p><p>新创企业在一开始差不多就是一个纸上的模型而已。<strong><span class="under0">商业计划内的财务考量包括了：预测企业期望吸引的顾客数量，要花多少钱，以及将产生多少收入和利润。在新创企业的早期，这只是一个理想，离实际相去甚远。一家新创企业的工作是：（1）严格测量企业目前的状况，正视评估中揭示的现实真相。（2）设计实验，从而了解如何让真实数据向商业计划中的理想目标靠得再近些。很多产品——即便是失败的产品——都不会交白卷。大多数产品总会有些顾客、些许增长和一些积极成果。</span></strong>对新创企业来说，最大的危险之一就是陷入进退两难的境地。员工和创业者从本性上总是抱有乐观倾向，即便看到大事不妙，还是想要抱定宗旨不动摇。锲而不舍的传说是非常危险的。我们都听过创业英雄的故事，他们在前景看似暗淡无光的情况下力挽狂澜，取得最后胜利。不幸的是，我们没听到的是更多无名者的故事，他们死守不放，公司最终倒台。</p><p>这种表述方式几乎在每个新创企业的董事会议中上演。<strong>大多数产品阶段性目标的设立方法都差不多：可能是和一些顾客交谈，再看看收入数字是否上升，就算完成某个里程碑了。</strong> <strong><span class="under0">但这并不是衡量新创企业是否取得进步的好指标。</span></strong>我们怎么知道作出的改变和我们追求的目标有关？更重要的是，怎么知道我们是否从那些改变中获得了真正的经验教训？要回答这类问题，新创企业迫切需要一种新的核算方式，特别是用来支持颠覆式创新。这就是创新核算。</p><p>如何实行创新核算——三大认知阶段性目标</p><p>创新核算分三步走：</p><ul><li><strong>第一，使用最小化可行产品确定企业目前所处阶段的真实数据。如果你无法看清眼下的状况——不管离目标可能还有多远——你都无法开始跟踪企业的进展情况。</strong></li><li><strong>第二，新创企业必须尝试把增长引擎从基准线逐步调至理想状态，这期间可能要经过多次尝试。新创企业在这个调整过程中进行了能做的一切微调和产品优化后，就到了一个决策的时刻。</strong></li><li><strong>这就是第三步：转型还是坚持？</strong>如果公司正朝着理想目标稳步前进，那就意味着公司认知得当，并且有效地运用了那些认知。在这种情况下继续前进是有意义的。若非如此，管理团队最后必须得出结论，承认目前的产品战略是有问题的，需要重大改变。当企业转型时，整个流程会重新开始，再次确定新的基准线，并从那一点上调整引擎。如果这些引擎调整的活动比先前更具成效，就是成功转型的好迹象。</li></ul><p>这些最小化可行产品提供了“认知阶段性目标”中的第一个案例。最小化可行产品让新创企业在其增长模式中填入第一串真实的基础数据——转化率、注册和试用率、顾客生命周期价值等。它提供了顾客情况、顾客对产品的反应等基础信息，即使一开始都是坏消息，但却很有价值。</p><p>一旦确立了基准线，新创企业就可以向第二个认知阶段性目标前进了：即调整引擎。<strong><span class="under0">每次产品开发、营销或新创企业的其他活动，都应该以提升增长模式中的某个驱动因素为目标。</span></strong>比如，一家公司可以花时间改进产品设计，让新顾客更容易使用。这种做法的前提假定是：新顾客的“激活率”是增长的驱动因素，而且它的基准线目前低于公司期望。如果这个假定要成为经证实的认知，产品设计的改进就必须能提高新顾客的激活率。反之，新的设计就应该被判定是失败的。这就是一条重要规则：好的设计是能改善顾客行为的设计。比较一下两家新创企业。第一家公司设置了一个清楚的基准线指标、一个关于如何提高这个指标的假设，以及一套用于测试这个假设的实验。第二家公司的团队则不断争论要如何改进产品，立刻实施其中部分改动，一旦看到任何数量发生任何增长就庆祝一番。那么，哪家新创企业更可能有效地工作，并取得持久的成绩呢？</p><p>我们追踪了一种对增长引擎非常重要的“漏斗式衡量指标”行为：即从顾客注册、下载应用程序、试用、重复使用到购买行为。为了有充分的数据来获取认知，我们需要足够多的顾客来使用产品，以取得他们每个行为的真实数据。我们每天拿出5美元的预算：刚好能购买谷歌关键字广告（那时这项服务才推出）上的点击。当时，你可以用最少5美分的价格买到一个点击，而且并未规定最低购买额。因此尽管我们的预算很少，但还是付得起钱开个账号，使用这种方法。15美元带给我们每天100个点击。从营销角度而言并不多，但对获取认知来说却是无价的。每天，我们都能在新的客户群中测量产品表现。同时，每次修正产品之后，我们在第二天就能获得一份新的产品成绩报告，看看做得如何。举例来说，某天我们会针对新增用户首次推出一个新的营销信息。第二天，我们可能会改变产品接纳新顾客的方式。另一天，我们会添加一些新的功能、修补漏洞、推出新的视觉设计或者尝试新的网站排版。每次我们告诉自己，我们正在把产品做得更好，但这种主观的信心是要被放诸酸性测试中检验真实数据的。我们日复一日地开展随机产品试用。每天都是一个新实验。每天的顾客都是独立于以往顾客之外的。最重要的是，尽管总体数量在增长，但很明显，我们的漏斗衡量指标却没有发生变化。</p><p>要读懂这张图就先要了解一下什么是<strong><span class="under0">“同期群分析”（cohortanalysis）。它是新创企业分析中最重要的工具之一。虽然听上去很复杂，这个分析还是基于一个简单的前提假设。它看的不是总收入和总顾客数量这样的累积总额或总数，而是分别接触产品的每组顾客的表现。每一组被称为一个同期群（cohort）</span></strong></p><p>这种模式就是：糟糕的量化结果迫使我们宣告失败，并由此产生了更多量化研究的动机、背景和空间。这些研究产生了新想法——即新的假设——有待验证，并带来转型的可能，接着这个循环再次发生。每次我们都重复着一个简单的节奏：建立基准线，调整引擎，并决定是转型还是坚持。</p><p><strong><span class="under0">但是，这些产品改进工具在新创企业中却不太好使。如果你开发的东西是错的，那么优化产品或营销方式都不会产生什么重大结果。新创企业必须以高标准来衡量其进展状况：即它能够围绕产品或服务建立起一项可持续业务的证据。只有当新创企业事先作出清晰、实际的预测，才能对这个标准进行评估。没有这些预测的话，产品和战略的决策就极端困难并耗时。</span></strong>我做咨询顾问时，常常看到这种情况。某家新创企业觉得其工程开发团队“工作不够努力”，因而好几次叫我去给点儿意见。当我和这些团队会面时，总能找到有待改善之处，于是我就建议他们如此这般。但实际上，真正的问题都不是因为缺少开发人才、干劲儿或努力。每次团队努力工作，业务上却总是不见成效。于是，受传统模式训练的经理人得出一个“符合逻辑”的结论：我们的团队没有努力工作，没有有效地工作，或工作没有效率。这样一来，一个下行的循环开始了：产品开发团队从创意或业务领导那里接到产品规格信息，于是拼命按要求开发。当没有得到好的结果时，业务领导者就认定，问题产生的原因来自产品设计和实际开发之间的差别。于是在下次迭代开发中，就尽量把要求说得再仔细一些。而当产品规格变得更详细的时候，制订计划的流程就随之减慢，批次规模增大，反馈延迟。如果还有董事会或者首席财务官作为利益相关者介入其中的话，用不了多久，公司里就该发生人事变动了。</p><p>这种消极的螺旋式流程凸显了一大可能：公司正在执行一项没有意义的计划——而且按部就班地这样做着！认知阶段性目标可以防止这种情况。创新核算框架说得很明白，当公司停滞不前时，就需要改变方向。</p><p>以上案例中，在创业的初期，由于公司创始人发现了目标市场中尚有很大一块未被满足的需求，所以产品开发团队的工作曾经一度卓有成效。初期产品尽管不够完善，但在早期使用者中普遍受到欢迎。有了这些人到处广泛宣传这项创新，把顾客要求的主要功能直接加入产品中，似乎取得了不错的效果。<strong><span class="under0">但是，顾客没有提出的和未被回答的则是另一些潜在问题：公司有没有一个行之有效的增长引擎？早期的成功和目前产品开发团队的日常工作相关吗？大多数情况下，回答是否定的；成功来自公司过去的决定，而现在从事的任何活动都没有产生效应。但是，由于总指标“增长势头良好”，所以这些问题都被掩盖了。</span></strong></p><p>等一下我们就会看到，这是一个常见的危险情况。公司不论规模大小，就算已经有了一个可行的增长引擎，也可能用错误的衡量指标作为行动指导。它会诱使经理人依赖那些常用的“成功法宝”：临时购买广告、充塞渠道⑪、使用花哨的演示样品等等，让总体数据尽量再好看一些。但与其把精力用在卖弄招数上，还不如设法建立可持续的业务。我把判读新创企业的传统数据称为“虚荣指标”，创新核算要求我们避免诱惑，不要使用这些指标。</p><p>Grockit的这些案例分别说明了<strong>三个“可”的衡量指标，即：可执行、可使用和可审查指标</strong>。</p><p><strong><span class="under0">一个产品成绩报告要可执行的话，必须清楚地显示因果关系。否则就是虚荣指标。Grockit用来判定认知阶段性目标的报告，非常清楚地说明了要得到结果，必须采取什么行动。</span></strong></p><p>可执行的衡量指标是这些问题的解决之道。只要清楚理解了因果关系，人们就能从自己的行动中更好地学习。当人们得到了清晰客观的评估时，你会看到，他们生来就是天才的学习者。</p><p>所以，同期群报告是认知阶段性目标的金科玉律。它们把复杂的顾客行为转化为以人为本的报告。每个同期群分析都会说：在这段时间内使用了我们产品的顾客中，有多少人表现出了我们期望的各种行为。在IMVU的例子中，我们看到了四种行为：下载产品、从电脑上登录该产品、和另一个顾客交谈，以及升级到付费版的产品。换言之，报告涉及的是人和他们的行为，这要比一堆数据有用得多。比如，想一想如果我们的报告只有人们交谈的总数，要凭这个辨别IMVU成功与否谈何容易。如果说我们在一段时期内得到了1万个对话。这到底算好还是不好？是因为有个家伙特别活跃，还是有1万人每人都试用了一次产品，然后又都放弃了？如果不再做一份更详细的报告，这些问题根本无从而知。随着总数的增大，指标的使用性变得越来越重要。很难想象网站点击量在某月从25万降到20万是什么意思，但绝大多数人会马上理解损失5万个顾客意味着什么。这就是说有一整座体育场那么多的人放弃了这个产品。</p><p>我们在好莱坞或书本杂志的传奇世界中看到的创业家成功故事，总是从一个模子里刻出来的。首先，大胆的主人公突然顿悟，想出一个绝妙的点子。接着，我们了解了他们的个性和品格、他们如何尽享天时地利，以及如何跨出惊人一步开创了企业。然后出现了电影蒙太奇。这一段常常很短，也就是几分钟的图像或旁白，说明时间流逝。我们看到，主人公建立团队，在实验室里工作，在白板上奋笔疾书，完成销售，或猛力敲击键盘什么的。在蒙太奇的结尾处，创业者已经取得成功。接下来的故事变得更有趣：他们如何分享成功果实，谁上了杂志封面，谁告了谁，以及对未来的影响。不幸的是，决定新创企业成功的真正工作发生在蒙太奇之中。但它实在太过乏味，因而没有在故事中出现。创业活动中只有5％用于构想大创意、商业模式、进行书面策划，以及分配胜利果实。剩余的95％都是用创新核算来衡量的艰苦工作：诸如决定产品优先排序、确定瞄准或倾听哪些顾客，以及有勇气把伟大的理想投入不断的测试和反馈中去。<strong><span class="under0">在新创企业所有的决定中，有一个决定最困难、最耗时，并且是最大的浪费源头。我们都必须面对这个重大考验：决定何时转型，何时坚持。要了解在电影蒙太奇中到底发生了什么，我们就要理解如何转型。这是第八章的主题。</span></strong></p><p>戴维面临着要转型还是继续坚持的艰难挑战。这是创业者碰到的最困难的抉择之一。<strong><span class="under0">确立认知阶段性目标的目的不是为了容易地作出决定；而是确保当需要作出决定时，有足够的数据在握。</span></strong>在这个阶段，戴维已经进行了很多顾客对话。他拥有足够的认知，来合理解释目前产品所遭遇的失败，这也是很多创业者会做的。在硅谷企业中，我们把这种境况称为“进退维谷”，用来形容企业有了一点成绩，但仅仅只够生存下去，却无法实现其创始人和投资人的期望。这样的企业是消耗人们精力的无底洞。出于忠诚，员工和老板都不想放弃；他们觉得成功可能近在咫尺。戴维有两个优势，帮他逃脱这种命运：1．尽管戴维怀有远大的抱负，但他还是尽早发布了产品，并进行重复实验。因此在企业成立8个月后，他就到了转型还是坚持的阶段。向某个概念投入的金钱、时间和创新精力越多，要转型就越困难。戴维很好地避免了这种陷阱。2．戴维从一开始就明确找出了他的“信念飞跃”式问题，更重要的是，对每个问题作了量化预测。要是戴维想宣布他最初的尝试已经获得成功，其实也并非难事。不管怎么说，他的一些指标还是很高的，比如激活率。而在总使用量这样的整体指标上，也实现了积极的增长。但是，戴维所关注的是每个“信念飞跃”式问题的可执行指标，所以他才能接受公司正遭遇的失败。此外，戴维没有过早在公关宣传上浪费精力，因此，他能够下决心调整方向，而不用顾忌公众面前的难堪或受到干扰。</p><p>戴维再次转型。这一回他不再依靠活跃顾客的付费来拉动业务，而是针对在政治活动中有专业或商业利益的大型组织、专业筹款机构和大公司。这些企业看起来非常需要戴维的服务并愿意付费，于是戴维迅速与之签署了意向书，以便开发他们要求的功能。<strong><span class="under0">我把戴维的这次转型称为“客户细分市场转型”，就是保留产品功能但改变目标受众。</span></strong>戴维这回关注付费人群的转变：即从普通消费者转向商业和非营利机构。也就是说，戴维的公司从一家企业对消费者（B2C）的公司变身为企业对企业（B2B）的公司。在这个过程中，他改变了原来的增长模式，以及在每项B2B销售的利润中为增长提供资金的来源。</p><p>2003年我在和今天差不多的业务领域内建立了公司。和刚取得USA.gov的成功时刻比，我的专业知识和行业信誉几乎也一样。但是那时候公司完全失败（尽管耗费了很多投资），而现在的业务却正在赢利并达成交易。那时候，我用的是传统的线性产品开发模式，在12个月的开发之后，发布了一个惊人的产品（而它确实让人吃惊），其结果只是让我们发现原来没人要买它。这次，我在12周内开发了4个版本，并且不久之后就实现了第一笔销售。这并不只是因为市场时机的原因——2003年在相似领域内成立的另外两家公司相继以几千万美元被收购。而其他一些在2010年建立的公司采用了线性模式，很快就关门歇业了。</p><p><strong><span class="under0">创业老手常常会谈论他的企业还剩下多少跑道，其实指的就是新创企业要么起飞、要么失败的剩余时间。这通常是用银行里的剩余现金除以每个月烧钱的规模，或是以账户余额的净消耗速度来决定的。</span></strong>比如，一家新创企业在银行里有100万美元，假设每个月花10万美元，预计的跑道时长即为10个月。当新创企业开始出现现金短缺的时候，他们有两种方式加长跑道：或者削减成本，或者筹措额外资金。但当创业者不加选择地压缩开支时，他们有可能把公司用于开发—测量—认知反馈循环的成本，连同其他方面的浪费一起砍掉。如果降低成本导致反馈循环减慢，那么它达到的效果只是让企业慢点儿关门而已。<strong><span class="under0">真正衡量跑道长短的标准是公司剩余的转型次数，即根本改变商业战略的机会还有几次。从转型的角度而非时间来衡量跑道，提供了加长跑道的另一种方法：即加速每次转型。也就是说，新创企业必须设法以较小的成本或在较短时间里，完成同等数量的经证实的认知。目前为止讨论的所有精益创业模式的策略技巧，都以此为总目标。</span></strong></p><p>询问一下众多决定转型的创业者，他们会告诉你，他们希望当初能早点儿那么做。我认为有三个原因造成这样的情况。</p><ul><li><strong>第一，虚荣指数会让创业者形成错误结论，活在自己的个人世界中。</strong>这对作出转型决定是特别有害的，因为它无法让团队认识到转变的必要性。当人们得不出最好的判断，却被逼改变的话，整个流程就会更困难、更耗时，并且效果不显著。</li><li><strong>第二，如果创业者没有一个清晰的前提假设，他几乎不可能经历完整的失败，而未经失败的人通常很难产生冲劲儿，作出根本的转型改变。</strong>我在前面已经提过，“先做了再看”的败局已经很明显了：你准保会成功——成功地看到发生了什么。但除了极少数情况外，你看到的大多数结果是模糊的，你不知道应该转型还是坚持，应该改变方向还是抱定宗旨。</li><li><strong>第三，很多创业者心存恐惧。承认失败往往引发士气挫败的危机。</strong>大多数创业者最大的担忧并非他们的愿景最后被证明是错的；他们更担心的是，这些愿景在还没有得到真正机会自我证实之前，就被认定是错误的。这种恐惧让他们相当抵制最小化可行产品、对比测试和其他验证假设的技巧。具有讽刺意味的是，如果不能完整呈现愿景，就无法进行测试，这种恐惧之心反而令风险程度升高。但是，如果等到资金快要用完之时再来转型则为时已晚。创业者要避免这种命运，就必须正视心中恐惧，接受失败，而且通常是公开场合中的失败。实际上，一些著名的创业者之所以出名，要么是因为他的个人声望，要么是他在运营中遭遇了上述问题的极端情况。</li></ul><p><strong><span class="under0">决定转型需要敏锐的目光和客观的心态。我们在前面已经讨论了转型需要到来时出现的警示迹象：产品实验的效率降低，以及感觉到产品开发的成效低于预期。无论何时看到这些征兆，就该考虑转型。</span></strong></p><p>相反，转型是要重新利用已经开发和已经学习到的东西，寻找更积极的方向。</p><p>还记得开发低质量最小化可行产品的初衷吗？那是因为开发任何非早期使用者需要的功能都是一种浪费。但这个理由只能言尽于此。一旦你在早期使用者中取得成功，就会想要把产品推向主流客户群。可是主流顾客有不同需求，要求也严格得多。</p><p><strong><span class="under0">新创企业的价值不在于开发产品，而是对创建可持续业务的认知。顾客真正需要的产品是什么？为什么我们的业务会增长？谁是我们的顾客？我们应该倾听哪些顾客？哪些顾客意见可以忽略？要把新创企业的成功机会最大化，这些都是需要尽快回答的问题。也只有这样，才能为新创企业创造价值。</span></strong></p><p>我们会论述一些技巧，让精益创业在发展中不至牺牲新创企业的生命线：速度与灵活。</p><p>当新创企业成长为成熟企业后，他们将和如今的企业一样，面临相同压力，寻找新的方法向颠覆式创新投资。事实上我们看到，一家新创企业成功快速增长的优势在于即便企业逐步走向成熟，还能保留其创业基因。今天的企业必须学会掌握持续式创新和颠覆式创新共存的组合管理。把新创企业的进程视为一步步的独立阶段，而将创新这类的前期工作置于脑后的做法已经过时了。现代企业必须善于同时推进多项工作。要做到这些，我们将会探讨在一个成熟企业的大环境中培育创新团队的技巧。</p><p>所有这些问题在装信封这样简单的流程中非常明显，但是在大大小小的企业中，这些问题真实存在，并会造成更严重的后果。小批量的方式每几秒就能生产一件完整产品，而大批量的方式必须在最后阶段一次性完成所有产品。考虑一下如果该流程的时间跨度是几小时、几天或几周，这种做法会如何？万一顾客决定不要这些产品了怎么办？什么流程能让企业及早发现这种情况？</p><p>丰田发现小批量让他们的工厂效率更高。相比之下，精益创业的目的并非高效开发更多产品，而是尽可能迅速地学会如何创建一项可持续的业务。回想一下装信封的例子。如果顾客不想要我们正在生产的产品怎么办？尽管对创业者来说是个坏消息，但是晚知道不如早知道。小批量方式可以让新创企业把那些最终可能被浪费的时间、金钱和精力降到最小。</p><p><strong><span class="under0">这里的重要经验是，并非每个企业都要每天推出50个不同版本的产品，而是要减小批量，比竞争对手更快完成开发—测量—认知的反馈循环。对顾客更快了解的能力是新创企业必须拥有的重要竞争优势。</span></strong></p><p>大批量的数量很容易随着工作时间延长而增长。每次要把批量向前推进往往会导致额外的工作、返工、延误和干扰，所以每个人都想以更大批量来工作，试图把间接成本降到最低。这种情况之所以被称为“大批量的死亡螺旋”，是因为它和制造业情况不同，这里的最大批量没有实体产品中的限制。批量可能会无限增长。最终，一个批量的工作会升级成一项最高优先级的项目，一个“赌上公司身家”的新版产品，因为公司离上次的产品发布时间已经太久了。但是到了这个时刻，经理人会执著于扩大批量，而不再是推出产品。既然已经花了那么长时间来开发产品，为什么不再多修复一个漏洞，或多添一项功能？因为没有解决一个潜在的关键缺陷而危及这次大型发布的罪人，谁肯来当？</p><p>新创企业对他们的在制品存货也很苦恼。工厂产生出在制品是实打实地堆在地上。而大多数新创企业的工作是无形的，几乎看不见摸不着。比如在产品推出前，所有花在设计最小化可行产品上的工作就是在制品存货。未完成的设计、未经证实的假设、多数商业计划都是在制品。目前为止，我们所讨论的几乎所有精益创业的技巧，都以两种方式实现其神奇功效，即把推动式转为拉动式与缩小批次数量。两者对减少在制品数量均产生净效应。在制造业中，拉动方式主要用来确保把生产流程调整至顾客需求的水平。没有它的话，工厂最终会生产出比顾客真正所需多得多，或少得多的产品。但是，采用这种方式开发新产品就不那么直截了当了。有些人把精益创业模式误解为对顾客需求简单地采取拉动方式。这种假设是基于顾客可以告诉我们要开发什么产品，并且会对产品开发生成一个拉动信号，开始实施。</p><p>我们前面已经提过，这并非精益创业的运作方式，因为顾客通常不知道他们到底要什么。<strong><span class="under0">我们制造产品的目的是为了进行实验，从而帮助我们学到如何建立一项可持续的业务。因此精益创业中产品开发的流程是以进行实验的需要来拉动，从而作出响应。这才是正确的理解。只要我们定下想要测试的假设，产品开发团队就应该尽可能迅速地着手设计并施行这项实验，使用最小的批次数量把任务完成。要记得，虽然我们根据活动发生先后，把反馈循环写成开发—测量—认知，我们却应该以相反的顺序来安排计划：先找出需要知道什么，再倒回去看为了获得这个认知，要用什么产品进行实验。因此，不是顾客，而是我们“对顾客的假设”拉动了产品及其他功能特性开发的工作。除此之外的工作都是浪费。</span></strong></p><p>丰田生产系统可能是全世界最先进的管理系统，但更惊人的事实是丰田打造了史上最先进的学习型组织。它彰显出激发员工创造力、实现不断增长、在近一个世纪中不懈制造创新产品的能力。这种长期的成功正是创业者应该追求的方向。对长期采用正确的进度衡量方式、致力于实现最大绩效的高效运作的企业组织而言，尽管精益生产技巧有强大的作用，它只是企业的一种外在表现形式。这个流程仅仅是培养优秀企业文化的基础，但如果没有这个基础，一切鼓励学习、创意和创新的努力都会化为泡影。这一点很多经历失败的人事总监都可以证明。</p><p>增长来自何方？增长引擎是新创企业用来实现可持续增长的机制。我使用了“可持续”这个词，剔除了所有能够造成顾客量剧增，但无长期影响的行动，比如为迅速启动增长而开展一次广告宣传或公关噱头，由此实现的增长却无法长期维持。<strong><span class="under0">可持续增长的特征体现在一条简明规则中：新顾客是由以往顾客的行动带来的。</span></strong></p><p><strong>以往顾客推动可持续增长的方式主要有四种：</strong><br>1．<strong><span class="under0">口碑相传。</span></strong>大多数产品都有一个自然的增长水平，由满意顾客对产品的热衷程度而形成。比如，当我买了第一台数字录像机TiVoDVR的时候，我不断向周围的亲友提及。很快，我的亲戚们都在用它了。<br>2．<strong><span class="under0">产品使用带来的衍生效应。</span></strong>不管出于赶时髦还是彰显身份地位的考虑，每次使用像奢侈品这类的产品时，都会引发旁人对该产品的认知。当你看到有人穿了一件最新款的服装，或驾驶某品牌的汽车，你可能会受到影响跟风购买。这种情况对所谓的“病毒式产品”也适用，比如Facebook或国际支付工具贝宝（PayPal）。当一位顾客用贝宝给朋友汇款时，他的朋友就自动接触到了贝宝的产品。<br>3．<strong><span class="under0">有资金来源的广告。</span></strong>大多数业务用广告吸引新顾客使用其产品。要让这种方式成为可持续增长的来源，广告费用必须由收入支付，而不是依靠投资资本这种一次性的资金来源。只要获取一位新顾客的成本（边际成本）比他带来的收入（边际收益）低，超出的部分（边际利润）就可以用来获取更多顾客。边际利润越多，增长越快。<br>4．<strong><span class="under0">重复购买或使用。</span></strong>有些产品通过付费计划（有线电视公司）或自愿的多次购买（去同一家食品杂货店或购买灯泡），实现重复购买的模式。与之相反，很多产品和服务是有意设计成只能使用一次的，比如婚礼筹备服务。</p><p>在第二篇中，我们看到了新创企业使用正确的指标——可执行指标——来衡量进度的重要性。但是到底要衡量哪些数据，却有多种可能性。<strong><span class="under0">新创企业最大的潜在浪费之一，是在产品上市后花时间争论如何确定下一步工作的优先顺序。</span></strong>事实上，公司随时都可以把精力用在寻找新客户、更好服务已有顾客、提高整体质量，或压低成本之类的工作上。在我自己的经历中，这种确定优先顺序的争论会消耗公司相当多的时间。增长引擎为新创企业提供了一套相对小范围的衡量指标，使企业可以集中精力。我的导师之一，创投资本投资家肖恩·卡罗兰（ShawnCarolan）曾这样说过，“新创企业不会饿死，而会饱死。”总有无数让产品变得更好的想法飘荡在半空，但现实是残酷的，大多数想法带来的改变微乎其微，只能算是产品优化而已。新创企业必须关注能产生经证实的认知的重大实验。增长引擎的框架结构帮助他们把注意力集中在紧要的衡量指标上。</p><p><strong><span class="under0">使用黏着式增长引擎的公司要非常仔细地追踪顾客损耗率，亦称流失率。所谓流失率就是指在任意一段时间内，没有继续使用公司产品的那部分顾客占顾客总数的比率。</span></strong></p><p><strong><span class="under0">产品认知度在人群中快速传播，就像病毒散播传染病一样。它和前文论述的简单的口碑增长有明显区别，具有病毒式增长特质的产品依靠人和人之间的传递，是正常使用产品的必然结果。顾客并非有意充当布道者，他们不需要到处为产品说好话。只要顾客使用产品，就自然带动了增长。病毒式传播无刻不在。</span></strong></p><p>病毒式引擎和其他增长引擎一样，由量化的反馈循环提供动力。这种循环称做“病毒循环”，其速度取决于“病毒系数”。这是一个数学术语，这个系数越高，产品的传播越快。病毒系数测算每个注册顾客将带来多少使用产品的新顾客。或者说，每个顾客会带来多少位他的朋友？既然每个朋友又是一位新顾客，他们就可能会再介绍更多朋友。如果一个产品的病毒系数为0.1，即每10位顾客中有1位会介绍1名朋友，这就不是一个可持续的循环。试想有100位顾客注册，他们将带来10个朋友加入。这10个朋友再介绍1个人参加，循环就到此为止了。反之，系数大于1.0的话，病毒循环将呈几何级数增长，因为每个注册成员会平均带来超过1位顾客。</p><p><strong><span class="under0">依靠病毒式增长引擎的公司必须关心如何提高病毒系数，这比其他任何事情都重要。这个数字哪怕只发生微小的变化，都会让公司未来的前景产生戏剧性改变。</span></strong></p><p>付费式增长引擎和其他引擎一样，由反馈循环提供动力。每位顾客在其“生命周期”内为产品支付一定的费用，扣除可变成本之后，剩下的部分通常被称为顾客的“生命周期价值”（LTV）。这项收入可用于购买广告，作为成长的投资。</p><p>从技术上来说，一项业务一次可以运行几种增长引擎。比如，有的产品既拥有极其快速的病毒式增长引擎，顾客流失率又非常低。同样，一个产品也可以兼具高利润和高客户保留率。但是，在我的经历中，成功的新创企业往往只关注一种增长引擎，做好所有令此引擎运作的工作。有的企业试图建立一个包括所有三种引擎的中控系统，这往往会造成很多混乱，因为需要同时达成这些效果的专业运营技能相当复杂。因此，我强烈建议新创企业每次关注一种增长引擎。大多数创业者对哪种增长引擎最有效已经有了很强的信念飞跃假设。如果他们还没想好，那么走出办公楼，花时间理解顾客就能让他们很快知道哪种引擎可能最合用。只有当新创企业彻底运用了这种引擎之后，才来考虑是否需要转型到另一种引擎上。</p><p><strong><span class="under0">要建起并发动新创企业的增长引擎已经非常艰难，但真相是每架增长引擎最终都会用尽燃料。每架引擎都依靠特定的一群顾客及他们的相关习惯、偏好、广告渠道和相互间的关系。到了某一点，这些顾客群会被充分利用。根据企业所处的行业和时机，这个过程可长可短。</span></strong></p><p>当我向工程开发背景的创业者介绍精益创业方法的时候，这部分概念是最难掌握的。一方面，经证实的认识和最小化可行产品的逻辑是，我们必须尽早把产品送至顾客手中，除了需要从顾客那里学习的认知外，其他任何工作都是浪费。另一方面，开发—测量—认知的反馈循环是一个持续过程。我们不会在一个最小化可行产品之后就停下脚步，而要使用已经学到的信息，马上投入到下一个迭代周期的工作。</p><p>使用“五个为什么”分析创建自适应组织的方法是：按问题的五个等级，不断向每一级按比例投入解决方案。换言之，当症状较轻时，投入得少些，而症状较重时，则要多投入。除非遇到重大问题，我们不作大笔投入。</p><p><strong><span class="under0">“五个为什么”的方法可以用做天然的速度调节器。你的问题越多，对解决方案的投入也越多。当基础体系或流程投资收到效果的时候，危险的严重程度和数量就会降低，团队又能重新加速。对新创企业而言，团队运行得太快是一种危险，为了争取时间而牺牲产品质量，会造成疏失错漏。</span></strong>“五个为什么”可以防止这种情况，让团队找准他们的最佳步速。“五个为什么”不仅和具体执行相关，也和学习认知的速度紧密相连。新创企业无论遭遇什么失败，技术故障也好，无法完成业绩也罢，亦或始料未及的顾客行为改变，他们都应该使用“五个为什么”的方法进行详查。</p><p>我让团队采用这样两条简单的原则：</p><ul><li>1．对第一次错误要容忍。</li><li>2．不允许同样的错误发生两次。<br><strong><span class="under0">第一条原则鼓励人们要对错误怀有同情心，特别是他人的错误。要记得，大多数错误是由系统缺陷造成的，而不是人们没有能力。</span></strong>第二条原则要让团队成员开始在防范措施上按比例投入。</li></ul><p>不要把“历史包袱”放到“五个为什么”的流程中。IGN曾经试图解决所有浪费多年时间的“历史包袱”问题。但由于这类问题过于复杂，要迅速找到解决方案太难了。IGN踌躇满志地展开“五个为什么”讨论，但忽视了三件重要事情：</p><ul><li>1．要把“五个为什么”方法引入企业组织，必须在出现新问题时召开“五个为什么”会议。因为“历史包袱”是企业内的弊病，它们会自然而然地出现在“五个为什么”的分析中，你就能利用这个机会逐步改正这些弊病。如果它们没有自然出现，那么也许它们并没有看起来的那样严重。</li><li>2．每个和问题相关的人员都必须出席“五个为什么”会议。很多企业组织不要求工作繁忙的员工参加根本原因的讨论，是觉得这样可以节省时间。这种节约要不得，IGN在认清这一点前吃了不少苦头。</li><li>3．每次“五个为什么”的讨论开始时，花几分钟时间解释一下这个流程的目的是什么，以及会怎样进行，这对第一次参加会议的人很有好处。如果可能的话，引用以往“五个为什么”的一个成功案例，如果你完全是个新手，可以引用我那个经理人不支持培训计划的例子。IGN发现，只要有可能，尽量使用让团队成员有切身感受的案例，会起到很好的效果。</li></ul><p>成功的创新团队必须有正确的架构以取得佳绩。由创业资本支持或靠自己创业的公司作为独立的小型公司，天生具备这些组织结构上的特性。而企业内部团队则需要高级管理层的支持来创建这些架构。<strong>在我的经验中，不管是新创企业还是企业内部的新创团队，都要具备三种架构特征：<span class="under0">稀少但稳定的资源，开发业务的独立权，以及与绩效挂钩的个人利益。</span>这些组织架构的要求和成熟企业部门中的架构要求不同。要记住，组织架构只是先决条件，它不能保证成功。但是，错误的架构却几乎一定会导致失败。</strong></p><p>把团队工作效率定义中的“职能卓越”（市场、销售，或产品开发方面）改变为“经证实的认知”就会产生问题。正如前面指出的，职能专业人士习惯用他们忙于某项工作的时间长短来衡量工作效率。<strong><span class="under0">比如，程序员希望一整天都在编程。所以传统的工作环境让这些专才抓狂不已：不断的会议打搅、跨部门的交接工作，以及向无数上司解释情况，都是拖效率后腿的事。但是，这些专才的个人效率并不是新创企业的目标。我们想要迫使团队跨部门工作以获取经证实的认知。要这样做的很多技巧——可执行的指标，持续部署和开发—测量—认知反馈流程——确实会让团队无法获得单项职能的最优化。但是，我们开发的速度有多快不是关键，我们能多快地进行衡量也不是关键，关键在于我们能多迅速地完成整个环节。</span></strong></p><p>我相信，要是泰罗活到今天，看到对创业者和创新家的管理方式一定会感到好笑。尽管科学家和工程师以他们超群的技术魔法让所有20世纪早期的人目眩神迷、受益匪浅，但是我们用来组织他们的管理实践却毫无科学的严谨可言。我甚至要把这种管理称做伪科学。<br><strong><span class="under0">我们通常更多地凭直觉而非事实给新项目大开绿灯。我们在本书中已经看到，它还不是问题的根本原因。所有创新都出自愿景，接下来会发生什么才至关重要。如你所见，太多的创新团队粉饰成功，有选择地找出支持其观点的数据，而不是把愿景中的各个因素放诸真实的实验。更糟的是，他们埋头于秘密开发模式，建立一个数据真空地带，进行不受限制的实验，既无顾客反馈又无任何形式的外部核算。当一个团队试图在总指标的图表上突出某些数据，说明因果关系的时候，就是在做一件伪科学的事。我们怎么知道提出的因果关系是真实的？而团队想要用学习作为为失败的辩护借口之时，也是一种伪科学。</span></strong><br>如果学习在一个循环周期内发生，我们要把它在下一个循环中转为经证实的认知。只有通过开发顾客行为模型，然后表明我们能够在一段时间内用新产品或服务改变这些行为，才能得到事实证据，验证我们的愿景。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>深入编码</title>
      <link href="/2021/02/15/encode-and-decode/"/>
      <url>/2021/02/15/encode-and-decode/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a>Preface</h3><p>今天在微信看到这样一串代码</p><p><span class="_img4"><br><img src="/img/代码人生/encode-and-decode/1.jpeg" alt="1.jpeg"><br></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u53eb\u4f60\u7ffb\u8bd1\u4f60\u5c31\u7ffb\u8bd\uff0c\u4f60\u662f\u4e0d\u662f\u50bb\uff1f</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\u6211\u662f\u4f60\u7238\u7238</span><br></pre></td></tr></table></figure><p>这里涉及到了编码的知识，我初看之下，也不能确定是什么编码。经过一番搜索，整理出了本文。</p><hr><h3 id="编码"><a href="#编码" class="headerlink" title="编码"></a>编码</h3><p>汉字转<code>Unicode</code>方法</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUnicodeFun</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(data == <span class="string">''</span> || <span class="keyword">typeof</span> data == <span class="string">'undefined'</span>) <span class="keyword">return</span> <span class="string">'请输入汉字'</span>;</span><br><span class="line">   <span class="keyword">var</span> str =<span class="string">''</span>; </span><br><span class="line">   <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">      str+=<span class="string">"\\u"</span>+data.charCodeAt(i).toString(<span class="number">16</span>);</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> resultUnicode = toUnicodeFun(<span class="string">'中国'</span>); <span class="comment">// \u4e2d\u56fd</span></span><br></pre></td></tr></table></figure><p><code>Unicode</code>转化为汉字</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toChineseWords</span>(<span class="params">data</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(data == <span class="string">''</span> || <span class="keyword">typeof</span> data == <span class="string">'undefined'</span>) <span class="keyword">return</span> <span class="string">'请输入十六进制unicode'</span>;</span><br><span class="line">    data = data.split(<span class="string">"\\u"</span>);</span><br><span class="line">    <span class="keyword">var</span> str =<span class="string">''</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">var</span> i=<span class="number">0</span>;i&lt;data.length;i++)&#123;</span><br><span class="line">        str+=<span class="built_in">String</span>.fromCharCode(<span class="built_in">parseInt</span>(data[i],<span class="number">16</span>).toString(<span class="number">10</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> str;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> resultChineseWords = toChineseWords(<span class="string">"\u4e2d\u56fd"</span>); </span><br><span class="line"><span class="built_in">console</span>.log(resultChineseWords);<span class="comment">//中国</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> GB2312UnicodeConverter=&#123;</span><br><span class="line">    ToUnicode:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">escape</span>(str).toLocaleLowerCase().replace(<span class="regexp">/%u/gi</span>,<span class="string">'\\u'</span>);</span><br><span class="line">    &#125;,</span><br><span class="line">    ToGB2312:<span class="function"><span class="keyword">function</span>(<span class="params">str</span>)</span>&#123;</span><br><span class="line">       <span class="keyword">return</span> <span class="built_in">unescape</span>(str.replace(<span class="regexp">/\\u/gi</span>,<span class="string">'%u'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"><span class="keyword">var</span> result = GB2312UnicodeConverter.ToUnicode(<span class="string">'中国'</span>); <span class="comment">//\u4e2d\u56fd</span></span><br><span class="line"><span class="keyword">var</span> result2 = GB2312UnicodeConverter.ToUnicode(result); <span class="comment">//%5cu4e2d%5cu56fd</span></span><br></pre></td></tr></table></figure><p>汉字转<code>Unicode</code>码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">toUnicode</span>(<span class="params">s</span>)</span>&#123; </span><br><span class="line">    <span class="keyword">return</span> s.replace(<span class="regexp">/([\u4E00-\u9FA5]|[\uFE30-\uFFA0])/g</span>,<span class="function"><span class="keyword">function</span>(<span class="params">newStr</span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"\\u"</span> + newStr.charCodeAt(<span class="number">0</span>).toString(<span class="number">16</span>); </span><br><span class="line">    &#125;); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://segmentfault.com/a/1190000012030831" target="_blank" rel="noopener">JS基础篇–JS之汉字与Unicode码的相互转化</a></li><li><a href="http://c.biancheng.net/view/5602.html" target="_blank" rel="noopener">JS Unicode编码和解码（6种方法）</a></li><li><a href="https://www.ifreesite.com/unicode/" target="_blank" rel="noopener">ifreesite</a></li><li><a href="http://www.ruanyifeng.com/blog/2007/10/ascii_unicode_and_utf-8.html" target="_blank" rel="noopener">字符编码笔记：ASCII，Unicode 和 UTF-8</a></li><li><a href="https://www.zhihu.com/question/23374078" target="_blank" rel="noopener">Unicode 和 UTF-8 有什么区别？</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 字符编码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>键盘</title>
      <link href="/2021/01/23/keyboard/"/>
      <url>/2021/01/23/keyboard/</url>
      
        <content type="html"><![CDATA[<p>近来进爷问我，现在用什么机械键盘，让我推荐一款。</p><p>惭愧的是，我已经很久不用机械键盘了，都是笔记本自带的键盘。倒不是已经到了无剑胜有剑的境界了，而是我周末已经很少打代码了。放在几年前，这是难以想象的。如今作为一个社畜，周末更想舒服地躺着。以前想着逃离舒适区，现在我希望可以一直舒服下去。</p><p>几年前，我大二，进爷念研二。我们都是翔工作室后端组的，加之是老乡，更感亲切。不同的是，我是妓院的，在妓院写代码是常态。进爷虽然本硕都是采矿专业的，但是写代码的水平远胜于我，我觉得他更像是妓院的。后来我入驻了进爷在矿业科学中心的实验室，一同入驻的还有我们后端组的组长大人嘉明。虽然都是后端组的，但是进爷主攻JAVA, 组长大人写C#有一手，我唯爱PHP。</p><p><img src="/img/杂文/keyboard/2.jpg" alt="2.jpg"></p><p>那年(2017年)微信小程序出来没多久，嘉明忙着撸课程设计，写了一个小程序。进爷一边手撸JVM,一边准备秋招。他桌上摆了很多书，其中一本是《编程珠玑》，我至今也没看过。彼时我忙着部署项目到Centos服务器上，踩了很多坑。为此进爷把他的《鸟哥的Linux私房菜》借给了我。后来进爷毕业，把私房菜传给了我。我毕业的时候，又传给了学弟。代代相传，如今不知道是否已经传丢了。</p><p>那时我有两块键盘，一块青轴机械键盘，一块薄膜双飞燕。最初我喜欢用青轴写代码，网上都说有【清脆的段落感】，其实就是声音贼大。《夜曲》里有句歌词【手在键盘敲很轻，我给的思念很小心】。我喜欢把思念敲出来，以至于后来敲得手指发疼，换了块薄膜键盘。我虽然以两块键盘冠绝实验室，但却是技术最菜的。古人有云【笼天地于形内，挫万物于笔端】，我一心想着挫万物于指尖。一整个夏天，指尖都在键盘飞舞。为此写了不少bug，但是都在进爷和嘉明的帮助下，给解决了。</p><p>进爷和嘉明更喜欢讨论设计模式，我更关注吃啥。因为矿业科学中心离食堂太远，大部分时候我们都是吃外卖。在此之前我都十分保守的只吃食堂，总觉得外卖不够卫生。当时有家高频点的店，是小南门的老干妈特色炒饭。我生命里的第一单外卖就献给了这家店。</p><p><img src="/img/杂文/keyboard/1.jpg" alt="1.jpg"></p><p>我吃过很多家炒饭，但唯有这家自称【特色】，至今也没搞懂特色在哪里。最长的时候，我连续吃了二十三天的老干妈炒饭。当时甚至希望进爷能够迎娶老干妈的女儿，这样可以节省几顿饭钱。</p><p>实验室有张折叠床，饭后困了大家会躺着小憩一会儿。我也常常上去躺着，很快，一个夏天就睡完了。</p><p>第二年夏天，我在矿大送别了进爷和嘉明。进爷去了帝都一家外企，嘉明去了厦门美团。没多久，我和嘉明又成为了同事。虽然一个在成都一个在厦门，但是出差去北京的时候，在望京附近的酒店匆匆见了一面，然后嘉明又匆忙奔赴机场了。</p><p>进爷喜欢看《蜡笔小新》，一看就是好几年。他把台词挂在嘴上，说【你还是个小孩】。我常会回复一句【你已经不是一个小孩了】，这其实也是说给我自己的。</p><p>回想起在矿业科学中心实验室写代码的那个夏天，那时，我是一个黄金矿工，手敲着键盘，满屏都是黄金。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>十分钟解决你的shell命令烦恼</title>
      <link href="/2020/09/19/solve-your-shell-command-troubles-in-ten-minutes/"/>
      <url>/2020/09/19/solve-your-shell-command-troubles-in-ten-minutes/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>Shell命令众多并且参数复杂。使用的时候常常需要去查询。本文将提供两个工具，帮助大家更高效的掌握Shell命令。</p><hr><h3 id="tldr"><a href="#tldr" class="headerlink" title=" tldr "></a><strong> <a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr</a> </strong></h3><p>以往我们查询Shell命令的时候，除了使用搜索引擎，一般都是使用<code>man command</code>。比如我们如果要查询<code>find</code>命令的使用，那么就会使用<code>man find</code>。使用<code>man</code>命令我们可以查到命令的使用用途以及相关参数。但是！！！这个命令提供的东西实在是太全太多了，看起来头比较大。</p><p><img src="/img/linux/solve-your-shell-command-troubles-in-ten-minutes/1.png" alt="1.png"></p><p>这里我要安利一个工具<a href="https://github.com/tldr-pages/tldr" target="_blank" rel="noopener">tldr</a></p><p>倘若你是一位钱端开发工程师，可以使用如下命令进行安装。如果是其他语言用户，也可以使用对应的包管理器进行安装。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install -g tldr</span><br></pre></td></tr></table></figure><p>使用十分简单<code>tldr command</code>。比如执行<code>tldr find</code></p><p><img src="/img/linux/solve-your-shell-command-troubles-in-ten-minutes/2.png" alt="2.png"></p><p><strong><span class="under0"> 如上图所示，<code>tldr</code>这个工具会直接把Shell命令以具体命令例子的方式给出来。</span></strong>十分方便,简直把<code>man</code>命令按在地上摩擦。</p><hr><h3 id="Linux命令大全"><a href="#Linux命令大全" class="headerlink" title=" Linux命令大全 "></a><strong> Linux命令大全 </strong></h3><p>如果你觉得上面的<code>tldr</code>工具还是过于复杂，看不懂。这里推荐一个中文网站<a href="http://man.linuxde.net/" target="_blank" rel="noopener">linuxde</a></p><p><img src="/img/linux/solve-your-shell-command-troubles-in-ten-minutes/3.png" alt="3.png"></p><p>输入你要查询的命令,比如<code>find</code>,会给出该命令十分详细的参数解释，以及大量的示例。</p><p><img src="/img/linux/solve-your-shell-command-troubles-in-ten-minutes/4.png" alt="4.png"></p><p><img src="/img/linux/solve-your-shell-command-troubles-in-ten-minutes/5.png" alt="5.png"></p><hr><h3 id="最后"><a href="#最后" class="headerlink" title=" 最后 "></a><strong> 最后 </strong></h3><p>本文一共介绍了三个Shell命令相关的工具,分别是<code>man</code>, <code>tldr</code>, Linux命令大全。推荐使用<code>tldr</code>。</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《增长黑客》</title>
      <link href="/2020/08/02/reading-notes-of-growth-hacker/"/>
      <url>/2020/08/02/reading-notes-of-growth-hacker/</url>
      
        <content type="html"><![CDATA[<p>我们的团队从硅谷回到中国开展业务以后，在增长黑客这个领域里看到中美之间仍然存在四个巨大的差异：</p><ul><li>第一，是否对数据的巨大价值有深刻的认知</li><li>第二，是否掌握数据驱动的体系和方法</li><li>第三，是否运用数据指导各个业务部门的运营</li><li>第四，是否善于利用分析工具代替人力。</li></ul><p>这是一个典型的“梦幻之地”谬论，至今仍然在创业群体中广为存在：商家相信它们所需要的只是打造出一个出色的产品，而客户的获得只是水到渠成的事。</p><p>用户每推荐一个朋友使用我们的服务，我们就额外提供给他们250兆的存储空间，同时他们的朋友也可以额外获得250兆的空间。那时，提供250兆就相当于免费赠送了一个硬盘，因此作为激励措施，还是相当“给力”的。</p><p><span class="under0"><strong>增长是通过设计出可以大规模使用的系统，让用户来替我们实现产品的增长。</strong></span></p><p>增长黑客方法打破了企业内部传统的“筒仓”结构，将数据分析、工程、产品管理和市场营销方面的员工凝聚起来组成跨职能通力协作的团队，使企业能够将强大的数据分析、技术知识和营销能力高效结合起来，迅速寻找更具潜力的增长手段。通过迅速测试新想法、新思路，并根据计划指标对结果进行评估，增长黑客方法能够帮助企业更快地找到有效的做法、抛弃无效的做法。这可以使企业不再一味地在那些没有用的产品功能或者市场营销手段上浪费时间，摒弃浪费资源、过时而且没有得到验证的做法，代之以经过市场验证的、以数据驱动的做法。</p><p><strong> 一个常见的说法是它们只是想出了一个颠覆性的商业构想，一个绝妙的、变革性的、像风暴般震撼整个市场的想法。但是这样的说法显然是错误的。对于所有这些成功的公司来说，产品大范围普及并不是一夜之间实现的，也绝不是轻轻松松就达成的。这些公司的成功并不是因为某个改变世界的产品，也不是因为某一个想法、某一次好运气或者天才之举。事实上，它们之所以能够成功，是因为它们遵循了这样一套方法，迅速提出并测试产品开发和营销的新想法，并利用用户行为数据寻找驱动增长的制胜方法。</strong></p><p>敏捷开发的核心是加快开发速度，强调迅速编程，然后定期测试并进行产品迭代。<span class="under0"><strong>精益创业同样注重快速开发和高频率测试，并且强调尽快推出一个“最简化可实行产品”（minimumviableproduct）使用户能够尽快使用，以便尽早获得真实的用户反馈，确保公司业务具有可行性。</strong></span>增长黑客方法采用了这两个理念中持续改进和快速迭代的做法，将之用于客户和收入增长。在这一过程中，增长黑客方法打破了营销和工程之间的传统壁垒，寻找嵌入产品本身的新的营销方法，而这样的方法只能通过更多的技术知识来实现。</p><p>设立一个跨职能团队或几个团队，打破营销和产品开发部门之间传统的筒仓，凝聚公司人才。<br>    •进行定性研究和定量数据分析，深入了解用户行为与喜好。<br>    •迅速产生新思路并进行测试，根据严格的指标对试验结果进行评估并采取相应行动。</p><p>简而言之，每一个公司为了生存和发展壮大，都需要扩大客户群。<span class="under0"><strong>但增长黑客并不仅仅涉及如何获取新客户，而且还包括如何吸引、激活用户并使用户产生依赖，如何灵活地适应客户不断变化的需求和喜好，使他们不仅成为我们不断扩大的收入来源，也成为我们忠实的宣传者，通过口碑推动品牌或产品的增长。</strong></span></p><p>增长团队的一个核心使命就是尽一切可能挖掘一个产品或服务的增长潜力。</p><p><span class="under0"><strong>但是大多数情况下，增长是来自一次次小成功的积累。这些小成功就像是储蓄账户里的利息，通过一点点累加实现增长的腾飞。而且，在实现腾飞之后，优秀的增长团队仍会继续开展试验、进行改进。</strong></span></p><p>再次，人们常常认为增长黑客方法的任务就是吸引新用户或新客户。其实，增长团队应当承担更广泛的责任，事实也是如此。它们也需要关注客户激活，也就是说使原有的客户成为更活跃的用户和买家；也需要思考如何使他们成为产品或服务的宣传者。此外，<span class="under0"><strong>增长团队应关注如何实现用户留存和变现，也就是说使客户成为“回头客”，增加他们为公司创造的收入，从而实现长期持续增长。</strong></span> <strong> 通常，企业过于关注如何获取新用户和新客户，而这些新用户和新客户往往很快就失去了对企业的兴趣。企业在这方面浪费了太多资金。</strong></p><p>然而在做了一些市场调研和用户行为数据分析之后，她发现了与市场总监的要求相矛盾的情况：很多最佳的增长机会似乎都蕴藏在漏斗的下游。</p><p>最有可能成功的增长策略不是只关注用户群的扩大，也要最大限度地发挥现有用户的价值。</p><p>即使你不在技术公司工作，你可能也十分了解不同部门之间的这种紧张关系，比如市场团队不理会销售人员的建议，或者研发团队拒绝市场团队提出的设计新产品原型的提议。这是以部门划分职责的筒仓式结构的主要问题之一，也是为什么增长团队必须包括不同专业、不同部门的人员，我们稍后也会详细说明这一点。正如BitTorrent团队很快认识到的，最好的想法往往产生于这种跨职能的合作，这也是为何跨职能合作是增长黑客过程的一个根本特征。</p><p>然而，这种合作方式在各种类型、各种规模的公司里都很罕见。公司的不同业务部门通常都是彼此孤立的筒仓，很少交流、共享信息或者开展合作。这种组织结构在过去多年来一直广受诟病。麦肯锡的一份报告指出，筒仓式结构最致命的一个问题就是它会放缓企业创新的步伐、阻碍增长。作为本书的两位作者，我们一致认为，“对于创新力来说，在系统内部开展合作的能力比个人才能更加重要”。但是麦肯锡的一份调查发现，“虽然80%的高管都承认跨越部门界限进行有效的知识分享对于增长而言至关重要，但只有25%的高管认为他们的公司做到了这一点”。</p><p>部门之间缺乏沟通会阻碍以客户为中心的产品开发和营销——随着技术和社交媒体的推动，甚至要求企业持续不断地与客户进行更具实质性的互动，从而使以客户为中心的产品开发和营销方式显得越发重要。简言之，工程师和产品设计师有能力找到满足客户需求和喜好的方式，但是他们往往并不知道客户需要什么、想要什么。</p><p><strong> 增长团队里应当有对企业战略和目标有深刻了解的人，有能够进行数据分析的人，也要有能够对产品的设计、功能或营销方式进行改动并通过编程测试这些改动的工程师。</strong></p><p>每一个增长团队都需要一个领导者，就像部队里的营长，既管理团队又能脚踏实地地参与到想法的提出和试验过程中。增长负责人会确定试验的流程和节奏，并监测团队是否完成了目标任务。增长团队一般每周开一次例会，由增长负责人主持会议</p><p>所有的增长负责人都应具备一些基本的技能：能够熟练进行数据分析、精通或熟悉产品管理（即开发与发布产品的过程），以及了解如何设计并开展试验。每一个增长负责人也都必须熟知促进用户增长的方法以及团队所负责产品或服务的用法。例如，一个社交网络的增长负责人应当了解病毒式的口碑效应和网络效应（即加入的人数越多，社交网络的价值越大）的原理，许多社交产品正是依靠这两个效应发展起来的。</p><p>这一过程是一个持续的循环，由四个主要步骤组成：<br>    （1）数据分析与洞察收集；<br>    （2）想法产生；<br>    （3）排定试验优先级；<br>    （4）试验执行。<br>在第四步完成之后重新回到数据分析阶段，评估试验结果并决定下一步行动。在这一阶段，团队将确定产生了初步成果的试验想法，并进一步完善，而对于结果差强人意的试验想法，则直接抛弃。通过循环往复地推进这一过程，增长团队将不断积累大大小小的成功，创造一个不断改进的良性循环。</p><p><span class="under0"><strong>周会可以使团队保持工作进度与重心，确保高度的协调与沟通以推进这一节奏飞快的过程。这个过程就像是在赛道上飞驰的F1赛车，在保持速度的同时不断进行微调，如果做不好则可能变成刹车失灵冲出道路的笨重卡车。除此之外，这种深度合作的会议能够达到1+1=3的效果，不同成员的专长结合在一起的影响力将会翻倍，使优质的想法变成强大的增长引擎。这样的会议也经常能够催生非常出人意料的想法，而其中很多都是成员独自一人无论如何也想不到的。</strong></span></p><p>总之，组织最高层的支持对于团队取得持续的成功至关重要。</p><p>增长团队也不应太早启动，因为如果产品不受用户的喜爱，那么任何试验都无法激发持久的增长。<span class="under0"><strong>当然，对于一个不尽人意的产品，很多公司都会想方设法保持一定的用户忠诚度或者获得足够的销量，但是它们终将失败。</strong></span></p><p><strong><span class="under0">虽然创造一个不可或缺的产品本身并不足以给公司带来爆发式增长，但是这是公司实现迅速、持续增长的基本条件。</span>当然，打造一个不可或缺的产品并非易事。很多公司在发布新业务或者新产品的时候常常本末倒置，投入大量的人力、物力和财力试图吸引更多用户使用它们的产品，而事实上它们的产品并不招人喜欢，有时甚至并不被目标受众所接受。<span class="under0">这是创业者最常犯也是最致命的错误之一，也是成熟的公司增长黑客的基本原则之一就是在确定你的产品是否不可或缺、为何不可或缺以及对谁来说不可或缺之前不要进入快节奏试验阶段，也就是说，你必须要了解你的产品的核心价值是什么、对哪些客户来说具备这些核心价值以及为什么。（一个例外情况是社交网络类产品，此类产品的核心价值就是用户本身。）</span></strong></p><p>但事实是，无论营销和广告投入有多大，无论营销手段有多高明，我们都无法使人们爱上一个不合格的产品。如果你无法在大力推动增长之前创造或者确定产品的核心价值，那么你或许可以沉迷于一时的增长幻影，但也可能会立刻遭到市场的排斥。当然，大张旗鼓的产品发布可能在开始时吸引一些眼球，但是如果产品不具备令人惊叹的特质，即使请巨星做代言人或者斥资几百万美元打广告，都不会获得可持续的增长。</p><p><strong><span class="under0">过早追求增长会产生两个层面的机会成本。首先，你会将宝贵的时间和金钱浪费在错误的事情上，即推广一个不受欢迎的产品。其次，当你过早追求增长的时候，你非但没法把早期客户转化为忠实粉丝，反而会令他们失望，甚至使他们变成愤怒的批判者。记住，病毒式的口碑传播是一把双刃剑，它可以帮助你实现增长腾飞，也可以令你灰飞烟灭。</span></strong></p><p>增长团队需要采取严密的方法分析用户行为，以发掘产品或服务的核心价值</p><p>BranchOut的创始人里克·马里尼在2012年的一次演讲中承认公司当时走错了路，太过仓促地追求获客却没有改善产品体验。<strong><span class="under0">“人们常常认为存在一种能够获取流量、实现病毒式增长的法宝，”他说道，“我们的教训告诉我们，有时候你能够取得暂时的病毒性增长，但是如果想要维持长期的用户增长，首先必须有个好产品。我们认识到，我们必须改进产品，吸引用户每天打开它。不能只做一个人们偶尔需要的工具，而是要打造一个社区。现在我们必须要做出这个转变。</span></strong></p><p>正如Airbnb的增长团队所言，增长团队必须始终谨记，“是爱创造了增长，而不是增长创造了爱”。而要赢得用户的喜爱，就必须创造“啊哈时刻”</p><p>Yelp找到了它的“啊哈时刻”。<strong><span class="under0">“啊哈时刻”就是产品使用户眼前一亮的时刻，是用户真正发现产品核心价值——产品为何存在、他们为何需要它以及他们能从中得到什么——的时刻。换句话说，就在这个时候，用户认识到这个产品对他们来说为什么不可或缺</span></strong></p><p>要确定应该什么时候开始快节奏的增长黑客过程，方法很简单：问一下自己，你是否知道用户“啊哈时刻”的点在哪里？新产品通常都是为了创造一个让用户无法抗拒并且能够满足一大批用户切实需求的“啊哈体验”。有时候一切都会按计划推进，一旦人们开始使用产品，他们就会经历这个“啊哈时刻”，然后会把产品推荐给几个朋友，口碑传播便从此开始</p><p>一个产品的“啊哈时刻”有时候可能难以确定。很有可能出现的情况是，你发布了一个产品之后，由于增长乏力便断定产品根本不存在任何“啊哈魔力”，而事实上有些用户可能已经深深爱上了这个产品。所以在确定产品是否具有令人惊叹的潜力时，关键的一步是通过挖掘用户数据与反馈，以寻找那些真正热爱你的产</p><p>如果这个产品明天就无法使用了你会有多失望？<br>　　a）非常失望<br>　　b）有一点失望<br>　　c）不失望<br>　　d）不适用——已经弃用产品</p><p>在这种情况下，不可或缺性调查还需要包括其他一些问题，以便帮助你确定下一步工作：<br>1.如果本产品无法使用了，你会用什么替代产品？<br>　　a）我很可能不会用其他产品<br>　　b）我会用：<strong>__</strong><br>2.本产品给你带来的主要价值是什么？<br>3.你向别人推荐过本产品吗？、<br>　　a）否<br>　　b）是（请说明你是如何描述它的）<br>4.你认为哪种人最能够从本产品中受益？<br>5.我们该如何改进本产品以更好地满足你的需求？<br>6.我们是否可以通过邮件跟进，邀请你对回答做出进一步说明？</p><p>如果你的产品试用用户的规模还不足以提供这么多份回复，你就应该更多地依靠客户采访，因为如果只有几十份回复，你可能会得到错误的信息。</p><p><strong><span class="under0">调查的目标群体最好是活跃用户而不是“休眠用户”，因为从不再使用产品的用户那里获得的反馈往往没有很大的用处，他们很可能会回复说他们没有从产品中受益，他们也没有向别人推荐产品，甚至可能根本不会回复。相比之下，活跃用户会对产品或服务更加了解，因此往往也能够给出更加具体翔实的回答。</span></strong></p><p>要评估产品是否获得了稳定的留存率，团队应当密切跟踪流失用户人数，通常是关注每周或每月的数据。用户流失一般难以察觉，特别是在新用户获取势头强劲的时候，而经常性的监测能够为用户流失提供预警。</p><p><strong> <span class="under0">一家公司可能在获取大量新用户的同时也在失去很多早期用户，这样的流失很可能被新用户增长数据掩盖。</span>团队不应将稳定的用户留存率视作一个达到之后就能一劳永逸的基准，必须持续地付出努力以维系留存率。而且事实上，团队应当努力提高留存率，这是驱动增长的最有效手段之一。但是在早期阶段，最为关键的是保证留存率的稳定，因为它意味着你已经获得了一批认可产品价值的用户。</strong></p><p>留存率通常都按月计算。对于移动应用和社交网络甚至快餐店和便利店等经常使用的应用，团队可能需要每周甚至每天统计留存率。如此短的时间周期可以帮助你推算，与偶尔使用的用户相比，有多少用户已经将使用该产品作为一种习惯甚至日常生活的一部分。</p><p>如果你的产品通过了这些测试，就说明相当多的客户已经经历了“啊哈时刻”，那么是时候开始快节奏的增长试验了。<strong> <span class="under0">但如果你发现产品还没有实现不可或缺性，那么你需要做的第一件事就是别再思考一个看起来再正常不过的问题：有什么你还没有使用但是可能会使产品更具吸引力的功能？虽然听上去在办公室里用白板和最聪明的员工讨论改进产品的想法是解决问题的正确方式，但请相信我们，这个直觉并不会对你有所帮助，你需要做的是和用户交流，并且是与前面提到的调查相比更深层次上的交流，以便了解阻碍你的产品成功的真正因素和障碍是什么。</span></strong></p><p><strong> <span class="under0">否则，你可能会将非常有限的资源和时间浪费在非常昂贵且错误的事情上，比如部署一个毫无用处的功能。虽然增加新功能看起来是改进产品最直接的办法，但事实上，每一个产品开发者都应当警惕特性蔓延（featurecreep）的危险，也就是增加越来越多并不真正创造核心价值的功能，而且使产品变得更难以使用。</span></strong></p><p><strong> <span class="under0">在很多情况下，改进的关键在于做减法而不是做加法。正如Yelp所做的那样，他们进行了功能的删减，将用户评论作为产品的核心。</span></strong></p><p>因此，必须采用分析手段找出“啊哈时刻”没有实现的原因以及如何才能实现，而不是单纯依靠主观臆测。为此应同时采取下列三个措施。<br>　　•开展更多的客户调查，包括采访和实地调研，真正与客户和潜在客户交谈。<br>　　•针对产品改动和信息传达进行高效试验。<br>　　•深入分析用户数据。</p><p>用户开发领域的创新先驱史蒂夫·布兰克强调说，<strong> <span class="under0">无论你在哪个行业，你都需要走出办公室，了解你的用户真正希望从你和你的产品中获得的是什么。网络上可以找到开展用户采访的诸多资源，不论你选择哪一个，在采访的时候最重要的一个原则就是要对你的产品保持客观、中立的态度。如果你在整个过程中一直尝试推销产品，那么你获得的反馈将会毫无价值。你需要做的不是宣传，而是倾听和观察。</span></strong></p><p>开展调查和采访可能看上去太浪费时间，但事实上，你很可能只需要为数不多的调查回复和几次采访就能够获得十分明确的用户洞察。你A/B测试也不应仅限于语言、着陆页设计或市场推广。应谨记，增长黑客的一个核心原则就是对客户体验漏斗的整个过程开展试验，不仅包括客户认知与获取，也包括客户激活、客户留存、变现与自传播。例如，在英曼，摩根的团队通过对他们的付费新闻订阅服务的定价和期限进行A/B测试，决定将按月订阅的方案替换成为期三个月的订购方案，结果大大提高了留存率。</p><p>你的团队应该掌握的不仅仅是用户访问网站的频率和时长，而是用户体验各个层面的数据，并对这些数据进行细致入微的分析，以了解人们如何使用你的产品以及这与你对产品的计划有何出入。</p><p>你需要构建的是一个所谓的“数据湖泊”（datalake）或者“数据仓库”（datawarehouse）：一个储存所有客户信息的独特应用，可以让你真正深入挖掘并发现可能对产品的使用方式不同于其他人的用户群。这能够让你在单个用户的层面探索产品的使用情况，比如观察一个非常活跃的用户在你的网站上或者用你的App做些什么，或者一个本来准备下单但最后没有点击结算按钮的用户最后做了些什么。可能你会看到他正要下单时突然被跳出的促销信息吸引了过去，这样的信息对于一个用户来说可能无关紧要，但可能会引导你发现值得进一步分析和实施增长试验的领域。如果数据得以有效收集，数据分析师也能够更加轻松地向团队说明快节奏增长试验的结果。</p><p><strong> <span class="under0">所有这些重新定位的案例都说明，在投入大量财力物力开展增长攻势之前，必须要收集并分析用户行为的定性和定量数据以及他们对产品优缺点的反馈。</span></strong>如果这些公司在重新定位之前就展开增长攻势的话，可能今天我们就不会知道它们的名字了。因为它们很可能不会获得爆发式的增长，而是将宝贵的时间和金钱浪费在推广一个并非让用户觉得不可或缺的产品上。</p><p><strong> <span class="under0">创造并使更多用户体验到“啊哈时刻”是破解增长难题的第一步。下一步是明确你的增长战略。在进行快节奏增长试验之前，你必须清楚地知道你将如何驱动增长——你的增长杠杆是什么以及它们是否能够帮助你取得理想的结果。能否做到这一点将决定你的增长是真实、强劲、持续且能够创收的还是会像幻影一样转瞬即逝。</span></strong></p><p><strong> <span class="under0">增长黑客并不是要以最快的速度随意尝试各种想法，看哪个能奏效，而是通过快速的试验寻找并优化最具增长潜力的因素。</span></strong></p><p><strong> <span class="under0">开展大量的像调整按钮颜色这样的小改动试验并不是开展增长黑客过程的最佳方式。小型团队应该做的是专注于那些最有潜力产生影响力的试验。</span></strong>约翰斯格外强调这一点：“真的，要大胆一些，不能只是调整页面上某个按钮的位置。你可能因为网站流量比较小，所以选择运行这样的试验，而因为注册量有了小幅提升，你可能会将试验周期延长到几个月甚至几年。如果你们是一家年轻的创业公司，一定要想方设法获得大幅提升。”5之后，随着用户或客户群的扩大，你就可以同时测试更多的利基领域[1]了。随着客户数量的增长，不论改动有多小，同时推进数量更多的试验都可能带来巨大的成功。</p><p><strong> <span class="under0">要确定你的核心指标，首先要明确与用户对产品核心价值的体验最直接相关的行为。比如，对脸谱网来说，这样的行为就包括用户添加了多少好友、多久访问一次网站、发布了多少状态和评论以及在网站上停留多长时间。你至少需要跟踪用户达到“啊哈时刻”之前每一个步骤的相关指标，以及他们采取这些步骤的频率。例如，优步在乘客用户方面的核心指标是完成的行程数。所以，除了新增下载量之外，优步也应该跟踪预订的行程数、再次预订的乘客数以及乘客预订新行程的频率。</span></strong></p><p>为了完善增长等式、缩小关注范围，最好能够选择一个关键的能够决定最终成败的指标，以此指导所有的增长活动。这样的一个指标能够非常有效地使团队成员最大化地利用他们的时间，从而避免将资源浪费在漫无目的的增长试验上。</p><p><strong> <span class="under0">随着企业的增长，初期目标得以实现，北极星指标也会随之改变。在追求增长的过程中，你可能经常发现自己置身荒野之中，为了提升某个指标废寝忘食地工作，结果却发现它并没有什么用。如果选择了正确的北极星指标，增长努力就能够朝着更完善的解决方案前进，因为它能够在增长试验偏航时为你指明前行的方向。</span></strong></p><p><strong> 通过快速学习学到更多也是快节奏增长黑客过程的目标和一大优点。增长最快的公司正是那些学习最快的公司。开展的试验越多，学习到的东西也就越多。道理就是这么简单。团队应该开展大量的试验，因为大多数试验都不会产生你想要的结果。<span class="under0">有的试验会产生一些成功的迹象但是无法得出绝对的结论，这样的试验结果不足以证明可以在更大范围实施被测试的方法。有的试验会取得小幅的成功，但并不会带来实质性的变化。只有少之又少的试验会带来巨大的成功。也就是说，寻求试验的成功是一个以量取胜的游戏，每一次成功不论大小都很重要。</span></strong></p><p><strong> <span class="under0">请记住，增长黑客的巨大成功往往来自一连串小成功的累加。一点一滴的认知学习都会带来更好的表现，催生出更好的试验想法，进而带来更多成功，最终将一次次小幅的改善转化为压倒性的竞争优势。</span></strong></p><p><strong> <span class="under0">我们的建议是，团队应缓慢起步，在这一新的试验过程站稳脚跟之后再逐渐提速。一开始便试图启动太多试验可能会导致试验执行欠佳，使团队成员感到困惑，或因为试验结果不理想而使士气受挫。</span></strong></p><p>开展漫无目的或设计不当的试验可能得不偿失。<strong> 就像你不应该在没有进行足够的训练和热身的情况下参加铁人三项赛一样，你同样不应该以太快的速度一头扎进增长黑客过程中去，这样做的结果必然是失败。</strong></p><p><strong> <span class="under0">“点子”是增长的催化剂。你需要一系列的增长点子以形成稳定的增长动力。正如莱纳斯·鲍林所言，“形成一个好想法的最佳办法是提出很多想法”。正因如此，能够不加限制地提出想法对于增长黑客过程尤为关键。这并不意味着要不加限制地测试这些想法。测试应当是经过严格的优先级排定的。但是你需要鼓励增长团队成员充分发挥想象力并且对想法毫无保留。这能够保证团队形成足够多的想法，以便从中筛选最具价值的那些。</span></strong></p><p>但是，团队不应过分纠结分数调整。这个分数只是用来进行优先级的比较，不需要尽善尽美。如果团队成员浪费太多时间争论一项试验的影响力得分，那么增长会议很快就会陷入僵局。团队应把这一分数作为一个重要参考，而不是当作优先级排定的唯一依据。如果团队对于某个分数存疑，增长负责人应依据自己的最佳判断果断做出决定，以引导团队推进工作。</p><p>每一个试验的运行都意味着另一个试验的落选。因此，对于点子的筛选和测试方式的选择都应当十分慎重。一次糟糕的试验就意味着团队失去了一次宝贵的学习机会，这会放慢团队工作的进度，而错误的数据会误导团队走错方向。因此，必须保证每一次试验都能产生统计上有效的结果。应当制定确保结果可靠的完善的指导规则，同时，团队里的数据分析师应负责将这些规则落实到试验中去。本书不会探讨试验设计的细节，但是我们希望提出以下两个我们认为非常有用的经验法则。</p><p>鉴于上述过程主要都是围绕着增长会议开展的，有必要说明一下会议流程。<strong> 我们建议每周召开一次增长会议，但是有些团队可能会选择每两周召开一次，这取决于它们能够在增长过程上付出的时间和精力。会议的目的是聚焦于成员提名的想法并共同决定试验计划，因此时间绝不应浪费在献计献策、集思广益上，想法应该早在会议之前按照我们前面介绍的过程提出。当然，团队也可以每个月召开一次额外的头脑风暴会。</strong></p><p>增长黑客过程对于增长的提升速度非常之快。有时候，一个点子从产生到成为重要增长驱动力只需要两周左右的时间，这包括花在试验前的数据分析和第一次增长会议上的时间。</p><p>增长黑客的一个优点是，即便失败的试验也能在极短的时间内给团队带来重要收获。假设另一项试验以失败告终，即突出显示购物满50美元免运费政策的做法并没有带来销量的增加。团队推测，可能是因为50美元的门槛太高了，于是决定为下一周的日程增加一项新的试验。可能这项新试验仍然没有带来订单量的显著增加，但是如果他们继续试验，他们可能会发现35美元的门槛刚好合适。团队可能只是多花了两周时间就收获了能够极大驱动增长的方法。</p><p><strong> <span class="under0">确实，对于任何一家公司来说获取新用户都极为重要。但是，如果获取用户的成本超过了用户所能带来的收益，那就有问题了。但即便这样还是有太多公司掉入靠斥巨资吸引潜在新用户的陷阱中，而且，这种现象似乎愈演愈烈</span></strong></p><p>当然，这一切都有一个共同的前提，那就是公司需要有足够的资金来负担先期费用，并且有切实可行的计划来逐渐收回成本。</p><p><strong> <span class="under0">前面我们曾建议，在实现产品—市场匹配之前不要火力全开采取大规模的获客行动。也就是说，在确定你不仅拥有好的产品，而且这个产品对目标市场有很大吸引力之前，不要贸然行动。（但是对具有网络效应的公司来说，获取用户的行动通常必须与产品开发同步进行。）</span></strong></p><p>设计打动人心的广告语</p><p>事实上，今天信息传达的速度必须远远超过几年以前。研究表明，人类的平均专注时间（将注意力保持在一条新的网络信息上的时间）现在是8秒，而在2000年是12秒。这也让我们获得了一项“殊荣”：我们的注意力持续时间比金鱼还要短。5要在如此短的时间内给潜在用户留下深刻印象，就必须让他们立刻明白为何你的产品能够让他们受益。这就意味着，你所使用的语言必须直接迎合并且进一步点燃他们的需求和欲望，从而抓住他们的注意力——整个过程必须在8秒甚至更短的时间内完成！只有这样你才能多赢得几秒钟的时间来向他们解释为何应该购买你的产品。换言之，你设计的语言必须非常简洁地传达出产品的核心价值，也就是那个“啊哈时刻”，并且回答每位消费者最关心的简单问题：“你展示的这个产品将如何改善我的生活？”</p><p><strong>乔布斯完全可以在他传达的内容中解释为何他的播放器与众不同、性能更加优越，但他没有这样做。他明智地决定不使用任何已经被用来形容MP3播放器及其功能的表述。他只用了一个简单而迷人的句子——“将1000首歌放在你的口袋里”，就彻底重塑了人们对便携式播放器魅力的认知。他并没有花时间去试图说明他的产品何以在价格和性能方面有别于其他产品。换言之，乔布斯明白iPod的核心价值，也就是它神奇的“啊哈体验”在于能够让你将你的整个音乐库随时随地带在身上，享受绝对流畅的音乐体验。当然，我们并非都是乔布斯这样的营销天才，但只要有正确的测试策略，我们就能不断接近极致！</strong></p><p>这并不是由于Upworthy的编辑们天生充满才华和创造力，而是由于他们不让创造力成为一种偶然——他们通过试验破解创造。他们挑选标题的第一步是让一名员工为每则故事撰写至少25个不同的标题，接下来再由负责人从中挑选出几个他/她最喜欢的标题，最后编辑主任再从中决定哪些可以用于试验。他们的试验方法也再简单不过了，所需的工具仅仅是脸谱网、Bitly（一个为网页内容生成可追溯的链接的免费网站）和一个老式计时器。下面是他们的具体做法。</p><p>正是出于这个原因，Upworthy的创始人埃利·帕里泽指出，“标题的好坏能够决定是1000人还是100万人阅读”，一切额外的努力都是值得的</p><p><strong>股市投资专家有一个共识：最好将资金投资到许多不同的公司和产业。但是，你如果想为自己的产品寻找营销和分销渠道（在互联网领域，这两者是一回事），却不能使用这个策略。营销人员通常错误地认为，通过各种不同的渠道同时展开营销活动最有利于增长。但这样做的结果是，资源被铺得太开，让团队无法专注于优化一两个可能最有效的渠道。正如谷歌创始人和CEO拉里·佩奇所说，“有的放矢”效果往往更好。</strong></p><p>与此同时，<strong> <span class="under0">太多的公司随波逐流，别人用什么渠道它们就用什么渠道（如谷歌付费广告或者脸谱网广告），却不愿意去尝试可能对它们的产品而言更有效而且成本更低的途径。</span></strong>这也是可以理解的，因为要找到合适的渠道是一个艰巨的任务，这不仅是因为找到适合某个产品的最优渠道需要进行大量测试，还因为有很多现成的渠道可供选择，而且新的渠道还在源源不断地出现。通过增长黑客过程进行试验可以帮助你相对快速地发现一两个最优渠道，甚至抢先于你的竞争对手找到它们。</p><p>你只需两个步骤就可以锁定你的最佳渠道：发现和优化。在发现阶段，增长团队应该广泛试验各种可能的渠道选项，但这并不是说不加选择地乱试一通然后看哪个管用，而是必须对各种渠道进行深入调研，最后选出若干优先项进行试验。我们马上会介绍一种简单却十分有用的方法来帮助你寻找渠道。一旦你找到了一两种高度匹配的渠道，就可以进入第二个阶段：优化。在这一阶段，你应该在扩大规模的同时努力实现渠道成本效益比和影响力的最大化。我们来看一看优化过程是如何进行的。</p><p><strong> <span class="under0">但无论是哪种情况，你必须首先集中精力优化那些对你而言成本效益比最高的渠道。</span></strong></p><p><strong> <span class="under0">关于病毒循环的一个错误认识是：设计出病毒循环之后就万事大吉了，剩下的交给用户，让他们一传十，十传百，口口相传。但事实并非这般美好。并不是所有的病毒循环都“生而平等”，认识到这一点很重要。对于一些产品而言，创建有效的循环十分容易，贝宝的移动支付AppVenmo就是一个例子。一个能够帮助用户转账汇款的产品显然具有先天优势——有谁不愿意马上注册然后收钱呢？但是对于许多其他产品而言，利用奖励措施来鼓励用户发送和接受邀请则困难得多，而且往往只是接近（还不是真正实现）病毒式增长就需要大量的前期试验和后续优化工作。</span></strong></p><p><strong> <span class="under0">我们可以学到的经验是，尽管找到能打动人心的语言非常重要，但是要实现病毒式增长必须提供真正的价值。</span></strong></p><p><strong> <span class="under0">脸谱网的沙马斯·帕利哈普提雅告诉增长团队，不要一上来就思考如何创造原生病毒，首先要做的是开发出卓越的产品。他说到了一个关键点：当你专注于创造原生病毒时必须遵循产品开发的基本原则——要让分享产品这种体验变得不可或缺，或者至少让这种体验尽可能便捷、舒心。</span></strong></p><p>任何产品的病毒性都是由三个因素决定的：有效载荷（payload）、转化率（conversionrate）和频率（frequency）</p><p>对于最好的病毒循环而言，邀请应当是用户使用产品的自然结果。</p><p>公司在试图优化病毒循环时往往会掉入一个陷阱：想方设法增加收到推荐的人数，以致用户和收件人对此产生强烈的反感。那些无意间给自己所有的邮箱联系人发送下载App邀请的人就能体会到这会让人多么恼怒。用户体验专家将那些用来骗用户做他们通常不会做的行为的伎俩称作黑暗模式。虽然一些黑暗模式在短期可能奏效，但是从长远来看，用户之后产生的抵制情绪将会最终拖垮增长。这些伎俩带来的负面评价和负面情绪足以摧毁最好的产品——这样的事情并非没有发生过。</p><p>最好的循环能够激励用户主动帮助公司吸引更多新用户，因为这样做可以改善他们自己的产品体验，脸谱网或者领英就是这样。因此，具有网络效应的产品在获得病毒式增长方面具有得天独厚的优势：使用产品的人数越多产品体验就越好，所以人们是愿意鼓励其他人加入的。社交网络和即时通信App是最明显的例子，像易贝和Etsy这样将卖家和买家直接联系起来的平台型企业也属于这类，因为使用这些平台的人越多就意味着卖家能够获得更多的潜在顾客，而买家则可以有更大的选择空间。</p><p><strong> <span class="under0">如果用户体验本身并不对用户分享产生激励，那么你可能就需要创造这样的激励措施，通常的做法是提供某种奖励。但关键是，用户完成推荐后得到的奖励不管是什么都必须与产品的核心价值相关。</span></strong></p><p><strong> <span class="under0">同样，食品商店App团队设计的推荐计划为每位使用App的顾客提供10美元的优惠券，供他们下次购物时使用。这似乎是个不错的做法，因为它其实就是一次性的购物折扣。但是，提供现金奖励甚至包括折扣奖励的缺点是，人们很容易比较奖励的价值和获取奖励需要付出的努力。</span></strong>所以，如果现金奖励力度不够大就很难激励人们采取行动。比较一下给用户10美元的现金奖励与给他们16G的Dropbox免费空间这两种做法。16G的存储空间值多少钱呢？用户很难弄清它的价值，但是感觉上它很值钱。但实际上对于Dropbox来说，提供16G免费空间的额外成本非常低。</p><p>记住，大多数“一举成功”的案例都需要大量试验做铺垫，成功的病毒循环也不例外。</p><p><strong> <span class="under0">提高激活率的核心在于让新用户更快地体验到“啊哈时刻”。感受到产品不可或缺的人越多，忠于产品的用户就越多。增长黑客过程提供了一系列严格的步骤来帮助你寻找阻碍人们获得“啊哈体验”的因素，然后通过测试增长手段来提高激活率。</span></strong></p><p>破解激活的第一步是找出通往“啊哈时刻”的所有节点。</p><p>读到这里你可能会想，可能导致用户最终放弃购买的因素太多了，比如，他们对App失去了兴趣、因为购买不顺利而退出App、App速度太慢让人失去耐性、用户可能觉得搜索商品太麻烦以及账户创建过程太复杂等等。<strong> <span class="under0">但是，有一点要记住，在增长黑客法中永远不要想当然地揣测用户行为背后的原因。你应该仔细研究用户行为数据，基于你的观察对用户展开调查，这样才能把精力最高效地集中在测试那些可能具有最大潜在影响力的改变上。即使你觉得自己知道激活的障碍在哪里，真实的情况也有可能令你大吃一惊。</span></strong></p><p>一旦确定了通往“啊哈时刻”的所有步骤，接下来寻找障碍，找到用户逃离原因的第二步就是计算每个步骤的转化率，换言之，要计算整个用户旅程中完成每个步骤的用户比例。</p><p><strong> <span class="under0">要想知道用户为何会在某个节点放弃购买，最有用的回答往往来自那些没有放弃购买的用户。这看似有违直觉，却是事实。</span></strong>例如，要弄清为何这么多人在访问商店App之后没有下单，增长团队应该调查那些刚刚完成购买的用户。毕竟，这些成功下单的用户同样遇到了令其他顾客却步的障碍，而且他们还可能道出当别人离开时他们为何仍然选择继续购买。因此，App团队可以在订单确认页面显示一个简短的问卷调查，询问顾客“哪个因素让你差点放弃购买？”我们可以从这里学到的关键一点是：<strong> <span class="under0">你无法预知哪些试验最有效。你所能做的只是保持灵敏并且靠数据说话：根据你的发现不断调整试验，而且如果试验不像之前假设的那样有效，那就得随时准备做出调整并尝试其他方法。</span></strong></p><p>尽管肯定存在一套提高激活率的最佳做法，而且我们接下来也会介绍，但是不能把它们当作必须遵守的操作规则，只能把它们看作范例和试验的灵感源泉。<strong> <span class="under0">记住，每个产品都不一样。如果仅仅关注具有共性的问题而没有找到你的特定用户群面临的激活障碍，那么你将永远不会成功。</span></strong></p><p>最根本的一点是：没有捷径。但是，如果按照前面介绍过的三个步骤来操作，那么你就能迅速发现可以显著提高产品激活率的思路和洞察。我们再来回顾一下这些步骤：明确让用户体验到“啊哈时刻”所需的所有步骤；创建一个显示每个步骤转化率的漏斗报告并按照访问渠道对用户进行分类；对那些在流失率很高的环节依然继续使用产品的用户以及弃用产品的用户进行问卷调查和采访，找出流失原因。你可以基于这些信息设计出新的、具有很强针对性并且效果显著的试验，以改善激活。</p><p>但需要小心的是，我们很容易注意到自己使用的产品的摩擦，但往往看不到自己参与开发或者参与营销的产品的摩擦。这可能是因为我们太了解产品的工作原理，所以我们的大脑根本想不到那些阻碍。当设计师看到用户磕磕绊绊地使用自己设计的产品时，才惊讶地发现用户使用产品时竟然遇到那么大的困难。我们将大量注意力放在如何消除在线产品的用户体验中的摩擦，但其实摩擦无处不在。</p><p>每遇到一个令人心烦的障碍用户都会想：“这值得吗？”如果产品价值不是足够清晰、吸引力足够大，那么哪怕很小的麻烦也会赶走用户，而且常常是永远将他们赶走。肖恩设计了一个简单的公式来帮助人们时刻记住不断减少摩擦的重要性：欲望–摩擦=转化如公式所示，访者越想得到产品，他们就越愿意克服更多的摩擦。这就是为何产品的早期用户对于新产品或者羽翼未丰的产品而言简直就是天使，因为当产品还存在严重瑕疵时，这些用户愿意使用产品，甚至不惜为此付费。摩根有一个令人羡慕的Gmail邮箱地址，这是因为当Gmail还处在试用阶段时，他为了得到想要的Gmail邮箱地址竟然到易贝上去购买Gmail可遇而不可求的邀请码。欲望如此强烈的用户（这也可被当成一种疯狂）愿意忍受各种问题和麻烦带来的不便，但其他人却不会。为了优化激活，你既可以增强用户欲望也可以降低他们遇到的摩擦。不过，让产品更加完美通常比发现和消除摩擦更困难。换句话说，消除摩擦是垂得更低的果实，这也是为何许多最成功的增长团队在这个方面下了很大功夫。</p><p>但是，也许最大的摩擦点就是整个用户旅程的起点——新用户体验。</p><p>设计并优化新用户体验，首要原则是将其视为用户与产品的一次独一无二的邂逅。</p><p><strong> <span class="under0">第二个原则，新用户体验的第一个着陆页必须完成三个根本任务：传达相关性，展示产品价值和提供明确的行为召唤。</span></strong></p><p>并不存在一招鲜的增长手段。</p><p><strong> <span class="under0">要减少阻碍用户迅速体验“啊哈时刻”的摩擦，最大胆的做法是翻转漏斗（flipthefunnel）。也就是说，在邀请访客注册之前先让他们体验产品带来的乐趣。HelloBar（免费网站置顶通知工具）就利用这个策略极大地提升了激活率。利用HelloBar，网络营销团队可以轻松向网站访问者展示重要的即时信息。他们先让用户编写好HelloBar信息，等到一切就绪，也就是用户已经花时间创建好第一条个性化信息之后，公司才邀请用户注册。这将激活率提升了52.11%。</span></strong></p><p>优化激活中最看似矛盾的一点是，并非所有的摩擦都带来负面影响。不给任何背景或线索，直接以最快的速度将人们扔向产品并不总是最佳做法。有时，你需要设置一些积极的摩擦（positivefiction）。创造积极摩擦是一种微妙的艺术，你要把可控的，最好是令人着迷的环节放到访客面前，帮助他们明白产品价值，让他们带着更大的可预测性去体验“啊哈时刻”。电脑游戏开发者将这种方法发挥到了极致。让用户迷上新游戏特别困难，因为首先必须向他们介绍游戏规则（毕竟如果用户不知道怎样在游戏中获胜就永远体验不到“啊哈时刻”，也就体验不到游戏带来的乐趣）。很多游戏的玩法和战术都相当复杂。为了解决这个问题，游戏开发者从心理学研究中寻找灵感，设计出十分吸引人的游戏说明。</p><p>游戏开发者利用的关键研究之一来自心理学家罗伯特·西奥迪尼的商业经典著作《影响力：说服心理学》（Influence:ThePsychologyofPersuasion）。书中提到，许多研究都表明，<strong> <span class="under0">一旦人们采取行动，无论是多小的行动，只要不是太难，人们就会更倾向于未来继续采取行动。他对此的解释是，最初采取行动时人们在心理上做出了承诺，而且不管承诺的难度发生怎样的变化，人们倾向于在做出承诺之后通过后续行动来恪守承诺。游戏设计者精明地意识到，与其给用户提供游戏说明，不如先让他们做出承诺。他们需要通过一些简单的小步骤让用户开始游戏，让他们明白怎么玩并玩起来。</span></strong>游戏开发者还借鉴了心理学上许多其他强大的发现。一个是心理学上确立已久的原则：通过提供奖励可以训练人们条件反射式地做出某种行为；另一个是利用人们处在心流（flow）状态时感到的巨大满足感，这是心理学家米哈里·齐克森米哈里提出的理论。他指出，当人们面临的挑战难度刚刚好——没有困难到令人感到沮丧，但又没有简单到令人觉得无聊——这时人们就处在心流的状态。处在心流状态的人十分专注，他们可以忘掉时间的存在。比如，他们会一连三个小时作画、写文章或者进行App编程而感觉不到时间的流逝。当他们无意间抬头才吃惊地发现时间已经过去了那么久。如果你身边有爱玩游戏的人对你说过“再让我玩十分钟！”然后过去了无数个十分钟，你就会知道游戏玩家是多么容易进入心流状态。</p><p>游戏设计者在创造新用户体验时借鉴了这个智慧的洞见：先让玩家挑战一些能够被迅速攻克的简单任务，每过一关就给他们奖励，以此来让他们熟悉游戏规则和环境，慢慢使他们沉迷其中。设计者通过精心设计不断提高游戏难度和奖励力度（他们在两个方面都做了大量试验），让用户对游戏着迷，从而进入心流状态。这种方法不仅适用于电脑游戏，许多其他类型的在线产品的设计者在设计新用户体验时也采用了相同的策略，从而大幅提升了激活率。</p><p><strong> <span class="under0">人们放入产品的个人信息越多，他们对产品的忠诚度就会越高，这被称为储值（storedvalue）。就像把钱放进保险箱一样，将个人信息放进服务中会立刻让用户感到一种“所有权”，这让他们愿意继续增加并保有那个价值。</span></strong>所以尽管填写信息的提示可能是一个摩擦源，但如果操作得当——用奖励的方式通过行动逐渐提高用户承诺——摩擦也可以成为激活与增长的催化剂。</p><p>使用触发物有一个很重要的经验：接触用户的动机应该是提醒用户存在一个对他们明显有价值的机会。例如，商店App团队可以通过推送告知用户他们在购物清单中收藏的商品正在降价，或者现在有免运费的优惠活动，或者超市正在开展感恩节促销，这几类触发物对用户来说就是有价值的，因为它们契合了App的核心价值。但是，如果每周都向用户发送对他们来说不是特别有用的新产品或者产品功能介绍，就会很快惹怒用户，甚至令许多人停止接收推送或者直接把App从手机上删除。</p><p>有必要先回过头去简单温习一下如何建立用户的忠诚，让用户成为“回头客”。我们曾在第二章中讲到，<strong> <span class="under0">留住用户最根本的一点是提供可以持续满足用户需求或者令他们感到愉悦的优质产品或服务，让产品或服务对他们而言不可或缺。</span></strong></p><p>尽管公司的留存曲线一开始很平稳，但是出于各种原因，曲线可能下滑，这可能是因为市场上出现了竞争产品，或者竞争对手推出了新功能、启动新宣传从而抢走了用户。用户流失还有一个关键的原因，公司没有采用最佳的沟通方式与用户沟通，比如，没有传达正确信息，没有把握好传达频率，导致用户不能马上想到使用App并最终被竞争对手抢走。<strong> <span class="under0">公司失败还有可能是因为没有把握好建立用户忠诚的机会，没能让用户养成有规律的使用习惯或者让他们强烈感到自己受到重视并得到理解。又或者，公司提供的产品或服务已经不能满足用户新的迫切需求，或者用户找到了一种更方便也更令他们满意的方式来满足这种需求。</span></strong></p><p>印象笔记的留存图之所以看起来像微笑，本质上是因为这个服务的实用性会随着时间的推移而逐渐增强。用户使用印象笔记的时间越长，产品的核心价值就越大，因为对这个笔记软件而言，用户在里面存储的信息越多，他们回来查看想法和笔记、添加新内容的可能性就越大。</p><p><strong> <span class="under0">产品具有储存价值的公司在逐步提高留存率方面具有优势，但是，没有任何公司可以天真地以为用户会一直活跃地使用自己的产品，即使是那些具有先天优势的公司也不能这样。公司必须脚踏实地地努力改进产品或服务。想想脸谱网从诞生到现在推出了多少新功能和服务，又设计出了多少不同的推送和提示来让你一直使用这个服务。</span></strong>为了留住更多用户、让他们更积极地使用产品，脸谱网做了一系列努力，比如增加直播和上传视频，提醒用户分享他们最喜欢的球队新闻，告知用户他们与朋友在脸谱网上的周年纪念日到了，等等。任何公司都可以而且应该努力增加产品给用户带来的价值并逐渐提高用户参与度。</p><p>不同的留存阶段需要采用不同的留存方法。前面提到过的布莱恩·鲍尔弗强调，留存可分为三个阶段：初期、中期和长期。留存初期非常关键，因为这个阶段将决定用户是继续使用或者购买产品或服务还是使用一两次之后就“沉睡”。因此，初期留存率可以作为衡量产品黏性的一个指标。留存初期并没有一个统一的时间长度。对移动App来说留存初期可能是一天，对于社交网络来说可能是一周或者两周，对SaaS产品来说可能长达一个月甚至一个季度，对于电子商务公司来说留存初期通常是90天。你应该根据产品的行业标准以及你对用户行为的分析来决定产品的留存初期应该多长。</p><p>把这一阶段看成是激活过程的一部分可能更合理，但是，这样区分还是有意义的。对于许多产品来说，新用户需要在特定时间段内重复使用产品并从中获得新体验达到一定的次数才能强化他们对产品价值的认识。</p><p>一旦跨过留存初期，用户就进入留存中期阶段。</p><p>这时产品带来的新鲜感开始退去，要留住中期用户，增长团队的核心任务是让使用产品成为一种习惯，让用户逐渐从产品或服务中获得满足感，这样无须鼓动用户也会继续使用你的产品或服务，因为这已经成为他们日常生活的一个组成部分。Snapchat的用户在吃早饭或者吃完晚饭时常常翻阅朋友的动态，亚马逊用户想买东西的时候总会第一个想到去亚马逊上搜索，而根本无须鼓动。后面几节我们会介绍一些习惯养成方面的心理学知识，还会介绍一些策略来帮助增长团队提高初期留存用户转为习惯用户的比例。</p><p>在深入讲解如何提高各阶段留存之前，我们先要讨论增长团队需要跟踪哪些数据以及如何通过分析数据来寻找可尝试的增长手段。首先，不同的公司衡量留存的方法可能不同。这是因为用户购买产品或者使用服务的频率在很大程度上取决于产品或服务本身的性质。用户购买一些东西频率很高，但购买另一些东西频率却很低。</p><p><strong> <span class="under0">在设计留存指标时需要将你的计算结果与市场调研得出的同类产品或服务的最高留存率进行比较，或者与成功的竞争对手的留存率进行比较。这些基准可以告诉你用户留存是正常还是比预期更好或者更差。</span></strong>像Airbnb这样的公司永远不能指望用户使用率和留存率达到社交网站的水平，所以选择恰当的基准对于准确判断留存情况至关重要。</p><p>我们讨论的都是用户留存的情况，它的反面，也就是每周或每月流失的用户数量也同样关键。流失率本质上是留存率的对立面。比如，好市多（Costco）会员的留存率是91%，那么它每年的流失率就是9%。10一定程度的流失是不可避免的，即使最受用户喜爱的产品也是如此。但是，对于所有公司来说，流失率当然越低越好。</p><p>你可以将用户细分为不同类型的群组。最基本的做法是按照获客时间进行划分，也就是按用户完成注册或者第一次购买的日期来分类。通常是按月份分组，但正如前面所讲，对于某些类型的公司而言，按周甚至按天分组可能更有意义。这听上去十分烦琐，但它可以让团队发现留存方面存在的问题，所以一切辛苦都是值得的。按照获客时间来跟踪用户可以让团队掌握用户群的整体状况。随着营销力度的加大，现在获取的用户留存率是否与之前的用户一样高？如果公司成功地吸引大量新用户，这表明销售或者注册进展很顺利。这种情况下，如果不按获客时间来跟踪留存就不容易发现隐藏的流失。</p><p><strong> <span class="under0">按获客月份对用户进行分类只是群组分析的第一步。你还需要创建其他类型的群组，例如按照获客渠道来划分群组，如用户推荐计划群组和付费广告群组等。还可以根据用户访问网站的次数或者购买次数来分类。</span></strong>对于视频流服务增长团队而言，还可以按照用户在第一个月内观看节目的数量或者电视剧的集数，或用户在第一个月内观看视频的天数来分类。用这种方式分析数据可以让增长团队找到使用频率与留存率之间的关联，同时还能帮助他们找到可以带来更高留存率的电影或者视频节目。</p><p><strong> <span class="under0">分析完群组数据，找到初期留存中的流失节点并且通过调研确定了流失的原因，增长团队就可以开始试验破解的方法。用于改善初期留存的增长手段与改善激活的增长手段本质上是一样的，因为前者其实是后者的一种延伸。不断优化新用户体验，让用户尽可能快地体验到产品核心价值是这一阶段最重要的两大策略。</span></strong>使用移动推送和邮件这样的触发物也能够有效强化用户对产品实用性和价值的认识。但是，正如我们在上一章中所讲，留存初期增长团队不应该只想着靠触发物来唤回用户，团队还应该关注产品的用户体验以及进一步改进产品这两个方面。</p><p><strong> <span class="under0">留存中期的核心目标是让用户养成使用产品的习惯，从而巩固用户对产品的忠诚度。对于一些产品而言，这意味着让用户习惯每天或者每周使用产品，但对另一些产品而言，用户使用产品的频率可能低到不足以称之为“习惯性”。这里，“习惯性”这个词与使用频率无关，只是单纯地用它来表达当用户想买或者想使用某一类产品或服务时，他们会第一个想到你而不是你的竞争对手，换句话说，他们是忠诚于你的。</span></strong></p><p><strong> <span class="under0">让用户形成习惯关键在于让他们确信继续使用你的产品或服务能带给他们持久的回报。</span></strong></p><p>在《上瘾》这本书中，消费者行为专家尼尔·埃亚尔介绍了最富吸引力的产品是如何做到这一点的。尼尔在他的上瘾模型（见图7–4）中描述了这个过程，这在增长黑客中被称为参与回环（engagementloop）。</p><p>要明白习惯是如何形成的，可以想一想人们去健身房健身的心理。人们一开始决定要保持身材时往往需要外部刺激来帮助他们完成健身的心理建设，比如在日历上勾画日期或者坚持完成与教练或朋友定下的锻炼计划。但一旦人们从健身中获得足够多的回报——感觉身体更健康、发现自己肌肉更紧实、体重下降等——许多人就不再需要这种外部提示了。</p><p><strong> <span class="under0">订购费的意义“绝不仅仅是99美元。它真正的意义在于改变人们的心理，让他们不去别的地方购物。”</span></strong></p><p>AmazonPrime的参与回环很明确，而且重复使用还能不断强化循环，这也是Prime如此成功的原因。当然，这个模式并非对所有人都适合。增长团队应该根据产品的核心价值绘制自己的参与回环，然后不断衡量、监测和优化循环。通过分析数据并且试验能给用户带来最大回报的触发物，团队就可以为自己的产品找到创造习惯的方法。</p><p>一个对大多数类型的产品都适用的原则是：提升回报在用户眼中的价值可以带来更大的留存。要让产品或者服务更易于形成习惯，增长团队应该试验向用户提供各种各样的回报，并鼓励他们通过行动来获取回报。用户采取的行动越多，回报越大，他们眼中看到的回报价值也就越大。<strong> <span class="under0">团队应该进行群组分析，找出哪些用户最热衷于使用产品，他们使用最多的是哪些功能，哪些功能带来最大价值的回报，创造最高的留存。团队还应该找出那些还不够活跃的用户，通过给他们提供更有吸引力的回报来激励他们更多使用产品。</span></strong></p><p><strong> <span class="under0">提供实际的、体验式的回报。</span></strong>许多流行的回报策略都强调让顾客去“赚”节约的钱，或者给他们发购物券、代金券或者礼物。特别是零售业，长期以来这个行业已经积累了许多这样的回报策略。这些回报很强大，团队也确实应该在这方面大量开展试验。<strong> <span class="under0">但很重要的一点是，团队不应把目光局限在金钱或者省钱这样的回报上，而是应该试验产品体验这种回报。实际上，一些最易于习惯形成的回报是无形的回报。这类回报中有不少值得试验。</span></strong>比如社交回报，脸谱网的“点赞”功能就在很大程度上促使发照片和评论成为用户的一种习惯。同理，飞行常客奖励计划很早就开始使用诸如会员升级、贵宾休息室和优先值机这样的社交回报，而且它们相比折扣机票更能让用户保持忠诚。团队应该创造性地思考可以提供什么样的无形回报，而且还应该试验将实际回报和体</p><p><strong> <span class="under0">所有用户都看重来自公司的认可，哪怕只是很小的认可。对用户表达认可的最佳方式是肯定他们的某种成就或行为，或者使用营销圈中称为“行为邮件”（behavioralemail）的方式，也就是当用户完成了一个里程碑事件时就给他们发去祝贺邮件。</span></strong>比如当你走到当日第一万步时，Fitbit（一家研发和推广健康乐活产品的新兴公司）就会给你发一条祝贺推送。又如，当你跑完10英里或者完成距离最长或速度最快的一次跑步时，Runkeeper（一款私人运动记录应用）就会给你发送祝贺邮件。同样，推特的联合创始人埃文·威廉姆斯创办的博客发布平台Medium会在用户文章被推荐50次或100次时向用户发送邮件。大多数推荐计划都内设了这样的成就推送，一旦朋友加入时就会向用户发送邮件，鼓励他们邀请更多人加入。</p><p>客户关系个性化随着储存用户信息的海量数据库和强大的数据分析工具的出现，公司更精准，甚至一对一地满足用户需求和欲望的能力大幅提升。沃尔玛实验室（WalmartLabs）产品和工程部副主席舒维克·慕克吉指出，公司在增长领域最重要的一个转变是从传统的“一对多”营销思维模式转变为提供完全个性化的“一对一”的用户体验。比如，现在公司可以根据每位用户的喜好发送个性化邮件和产品推荐，即使用户数量达到几百万也能做到这一点。他指出，这种大规模的个性化做法核心在于“理解用户，理解你所处的行业，并确保在二者之间建立完美的匹配”。</p><p><strong>如果你购买过任何初始版本的电子产品，或者参与过挑选诸如Salesforce或者Oracle这样的企业软件，那么你肯定知道向用户承诺新功能即将上市是一个多么强大的留存诱饵。告诉用户马上会有新功能或者新产品以及这能给他们带来什么好处，可以有效地诱导用户一直使用产品。但是，如果你对用户承诺很快就会有很棒的产品更新，却让他们一等再等，就可能惹怒用户。这也是为何试验如此重要：它可以帮助团队确定公布消息的最佳时机。</strong></p><p>复活流失用户的大部分工作是靠邮件和广告来完成的。</p><p>复活这类“冷淡”用户似乎是次要问题。毫无疑问，如果留存不乐观，你首先关注的应该是新用户的初始留存。但记住，每一位最终留住的用户都代表了可以持续为公司创收的机会，所以复活的努力是有价值的。现在，为了仔细研究如何在改善留存之后最大化地利用机会赚取更多收入，我们需要探讨增长黑客怎样帮助公司从每一位用户身上获得更大的收益。</p><p>公司的商业模式不同，提高用户终身价值的基本做法也不同。对于零售公司而言，提高用户变现能力的根本途径是说服他们购买更多产品，而对SaaS公司而言，是让更多订购者续订、延长订购年限和升级到价格更贵的服务（如果是免费+增值服务则是让更多用户升级到付费计划）。如果你的收入来源是销售广告版面，那么增加创收本质上是要创造更多广告位并且说服更多广告主出更高价钱来购买你的广告位。每种商业模式会使用不同的策略，但是无论哪种情况，增长团队都应该首先通过一个最基本的诊断过程来提出增收的试验想法。</p><p><strong> <span class="under0">确定了基本路线路图中的重要环节之后，下一步是分析哪些环节带来的收益最高，哪些环节是夹点（pinchpoints），也就是损失潜在收益的地方。商业模式不同，夹点出现的地方也会不同。</span></strong>增长团队在找出产品、网站或者App上有很高创收价值的页面和功能后就可以开始试验增收手段。同时团队还要找出转化率低、摩擦阻力大的夹点，进而找出填补收益漏洞的方法。</p><p>对SaaS公司而言，可能分析结果显示，免费试用注册到付费订购之间是一个夹点。通过深度分析流失原因，团队发现，在免费试用阶段没有使用某个特定功能的用户比那些使用了该功能的用户购买利润丰厚的企业计划的可能性小了一半。因此，团队可能决定重点试验提高使用该功能的试用者比例，进而提高试用期结束后购买付费计划的人数。</p><p>增长团队还应该通过调查问卷直接向用户了解每个关键群组最希望看到的产品改进，比如，他们希望使用哪些可能的新功能、哪些新的计划档位或者希望如何改进特价商品的可选范围。毫无疑问，增加营收的核心在于向用户提供让他们觉得很有吸引力而且最能满足他们需求的产品和服务。当然，不同群组的需求也会不同。</p><p><strong> <span class="under0">无论你试图变现何种产品，在为用户提供选择时需要确保定价与产品价值相匹配。包括软件产品在内的一些产品通常是按需付费，也就是按照使用量来付费。</span></strong>例如，HubSport的营销软件按照存储在它的数据库中的联系人人数来收费，因为这是衡量用户对服务的使用量以及他们从中获得价值的一个理想衡量指标。试想，如果HubSport按照每家公司注册的用户账号数量来收费，那么很可能出现的情况是，公司只注册一两个账号，然后公司员工共享这些账号。这就意味着HubSpot赚取的收益与产品使用量完全失衡。</p><p>坎贝尔建议在确定你的价值度量之前先问自己三个问题。<br>　　1.这个价值度量是否与用户看到的价值相匹配？<br>　　2.这个度量是否会随着用户对产品使用量的增加而增加？<br>　　3.这个度量是否易于理解？</p><p>增长团队与管理层一起设计定价实验时应该考虑长期以来经过实践和研究确立的定价原则。其中一个原则叫作定价相对论（pricingrelativity），也就是人们对于价格高低的判断会受到其他价格选项的影响。丹·艾瑞里在他的名作《怪诞行为学》（PredictablyIrrational）中描述了一项实验，<strong> <span class="under0">实验表明，消费者愿意付多少钱在很大程度上受到价格选项组合的影响。</span></strong></p><p>然后他去掉中间选项，也就是只包含纸质版的那个选项（前一个实验中没有人选择这个方案），重新找来100个学生在剩下的两种方案中进行选择，结果令他大吃一惊：68%的学生（之前只有16%）选择第一种价格更低、只包含网页版的方案。为什么？因为之前的中间选项让潜在用户能够轻松对比每种方案的价值，这让许多人觉得第三种方案其实是免费赠送网络版杂志——这太划算了！于是他们选择了价格更高的订阅方案。<strong> <span class="under0">中间这个选项有时被称为烟幕弹套餐（decoypackage），它是驱使用户购买价位更高产品的利器。</span></strong> 这个例子给我们的启示是：团队应该试验增加一个产品选项，利用定价来帮助用户更好地了解你向他们出售的产品和计划的相对价值。</p><p><strong> <span class="under0">你希望提高用户购买量时可能会有强烈的降价冲动。低价确实常常能够带来更高的销量，但其实并非总是如此。有时，降价甚至会损害销售，或者至少不像你期望的那样增加需求量。因此，在面向所有用户调低价格之前首先进行降价试验十分必要。</span></strong></p><p>你销售的可能既不是网络服务也不是技术产品，但关键问题却是一样的：用户并不像你想象中那样对价格很敏感。增长黑客提供了一个简单易行的方法来帮助你判断用户对价格的敏感度。这不仅可以用于为你出售的产品和服务定价，也可以用于为激励用户采取行动而提供的折扣。英曼的增长团队为了鼓励用户完成支付过程，针对那些在结算中途放弃购买的用户试验25%的限时折扣，果然，相比没有提供任何优惠的情况，折扣极大地促进了销售，将成功下单的用户比例提高了39%。接下来团队又进行了另一个试验，将折扣从25%降为10%。结果，尽管折扣力度减小了，但是下单用户的增长率基本上没有发生变化。因此，团队通过提供一个更小的折扣就将注册过程的创收提高了18.9%。</p><p>诺贝尔心理学奖获得者丹尼尔·卡尼曼专门研究行为心理学并且写了大量相关著作，在<strong> <span class="under0">《思考，快与慢》（Thinking,FastandSlow）</span></strong>这本书中，他分享了许多有关消费者行为的心理学发现。同样，经济学家丹·艾瑞里在他的著作<strong> <span class="under0">《怪诞行为学》</span></strong>中提到的消费者购买决策方面的实验令人大开眼界，比如我们之前讲到的《经济学人》订阅计划就出自这本书。还有一本讲消费者如何做出选择的书也很棒，书名叫作<strong> <span class="under0">《选择的艺术》（TheArtofChoosing）</span></strong>，作者是选择心理学领域的世界级专家席娜·伊加尔。这里篇幅有限，我们无法深入探讨这些研究者（以及许多在这个领域有影响力的其他专家）关于消费者行为方面的所有发现，但我们建议读者阅读这些书籍以便更好地了解消费者心理</p><p>在利用承诺和一致原则时你可以先让用户先许下一个小的承诺，然后引导他们之后完成更大金额的购买行为，从而增加收入。亚马逊的心愿单功能就利用了这个原则。他们知道，如果用户将书籍或者其他商品加入心愿单，那么他们购买这个商品的可能性就很大，因为用户已经承认自己有想要购买的愿望。又比如，如果你向最近在你的网站上购买过商品的用户及时发送信息并向他们提供新的优惠，用户就可能再一次下单，从而提高整体购买量，因为他们希望与先前的购买决定保持一致。即使你只是简单地询问用户以后是否还会在你的网站上购买商品，也有可能带来额外的线下购买行为。</p><p><strong> <span class="under0">使用稀缺性作为刺激购买的策略是要触发用户害怕错过的心理。你可以试验限定促销时间，当商品只有几件库存时显示剩余数量，限制预约咨询顾问的机会，或者限定可以获得特价商品的人数等做法。如果商品马上就要售罄，或者很难买到，或者特价马上就要结束，或者顾客因为这样或那样的原因可能错失机会，那么商品被销售出去的可能性比其他任何情况都要大。</span></strong></p><p><strong> <span class="under0">驱动增长的工作永远处在进行时。实现爆发式增长的公司是那些不断突破自我、利用现有成功、把握新机遇并且创造良性增长循环的公司。</span></strong></p><p>无论你的增长团队是5人还是500人，无论你的公司市值高达数百万美元还是刚刚起步，你都可以效仿脸谱网的做法，持续并且不遗余力地使用新方法在各个方面展开试验，驱动增长。</p><p><strong> <span class="under0">对市场变化反应不够灵敏是想实现长远成功的公司面临的最大威胁。</span></strong></p><p>但研究表明，通常这些停滞并不是由刚进入市场的大胆竞争者或具有破坏性的创新导致的。<strong> <span class="under0">真正的原因是公司长时间疏于监测用户满意度，也没有积极地去发现用户不满的早期迹象。通常，用户忠诚度下降已经持续好几年，但公司却浑然不觉，等到发现的时候已经太晚。</span></strong></p><p><strong> <span class="under0">另一方面，如果公司没有专注自身的核心产品或服务，而将精力用在推出吸引人眼球的新产品、附加扩展功能或者进军新市场上，那么这也会带来增长停滞。人才的流失也会引发停滞，比如那些对驱动增长至关重要的明星人物投奔了竞争对手，让组织机制不再完备，或者公司因为失去他们的远见卓识和鞭策而无法继续维持强劲的增长。</span></strong></p><p>记住，<strong> <span class="under0">增长停滞往往发生在公司最没有防备的时候。</span></strong>我们建立过GrowthHackers.com，所以我们非常了解偏离增长航线的后果。</p><p><strong> <span class="under0">增长团队开始滋生自满情绪还有一个原因，可能他们觉得增长杠杆的潜力已经被挖掘殆尽，无法再带来新的增长。但是，在开始实施新计划之前，团队应该强迫自己再去寻找新的方法，以最大限度地利用已经成功了的渠道和策略。团队如果不拿出决心创造更大的成功就会浪费很多增长潜力。</span></strong></p><p>增长团队还有可能（错误地）认为，他们已经充分挖掘了整个数据池的潜力，所以增长杠杆已经不能继续带来增长。如果是这种情况，团队就必须考虑投入时间和金钱创建一个更加全面的数据库来提升团队的分析能力，正如我们在前面所建议的那样。可能你还记得，脸谱网的增长团队在开启增长黑客过程大约一年后停止了所有的试验，在2009年1月用了整整一个月的时间改善他们的分析监测，这使得团队能够进行更加精细、更加强大的数据分析。他们之所以这样做是因为团队的增长想法越来越少。通过在深度分析上做投资，团队能够更好地监测和衡量脸谱网用户如何在网站上从一个网页跳到另一个网页。这些新数据帮助团队找到大量新的潜在试验，从而刺激增长，促进公司的发展更上一层楼。</p><p><strong> <span class="under0">要判断哪些数据值得深挖，增长团队首先应该回顾顾客和用户在到达产品的“啊哈时刻”之前需要完成的主要任务和途径。对于每一个关键任务和体验，增长团队需要找出数据缺失的地方或者数据相对稀薄或者粗糙的地方，然后加固数据。</span></strong></p><p>想要追逐更大增长的公司面临的最大挑战是如何摆脱目前成功的做法带来的思维禁锢——“只要没坏就不用修理”的思维模式。增长团队能够极大地帮助公司打破思维禁锢，突破这种思维定式，寻找更好的做法。</p><p><strong> <span class="under0">第一步，最好是测试已经获得成功的产品、功能或者营销策略的关键设计，看看能否对它们进行实质的改进。团队一开始可以从小处着手，先试验重新设计那些似乎已经最优化的功能或界面，看看能否让它变得更有效。你可以把它当作超越局部最大值（localmaximum）原则。</span></strong>局部最大值被定义为某个区域中的最高点，但又不是全局最高点。例如，在一年的时间里试验同一个定价页面能够让你找到那个定价页面效果的局部最高点。但是要实现更大的成效，团队应该试验完全不同的定价页面风格。超越局部最高点对于持续推动新增长十分关键。</p><p><strong> <span class="under0">第二步，增长团队应该定期进行更大胆的创新试验，而不只是局限在优化方面。这些不着边际的做法是公司最好的护身符，可以帮助它们避免常常导致增长停滞的渐进式创新。当然，这些大的改动通常需要更长的准备时间。最好的做法是在两次渐进式的优化之间引入一次大动作。</span></strong>Pinterest的Copytune机器学习优化软件就超越了简单的A/B测试，从而捕获数以百万计的新用户。同样，优步决定大胆测试推出固定单次乘车价格的服务，而不是像原来那样按照乘车需求来调价（本书写就时这一版本的测试仍只限于旧金山地区），就是一个超越其他增长试验的值得称赞的做法。定期进行这样大胆的试验十分必要。如果这些大的改动与持续的优化努力保持步调一致的话，将会带来飞跃式的增长。</p><p><strong> <span class="under0">我们相信增长黑客法远不只是一种商业战略，甚至也不是一个持续过程。它是一种哲学、一种思维方式，而且它能被任何规模的任何公司和团队所采用。</span></strong></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何接受记者采访</title>
      <link href="/2020/06/13/How-to-be-interviewed/"/>
      <url>/2020/06/13/How-to-be-interviewed/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>前阵子回答的<a href="https://www.zhihu.com/question/397996581/answer/1253675432" target="_blank" rel="noopener">如何看待成都放开摆地摊，两个月增加 10 万多就业？地摊经济的价值有多大？可以复制吗？ - Sail的回答 - 知乎</a>, 被不少人所关注。</p><p>近来有很多网友咨询我怎么摆摊，怎么卖冰粉。<strong>很多我都是不作回复的，倒不是无可奉告:一则是因为咨询我的人太多了，更主要的是大家摆摊的动机、所处的环境都不相同，所以经验是不可靠的。相信有不少人，都是空有摆摊的冲动。我所能给的一点建议就是躬身入局，亲自出去摆摊一周体验下。</strong></p><p><img src="/img/杂文/How-to-be-interviewed/2.jpg" alt="2.jpg"></p><p>此外，我和女朋友最近也接受了一些采访，前前后后接触了七八位记者，倒是可以分享下接受采访的一些经验。</p><hr><h3 id="采访注意事项"><a href="#采访注意事项" class="headerlink" title=" 采访注意事项 "></a><strong> 采访注意事项 </strong></h3><p>当记者联系上你后，<span class="under0"> <strong> 需要做的第一件事情，是确定记者身份。</strong> </span>这里你需要让记者出示他的记者证。</p><p>不过有一点大家可能不清楚，不是所有的媒体工作者都有记者证。我找了网上的一些数据:<strong> 截至2017年底，共有231564人持有国家新闻出版广电总局发放的具有采访资质的新闻记者证 </strong>。前阵子听一位记者朋友科普，目前中国只有17万左右的人有记者证。</p><p>这两个数据谁更准确作者不做考证，但可以得出结论:目前中国有记者证的人很少。<span class="under0"> <strong>  为什么只有这么少的人有记者证：记者证只能由新闻出版总署以及广电总局认定。其中新闻单位(纸媒媒体，包括报社、杂志社等单位)向新闻出版总署申请的,新闻单位(广播电视媒体，包括电台电视台等单位)向广电总局申请。</strong> </span>只有在新闻单位工作，工作满一定年限，才能由单位根据名额分配去替你申领新闻记者证。</p><p>倘若采访你的记者没有记者证，那么你需要让出一个《采访函》来证明其身份。如下图所示:</p><p><img src="/img/杂文/How-to-be-interviewed/1.png" alt="1.png"></p><p>在确定了记者身份无误后，接下来就是采访相关的环节。</p><p><strong> 特别重要的一点是需要和记者约定【终稿和标题必须由你确认没有问题了才能发】。</strong>这一点我觉得是接受采访的前提。有一位伟人曾经也说过，【将来报道出了偏差，你们可是要负责任的】。作为被采访者我们可以做的就是在源头控制搞出大新闻的风险。</p><p>另外如果你还在某公司任职或者某高校在读，或许还需要和记者约定【不可以涉及到任何和公司/学校有关的信息】</p><p>如果担心采访对你的生活造成影响，需要和记者明确你需要根据终稿内容决定是否使用真名。</p><p>最后，如果有你有希望报道可以提到的地方(比如借机会做个宣传等)，可以提前和记者商量下，你期望在稿子里提到的地方。</p><hr><h3 id="最后"><a href="#最后" class="headerlink" title=" 最后 "></a><strong> 最后 </strong></h3><p>贴一下别人采访我们的几篇报道:</p><ul><li><a href="https://mp.weixin.qq.com/s/DgNH-vsfNJC9-5dHr6e2Tg" target="_blank" rel="noopener">何以为摊</a></li><li><a href="https://mp.weixin.qq.com/s/jTJyxHUuSzx2iFdWpaTcNw" target="_blank" rel="noopener">地摊流量战</a></li><li><a href="https://page.om.qq.com/page/Otyeb5RDjFH1w124X1CLTELQ0?from=groupmessage&amp;ADTAG=tgi.wx.share.message" target="_blank" rel="noopener">成都摊贩的3个月：百米街道最多时挤下十家冰粉摊，为抢摊位提前2小时出摊</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 摆摊 </tag>
            
            <tag> 冰粉 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不再为正则烦恼</title>
      <link href="/2020/05/23/regular-expressions-without-trouble/"/>
      <url>/2020/05/23/regular-expressions-without-trouble/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>有不少朋友都为写正则而头疼，不过笔者早已不为正则而烦恼了。本文分享一些我处理正则表达式的一些经验。全文分为正则利器，正则基础内容，正则进阶内容三个大块。</p><hr><h3 id="正则利器"><a href="#正则利器" class="headerlink" title=" 正则利器 "></a><strong> 正则利器 </strong></h3><p>首先推荐两个正则工具利器——分别是<a href="https://regex101.com/" target="_blank" rel="noopener">regex101</a>(一个正则在线检验工具), <a href="https://jex.im/regulex/" target="_blank" rel="noopener">Regulex</a>(一个正则可视化工具)。这两个工具，可以大幅减小写正则的难度。做一个简单的演示,<strong> 比如常见的密码校验: 密码需要6位至18位，且只能为数字，字母，以及特殊字符,.* </strong></p><p>先使用<code>Regulex</code>来在线编写正则。借助其将正则图形化的功能，我们很容易来修改调整自己的正则。<br><img src="/img/正则表达式/regular-expressions-without-trouble/1.png" alt="1.png"></p><p>当通过<code>Regulex</code>工具写完正则过后，可以使用<a href="https://regex101.com/" target="_blank" rel="noopener">regex101</a>来检查自己写的正则是否正确，以及匹配结果<br><img src="/img/正则表达式/regular-expressions-without-trouble/2.png" alt="2.png"></p><p>当上面两个流程走通过后，意味着该正则是符合我们需求且正确无误的，就可以迁移入代码中啦。</p><hr><h3 id="手撕正则"><a href="#手撕正则" class="headerlink" title=" 手撕正则 "></a><strong> 手撕正则 </strong></h3><p><strong><span class="under0"> 关于正则的相关知识，我强烈推荐这篇文章<a href="https://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html" target="_blank" rel="noopener">正则表达式30分钟入门教程</a>。</span></strong>接下来我会将正则内容与JavaScript穿插起来讲。</p><h4 id="JS创建正则表达式"><a href="#JS创建正则表达式" class="headerlink" title=" JS创建正则表达式 "></a><strong> JS创建正则表达式 </strong></h4><p>在JS里有两种创建正则表达式的方式，分别是字面量和调用<code>RegExp</code>对象的构造函数。<br>使用一个正则表达式字面量，其由包含在斜杠之间的模式组成，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="regexp">/ab+c/</span>;</span><br></pre></td></tr></table></figure></p><p>脚本加载后，正则表达式字面量就会被编译。当正则表达式保持不变时，使用此方法可获得更好的性能。</p><p>或者调用<code>RegExp</code>对象的构造函数，如下所示：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> re = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"ab+c"</span>);</span><br></pre></td></tr></table></figure></p><p>在脚本运行过程中，用构造函数创建的正则表达式会被编译。<strong> 如果正则表达式将会改变，或者它将会从用户输入等来源中动态地产生，就需要使用构造函数来创建正则表达式。</strong><br>总结一下，两种模式语法如下:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">/pattern/flags</span><br><span class="line">new RegExp(pattern [, flags])</span><br><span class="line">RegExp(pattern [, flags])</span><br><span class="line"></span><br><span class="line">参数如下:</span><br><span class="line">pattern</span><br><span class="line">    正则表达式的文本。</span><br><span class="line"></span><br><span class="line">flags</span><br><span class="line">    如果指定，标志可以具有以下值的任意组合：</span><br><span class="line"></span><br><span class="line">    g</span><br><span class="line">    全局匹配;找到所有匹配，而不是在第一个匹配后停止</span><br><span class="line">    </span><br><span class="line">    i</span><br><span class="line">    忽略大小写</span><br><span class="line">    </span><br><span class="line">    m</span><br><span class="line">    多行; 将开始和结束字符（^和$）视为在多行上工作（也就是，分别匹配每一行的开始和结束（由 \n 或 \r 分割），而不只是只匹配整个输入字符串的最开始和最末尾处。</span><br><span class="line">    </span><br><span class="line">    u</span><br><span class="line">    Unicode; 将模式视为Unicode序列点的序列</span><br><span class="line">    </span><br><span class="line">    y</span><br><span class="line">    粘性匹配; 仅匹配目标字符串中此正则表达式的lastIndex属性指示的索引(并且不尝试从任何后续的索引匹配)。</span><br><span class="line">    </span><br><span class="line">    s</span><br><span class="line">    dotAll模式，匹配任何字符（包括终止符 &apos;\n&apos;）。</span><br></pre></td></tr></table></figure></p><p>上面参数提到的全局匹配，粘性匹配的知识在本文后面将做细致的讲解。</p><hr><h3 id="基础知识"><a href="#基础知识" class="headerlink" title=" 基础知识 "></a><strong> 基础知识 </strong></h3><p>这里先了解一些基础的正则知识，不做过多的讲解。</p><p><strong>常用元字符</strong></p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>.</td><td>匹配除换行符以外的任意字符</td></tr><tr><td>\w</td><td>匹配字母或数字或下划线或汉字</td></tr><tr><td>\s</td><td>匹配任意的空白符</td></tr><tr><td>\d</td><td>匹配数字</td></tr><tr><td>\b</td><td>匹配单词的开始或结束</td></tr><tr><td>^</td><td>匹配字符串的开始</td></tr><tr><td>$</td><td>匹配字符串的结束</td></tr></tbody></table><p><strong>常用限定符</strong></p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>*</td><td>重复零次或更多次</td></tr><tr><td>+</td><td>重复一次或更多次</td></tr><tr><td>?</td><td>重复零次或一次</td></tr><tr><td>{n}</td><td>重复n次</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,m}</td><td>重复n到m次</td></tr></tbody></table><p><strong>常用的反义代码</strong></p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>\W</td><td>匹配任意不是字母，数字，下划线，汉字的字符</td></tr><tr><td>\S</td><td>匹配任意不是空白符的字符</td></tr><tr><td>\D</td><td>匹配任意非数字的字符</td></tr><tr><td>\B</td><td>匹配不是单词开头或结束的位置</td></tr><tr><td>[^x]</td><td>匹配除了x以外的任意字符</td></tr><tr><td>[^aeiou]</td><td>匹配除了aeiou这几个字母以外的任意字符</td></tr></tbody></table><h4 id="JS里的一些正则函数"><a href="#JS里的一些正则函数" class="headerlink" title=" JS里的一些正则函数 "></a><strong> JS里的一些正则函数 </strong></h4><p>在 JavaScript中，正则表达式也是对象。这些模式被用于 <code>RegExp</code> 的 <code>exec</code> 和 <code>test</code> 方法, 以及 <code>String</code> 的 <code>match、matchAll、replace、search</code> 和 <code>split</code> 方法。</p><h4 id="test"><a href="#test" class="headerlink" title=" test "></a><strong> test </strong></h4><p>test() 方法执行一个检索，用来查看正则表达式与指定的字符串是否匹配。返回 true 或 false。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'hello world!'</span>;</span><br><span class="line"><span class="keyword">var</span> result = <span class="regexp">/^hello/</span>.test(str);</span><br><span class="line"><span class="built_in">console</span>.log(result); </span><br><span class="line"><span class="comment">// true</span></span><br></pre></td></tr></table></figure><h4 id="exec"><a href="#exec" class="headerlink" title=" exec "></a><strong> exec </strong></h4><p><code>exec()</code> 方法在一个指定字符串中执行一个搜索匹配。返回一个结果数组或 null。</p><p><span class="under0"> <strong> 在设置了 <code>global</code> 或 <code>sticky</code> 标志位的情况下（如 /foo/g or /foo/y），<code>JavaScript RegExp</code> 对象是有状态的。他们会将上次成功匹配后的位置记录在 <code>lastIndex</code> 属性中</strong></span> 。使用此特性，<code>exec()</code> 可用来对单个字符串中的多次匹配结果进行逐条的遍历（包括捕获到的匹配），而相比之下， <code>String.prototype.match()</code> 只会返回匹配到的结果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> regex1 = <span class="built_in">RegExp</span>(<span class="string">'foo*'</span>, <span class="string">'g'</span>);</span><br><span class="line"><span class="keyword">const</span> str1 = <span class="string">'table football, foosball'</span>;</span><br><span class="line"><span class="keyword">let</span> array1;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span> ((array1 = regex1.exec(str1)) !== <span class="literal">null</span>) &#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`Found <span class="subst">$&#123;array1[<span class="number">0</span>]&#125;</span>. Next starts at <span class="subst">$&#123;regex1.lastIndex&#125;</span>.`</span>);</span><br><span class="line">  <span class="comment">// expected output: "Found foo. Next starts at 9."</span></span><br><span class="line">  <span class="comment">// expected output: "Found foo. Next starts at 19."</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>上面提到了正则表达式的<code>global</code>和<code>sticky</code> 两种模式，这里我详细讲下这两种模式。</p><h4 id="全局模式"><a href="#全局模式" class="headerlink" title=" 全局模式 "></a><strong> 全局模式 </strong></h4><p><code>global</code>这里是指<strong><span class="under0">全局匹配——找到所有匹配，而不是在第一个匹配后停止</span></strong>。用前面提到的密码正则<code>^[\da-zA-Z,.*]{6,18}$</code>来举个例子：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># 非全局模式</span><br><span class="line"><span class="keyword">var</span> keyword = <span class="string">'2020myTestkeyword,'</span>;</span><br><span class="line"><span class="keyword">var</span> reg = <span class="regexp">/^[\da-zA-Z,.*]&#123;6,18&#125;$/i</span>;   <span class="comment">// (i , 忽略大小写)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(keyword)); <span class="comment">// 输出0 true  </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(keyword)); <span class="comment">// 输出0 true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(keyword)); <span class="comment">// 输出0 true </span></span><br><span class="line"><span class="built_in">console</span>.log(reg.lastIndex, reg.test(keyword)); <span class="comment">// 输出0 true </span></span><br><span class="line"></span><br><span class="line">---------------------</span><br><span class="line"></span><br><span class="line"># 全局模式</span><br><span class="line"><span class="keyword">var</span> keyword = <span class="string">'2020myTestkeyword,'</span>;</span><br><span class="line"><span class="keyword">var</span> regG = <span class="regexp">/^[\da-zA-Z,.*]&#123;6,18&#125;$/ig</span>;   <span class="comment">// (i , 忽略大小写)</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(regG.lastIndex, regG.test(keyword)); <span class="comment">// 输出0 true</span></span><br><span class="line"><span class="built_in">console</span>.log(regG.lastIndex, regG.test(keyword)); <span class="comment">// 输出18 false</span></span><br><span class="line"><span class="built_in">console</span>.log(regG.lastIndex, regG.test(keyword)); <span class="comment">// 输出0 true</span></span><br><span class="line"><span class="built_in">console</span>.log(regG.lastIndex, regG.test(keyword)); <span class="comment">// 输出18 false</span></span><br></pre></td></tr></table></figure><p>上面的两段代码可以看到在全局模式下，正则的匹配结果为，true和false依次交替。这是因为: <strong> 在全局匹配模式下可以对指定要查找的字符串执行多次匹配。每次匹配使用当前正则对象的<code>lastIndex</code>属性的值作为在目标字符串中开 始查找的起始位置。<code>lastIndex</code>属性的初始值为0，找到匹配的项后lastIndex的值被重置为匹配内容的下一个字符在字符串中的位置索引，用来标识下次执行匹配时开始查找的位置。如果找不到匹配的项<code>lastIndex</code>的值会被设置为0。当没有设置正则对象的全局匹配标志时<code>lastIndex</code>属性的值始终为0，每次执行匹配仅查找字符串中第一个匹配的项。</strong> <code>lastIndex</code>, 是一个可读可写的属性。需要特别注意是的，如前所述，正则表达当指定了g(全局匹配)或者y(粘性匹配)，均会有这个效果。</p><p>全局匹配的一个使用场景——循环遍历,获取所有匹配。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> result = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">while</span> ((result = globalre.exec(str)) != <span class="literal">null</span>)</span><br><span class="line">&#123;</span><br><span class="line"><span class="built_in">console</span>.log(result[<span class="number">0</span>]);</span><br><span class="line"><span class="built_in">console</span>.log(globalre.lastIndex);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>当然使用<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/String/matchAll" target="_blank" rel="noopener">matchAll()</a>方法也可以实现该效果，这里不再赘述。</p><hr><h4 id="粘性匹配"><a href="#粘性匹配" class="headerlink" title=" 粘性匹配 "></a><strong> 粘性匹配 </strong></h4><p><code>sticky</code> 属性反映了搜索是否具有粘性（ 仅从正则表达式的 lastIndex 属性表示的索引处搜索 ）。<code>sticky</code>是正则表达式对象的只读属性。<code>sticky</code> 的值是 Boolean ，并在“y”标志使用时为真; 否则为假。<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> str = <span class="string">'#foo#'</span>;</span><br><span class="line"><span class="keyword">var</span> regex = <span class="regexp">/foo/y</span>;</span><br><span class="line"></span><br><span class="line">regex.lastIndex = <span class="number">1</span>;</span><br><span class="line">regex.test(str); <span class="comment">// true （译注：此例仅当 lastIndex = 1 时匹配成功，这就是 sticky 的作用）</span></span><br><span class="line">regex.lastIndex = <span class="number">5</span>;</span><br><span class="line">regex.test(str); <span class="comment">// false （lastIndex 被 sticky 标志考虑到，从而导致匹配失败）</span></span><br><span class="line">regex.lastIndex; <span class="comment">// 0 （匹配失败后重置）</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="进阶知识"><a href="#进阶知识" class="headerlink" title=" 进阶知识 "></a><strong> 进阶知识 </strong></h3><p>接下来我会讲一下，正则里面比较进阶且我觉得比较重要的内容。如前所述，这部分内容，我强烈推荐阅读这篇文章<a href="https://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html" target="_blank" rel="noopener">正则表达式30分钟入门教程</a>。为了不做重复工作，这里我会讲得比较简略。</p><h4 id="分支"><a href="#分支" class="headerlink" title=" 分支 "></a><strong> 分支 </strong></h4><p>所谓分支，是指有几种规则，如果满足其中任意一种规则都应该当成匹配，具体方法是用<code>|</code>把不同的规则分隔开。<code>0\d{2}-\d{8}|0\d{3}-\d{7}</code></p><iframe frameborder="0" width="384" height="194" src="https://jex.im/regulex/#!embed=true&flags=&re=0%5Cd%7B2%7D-%5Cd%7B8%7D%7C0%5Cd%7B3%7D-%5Cd%7B7%7D"></iframe><h4 id="分组"><a href="#分组" class="headerlink" title=" 分组 "></a><strong> 分组 </strong></h4><p>所谓分组，类似于编码中的表达式的功能。用小括号来指定子表达式(也叫做分组)，然后你就可以指定这个子表达式的重复次数了。如下所示<code>(\d{1,3}\.){3}\d{1,3}</code></p><iframe frameborder="0" width="388" height="193" src="https://jex.im/regulex/#!embed=true&flags=&re=(%5Cd%7B1%2C3%7D%5C.)%7B3%7D%5Cd%7B1%2C3%7D"></iframe><h4 id="贪婪与懒惰"><a href="#贪婪与懒惰" class="headerlink" title=" 贪婪与懒惰 "></a><strong> 贪婪与懒惰 </strong></h4><p>当正则表达式中包含能接受重复的限定符时，通常的行为是（在使整个表达式能得到匹配的前提下）匹配尽可能多的字符。以这个表达式为例：<code>a.*b</code>，它将会匹配最长的以a开始，以b结束的字符串。如果用它来搜索aabab的话，它会匹配整个字符串aabab。这被称为贪婪匹配。<br><img src="/img/正则表达式/regular-expressions-without-trouble/4.png" alt="4.png"></p><p>有时，我们更需要懒惰匹配，也就是匹配尽可能少的字符。前面给出的限定符都可以被转化为懒惰匹配模式，只要在它后面加上一个问号<code>?</code>即可。懒惰限定符如下</p><table><thead><tr><th>代码</th><th>说明</th></tr></thead><tbody><tr><td>*?</td><td>重复任意次，但尽可能少重复</td></tr><tr><td>+?</td><td>重复1次或更多次，但尽可能少重复</td></tr><tr><td>??</td><td>重复0次或1次，但尽可能少重复</td></tr><tr><td>{n,m}?</td><td>重复n到m次，但尽可能少重复</td></tr><tr><td>{n,}</td><td>重复n次或更多次</td></tr><tr><td>{n,}?</td><td>重复n次以上，但尽可能少重复</td></tr></tbody></table><p><code>a.*?b</code>匹配最短的，以a开始，以b结束的字符串。如果把它应用于aabab的话，它会匹配aab（第一到第三个字符）和ab（第四到第五个字符）。<br><img src="/img/正则表达式/regular-expressions-without-trouble/3.png" alt="3.png"></p><h4 id="断言"><a href="#断言" class="headerlink" title=" 断言 "></a><strong> 断言 </strong></h4><p><strong><span class="under0"> 接下来的四个用于查找在某些内容(但并不包括这些内容)之前或之后的东西， </span></strong>也就是说它们像<code>\b,^,$</code>那样用于指定一个位置，这个位置应该满足一定的条件(即断言)，因此它们也被称为零宽断言。</p><h4 id="先行断言"><a href="#先行断言" class="headerlink" title=" 先行断言 "></a><strong> 先行断言 </strong></h4><p><code>x(?=exp)</code>，先行断言: exp紧跟x的情况下匹配x。例如，对于<code>/Jack(?=Sprat)/</code>，“Jack”在跟有“Sprat”的情况下才会得到匹配．<code>/Jack(?=Sprat)/</code> “Jack”后跟有“Sprat”或“Frost”的情况下才会得到匹配。不过， 匹配结果不包括“Sprat”或“Frost”。</p><iframe frameborder="0" width="260" height="117" src="https://jex.im/regulex/#!embed=true&flags=&re=Jack(%3F%3DSprat)"></iframe><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> regex = <span class="regexp">/First(?= test)/g</span>;</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'First test'</span>.match(regex)); <span class="comment">// [ 'First' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'First peach'</span>.match(regex)); <span class="comment">// null</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'This is a First test in a year.'</span>.match(regex)); <span class="comment">// [ 'First' ]</span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'This is a First peach in a month.'</span>.match(regex)); <span class="comment">// null</span></span><br></pre></td></tr></table></figure><h4 id="负向先行断言"><a href="#负向先行断言" class="headerlink" title=" 负向先行断言 "></a><strong> 负向先行断言 </strong></h4><p><code>x(?!exp)</code>,负向先行断言: x后无exp紧随的情况下匹配x。例如，对于<code>/\d+(?!\。)/</code>，数字后没有跟随小数点的情况下才会得到匹配。对于<code>/\d+(?!\.)/.exec(3.141)</code>，匹配‘141’而不是‘3’。</p><iframe frameborder="0" width="369" height="143" src="https://jex.im/regulex/#!embed=true&flags=g&re=%5Cd%2B(%3F!%5C%E3%80%82)"></iframe><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(<span class="regexp">/\d+(?!\.)/g</span>.exec(<span class="string">'3.141'</span>)); <span class="comment">// [ '141', index: 2, input: '3.141' ]</span></span><br></pre></td></tr></table></figure><h4 id="后行断言"><a href="#后行断言" class="headerlink" title=" 后行断言 "></a><strong> 后行断言 </strong></h4><p><code>(?&lt;=exp)x</code>,后行断言: x紧随exp的情况下匹配x。例如，对于<code>/(?&lt;=Jack)Sprat/</code>，“Sprat”紧随“Jack”时才会得到匹配。对于<code>/(?&lt;=Jack|Tom)Sprat</code>，“Sprat”在紧随“Jack”或“Tom”的情况下才会得到匹配。不过，匹配结果中不包括“Jack”或“Tom”。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> oranges = [<span class="string">'ripe orange A '</span>, <span class="string">'green orange B'</span>, <span class="string">'ripe orange C'</span>,];</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> ripe_oranges = oranges.filter( <span class="function"><span class="params">fruit</span> =&gt;</span> fruit.match(<span class="regexp">/(?&lt;=ripe )orange/</span>));</span><br><span class="line"><span class="built_in">console</span>.log(ripe_oranges); <span class="comment">// [ 'ripe orange A ', 'ripe orange C' ]</span></span><br></pre></td></tr></table></figure><h4 id="负向后行断言"><a href="#负向后行断言" class="headerlink" title=" 负向后行断言 "></a><strong> 负向后行断言 </strong></h4><p><code>(?&lt;!exp)x</code>,负向后行断言: x不紧随y的情况下匹配x。例如，对于<code>/(?&lt;!-)\d+/</code>，数字紧随-符号的情况下才会得到匹配。对于<code>/(?&lt;!-)\d+/.exec(3)</code> ，“3”得到匹配。 而<code>/(?&lt;!-)\d+/.exec(-3)</code>的结果无匹配，这是由于数字之前有-符号。</p><h4 id="断言实战"><a href="#断言实战" class="headerlink" title=" 断言实战 "></a><strong> 断言实战 </strong></h4><p>提取字符串<code>123sadf21(aaaaf213sdaf)</code>,括号中的部分。</p><p><img src="/img/正则表达式/regular-expressions-without-trouble/5.png" alt="5.png"></p><p>如上图所示，<code>(?&lt;=\().+(?=\))</code>, 该正则分为三部分：<code>(?&lt;=\(</code>，这是后行断言；<code>(?=\))</code>, 这是先行断言；<code>.+</code>,匹配任意长的字符。</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>以上就是本文的所有内容。正则使用得好，能起到事半功倍的作用。利用好本文推荐的工具，多加练习，相信正则一定不再是烦恼！</p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://www.cnblogs.com/deerchao/archive/2006/08/24/zhengzhe30fengzhongjiaocheng.html" target="_blank" rel="noopener">正则表达式30分钟入门教程</a></li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Guide/Regular_Expressions" target="_blank" rel="noopener">mdn-正则表达式</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《皮囊》</title>
      <link href="/2020/04/12/reading-notes-of-skins/"/>
      <url>/2020/04/12/reading-notes-of-skins/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>看完《皮囊》已经有一段时间了。因为近来琐事缠身，今天才整理出来。</p><p>这本书我觉得写得挺好的。整理完在豆瓣上看了一下，意外的发现得分并不是很高，有很多一星的评论，当然这部分人持有的观点也基本一致，有点人云亦云的味道。</p><hr><p>后来我上大学，再后来到外地工作，见她分外少了。然而每次遇到挫折，我总是请假往老家跑——一个重要的事情，就是去和阿太坐一个下午。<strong>虽然我说的苦恼，她不一定听得懂，甚至不一定听得到——她已经耳背了，但每次看到她不甚明白地笑，展开那岁月雕刻出的层层叠叠的皱纹，我就莫名其妙地释然了许多。</strong></p><p>那一刻才明白阿太曾经对我说过的一句话，才明白阿太的生活观：我们的生命本来多轻盈，都是被这肉体和各种欲望的污浊给拖住。阿太，我记住了。“肉体是拿来用的，不是拿来伺候的。”请一定来看望我。</p><p><span class="under0"> <strong> 有一段时间，远在北京工作累了的我，习惯用GOOGLE地图，不断放大、放大，直至看到老家那屋子的轮廓。从一个蓝色的星球不断聚焦到这个点，看到它别扭地窝在那。多少人每天从那条小道穿过，很多飞机载着来来往往的人的目光从那儿不经意地掠过，它奇怪的模样甚至没有让人注意到，更别说停留。还有谁会在乎里面发生的于我来说撕心裂肺的事情。就像生态鱼缸里的珊瑚礁，安放在箱底，为那群斑斓的鱼做安静陪衬，谁也不会在意渺小但同样惊心动魄的死亡和传承。<span class="under0"> </span></strong> </span></p><p>后来父亲果然没回宁波了，拿着此前在宁波攒的钱，开过酒店、海鲜馆、加油站，生意越做越小，每失败一次，父亲就像褪一层皮一样，变得越发邋遢、焦虑、沉默。然后在我读高二的时候，父亲一次午睡完准备要去开店，突然一个跌倒，倒在天井里。父亲中风了。</p><p>别人的生活就这么浅浅地敷在上面——这是母亲寻找到的与它相处的最好距离。</p><p>这个想法让我不由自主地躺到了那床上，感觉父亲的气味把我包裹。<span class="under0"> <strong>淡淡的月光从窗户透进来，我才发觉父亲的床头贴着一张我好几年前照的大头贴，翻起身来看，那大头贴，在我脸部的位置发白得很奇怪。再一细看，才察觉，那是父亲用手每天摸白了。<span class="under0"> </span></strong> </span></p><p>那天下午我才第一次发现，整个小镇遍布着工地，它们就像是一个个正在发脓的伤口，而挖出的红土，血一般地红。东边一条正在修建的公路，像只巨兽，一路吞噬过来，而它挪动过的地方，到处是拆掉了一半的房子。这些房子外面布着木架和防尘网，就像包扎的纱布。我知道，还有更多条线已经划定在一座座房子上空，只是还没落下，等到明后年，这片土地将皮开肉绽。</p><p>我想象着，那一座座房子里住着的不同故事，多少人过去的影子在这里影影绰绰，昨日的悲与喜还在那停留，想象着，它们终究变成的一片尘土飞扬的废墟。我知道，其实自己的内心也如同这小镇一样：以发展、以未来、以更美好的名义，内心的各种秩序被太仓促太轻易地重新规划，摧毁，重新建起，然后我再也回不去，无论是现实的小镇，还是内心里以前曾认定的种种美好。</p><p>我没说出口的话还有：其实我理解母亲了，在她的认定里，一家之主从来是父亲，无论他是残疾还是健全，他发起了这个家庭。事实上，直到母亲坚持要建好这房子的那一刻，我才明白过来，前两次建房子，为的不是她或者我的脸面，而是父亲的脸面——她想让父亲发起的这个家庭看上去是那么健全和完整。这是母亲从没表达过，也不可能说出口的爱情。</p><p>然后，我看见那笑容就这么一点点地在她脸上绽放开，这满是皱纹的脸突然透出羞涩的容光。我像摸小孩一样，摸摸母亲的头，心里想，这可爱的母亲啊。</p><p>更重要的是，唯一的观众——生活，从来就不是个太好的观看者，它像一个苛刻的导演，用一个个现实对我们指手画脚，甚至加进很多戏码，似乎想帮助我们找到各自对的状态。</p><p>虽然知道根本不是台风的错。那结局是注定的，生活中很多事情，该来的会来，不以这个形式，就会以那样的形式。但把事情简单归咎于我们无能为力的某个点，会让我们的内心可以稍微自我安慰一下，所以，我至今仍愿意诅咒那次台风。</p><p>电视台里播放着民政部领导来驻守前线的消息，CCTV的记者也对着还未刮起显得无精打采的风，有点遗憾。他或许很期待，在狂风暴雨中，被风吹得站都站不稳，需要扶住某一棵树，然后歇斯底里地大喊着本台记者现场报道的话。</p><p>有种东西，隔阂着彼此，注定无法做非常好的朋友——目光，太透彻的目光。这里的小孩脸上都有双通透的眼睛，看着你，仿佛要看进你的心里。我知道那是双痛彻后的眼睛，是被眼泪洗干净的眼睛。因为，那种眼睛我也有。和拥有这种眼睛的人说话，会有疼痛感，会觉得庸俗的玩笑是不能说的，这么薄的问题，在这么厚的目光前，多么羞愧。于是会想掏心掏肺，但掏心掏肺在任何时候都是最累的，通常只要说过一次话，你就不想再和他说第二次了。</p><p><span class="under0"> <strong>一开始我选择和一些病人交朋友。家属们一般忧心忡忡，病人们为了表现出果敢，却意外地阳光。每个病人都像个小太阳一样。当然，代价是燃烧自己本来不多的生命力。<span class="under0"> </span></strong> </span></p><p>走廊上有孩子在闹着，说今天是圣诞节，吵着要礼物。但没有多少反应，就像一块石头投进深深的水潭，一下子不见了踪影。他不知道，这里有另外的四季、另外的节气。</p><p><span class="under0"> <strong>母亲有一个姐姐、两个妹妹、一个哥哥和一个弟弟。这些孩子是政府鼓励生育时期一一落地的。和世界各地的情况一样，政府似乎只负责理念上的指导，日子却需要一个个人自己去过。除此之外，这个家庭的负担，还有半身偏瘫在家里伺候神明的外婆。母亲很愿意讲起那段过去，却从不愿意刻意渲染困难。她愿意讲述那个时代，人若无其事的隐忍。用她的话说，那时候困难是普遍现象，因此困难显得很平常，显得不值一提。只是每个家庭要想办法去消化这种困难，并且最终呈现出波澜不惊的平凡和正常。<span class="under0"> </span></strong> </span></p><p>我还看过她向神灵撒娇。几次她询问神灵的问题，显然从圣杯里得不到想要的肯定，就在那顽固地坚持着，直到神明依了她的意愿，才灿烂地朝高高在上的神像说了声谢谢。我不理解母亲在那些庙宇里度过多少艰难的事情，在我的这段记忆中，只是那浑厚的沉香，慵慵懒懒地攀爬，而圣杯和地板磕碰出的清脆声响，则在其中圆润地滚动。</p><p>但阿小，似乎总躲在一个安静的角落，不参与我们两家的交际。他很安静，这种安静却分明带着点高高在上的感觉，似乎永远在专注思考着什么。他唯一一次和我聊天，是听我母亲在和乌惜开心地说，我又考了年级第一。他招招手傲慢地把我叫过去，说，黑狗达，所以你要好好读书，离开这个小镇。我当时还觉得小镇很大，没有离开的迫切感，但心里对他莫名产生一种佩服：一个能看不上小镇的人内心该是如何的宽广。然而他读书却并不好，这让他这种高傲的安静，被理所当然地理解成一种孤僻。</p><p><span class="under0"> <strong>高三的后半学期，整个学校像传销公司。老师整天说，别想着玩，想想未来住在大城市里，行走在高楼大厦间，那里才好玩。他们偶尔还会举例：某某同学，考上了北京的大学，然后，他就住在北京了……口气笃定得好似王子和公主从此过上幸福的生活。谁都没怀疑住在北京就是所有幸福的终点。整个高三的年段，也像是准备离开小镇的预备营地，许多人开始寄宿在学校，全心投入一种冥想状态。仿佛学校就是一艘太空船，开往一个更开明的所在。<span class="under0"> </span></strong> </span></p><p>兜兜转转，大学毕业后的我，来到了北京，来到了那个在想象中可以和香港比拼的北京。当然，此时的我早知道，留在北京不是全部故事的结束，而是所有故事的开始。</p><p><span class="under0"> <strong>偌大的城市，充满焦灼感的生活，每次走在地铁拥挤的人群里，我总会觉得自己要被吞噬，觉得人怎么都这么渺小。而在小镇，每个人都那么复杂而有生趣，觉得人才像人。这个时候我才偶尔会想起老家的阿小，我竟然有些妒忌。听说他娶了个老婆，很快生了个儿子，然后自己买了块地，建好了房子，也圈上个庭院，里面还同样养了只狗。我则每天忍受着颈椎病，苦恼着工作的压力和工作结束后的空虚。唯一能做的是不停通过职业的成就感稍微缓解自己：我是个写字的人，在一家全球闻名的顶级杂志社工作，我的文章会被到处转载。总有老家的朋友，从那听得到狗吠的小镇上打来电话，说你这小子混得不错。装模作样地相互吹捧下，挂下电话，迎接突然袭击而来的空虚感。<span class="under0"> </span></strong> </span></p><p>大部分人都困倦到睡着了——他们都是一早七点准时在家门口等着这车到市区，他们出发前各自化妆、精心穿着，等着到这城市的各个角落，扮演起维修工、洗碗工、电器行销售、美发店小弟……时间一到，又仓皇地一路小跑赶这趟车，搭一两个小时回所谓的家，准备第二天的演出。他们都是这城市的组成部分。而这城市，曾经是我们在小镇以为的，最美的天堂。他们是我们曾经认为的，活在天堂里的人。</p><p>“我要告诉你的是，困惑、一时找不到未来的大目标这很正常，没有几个人能很小的时候就知道自己可以过什么样的生活，你做好眼前的一件件事情就可以了。”“那你为什么那么早就知道自己要过什么生活？”这个问题，或许真是问到他心坎里了。他突然两眼睁大，像下了一个决心一般，转过头和我郑重地宣告：“因为我想，我是天才。”在宣告结束后，他似乎才突然记起此次来我家的任务：“不过，你也是人才，人才不着急，按照生活一点点做好，生活会给你答案的。”“真的？”“真的。”我没想到的是，我竟然会在他面前哭了。</p><p>在我考上大学，也进入“城市”生活之后，我经常遇到和文展很像的人，他们一个个和我说着对未来的规划，和在故乡在中小学阶段的成功带给他们的无比信心。这样的人，还因为出身，总可以嗅到他们身上的泥土味。这使得他们的理想粗暴却淳朴，让人感觉不到野心勃勃或者城市孩子般的精明，我乐于和这样的人交朋友，就如同喜欢某种精致的土特产一般。但显然我不是这样的人，要感谢文展的是，我基本不太想太长远的事情，很多事情想大了会压得自己难受。我只想着做好一点点的事情，然后期待，这么一点点事，或许哪天能累积成一个不错的景观。起码是自己喜欢的景观。</p><p><span class="under0"> <strong>我才明白，那封信里，我向文展说的“小时候的玩伴真该一起聚聚了”，真是个天真的提议。每个人都已经过上不同的生活，不同的生活让许多人在这个时空里没法相处在共同的状态中，除非等彼此都老了，年迈再次抹去其他，构成我们每个人最重要的标志，或许那时候的聚会才能成真。<span class="under0"> </span></strong> </span></p><p>这房子，我也十几年没进来了。它果然是记忆中的那个样子，但又不仅仅是那个样子，就如同一张没对焦好的照片，一旦清晰起来，大概的模样还是如此，只是每部分的景致，完全颠覆了此前的感觉。它比我记忆中小，土墙斑斑驳驳、老气沉沉，还飘散着一股发霉的味道。</p><p><span class="under0"> <strong>我在那一刻也愣住了，不知道是不是应该和他拥抱。他的外表，他的眼神，他的气质，似乎都不是十几年前我熟悉的那个文展，生活已经把他雕刻出另外的模样，但即使这样的面目全非，还是可以从他的眉角、他脸上细微的一个表情，找寻到，那个文展。那个文展或许破碎了，但他是在那身体里的。文展最终帮我做了决定，不握手也不像老朋友那般拥抱，而是平淡地指了指椅子，“坐吧。”他的房间还是没打开窗户，即使白天，也把电灯亮着。钨丝灯有些发黄，让我目光所见，似乎都有种老照片的错觉。<span class="under0"> </span></strong> </span></p><p>我不知道他哪句是真话，生存现实和自我期待的差距太大，容易让人会开发出不同的想象来安放自己。我相信，他脑子里藏着另外一个世界，很多人脑子里都偷偷藏着很多个世界。我自己也一直警惕地处理着想象和现实之间的关系：任何不合时宜的想象都是不需要的，因为现实的世界只有一个。</p><p>那天下午，我在厚朴的脑袋里看到了他的想象：他以为他现在到达的，是整个世界的入口；他以为再走进去，就是无限宽广的可能；他以为正在和他对话的，已经是整个世界。</p><p><span class="under0"> <strong>我终究是务实和紧张的，我开始计算一天睡眠需要多少时间，打工需要多少时间，还有赚学分和实习……这样一排，发觉时间不够用了。大学毕业之后的那次冒险将决定我的一生。高中时父亲的病倒，让我必须保证自己积累到足够的资本，以便迅速找到一份工作，这份工作还得符合我的人生期待。这很难，就像火箭发射后，在高空必须完成的一次次定点推送一样。<span class="under0"> </span></strong> </span></p><p>十二月的时候，厚朴和我打过电话，告诉我他又招到新团员了，“世界乐队打算重新向世界歌唱。”电话那头他兴奋地宣布。然后就好奇地询问我在北京的每个细节，“我一直在想象活在那样的地方是什么感觉。”“没什么特别的感觉，就是更辛苦地攀爬，但可以看到每一步，都确实指向一个个看似庞大但又具体的目标。”我这样回答他。“有没有把世界掌握在手中的感觉？”他这样一问，我不知道如何回答了。这样提问的人，显然没有试过在现实生活中去真正奔赴梦想。我没能说出口的是：厚朴，或许能真实地抵达这个世界的，能确切地抵达梦想的，不是不顾一切投入想象的狂热，而是务实、谦卑的，甚至你自己都看不起的可怜的隐忍。</p><p>第三个团员叫圆仔，父母是开小卖部的，他后来写了许多有零食名字的歌，称之为物质主义流派：“脆脆的虾条你汪汪的眼，薄薄的薯片你软软的话，苍苍的天空，这满地的花生壳，流动的河水，这浓浓的啤酒香……”</p><p><span class="under0"> <strong>我一直在想象厚朴的生活，他已经用那些激烈的方式，把自己抬到那样的心理预期，不可能再低下身，扎到庸常的生活里去了。他不知道，最离奇的理想所需要的建筑素材就是一个个庸常而枯燥的努力。<span class="under0"> </span></strong> </span></p><p>以前读大学的时候，总觉得这城市格外的小，就是一条主干道，衍生出几条功能迥异的路。然而，当它藏住一个人的时候，就变得格外的大。</p><p>我没再刻意去打听厚朴的消息，但来的人总会有意无意地说起——事实上我和许多同学说不上熟悉，只是偶尔说说一些陈年旧事和另外一个共同认识的人的故事，勉强证明，我们为什么还要在彼此身上花时间的原因。</p><p><span class="under0"> <strong>海藏不住，也圈不住。对待海最好的办法，就是让每个人自己去寻找到和它相处的方式。每片海，沉浮着不同的景致，也翻滚着各自的危险。生活也是，人的欲望也是。以前以为节制或者自我用逻辑框住，甚至掩耳盗铃地掩藏住，是最好的方法，然而，无论如何，它终究永远在那躁动起伏。我期许自己要活得更真实也更诚实，要更接受甚至喜欢自己身上起伏的每部分，才能更喜欢这世界。我希望自己懂得处理、欣赏各种欲求，各种人性的丑陋与美妙，找到和它们相处的最好方式。我也希望自己能把这一路看到的风景，最终能全部用审美的笔触表达出来。<span class="under0"> </span></strong> </span></p><p>现在国外的建筑师常用一个词来讽刺中国，“千城一面”，无论哪个城市，都只能从国外的标准去解释当时为什么这么建，而不能说出这个建筑这条街道和人群的生活是如何自然地演变融合，骨肉相连的。中国的许多城市就这么仓促地被一个标准给阉割了。类似于我更喜欢北京而不喜欢上海，我也更喜欢泉州而相对不喜欢厦门。在我看来，北京不是城市，而是“世界上最大的农村”。我现在住的地方是王府井旁边的小胡同，从大路走过来还是流光溢彩，突然一拐就是吊嗓子的老大爷，开做茶馆的四合院，蹲着吃东西的大妈，在路边摆棋的老人。我会觉得这样的地方有惊喜，因为你不知道你拐的下一个弯会有什么——因为层次太多，东西太杂。而在上海，第一眼非常喜欢，它已经是城市化的代表，但你在一个角落住一个星期，你就知道这个城市其他所有地方的样子了——都是类似的。</p><p>那个晚上也是。在这里重新叙述已经过去一个多月的那个夜晚，是因为，觉得这是个对我一辈子影响深远的夜晚。那一晚的李大人依旧先问我：“怎么样？最近过得怎么样？讲一讲吧。然后我开始讲，讲父亲去世过后我在老家的这半年，讲我为什么坚持要从北京辞职回去陪老妈，讲我在老家那个小镇，骑着摩托车没有目的，也没有刻意地四处乱逛，讲我的无所事事，讲我提不起工作的兴趣，以及讲我对这种状态的恐惧。李大人习惯在说话前笑一笑，然后开始说——那都是借口，你父亲的死其实不是造成你现在状态的根本原因，你只是用这个事情来掩饰或者逃避自己不想回答的问题。我当时很真诚地相信，从八年前父亲的中风起，我就开始了围绕于父亲的病、这个家庭负担的人生和工作规划，我觉得，我前段时间的状态很容易理解——失去了此前八年来工作和生活的中心，我的迷惘理所当然。在这个逻辑下，我会着急能否成名，着急能否赶快写本畅销书都有理由——因为我要扛这个偏瘫的家庭。当李大人这么说时，我很不能接受，我非常生气，不过他接下去的一句话让我懂了他的意思：“你根本还不知道怎么生活，也始终没勇气回答这个问题。”他没有说下去，我或许明白了，他想说的是，在不知道怎么生活的情况下，我会采用的是一种现成的、狭隘的、充满功利而且市侩的逻辑——怎么能尽快挣钱以及怎么能尽量成名，用好听的词汇就是所谓“梦想”和“责任”。此刻我再重新叙述的时候，已经理解李大人的用心。我很珍惜他的话。我，或许许多人，都在不知道如何生活的情况下，往往采用最容易掩饰或者最常用的借口——理想或者责任。回福建的这几天，我自己在想，八年前的我，年纪刚好到了要思考、确定自己如何生活，确立一生的生存目标的时候，却因为家庭意外的病痛，就借此逃避回答了。<span class="under0"> <strong>我疯狂工作，不让自己有空余时间，除了真实的生存压力，还在于，我根本不敢让自己有空余的时间，因为时间一空下来，我就要回答怎么去填充时间，怎么去面对生活，去回答这个问题——我要怎么生活，我真正喜欢的是什么，我真正享受什么？</strong></span>  </p><p>我根本不敢去判断自己的人生，也把握不住自己的人生。我逃避了，我躲在所谓对家庭的责任后，躲在所谓对新闻的追求和梦想中。于是，任何一点生活的压力或者工作的变动都让我脆弱，把生活的节奏寄托在工作上，所以任何一点波动都会让我不安让我恐慌。那天晚上，李大人对我说的最后一句话是，好好想想怎么生活，怎么去享受生活。我知道他的意思，他或许想说，生活从来不是那么简单的梦想以及磨难，不是简单的所谓理想还有阴谋，生活不是那么简单的概念，真实的生活要过成什么样是要我们自己完成和回答的。</p><p><span class="under0"> <strong> 为什么一定要来北京？其实我自己也不知道，只是觉得，这是我能想到的最彻底的地方吧。到北京后，我确实感觉自己的判断似乎是对的。北京的确是个彻底的地方。挑战是直接的，梦想是直接的，在这个地方，要做的事情动辄都是“国家级别”，这里的人，谈论的经常是如何改变世界，而这些事情不是谈论完就随风散了，确实有的事就这样实实在在地在发生。这样的地方很容易和荷尔蒙相互催化，给人带来“世界确实无限展开”的那种眩晕感。这样的地方，确实需要大量想战天斗地的人。从一家杂志社的试用机会开始，我得到了进入这个城市的机会，或者也可以说，得到被这个城市一口吞没的机会。在一段时间里，我觉得这个城市里的很多人都长得像蚂蚁：巨大的脑袋装着一个个庞大的梦想，用和这个梦想不匹配的瘦小身躯扛着，到处奔走在一个个尝试里。而我也在不自觉中成为了其中一员。在北京的时候，我偶尔会想起厚朴，犹豫着要不要鼓励他来到这样的北京。北京这个梦想之地，从表面上看，似乎是厚朴天然的生存之所，然而，我也知道，在北京发生的任何理想和梦想，需要的是扎扎实实，甚至奋不顾身的实践。我隐隐担心，厚朴这几年一直活在对梦想的虚幻想象中，而不是切实的实现里。我没把握，当他看到梦想背后那芜杂、繁琐的要求时，是否会有耐心，是否具有能力，是否能有足够的接受度——梦想原来是卑微的执着。</strong></span>  </p><p>几天的放纵，换来的是不得不乖乖躺在家里养病。没完没了的雨水，孩子气地赶起懒洋洋的土地味，悄悄蔓延上我的床，湿润而温暖，像某个亲人的肌肤，舒服得让人发困。我突然想，或许父亲的魂灵埋入这黄土，就应该也是这般舒服的感觉。从小我就喜欢闻泥土的味道，也因此其实从小我不怕死，一直觉得死是回家，是入土。我反而觉得生才是问题，人学会站立，是任性地想脱离这土地，因此不断向上攀爬，不断抓取任何理由——欲望、理想、追求。然而，我们终究需要脚踏着黄土。在我看来，生是更激烈的索取，或许太激烈的生活本身就是一种任性。</p><p>同样地，回来这几天，我也反复追问自己这个问题，这片土地为什么让我这么依赖？祭扫完墓地，空出来的光景是自己的。那个下午，我撑着伞走过因为放假而安静的小学母校；走过嘈杂热闹的菜市场；在卤水小摊上看那个阿姨熟练地切卤料；看到那个驼背的阿叔又挑着生锈的铁盒叫卖土笋冻，临时来兴致叫了两块就在路边吃……甚至还瞒着母亲，偷偷牵出摩托车，冒着雨到海边逛了一圈。虽然因此回来，头更晕了。我知道那种舒服，我认识这里的每块石头，这里的每块石头也认识我；我知道这里的每个角落，怎么被岁月堆积成现在这样的光景，这里的每个角落也知道我，如何被时间滋长出这样的模样。</p><p>几天的放纵，换来的是不得不乖乖躺在家里养病。没完没了的雨水，孩子气地赶起懒洋洋的土地味，悄悄蔓延上我的床，湿润而温暖，像某个亲人的肌肤，舒服得让人发困。我突然想，或许父亲的魂灵埋入这黄土，就应该也是这般舒服的感觉。从小我就喜欢闻泥土的味道，也因此其实从小我不怕死，一直觉得死是回家，是入土。我反而觉得生才是问题，人学会站立，是任性地想脱离这土地，因此不断向上攀爬，不断抓取任何理由——欲望、理想、追求。然而，我们终究需要脚踏着黄土。在我看来，生是更激烈的索取，或许太激烈的生活本身就是一种任性。</p><p>醒来后，才发现自己竟然不争气地哭了。或许，这几年我其实还是没离开过家乡，只不过，走得远了一点，看的风景更多一点，也怕得更厉害一点。但还好，我终于还是回来了，我终于还是能回来，我终于还是可以找到永远属于我的那条小巷。</p><p><span class="under0"> <strong> 我在海边上车，一路被带向浓郁的山色。窗外的景致，如同溪流中的光影那般鲜润地滑走，我看着一座座的房子在我眼光中迅速到来，却仓促被扯走。我在破旧的院子里，看到老人抱着孙女哭泣；我看到一个男人，坐在门墩上抽烟；我看到一个小女生，背着书包盯着一所房子的大门犹豫——然后一切全部被列车的行进拉扯开。我就这样短暂参与了他们的生活，刚开始铺张关于他们命运的想象，却又被迅速带离。当暮色渲染了整个视野，轰轰的火车把我拉出城镇，目光可见的，只有模糊的山色中零星的灯光，橘色的夕阳下，缎子一样的河流，以及孩子影影绰绰的嬉闹。我莫名感伤——到底每点灯光背后，有多少故事？那老人为什么抱着孙女哭泣，那男人是否因为生活困顿而困惑，那小女生面对的那扇门背后是怎么样的故事？作为游客，惬意的是，任何东西快速地滑过，因为一切都是轻巧、美好的，但这种快意是有罪恶的。快速的一切都可以成为风景，无论对当事者多么惊心动魄。</strong></span>  </p><p>任何事情只要时间一长，都显得格外残忍。九年前，坐在这位置上的我，父亲半身偏瘫，是家境困顿到无路可去的时候。当时那个蔡崇达，想着的是如何挣钱送父亲到美国治病，可以为了考虑是否为整天兼职而辛苦的自己加一块红烧肉而犹豫半天，还立志多挣点钱带阿太去旅游，当然还想着要赶紧牛起来，赶紧出名，让给自己机会的当时广电报的老总王成刚骄傲。甚至曾经想象，在哪一本书畅销后，要回到父亲做心脏手术的福二院，对那些病患的子女讲，别放弃，生活还有希望。</p><p>时光多残忍，那个懦弱但可爱的父亲，兢兢业业一辈子的所有印记一点都不剩下；那个过于狂热、战天斗地的兄长成刚，短暂地燃烧生命，也就耀眼那一瞬间；而我深爱着的、那个石头一样坚硬的阿太，还是被轻易地抹去。太多人的一生，被抹除得这么迅速、干净。他们被时光抛下列车，迅速得看不到一点踪影，我找不到他们的一点气息，甚至让我凭吊的地方也没有。而对于还在那列车中的我，再怎么声嘶力竭都没用。其中好几次，我真想打破那个玻璃，停下来，亲吻那个我想亲吻的人，拥抱着那些我不愿意离开的人。但我如何地反抗，一切都是徒然。</p><p>然而当我真正动笔时，才发觉，这无疑像一个医生，最终把手术刀划向自己。写别人时，可以模拟对象的痛感，但最终不用承担。而在写这本书时，每一笔每一刀的痛楚，都可以通过我敲打的一个字句，直接、完整地传达到我的内心。直到那一刻我才明白，或许这才是写作真正的感觉。也才理解，为什么许多作家的第一本都是从自己和自己在乎的部分写起：或许只有当一个写作者，彻彻底底地解剖过自我一次，他书写起其他每个肉体，才会足够的尊敬和理解。</p><p><span class="under0"> <strong> 每个读者只能读到已然存在于他内心的东西。书籍只不过是一种光学仪器，帮助读者发现自己的内心。</strong></span>  </p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>leetcode383-比特位计数</title>
      <link href="/2020/03/22/leetcode-338/"/>
      <url>/2020/03/22/leetcode-338/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p>这是一道<code>medium</code>难度的题，本题是<a href="http://www.sail.name/2020/03/22/leetcode-191/">leetcode191-位1的个数</a>的进阶版。</p><p>先看看题目</p><p>给定一个非负整数 num。对于 0 ≤ i ≤ num 范围中的每个数字 i ，计算其二进制数中的 1 的数目并将它们作为数组返回。</p><p>示例 1:</p><blockquote><p>输入: 2<br>输出: [0,1,1]</p></blockquote><p>示例 2:</p><blockquote><p>输入: 5<br>输出: [0,1,1,2,1,2]</p></blockquote><p>进阶:</p><blockquote><p>给出时间复杂度为O(n*sizeof(integer))的解答非常容易。但你可以在线性时间O(n)内用一趟扫描做到吗？<br>要求算法的空间复杂度为O(n)。<br>你能进一步完善解法吗？要求在C++或任何其他语言中不使用任何内置函数（如 C++ 中的 __builtin_popcount）来执行此操作。</p></blockquote><hr><h3 id="解答"><a href="#解答" class="headerlink" title=" 解答 "></a><strong> 解答 </strong></h3><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title=" 十进制转二进制 "></a><strong> 十进制转二进制 </strong></h3><p>这是最简单的思路。但是时间复杂度是O(n^2)</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">        <span class="keyword">let</span> n = i;</span><br><span class="line">        <span class="keyword">while</span> (n) &#123;</span><br><span class="line">            count += n % <span class="number">2</span>; </span><br><span class="line">            n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        result[i] = count;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="动态规划"><a href="#动态规划" class="headerlink" title=" 动态规划 "></a><strong> 动态规划 </strong></h3><p>动态规划最重要的是找出状态转移方程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">十进制  =&gt;    二进制</span><br><span class="line">0      =&gt;    0</span><br><span class="line">1      =&gt;    1</span><br><span class="line">2      =&gt;    10</span><br><span class="line">3      =&gt;    11</span><br><span class="line">4      =&gt;    100</span><br><span class="line">5      =&gt;    101</span><br><span class="line">6      =&gt;    110</span><br><span class="line">7      =&gt;    111</span><br><span class="line">8      =&gt;    1000</span><br><span class="line">9      =&gt;    1001</span><br></pre></td></tr></table></figure><p>可以得出归纳方程，设 dp(n) 为数字n二进制中1的个数</p><p>\begin{cases}<br>dp(n) = dp(n-1) + 1, n为奇数 \\<br>dp(n) = dp(n/2)， n为偶数<br>\end{cases}</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (i &amp; <span class="number">1</span>) &#123;</span><br><span class="line">            result[i] = result[i - <span class="number">1</span>] + <span class="number">1</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            result[i] = result[i &gt;&gt; <span class="number">1</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="更简洁的动态规划"><a href="#更简洁的动态规划" class="headerlink" title=" 更简洁的动态规划 "></a><strong> 更简洁的动态规划 </strong></h3><p>上面的状态转移方程，其实可以转换为下面的方程。本质上还是一样的<br>$dp(n) = dp(n/2) + n%2 $, 即$dp(n) = dp(n>>1) + (n\&amp;1) $</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">num</span></span></span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number[]&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> countBits = <span class="function"><span class="keyword">function</span>(<span class="params">num</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> result = [<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">1</span>; i &lt;= num; i++) &#123;</span><br><span class="line">        result.push(result[i &gt;&gt; <span class="number">1</span>] + (i &amp; <span class="number">1</span>));</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> result;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h4><p><a href="https://leetcode-cn.com/problems/counting-bits/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/counting-bits/</a><br><a href="https://www.szdev.com/blog/Hexo/mathjax-config-and-tutorial/" target="_blank" rel="noopener">https://www.szdev.com/blog/Hexo/mathjax-config-and-tutorial/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode191-位1的个数</title>
      <link href="/2020/03/21/leetcode-191/"/>
      <url>/2020/03/21/leetcode-191/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p>这是一道<code>easy</code>难度的题，先看看题目</p><p>编写一个函数，输入是一个无符号整数，返回其二进制表达式中数字位数为 ‘1’ 的个数（也被称为汉明重量）。</p><p>示例 1：</p><blockquote><p>输入：00000000000000000000000000001011<br>输出：3<br>解释：输入的二进制串 00000000000000000000000000001011 中，共有三位为 ‘1’。</p></blockquote><p>示例 2：</p><blockquote><p>输入：00000000000000000000000010000000<br>输出：1<br>解释：输入的二进制串 00000000000000000000000010000000 中，共有一位为 ‘1’。</p></blockquote><p>示例 3：</p><blockquote><p>输入：11111111111111111111111111111101<br>输出：31<br>解释：输入的二进制串 11111111111111111111111111111101 中，共有 31 位为 ‘1’。</p></blockquote><p>提示：</p><blockquote><ul><li>请注意，在某些语言（如 Java）中，没有无符号整数类型。在这种情况下，输入和输出都将被指定为有符号整数类型，并且不应影响您的实现，因为无论整数是有符号的还是无符号的，其内部的二进制表示形式都是相同的。</li><li>在 Java 中，编译器使用二进制补码记法来表示有符号整数。因此，在上面的 示例 3 中，输入表示有符号整数 -3。</li></ul></blockquote><hr><h3 id="解答"><a href="#解答" class="headerlink" title=" 解答 "></a><strong> 解答 </strong></h3><p>当然在JavaScript中，也是没有无符号整数类型的，都是32位有符号整数类型。所以这里我们的输入都是有符号整数类型。那么我们的问题就转换成了<strong>输入一个整数，返回其二进制表达式中数字位数为‘1’的个数 </strong></p><h3 id="十进制转二进制"><a href="#十进制转二进制" class="headerlink" title=" 十进制转二进制 "></a><strong> 十进制转二进制 </strong></h3><p>这里我们很容易想到，将数字处理成二进制，然后统计其1的个数。从十进制转成二进制，不断除以2，直到为0。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span> - a positive integer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> count = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span> (n) &#123;</span><br><span class="line">        count += n % <span class="number">2</span>; </span><br><span class="line">        n = n &gt;&gt; <span class="number">1</span>;</span><br><span class="line">        <span class="comment">// n = Math.floor(n / 2);</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> count;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="位运算"><a href="#位运算" class="headerlink" title=" 位运算 "></a><strong> 位运算 </strong></h3><p>循环和位移动</p><p>将输入的数字n与位掩码(初始值为1)的二进制做与运算，即可以得到n的最低位。举个例子</p><p>已知 <code>0 &amp; 1 = 0</code>, <code>1 &amp; 1 = 1</code></p><p>1的二进制表示是<code>0000 0000 0000 0000 0000 0000 0000 0001</code><br>3的二进制表示是<code>0000 0000 0000 0000 0000 0000 0000 0011</code></p><p>则 1 &amp; 3，<br>结果二进制表示是<code>0000 0000 0000 0000 0000 0000 0000 0001</code>，即为1,得到了3的最低位。</p><p>检查下一位时，我们将掩码左移一位。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span> - a positive integer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> mask = <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; <span class="number">32</span>; i++) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((n &amp; mask) !== <span class="number">0</span>) &#123;</span><br><span class="line">            counts++;</span><br><span class="line">        &#125;</span><br><span class="line">        mask &lt;&lt;= <span class="number">1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="位运算更简洁的做法"><a href="#位运算更简洁的做法" class="headerlink" title=" 位运算更简洁的做法 "></a><strong> 位运算更简洁的做法 </strong></h3><p>前面一种算法，需要检查数组的每一位。接下来的这种做法，不需要检查完每一位。而是通过不断的把数字的最后一个1进行反转。</p><p><strong> 核心思想是想法是对于任意数字 n ，将 n 和 n - 1 做与运算，会把最后一个 1 的位变成 0 </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">n           ..<span class="number">.1110100</span> <span class="comment">// 倒数第3位是1</span></span><br><span class="line">n - <span class="number">1</span>       ..<span class="number">.1110011</span></span><br><span class="line">n &amp; (n <span class="number">-1</span>)  ..<span class="number">.1110000</span> <span class="comment">// 倒数第3位为0</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param <span class="type">&#123;number&#125;</span> <span class="variable">n</span></span> - a positive integer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return <span class="type">&#123;number&#125;</span></span></span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">var</span> hammingWeight = <span class="function"><span class="keyword">function</span>(<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">let</span> counts = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">while</span>(n) &#123;</span><br><span class="line">        counts++;</span><br><span class="line">        n &amp;= n - <span class="number">1</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> counts;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h4 id="leetcode链接"><a href="#leetcode链接" class="headerlink" title=" leetcode链接 "></a><strong> leetcode链接 </strong></h4><p><a href="https://leetcode-cn.com/problems/number-of-1-bits/" target="_blank" rel="noopener">https://leetcode-cn.com/problems/number-of-1-bits/</a></p>]]></content>
      
      
      <categories>
          
          <category> leetcode </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 位运算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>moment的高频用法总结</title>
      <link href="/2020/03/15/high-frequency-usage-of-moment/"/>
      <url>/2020/03/15/high-frequency-usage-of-moment/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>前端很多场景都会涉及到对时间的处理，我所用得最多的库是moment。本文是对moment的高频用法的总结。</p><hr><h3 id="用法总结"><a href="#用法总结" class="headerlink" title=" 用法总结 "></a><strong> 用法总结 </strong></h3><h5 id="指定语言；不然可能引起一些不必要的bug。"><a href="#指定语言；不然可能引起一些不必要的bug。" class="headerlink" title=" 指定语言；不然可能引起一些不必要的bug。"></a><strong> 指定语言；不然可能引起一些不必要的bug。</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 记得指定为对应的语言；</span><br><span class="line"> moment.locale(&apos;zh-cn&apos;);</span><br></pre></td></tr></table></figure><h5 id="获取时间戳"><a href="#获取时间戳" class="headerlink" title=" 获取时间戳 "></a><strong> 获取时间戳 </strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 精确到毫秒</span><br><span class="line"></span><br><span class="line">moment().valueOf()</span><br><span class="line">## 1584182611042 ；返回值为数值类型</span><br><span class="line">moment().format(<span class="string">'x'</span>) </span><br><span class="line">## 返回值为字符串类型</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 精确到秒 </span><br><span class="line">moment().unix()</span><br><span class="line">##  1584182618 精确到秒  返回值为数值类型</span><br><span class="line">moment().format(<span class="string">'X'</span>) </span><br><span class="line">##  返回值为字符串类型</span><br></pre></td></tr></table></figure><h5 id="生成指定时间的moment"><a href="#生成指定时间的moment" class="headerlink" title=" 生成指定时间的moment "></a><strong> 生成指定时间的moment </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">moment(<span class="string">"1995-12-25"</span>);</span><br><span class="line"></span><br><span class="line"># 带格式</span><br><span class="line"># 解析器会忽略非字母和数字的字符，因此以下两个都将会返回相同的东西。</span><br><span class="line">moment(<span class="string">"12-25-1995"</span>, <span class="string">"MM-DD-YYYY"</span>);</span><br><span class="line">moment(<span class="string">"12/25/1995"</span>, <span class="string">"MM-DD-YYYY"</span>);</span><br></pre></td></tr></table></figure><h5 id="获取对象"><a href="#获取对象" class="headerlink" title=" 获取对象 "></a><strong> 获取对象 </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">moment().toObject();</span><br><span class="line"># 返回一个包括：年、月、日、时、分、秒、毫秒的对象</span><br><span class="line"># &#123;</span><br><span class="line">    years: <span class="number">2020</span></span><br><span class="line">    months: <span class="number">2</span></span><br><span class="line">    date: <span class="number">14</span></span><br><span class="line">    hours: <span class="number">18</span></span><br><span class="line">    minutes: <span class="number">47</span></span><br><span class="line">    seconds: <span class="number">56</span></span><br><span class="line">    milliseconds: <span class="number">526</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="格式化"><a href="#格式化" class="headerlink" title=" 格式化 "></a><strong> 格式化 </strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moment().format();</span><br><span class="line"># 2020-03-14T19:14:05+08:00</span><br><span class="line"></span><br><span class="line">moment().format(<span class="string">'YYYY-MM-DD HH:mm:ss'</span>);</span><br><span class="line"># 2020-03-14 19:23:29</span><br></pre></td></tr></table></figure><h5 id="获取时间"><a href="#获取时间" class="headerlink" title=" 获取时间 "></a><strong> 获取时间 </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 获取今天0时0分0秒</span><br><span class="line">moment().startOf(<span class="string">'day'</span>)</span><br><span class="line"></span><br><span class="line"># 获取本周第一天(周日)0时0分0秒</span><br><span class="line">moment().startOf(<span class="string">'week'</span>)</span><br><span class="line"></span><br><span class="line"># 获取本周周一0时0分0秒</span><br><span class="line">moment().startOf(<span class="string">'isoWeek'</span>)</span><br><span class="line"></span><br><span class="line"># 获取当前月第一天0时0分0秒</span><br><span class="line">moment().startOf(<span class="string">'month'</span>)</span><br><span class="line"></span><br><span class="line"># 获取指定日期的0时0分0秒</span><br><span class="line">moment(<span class="string">'2019-10-20'</span>).startOf(<span class="string">'day'</span>)</span><br><span class="line"></span><br><span class="line"># 获取今天23时59分59秒</span><br><span class="line">moment().endOf(<span class="string">'day'</span>)</span><br><span class="line"></span><br><span class="line"># 获取本周最后一天(周六)23时59分59秒</span><br><span class="line">moment().endOf(<span class="string">'week'</span>)</span><br><span class="line"></span><br><span class="line"># 获取本周周日23时59分59秒</span><br><span class="line">moment().endOf(<span class="string">'isoWeek'</span>)</span><br><span class="line"></span><br><span class="line"># 获取当前月最后一天23时59分59秒</span><br><span class="line">moment().endOf(<span class="string">'month'</span>)</span><br></pre></td></tr></table></figure><h5 id="获取当月第一天是星期几"><a href="#获取当月第一天是星期几" class="headerlink" title=" 获取当月第一天是星期几  "></a><strong> 获取当月第一天是星期几  </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># 用于设置星期几，其中星期日为 0、星期六为 6</span><br><span class="line">moment().startOf(<span class="string">'month'</span>).day()</span><br></pre></td></tr></table></figure><h5 id="获取前n天-后n天"><a href="#获取前n天-后n天" class="headerlink" title=" 获取前n天 / 后n天 "></a><strong> 获取前n天 / 后n天 </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment().add(<span class="number">7</span>, <span class="string">'days'</span>);</span><br><span class="line">moment().subtract(<span class="number">7</span>, <span class="string">'days'</span>)</span><br></pre></td></tr></table></figure><h5 id="比较两个时间的大小"><a href="#比较两个时间的大小" class="headerlink" title=" 比较两个时间的大小 "></a><strong> 比较两个时间的大小 </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"># 第二个参数用于确定精度，且不仅仅是要检查的单个值，因此使用 day 将会检查年份、月份、日期。</span><br><span class="line"></span><br><span class="line">moment(<span class="string">'2010-10-31'</span>).isBefore(<span class="string">'2010-12-31'</span>, <span class="string">'day'</span>);</span><br><span class="line"># true</span><br><span class="line"></span><br><span class="line">moment(<span class="string">'2010-10-20'</span>).isBefore(<span class="string">'2010-12-31'</span>, <span class="string">'year'</span>);</span><br><span class="line"># false</span><br><span class="line"></span><br><span class="line">moment(<span class="string">'2010-10-20'</span>).isAfter(<span class="string">'2009-12-31'</span>, <span class="string">'year'</span>); </span><br><span class="line"># true</span><br><span class="line"></span><br><span class="line">moment(<span class="string">'2010-10-20'</span>).isSame(<span class="string">'2009-12-31'</span>, <span class="string">'year'</span>); </span><br><span class="line"># 判断两个时间是否相等</span><br><span class="line"></span><br><span class="line"># 需要注意的是， isBefore与isAfter 都是开区间，如果想使用闭区间，应使用</span><br><span class="line">isSameOrBefore</span><br><span class="line">isSameOrAfter</span><br></pre></td></tr></table></figure><h5 id="两个时间的相差几天"><a href="#两个时间的相差几天" class="headerlink" title=" 两个时间的相差几天 "></a><strong> 两个时间的相差几天 </strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">moment([<span class="number">2008</span>, <span class="number">2</span>, <span class="number">27</span>]).diff([<span class="number">2007</span>, <span class="number">0</span>, <span class="number">28</span>], <span class="string">'day'</span>);</span><br><span class="line"># 424</span><br></pre></td></tr></table></figure><h5 id="是否是闰年"><a href="#是否是闰年" class="headerlink" title=" 是否是闰年 "></a><strong> 是否是闰年 </strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">moment().isLeapYear();</span><br><span class="line"># true</span><br><span class="line"></span><br><span class="line">moment([<span class="number">2001</span>]).isLeapYear() </span><br><span class="line"># false</span><br></pre></td></tr></table></figure><h5 id="获取-月份和星期-枚举列表"><a href="#获取-月份和星期-枚举列表" class="headerlink" title=" 获取 月份和星期 枚举列表 "></a><strong> 获取 月份和星期 枚举列表 </strong></h5><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">moment.months()</span><br><span class="line"></span><br><span class="line"># ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]</span><br><span class="line"></span><br><span class="line">moment.monthsShort()</span><br><span class="line"># ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]</span><br><span class="line"></span><br><span class="line">moment.weekdays()</span><br><span class="line"># ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]</span><br><span class="line"></span><br><span class="line">moment.weekdaysMin()</span><br><span class="line"># ["Su", "Mo", "Tu", "We", "Th", "Fr", "Sa"]</span><br></pre></td></tr></table></figure><h5 id="克隆"><a href="#克隆" class="headerlink" title=" 克隆 "></a><strong> 克隆 </strong></h5><p>所有的 <code>moment</code> 都是可变的。  调用任何一种操作方法都会改变原始的 <code>moment</code>。 如果要创建副本并对其进行操作，则应在操作 <code>moment</code> 之前使用 <code>moment#clone</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"># 在 moment 上调用 moment() 将会克隆它。</span><br><span class="line">var a = moment([2012]);</span><br><span class="line">var b = moment(a);</span><br><span class="line">a.year(2000);</span><br><span class="line">b.year(); // 2012</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 此外，也可以调用 moment#clone 克隆 moment。</span><br><span class="line">var a = moment([2012]);</span><br><span class="line">var b = a.clone();</span><br><span class="line">a.year(2000);</span><br><span class="line">b.year(); // 2012</span><br></pre></td></tr></table></figure></p><h5 id="获取当月总天数"><a href="#获取当月总天数" class="headerlink" title=" 获取当月总天数 "></a><strong> 获取当月总天数 </strong></h5><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">moment().daysInMonth()</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="http://momentjs.cn/" target="_blank" rel="noopener">官方文档</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>macOS安装labelImg踩坑汇总</title>
      <link href="/2020/03/15/macOS-install-labelimg-step-pit-summary/"/>
      <url>/2020/03/15/macOS-install-labelimg-step-pit-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近有一个涉及到计算机视觉相关的项目，网上没有合适的数据集，需要自己整理一个数据集出来。<br><code>LabelImg</code>作为图片标注工具，是在进行图片识别和视频分类等机器学习任务的训练集准备，不可少的工具。这里我也使用了<code>LabelImg</code>来做数据的标注。</p><hr><h3 id="如何安装labelImg"><a href="#如何安装labelImg" class="headerlink" title=" 如何安装labelImg "></a><strong> 如何安装labelImg </strong></h3><p>这里推荐看github官方文档，根据自己所使用的操作系统，进行安装。<br>因为我的系统是Mac OS X，所以执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">brew install python3</span><br><span class="line">pip3 install pipenv</span><br><span class="line">pipenv run pip install pyqt5==5.13.2 lxml</span><br><span class="line">pipenv run make qt5py3</span><br><span class="line">python3 labelImg.py</span><br><span class="line">[Optional] rm -rf build dist; python setup.py py2app -A;mv &quot;dist/labelImg.app&quot; /Applications</span><br></pre></td></tr></table></figure></p><p>但是在上面的命令执行过程中，可能会遇到一些问题，导致安装失败。我将整个安装过程所踩的坑整理在下方。</p><hr><h3 id="问题汇总"><a href="#问题汇总" class="headerlink" title=" 问题汇总 "></a><strong> 问题汇总 </strong></h3><h3 id="需要先将labelImg的代码仓库克隆到本地"><a href="#需要先将labelImg的代码仓库克隆到本地" class="headerlink" title=" 需要先将labelImg的代码仓库克隆到本地 "></a><strong> 需要先将labelImg的代码仓库克隆到本地 </strong></h3><p>上面提到的安装命令有一个是<code>python3 labelImg.py</code>,所以需要先有这个文件。</p><p>执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git clone git@github.com:tzutalin/labelImg.git</span><br><span class="line">cd /labelImg-master</span><br></pre></td></tr></table></figure></p><hr><h3 id="指定镜像源"><a href="#指定镜像源" class="headerlink" title=" 指定镜像源 "></a><strong> 指定镜像源 </strong></h3><p>没有指定镜像源，使用官方的镜像源，可能网速会很慢。这里推荐使用清华的镜像源，示例<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install lxml -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><hr><h3 id="安装pyQt5"><a href="#安装pyQt5" class="headerlink" title=" 安装pyQt5 "></a><strong> 安装pyQt5 </strong></h3><p>安装pyQt5,会报错。最终发现是因为python安装没有带openssl这个库。<br><code>macOS High Sierra: ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib?</code></p><p>解决办法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">执行如下命令</span><br><span class="line"></span><br><span class="line">brew uninstall openssl &amp;&amp; brew install openssl &amp;&amp; CFLAGS=&quot;-I$(brew --prefix openssl)/include&quot; LDFLAGS=&quot;-L$(brew --prefix openssl)/lib&quot; pyenv install 3.7.0</span><br><span class="line"></span><br><span class="line">或者</span><br><span class="line"></span><br><span class="line">brew uninstall --ignore-dependencies openssl &amp;&amp; brew install openssl &amp;&amp; CFLAGS=&quot;-I$(brew --prefix openssl)/include&quot; LDFLAGS=&quot;-L$(brew --prefix openssl)/lib&quot; pyenv install 3.7.0</span><br><span class="line"></span><br><span class="line"># 然后再安装 PyQt5</span><br><span class="line">pip3 install PyQt5 --default-timeout=1000 -i https://pypi.tuna.tsinghua.edu.cn/simple</span><br></pre></td></tr></table></figure></p><hr><h3 id="RFE-pyenv-update-should-regenerate-shims-unconditionally"><a href="#RFE-pyenv-update-should-regenerate-shims-unconditionally" class="headerlink" title=" RFE: pyenv update should regenerate shims unconditionally "></a><strong> RFE: pyenv update should regenerate shims unconditionally </strong></h3><p>执行如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pyenv rehash</span><br></pre></td></tr></table></figure></p><hr><h3 id="ReadTimeoutError"><a href="#ReadTimeoutError" class="headerlink" title=" ReadTimeoutError "></a><strong> ReadTimeoutError </strong></h3><p>下载python库的时候，由于国内网络原因，python包的下载速度非常慢。会因为抛出错误<code>ReadTimeoutError</code>,而报错。</p><p>解决办法添加参数<code>--default-timeout=1000</code>即可，示例如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip3 install PyQt5 --default-timeout=1000</span><br></pre></td></tr></table></figure><hr><h3 id="xcrun-error-active-developer-path-“-Applications-Xcode-app-Contents-Developer”-does-not-exist"><a href="#xcrun-error-active-developer-path-“-Applications-Xcode-app-Contents-Developer”-does-not-exist" class="headerlink" title=" xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist "></a><strong> xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”) does not exist </strong></h3><p>如果报了这个错，执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo xcode-select --reset</span><br></pre></td></tr></table></figure><hr><h3 id="如果某一个包，安装过后，还是提示没有"><a href="#如果某一个包，安装过后，还是提示没有" class="headerlink" title=" 如果某一个包，安装过后，还是提示没有 "></a><strong> 如果某一个包，安装过后，还是提示没有 </strong></h3><p>上面的安装命令中，有的使用<code>pipenv</code>进行安装的。如果安装过后执行命令还是提示找不到的话，可以使用pip/pip3再安装一次。</p><hr><h3 id="参考资料"><a href="#参考资料" class="headerlink" title=" 参考资料 "></a><strong> 参考资料 </strong></h3><ul><li><a href="https://github.com/tzutalin/labelImg" target="_blank" rel="noopener">tzutalin/labelImg</a></li><li><a href="https://github.com/pyenv/pyenv/issues/993" target="_blank" rel="noopener">macOS High Sierra: ERROR: The Python ssl extension was not compiled. Missing the OpenSSL lib? #993</a></li><li><a href="https://mirrors.tuna.tsinghua.edu.cn/help/pypi/" target="_blank" rel="noopener">清华大学开源软件镜像站</a></li><li><a href="https://blog.csdn.net/lambert310/article/details/52412059" target="_blank" rel="noopener">更改pip源至国内镜像，显著提升下载速度</a></li><li><a href="https://yq.aliyun.com/articles/619208" target="_blank" rel="noopener">解决pip._vendor.urllib3.exceptions.ReadTimeoutError: HTTPSConnectionPool(host=’files.pythonhosted.org’, port=443): Read timed out.</a></li><li><a href="http://einverne.github.io/post/2017/04/pyenv.html" target="_blank" rel="noopener">使用 pyenv 管理 Python 版本</a></li><li><a href="xcrun: error: active developer path (“/Applications/Xcode.app/Contents/Developer”does not existAsk" target="_blank" rel="noopener">https://stackoverflow.com/questions/35009531/xcrun-error-active-developer-path-applications-xcode-app-contents-developer/35009644</a></li><li><a href="https://imyong.top/2018/05/25/%E5%A6%82%E4%BD%95%E7%94%A8Paython%E5%88%B6%E4%BD%9C%E8%87%AA%E5%B7%B1%E7%9A%84%E5%9B%BE%E7%89%87%E6%95%B0%E6%8D%AE%E9%9B%86/" target="_blank" rel="noopener">如何用Paython制作自己的图片数据集</a></li><li><a href="https://blog.csdn.net/mbytes/article/details/104102814" target="_blank" rel="noopener">You are using pip version 19.0.3, however version 20.0.2 is available.You should consider upgrading via the ‘pip install –upgrade pip’ command. 的解决办法</a></li><li><a href="https://github.com/pyenv/pyenv/issues/1068" target="_blank" rel="noopener">RFE: pyenv update should regenerate shims unconditionally</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端智能化 </tag>
            
            <tag> 数据集 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《从零到一》</title>
      <link href="/2020/03/07/reading-notes-of-from-zero-to-one/"/>
      <url>/2020/03/07/reading-notes-of-from-zero-to-one/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">不能说的秘密</h3><div id="security"> <div class="orz-container"> <input style="display:none"> <input type="password" class="get-key" id="pass" autocomplete="new-password"  placeholder="解锁新知识" /> <div class="input-group-orz"> <button type="button" class="final-key" onclick="decryptAES()">O.O</button> </div> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《运营之光》</title>
      <link href="/2020/03/07/reading-notes-of-operational-light/"/>
      <url>/2020/03/07/reading-notes-of-operational-light/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">不能说的秘密</h3><div id="security"> <div class="orz-container"> <input style="display:none"> <input type="password" class="get-key" id="pass" autocomplete="new-password"  placeholder="解锁新知识" /> <div class="input-group-orz"> <button type="button" class="final-key" onclick="decryptAES()">O.O</button> </div> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> 运营 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《从零开始做运营》</title>
      <link href="/2020/02/22/read-doing-operation-form-scratch/"/>
      <url>/2020/02/22/read-doing-operation-form-scratch/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">不能说的秘密</h3><div id="security"> <div class="orz-container"> <input style="display:none"> <input type="password" class="get-key" id="pass" autocomplete="new-password"  placeholder="解锁新知识" /> <div class="input-group-orz"> <button type="button" class="final-key" onclick="decryptAES()">O.O</button> </div> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何度过寒冬</title>
      <link href="/2020/02/16/how-to-spend-the-dead-winter/"/>
      <url>/2020/02/16/how-to-spend-the-dead-winter/</url>
      
        <content type="html"><![CDATA[<p>19年秋，在帝都望京和朋友吃饭。聊到了18年的互联网寒冬——很多互联网公司裁员。朋友说，年年都说是寒冬，身边没人找不到工作的，寒冬不是对我们来说的。</p><p>几个月一晃而过，疫情影响了整个中国。疫情何时结束尚且不知，但现在很多行业都不好过。确乎是寒冬了。有句话说2019年是过去十年最好的一年，2020年是未来十年最好的一年。希望这句话说错了。在大环境不好的日子里，更需要思考怎么度过。</p><p>近来看到了很多公司裁员、降薪的消息。疫情对于很多中小微企业来说，寒上加霜。除了这种大环境的寒冬，很多时候个体还会遭遇自己的寒冬，纵然他人春风得意，自己却失意潦倒，个中冷暖自知。困难的日子不好过，更容易发生悲观和失望。但此时更需要好好耕耘。</p><p>《史蒂夫·乔布斯传》中有这样一段话</p><blockquote><p><span class="under0"><strong>互联网泡沫的破裂导致其他科技公司减少了对新产品的投入。他回忆说：“ 当所有人都在削减开支的时候，我们反而决定要在情况低迷时继续投资。我们主要会投资在研发上面，发明出一些新东西，一旦低潮期过去，我们就已经领先于竞争对手了。”这种投入造就了苹果公司持续创新最辉煌的十年。</strong></span></p></blockquote><p>对于我们个体来说，在寒冬来临时，最重要的是先要保护好自己、生存下来。接下来，着力于自身能力的提升，等待新的机会。倘若寒冬来时，感觉特别不好过，那应该反思在寒冬来临前，自己是怎样生活的。<strong>所谓“未谋胜，先谋败”。</strong>在顺境的时候，应该有一些忧患意识。毕竟生活难免有一些意外。说起来简单，不过做起来却并不容易。</p><blockquote><p><span class="under0"><strong>中国人差不多都可以感到一切皆虚幻，只是大都是在失意被动无奈之下去感的，做聊以自慰用；如果你处在上升主动看去前程远大的时刻，有这个心境，那便是真懂了。</strong></span></p></blockquote><p>寒冬里的几点建议<br>1.保证身体的健康。</p><p>2.开源节流。手上一定要有一定的现金流，来抵御风险。开源是提高自己赚钱的能力。节流则是要理性消费，这里我推荐乔布斯对待近金钱的态度——<span class="under0"><strong>我经历过极度贫穷，那种感觉很美好。</strong></span></p><blockquote><p>  在苹果公司上市30年后，他回顾了当年一夜暴富的感受：<br>    我从来没有为钱担心过。我成长在一个中产阶级家庭，所以我从没担心过会挨饿；我在雅达利公司的时候，意识到自己是个还不错的工程师，所以我知道自己肯定可以维持生计；<span class="under0"><strong>我读大学和在印度的时候，自己选择了过苦日子，后来尽管我开始工作了，但我还是过着十分简单的生活。我经历过极度贫穷，那种感觉很美好，因为我不用为钱担忧，后来我变得特别有钱了，还是不用为钱担心。</strong></span><br>    我看到苹果公司的一些人，大赚一笔后就觉得自己要过不同的生活。他们买下劳斯莱斯汽车和许多房子，每所房子都有管家，然后再雇一个人管理所有的管家。他们的妻子去做整形手术，把自己变得稀奇古怪。<span class="under0"><strong>这不是我想要的生活方式。这太疯狂了。 我答应过自己，不会让钱毁了我的生活。</strong></span></p></blockquote><p>3.编程里面讲究设计。<span class="under0"><strong>好的设计讲究松耦合，个人和公司也是如此。</strong></span>要注意自己能力的提升，而不要过上温水煮青蛙的生活。<strong>作为一个软件开发人员，截至目前，职业生涯最大的错误就是没有把自己的软件开发事业当作一桩生意来看待。不要被愚弄了，当你为了谋生一头扎进写代码的世界时，其实你和中世纪小镇上开铁匠铺的铁匠没什么差别。</strong></p><p>要知道公司在困境时候，会裁员降薪，但是公司在发展好的时候，也没见发钱涨工资。<strong>更有些带有欺骗性的话语，比如“人是公司最宝贵的资产”。但要意识到资产是会折旧、被损坏的甚至被清退的。</strong></p><hr><p>已是悬崖百丈冰，犹有花枝俏。待到山花烂漫时，我花笑看百花开。</p><p><img src="/img/杂文/how-to-spend-the-dead-winter/1.jpeg" alt></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>六个网站覆盖99%的电子书资源</title>
      <link href="/2020/02/05/the-most-complete-e-book-resources-on-the-entire-network/"/>
      <url>/2020/02/05/the-most-complete-e-book-resources-on-the-entire-network/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>关于我是如何看书的，以及如何找电子书资源，已经被问过很多次了。<strong> 本文将介绍六个网站，三个搜索类型+三个资源类型的网站。有了这个六个网站，再也不为电子书资源发愁了。</strong></p><hr><h3 id="搜索类"><a href="#搜索类" class="headerlink" title=" 搜索类 "></a><strong> 搜索类 </strong></h3><p>我将用《挪威的森林》作为搜索词，来测试这三个搜索网站的搜书效果如何。</p><h4 id="鸠摩搜索"><a href="#鸠摩搜索" class="headerlink" title=" 鸠摩搜索 "></a><strong> 鸠摩搜索 </strong></h4><p><a href="https://www.jiumodiary.com/" target="_blank" rel="noopener">https://www.jiumodiary.com/</a></p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/1.png" alt="1.png"><br><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/8.png" alt="8.png"></p><p>鸠摩搜索一共搜索出来17个资源，且会对不同的电子书格式做了分类。</p><hr><h4 id="苦瓜书盘"><a href="#苦瓜书盘" class="headerlink" title=" 苦瓜书盘 "></a><strong> 苦瓜书盘 </strong></h4><p><a href="https://kgbook.com/" target="_blank" rel="noopener">https://kgbook.com/</a><br>的确好用，苦瓜书盘</p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/6.png" alt="6.png"><br><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/10.png" alt="10.png"><br>一共搜索出来3个资源。苦瓜书盘搜出来的资源，少了很多。但是苦瓜书盘，本身也是一个资源类型的网站。</p><hr><h4 id="万千集合站"><a href="#万千集合站" class="headerlink" title=" 万千集合站 "></a><strong> 万千集合站 </strong></h4><p>搜出来的资源很全<br><a href="http://www.hejizhan.com/html/search" target="_blank" rel="noopener">http://www.hejizhan.com/html/search</a></p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/7.png" alt="7.png"><br><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/9.png" alt="9.png"><br>万千集合站同样是搜索出来了17个电子书资源。资源丰富，且有热度排序。</p><hr><h3 id="资源类"><a href="#资源类" class="headerlink" title=" 资源类 "></a><strong> 资源类 </strong></h3><h4 id="亚马逊"><a href="#亚马逊" class="headerlink" title=" 亚马逊 "></a><strong> 亚马逊 </strong></h4><p>亚马逊免费kindle电子书<br><a href="https://www.amazon.cn/Kindle%E5%85%8D%E8%B4%B9%E7%94%B5%E5%AD%90%E4%B9%A6/b/ref=sa_menu_kindle_l3_b116175071?ie=UTF8&amp;node=116175071" target="_blank" rel="noopener">https://www.amazon.cn/Kindle%E5%85%8D%E8%B4%B9%E7%94%B5%E5%AD%90%E4%B9%A6/b/ref=sa_menu_kindle_l3_b116175071?ie=UTF8&amp;node=116175071</a></p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/3.png" alt="3.png"></p><p><strong> 除了亚马逊本身提供的免费电子书服务，我不得不安利下，亚马逊的kindle unlimited服务。有15万+本电子书可以免费阅读。</strong> 并且价格十分便宜，包月12月，1年98元，2年160元。<br><a href="https://www.amazon.cn/b/ref=sv_kinc_2?ie=UTF8&amp;node=1337022071" target="_blank" rel="noopener">https://www.amazon.cn/b/ref=sv_kinc_2?ie=UTF8&amp;node=1337022071</a></p><hr><h4 id="图灵社区免费电子书"><a href="#图灵社区免费电子书" class="headerlink" title=" 图灵社区免费电子书 "></a><strong> 图灵社区免费电子书 </strong></h4><p>图灵社区的电子书资源还不错<br><a href="https://www.ituring.com.cn/book?tab=free" target="_blank" rel="noopener">https://www.ituring.com.cn/book?tab=free</a></p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/2.png" alt="2.png"></p><hr><h4 id="脚本之家电子书，数量较多"><a href="#脚本之家电子书，数量较多" class="headerlink" title=" 脚本之家电子书，数量较多 "></a><strong> 脚本之家电子书，数量较多 </strong></h4><p><a href="https://www.jb51.net/books/" target="_blank" rel="noopener">https://www.jb51.net/books/</a></p><p>脚本之家电子书，数量较多。大多数都是技术相关的书籍。</p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/4.png" alt="4.png"></p><p><img src="/img/分享/the-most-complete-e-book-resources-on-the-entire-network/5.png" alt="5.png"></p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>很多时候，我们缺的不是资源，而是要利用好这些资源，为自己所用。</p>]]></content>
      
      
      <categories>
          
          <category> 分享 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript获取页面url参数</title>
      <link href="/2020/01/26/get-page-url-params-by-javascript/"/>
      <url>/2020/01/26/get-page-url-params-by-javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>获取页面url的参数是一个很常见的需求，我也遇到过了很多次了。本文做下记录。<br>当然已经有了一个开源库做了相关的工作<a href="https://github.com/sindresorhus/query-string" target="_blank" rel="noopener">query-string</a></p><hr><h3 id="URLSearchParams"><a href="#URLSearchParams" class="headerlink" title=" URLSearchParams "></a><strong> URLSearchParams </strong></h3><p><code>URL()</code> 构造函数返回一个新创建的 <code>URL</code> 对象，表示由一组参数定义的 <code>URL</code>。<br>如果给定的基本 URL 或生成的 URL 不是有效的 URL 链接，则会抛出一个类型为 SYNTAX_ERROR 的 DOMException。</p><p>在<code>stackoverflow</code>上看到了一个方法，利用<a href="https://developer.mozilla.org/zh-CN/docs/Web/API/URL/URL" target="_blank" rel="noopener">URL()</a>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">var url_string = &quot;http://www.example.com/t.html?a=1&amp;b=3&amp;c=m2-m3-m4-m5&quot;; //window.location.href</span><br><span class="line">var url = new URL(url_string);</span><br><span class="line">var c = url.searchParams.get(&quot;c&quot;);</span><br><span class="line"></span><br><span class="line"># console.log(c);</span><br><span class="line">&quot;m2-m3-m4-m5&quot;</span><br></pre></td></tr></table></figure></p><p>如果是旧的浏览器不支持的话<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">parse_query_string</span>(<span class="params">query</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> vars = query.split(<span class="string">"&amp;"</span>);</span><br><span class="line">  <span class="keyword">var</span> query_string = &#123;&#125;;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; vars.length; i++) &#123;</span><br><span class="line">    <span class="keyword">var</span> pair = vars[i].split(<span class="string">"="</span>);</span><br><span class="line">    <span class="keyword">var</span> key = <span class="built_in">decodeURIComponent</span>(pair[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">var</span> value = <span class="built_in">decodeURIComponent</span>(pair[<span class="number">1</span>]);</span><br><span class="line">    <span class="comment">// If first entry with this name</span></span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">typeof</span> query_string[key] === <span class="string">"undefined"</span>) &#123;</span><br><span class="line">      query_string[key] = <span class="built_in">decodeURIComponent</span>(value);</span><br><span class="line">      <span class="comment">// If second entry with this name</span></span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="keyword">typeof</span> query_string[key] === <span class="string">"string"</span>) &#123;</span><br><span class="line">      <span class="keyword">var</span> arr = [query_string[key], <span class="built_in">decodeURIComponent</span>(value)];</span><br><span class="line">      query_string[key] = arr;</span><br><span class="line">      <span class="comment">// If third or later entry with this name</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      query_string[key].push(<span class="built_in">decodeURIComponent</span>(value));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> query_string;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query_string = <span class="string">"a=1&amp;b=3&amp;c=m2-m3-m4-m5"</span>;</span><br><span class="line"><span class="keyword">var</span> parsed_qs = parse_query_string(query_string);</span><br><span class="line"><span class="built_in">console</span>.log(parsed_qs.c);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> query = <span class="built_in">window</span>.location.search.substring(<span class="number">1</span>);</span><br><span class="line"><span class="keyword">var</span> qs = parse_query_string(query);</span><br></pre></td></tr></table></figure></p><hr><h3 id="正则法"><a href="#正则法" class="headerlink" title=" 正则法 "></a><strong> 正则法 </strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">GetQueryString</span>(<span class="params">name</span>)</span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">     <span class="keyword">var</span> reg = <span class="keyword">new</span> <span class="built_in">RegExp</span>(<span class="string">"(^|&amp;)"</span>+ name +<span class="string">"=([^&amp;]*)(&amp;|$)"</span>);</span><br><span class="line">     <span class="keyword">var</span> r = <span class="built_in">window</span>.location.search.substr(<span class="number">1</span>).match(reg);</span><br><span class="line">     <span class="keyword">if</span>(r!=<span class="literal">null</span>)<span class="keyword">return</span>  <span class="built_in">unescape</span>(r[<span class="number">2</span>]); <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br><span class="line"> </span><br><span class="line"><span class="comment">// 调用方法</span></span><br><span class="line">alert(GetQueryString(<span class="string">"参数名1"</span>));</span><br><span class="line">alert(GetQueryString(<span class="string">"参数名2"</span>));</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">gup</span>(<span class="params"> name, url </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!url) url = location.href;</span><br><span class="line">    name = name.replace(<span class="regexp">/[\[]/</span>,<span class="string">"\\\["</span>).replace(<span class="regexp">/[\]]/</span>,<span class="string">"\\\]"</span>);</span><br><span class="line">    <span class="keyword">var</span> regexS = <span class="string">"[\\?&amp;]"</span>+name+<span class="string">"=([^&amp;#]*)"</span>;</span><br><span class="line">    <span class="keyword">var</span> regex = <span class="keyword">new</span> <span class="built_in">RegExp</span>( regexS );</span><br><span class="line">    <span class="keyword">var</span> results = regex.exec( url );</span><br><span class="line">    <span class="keyword">return</span> results == <span class="literal">null</span> ? <span class="literal">null</span> : results[<span class="number">1</span>];</span><br><span class="line">&#125;</span><br><span class="line">gup(<span class="string">'q'</span>, <span class="string">'hxxp://example.com/?q=abc'</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://stackoverflow.com/questions/979975/how-to-get-the-value-from-the-get-parameters" target="_blank" rel="noopener">How to get the value from the GET parameters?</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/decodeURIComponent" target="_blank" rel="noopener">decodeURIComponent()</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/encodeURIComponent" target="_blank" rel="noopener">encodeURIComponent()</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Latex语法</title>
      <link href="/2020/01/26/latex-grammer/"/>
      <url>/2020/01/26/latex-grammer/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对Latex语法的部分记录。因为我在平时写blog的时候,偶尔还是会需要写一些公式的，为了避免下次又去网上查找，直接记录在本文。</p><p>关于Hexo中如何使用Latex,之前已经写了一篇博客做介绍,<a href="http://www.sail.name/2018/05/31/use-mathjax-in-hexo/">在hexo使用mathjax</a>。</p><hr><h3 id="实践"><a href="#实践" class="headerlink" title=" 实践 "></a><strong> 实践 </strong></h3><p><span class="under0"><strong>在输入数学公式的时候，需要在数学公式的前后加入<code>$$</code>或<code>$</code>符号，将需要输入的公式加入到<code>$$</code>或<code>$</code>中间。</strong></span></p><p><code>$$</code>会使公式居中,<code>$</code>不会。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$h(\theta) =$</span><br><span class="line">$$h(\theta) =$$</span><br><span class="line">$\alpha$</span><br></pre></td></tr></table></figure><p>展示如下</p><p>$h(\theta) =$<br>$$h(\theta)=$$<br>$\alpha$</p><hr><h3 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h3><p>LaTeX 能够自动处理公式中的大多数字符之间的空格，但是有时候需要自己手动进行控制。</p><h4 id="公式中的空格"><a href="#公式中的空格" class="headerlink" title=" 公式中的空格 "></a><strong> 公式中的空格 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">紧贴 $a\!b$</span><br><span class="line">没有空格 $ab$</span><br><span class="line">小空格 a\,b</span><br><span class="line">中等空格 a\;b</span><br><span class="line">大空格 a\ b</span><br><span class="line">quad空格 $a\quad b$</span><br><span class="line">两个quad空格 $a\qquad b$</span><br></pre></td></tr></table></figure><h4 id="上标和下标"><a href="#上标和下标" class="headerlink" title=" 上标和下标 "></a><strong> 上标和下标 </strong></h4><p>上标命令是 ^{角标}，下标命令是 _{角标}。当角标是单个字符时可以不用花括号（在 LaTeX 中，花括号是用于分组，即花括号内部文本为一组）。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$$x_1$$</span><br><span class="line">$$x_1^2$$</span><br><span class="line">$$x^2_1$$</span><br><span class="line">$$x_&#123;22&#125;^&#123;(n)&#125;$$</span><br><span class="line">$$&#123;&#125;^*\!x^*$$    %（“\!” 表示其前后字符之间无间隙）</span><br><span class="line"></span><br><span class="line"># 下面是示范例子</span><br><span class="line">$x_1 \quad  x_1^2  \quad  x^2_1 \quad  x_&#123;22&#125;^&#123;(n)&#125;$</span><br><span class="line">$x_1 \qquad  x_1^2  \qquad  x^2_1 \qquad  x_&#123;22&#125;^&#123;(n)&#125;$</span><br><span class="line">$x_1 \  x_1^2  \  x^2_1 \  x_&#123;22&#125;^&#123;(n)&#125;$</span><br><span class="line">$x_1 x_1^2 x^2_1 x_&#123;22&#125;^&#123;(n)&#125;$</span><br></pre></td></tr></table></figure></p><p>$x_1 \quad  x_1^2  \quad  x^2_1 \quad  x_{22}^{(n)}$<br>$x_1 \qquad  x_1^2  \qquad  x^2_1 \qquad  x_{22}^{(n)}$<br>$x_1 \  x_1^2  \  x^2_1 \  x_{22}^{(n)}$<br>$x_1 x_1^2 x^2_1 x_{22}^{(n)}$</p><hr><h4 id="数学模式和文本模式"><a href="#数学模式和文本模式" class="headerlink" title=" 数学模式和文本模式 "></a><strong> 数学模式和文本模式 </strong></h4><p>LATEX可以排版公式与文字，故分为：数学模式和文本模式。如果你想要在公式中排版普通的文本（直立字体和普通字距），那么你必须要把这些文本放在\textrm{…} 命令中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$x_1 \quad \textrm&#123;哈哈哈哈&#125; \quad  x_&#123;22&#125;^&#123;(n)&#125;$</span><br></pre></td></tr></table></figure></p><p>$x_1 \quad \textrm{哈哈哈哈} \quad  x_{22}^{(n)}$</p><hr><h4 id="分式"><a href="#分式" class="headerlink" title=" 分式 "></a><strong> 分式 </strong></h4><p>输入较短的分式时，最简单的方法是使用斜线，譬如输入 (x+y)/2，可得到(x+y)/2 。<br>要输入带有水平分数线的公式，可用命令：<code>\frac{分子}{分母}</code>。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$\frac&#123;x+y&#125;&#123;2&#125;$</span><br><span class="line">$\frac&#123;1&#125;&#123;1+\frac&#123;1&#125;&#123;2&#125;&#125;$</span><br></pre></td></tr></table></figure></p><p>$\frac{x+y}{2}$<br>$\frac{1}{1+\frac{1}{2}}$</p><hr><h4 id="根式"><a href="#根式" class="headerlink" title=" 根式 "></a><strong> 根式 </strong></h4><p>排版根式的命令是：开平方：\sqrt{表达式}；开 n 次方：\sqrt[n]{表达式}</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$\sqrt&#123;2&#125;&lt;\sqrt[3]&#123;3&#125;$</span><br><span class="line">$\sqrt&#123;1+\sqrt[p]&#123;1+a^2&#125;&#125;$</span><br><span class="line">$\sqrt&#123;1+\sqrt[^p\!]&#123;1+a^2&#125;&#125;$</span><br></pre></td></tr></table></figure><p>$\sqrt{2}&lt;\sqrt[3]{3}$<br>$\sqrt{1+\sqrt[p]{1+a^2}}$<br>$\sqrt{1+\sqrt[^p!]{1+a^2}}$</p><hr><h4 id="求和与积分"><a href="#求和与积分" class="headerlink" title=" 求和与积分 "></a><strong> 求和与积分 </strong></h4><p>排版求和符号与积分符号的命令分别为 \sum 和 \int，它们通常都有上下限，在排版上就是上标和下标。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$\sum_&#123;k=1&#125;^&#123;n&#125;\frac&#123;1&#125;&#123;k&#125;$</span><br><span class="line">$\sum_&#123;k=1&#125;^n\frac&#123;1&#125;&#123;k&#125;$</span><br><span class="line">$\int_a^b f(x)dx$</span><br><span class="line">$\int_a^b f(x)dx$</span><br><span class="line">微分符直体：$\int_a^b f(x)\mathrm&#123;d&#125;x$</span><br></pre></td></tr></table></figure><p>$\sum_{k=1}^{n}\frac{1}{k}$<br>$\sum_{k=1}^n\frac{1}{k}$<br>$\int_a^b f(x)dx$<br>$\int_a^b f(x)dx$<br>$\int_a^b f(x)\mathrm{d}x$</p><hr><h4 id="公式中的定界符"><a href="#公式中的定界符" class="headerlink" title=" 公式中的定界符 "></a><strong> 公式中的定界符 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$($  $x_1$  $)$ </span><br><span class="line">$[$  $x_1$  $]$ </span><br><span class="line">$\|$ $x_1$   $\|$</span><br><span class="line">$$\left(\sum_&#123;k=\frac&#123;1&#125;&#123;2&#125;&#125;^&#123;N^2&#125;\frac&#123;1&#125;&#123;k&#125;\right)$$</span><br><span class="line"></span><br><span class="line"># 花括号</span><br><span class="line">$\lbrace a*b \rbrace$</span><br><span class="line"></span><br><span class="line"># 在上述这些定界符之前冠以 \left（修饰左定界符）或 \right（修饰右定界符），</span><br><span class="line"># 可以得到自适应缩放的定界符，它们会根据定界符所包围的公式大小自适应缩放。</span><br><span class="line">$$\left(\sum_&#123;k=\frac&#123;1&#125;&#123;2&#125;&#125;^&#123;N^2&#125;\frac&#123;1&#125;&#123;k&#125;\right)$$</span><br></pre></td></tr></table></figure><p>$($  $x_1$  $)$<br>$[$  $x_1$  $]$<br>$|$ $x_1$   $|$<br>$$\left(\sum_{k=\frac{1}{2}}^{N^2}\frac{1}{k}\right)$$<br>$\lbrace a*b \rbrace$</p><hr><h4 id="字体"><a href="#字体" class="headerlink" title=" 字体 "></a><strong> 字体 </strong></h4><ul><li>使用\mathbb或\Bbb显示黑板粗体字，此字体经常用来表示代表实数、整数、有理数、复数的大写字母。<br><code>$\mathbb{CHNQRZ}$</code><br>$\mathbb{CHNQRZ}$ </li><li>使用\mathbf显示黑体字<br><code>$\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$</code><br>$\mathbf{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$</li><li>使用\mathtt显示打印机字体<br><code>$\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$，$\mathtt{abcdefghijklmnopqrstuvwxyz}$</code><br>$\mathtt{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$，$\mathtt{abcdefghijklmnopqrstuvwxyz}$</li><li>使用\mathrm显示罗马字体<br><code>$\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$，$\mathrm{abcdefghijklmnopqrstuvwxyz}$</code><br>$\mathrm{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$，$\mathrm{abcdefghijklmnopqrstuvwxyz}$</li><li>使用\mathscr显示手写体, 无小写<br><code>$\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}, $\mathscr{abcdefghijklmnopqrstuvwxyz}$</code><br>$\mathscr{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$, $\mathscr{abcdefghijklmnopqrstuvwxyz}$</li><li>使用\mathfrak显示Fraktur字母（一种德国字体）<br><code>$\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$, $\mathfrak{abcdefghijklmnopqrstuvwxyz}$</code><br>$\mathfrak{ABCDEFGHIJKLMNOPQRSTUVWXYZ}$, $\mathfrak{abcdefghijklmnopqrstuvwxyz}$</li></ul><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://www.cnblogs.com/houkai/p/3399646.html" target="_blank" rel="noopener">LATEX数学公式基本语法</a><br><a href="http://mohu.org/info/symbols/symbols.htm" target="_blank" rel="noopener">常用数学符号的 LaTeX 表示方法</a><br><a href="http://simtalk.cn/2015/12/21/Demo-LaTeX/" target="_blank" rel="noopener">Demo LaTeX</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> LATEX </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS中的数字类型</title>
      <link href="/2020/01/22/number-type-in-javascript/"/>
      <url>/2020/01/22/number-type-in-javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在JavaScript中，一个数字过大，会导致数字不准确。比如在浏览器中输入下图中的数字，输出的却是另外一个数字。<br><img src="/img/JavaScript/number-type-in-javascript/1.png" alt="1.png"></p><p>这是因为超出了JS中的数字的最大类型。不在双精度浮点数的取值范围内。 超出这个范围，JavaScript 中的数字不再安全了。<br>本文会对JS中的数字类型做些记录。</p><hr><h3 id="IEEE-754"><a href="#IEEE-754" class="headerlink" title=" IEEE 754 "></a><strong> IEEE 754 </strong></h3><p>IEEE二进制浮点数算术标准（IEEE 754）是20世纪80年代以来最广泛使用的浮点数运算标准，为许多CPU与浮点运算器所采用。IEEE 754规定了四种表示浮点数值的方式：单精确度（32位）、双精确度（64位）、延伸单精确度（43比特以上，很少使用）与延伸双精确度（79比特以上，通常以80位实现）。</p><p><img src="/img/JavaScript/number-type-in-javascript/2.png" alt="2.png"></p><h4 id="浮点数剖析"><a href="#浮点数剖析" class="headerlink" title=" 浮点数剖析 "></a><strong> 浮点数剖析 </strong></h4><p>一个浮点数 (Value) 的表示其实可以这样表示：</p><p>$value = sign \times exponent \times fraction$</p><p>也就是浮点数的实际值，等于符号位<code>（sign bit）</code>乘以指数偏移值<code>(exponent bias)</code>再乘以分数值<code>(fraction)</code>。</p><p>以下内文是<code>IEEE 754</code>对浮点数格式的描述。</p><h4 id="32位单精度"><a href="#32位单精度" class="headerlink" title=" 32位单精度 "></a><strong> 32位单精度 </strong></h4><p>单精度二进制小数，使用32个比特存储</p><table><thead><tr><th>S</th><th>Exp</th><th>Fraction</th></tr></thead><tbody><tr><td>1</td><td>8</td><td>23位长</td></tr><tr><td>31</td><td>30至23 偏正值（实际的指数大小+127）</td><td>22至0位编号（从右边开始为0）</td></tr></tbody></table><p>S为符号位，Exp为指数字，Fraction为有效数字。 指数部分即使用所谓的偏正值形式表示，偏正值为实际的指数大小与一个固定值（32位的情况是127）的和。采用这种方式表示的目的是简化比较。因为，指数的值可能为正也可能为负，如果采用补码表示的话，全体符号位S和Exp自身的符号位将导致不能简单的进行大小比较。正因为如此，指数部分通常采用一个无符号的正数值存储。单精度的指数部分是−126～+127加上偏移值127，指数值的大小从1～254（0和255是特殊值）。浮点小数计算时，指数值减去偏正值将是实际的指数大小。</p><h4 id="64位双精度"><a href="#64位双精度" class="headerlink" title=" 64位双精度 "></a><strong> 64位双精度 </strong></h4><p>双精度二进制小数，使用64个比特存储。</p><table><thead><tr><th>S</th><th>Exp</th><th>Fraction</th></tr></thead><tbody><tr><td>1</td><td>11</td><td>52位长</td></tr><tr><td>63</td><td>62至52 偏正值（实际的指数大小+1023）</td><td>51至0位编号（从右边开始为0）</td></tr></tbody></table><p>S为符号位，Exp为指数字，Fraction为有效数字。指数部分即使用所谓的偏正值形式表示，偏正值为实际的指数大小与一个固定值（64位的情况是1023）的和。采用这种方式表示的目的是简化比较。因为，指数的值可能为正也可能为负，如果采用补码表示的话，全体符号位S和Exp自身的符号位将导致不能简单的进行大小比较。正因为如此，指数部分通常采用一个无符号的正数值存储。双精度的指数部分是−1022～+1023加上1023，指数值的大小从1～2046（0（2进位全为0）和2047（2进位全为1）是特殊值）。浮点小数计算时，指数值减去偏正值将是实际的指数大小。</p><hr><h3 id="数字类型"><a href="#数字类型" class="headerlink" title=" 数字类型 "></a><strong> 数字类型 </strong></h3><p>根据 <code>ECMAScript</code> 标准，<code>JavaScript</code> 中只有一种数字类型：基于 <code>IEEE 754</code> 标准的双精度 64 位二进制格式的值（$-2^{53} - 1$   到 $2^{53} - 1$）。它并没有为整数给出一种特定的类型。除了能够表示浮点数外，还有一些带符号的值：<code>+Infinity</code>，<code>-Infinity</code> 和 NaN (非数值，Not-a-Number)。</p><p>要检查值是否大于或小于 <code>+/-Infinity</code>，你可以使用常量 <code>Number.MAX_VALUE</code> 和 <code>Number.MIN_VALUE</code>。另外在 <code>ECMAScript 6</code> 中，你也可以通过 <code>Number.isSafeInteger()</code> 方法还有 <code>Number.MAX_SAFE_INTEGER</code> 和 <code>Number.MIN_SAFE_INTEGER</code> 来检查值是否在双精度浮点数的取值范围内。 超出这个范围，<code>JavaScript</code> 中的数字不再安全了，也就是只有 <code>second mathematical interger</code> 可以在 <code>JavaScript</code> 数字类型中正确表现。</p><p>数字类型中只有一个整数有两种表示方法： 0 可表示为 -0 和 +0（”0” 是 +0 的简写）。 在实践中，这也几乎没有影响。 例如 +0 === -0 为真。 但是，你可能要注意除以0的时候：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">42 / +0; // Infinity</span><br><span class="line">42 / -0; // -Infinity</span><br></pre></td></tr></table></figure></p><p>尽管一个数字常常仅代表它本身的值，但JavaScript提供了一些位运算符。 这些位运算符和一个单一数字通过位操作可以用来表现一些布尔值。然而自从 <code>JavaScript</code> 提供其他的方式来表示一组布尔值（如一个布尔值数组或一个布尔值分配给命名属性的对象）后，这种方式通常被认为是不好的。位操作也容易使代码难以阅读，理解和维护， 在一些非常受限的情况下，可能需要用到这些技术，比如试图应付本地存储的存储限制。 位操作只应该是用来优化尺寸的最后选择。</p><h4 id="Number-MAX-SAFE-INTEGER"><a href="#Number-MAX-SAFE-INTEGER" class="headerlink" title=" Number.MAX_SAFE_INTEGER  "></a><strong> Number.MAX_SAFE_INTEGER  </strong></h4><p><code>MAX_SAFE_INTEGER</code> 是一个值为 <code>9007199254740991的常量</code>。因为<code>Javascript</code>的数字存储使用了<code>IEEE 754</code>中规定的双精度浮点数数据类型，而这一数据类型能够安全存储 $-2^{53} - 1$  到 $2^{53} - 1$ 之间的数值（包含边界值）。</p><p>这里安全存储的意思是指能够准确区分两个不相同的值，例如 <code>Number.MAX_SAFE_INTEGER + 1 === Number.MAX_SAFE_INTEGER + 2</code> 将得到 true的结果，而这在数学上是错误的，参考<code>Number.isSafeInteger()</code>获取更多信息.</p><p>由于 <code>MAX_SAFE_INTEGER</code> 是<code>Number</code>的一个静态属性，所以你不用自己动手为Number对象创建<code>Number.MAX_SAFE_INTEGER</code>这一属性，就可以直接使用它。</p><hr><h3 id="BigInt-类型"><a href="#BigInt-类型" class="headerlink" title=" BigInt 类型 "></a><strong> BigInt 类型 </strong></h3><p><code>BigInt</code>类型是 <code>JavaScript</code> 中的一个基础的数值类型，可以用任意精度表示整数。使用 BigInt，您可以安全地存储和操作大整数，甚至可以超过数字的安全整数限制。BigInt是通过在整数末尾附加 n 或调用构造函数来创建的。</p><p>通过使用常量<code>Number.MAX_SAFE_INTEGER</code>，您可以获得可以用数字递增的最安全的值。通过引入 BigInt，您可以操作超过Number.MAX_SAFE_INTEGER的数字。您可以在下面的示例中观察到这一点，其中递增<code>Number.MAX_SAFE_INTEGER</code>会返回预期的结果:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">const x = 2n ** 53n;</span><br><span class="line">9007199254740992n</span><br><span class="line">const y = x + 1n; </span><br><span class="line">9007199254740993n</span><br></pre></td></tr></table></figure><p>可以对BigInt使用运算符+、*、-、**和%，就像对数字一样。BigInt 严格来说并不等于一个数字，但它是松散的。</p><p>在将BigInt转换为Boolean时，它的行为类似于一个数字：if、||、&amp;&amp;、Boolean 和!。</p><p>BigInt不能与数字互换操作。否则，将抛出TypeError。</p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://zh.wikipedia.org/wiki/IEEE_754" target="_blank" rel="noopener">IEEE 754</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Data_structures" target="_blank" rel="noopener">JavaScript 数据类型和数据结构</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/MAX_SAFE_INTEGER" target="_blank" rel="noopener">Number.MAX_SAFE_INTEGER</a><br><a href="https://blog.windstone.cc/front-end/js/data-structure/number/js-number-implementation.html#javascript-%E5%85%B3%E4%BA%8E-ieee-754-%E5%8F%8C%E7%B2%BE%E5%BA%A6%E6%B5%AE%E7%82%B9%E6%95%B0%E7%9A%84%E5%AE%9E%E7%8E%B0" target="_blank" rel="noopener">JavaScript 关于 IEEE 754 双精度浮点数的实现</a><br><a href="https://github.com/nefe/number-precision" target="_blank" rel="noopener">number-precision</a><br><a href="https://zhuanlan.zhihu.com/p/66949640" target="_blank" rel="noopener">前端应该知道的JavaScript浮点数和大数的原理</a><br><a href="https://github.com/camsong/blog/issues/9" target="_blank" rel="noopener">JavaScript 浮点数陷阱及解法 #9</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《彼得·林奇的成功投资》</title>
      <link href="/2020/01/13/reading-notes-of-Peter-Lynchs-successful-investment/"/>
      <url>/2020/01/13/reading-notes-of-Peter-Lynchs-successful-investment/</url>
      
        <content type="html"><![CDATA[<ul><li><p>林奇告诉我们在他从事投资的几十年里他本人和那么多的专家没有一个人能够预测股市，所以千万不要预测股市；</p></li><li><p>但是，我想对那些在股票价格高涨后才买入的人们敲响警钟：这些网络公司过高的股价已经反映了未来数年盈利迅速增长，而这种增长可能发生也可能不会发生，</p></li><li><p><span class="under0"><strong> 由于几乎没有盈利，大多数网络公司的股票不能用常用的市盈率（Price/Earning,P/E，市价比每股盈利）来估值，也就是说市盈率计算公式P/E中至关重要的每股收益“E”的数据根本不存在。</strong></span></p></li><li><p><span class="under0"><strong>在无法计算市盈率的情况下，投资者只能把注意力集中到另外一个随处可见的数据上：股价！我个人认为“股价”是投资者所能追踪到的最没有价值的信息，却又是投资者最普遍追踪的信息。</strong></span></p></li><li><p><span class="under0"><strong>今天或者下一周“市场先生”对一只网络公司股票的报价并不能告诉你这家网络公司未来两三年内在信息高速公路上拥有最佳的成功机会。如果你只追随一个数据进行投资，那么就追随盈利——当然前提是我们正在讨论的这家公司有盈利。</strong></span></p></li><li><p><span class="under0"><strong>我支持这样一种投资理念：公司盈利迟早决定证券投资的成败与否。关注今天、明天或者未来一周的股价表现如何只会分散投资者的注意力。</strong></span></p></li><li><p>让我们来分析一个假设的网络公司案例：DotCom.com公司。首先，你计算公司的股票市场价值（marketcapitalization，缩写为marketcap，简称市值），即用当前的股价（假定为每股100美元）乘以流通股总数（假定为1亿股），1亿股乘以100美元等于100亿美元，这就是DotCom.com公司的总市值。无论何时购买股票，你都会盼望着公司市值不断增长。只有当买方支付的买入价格不断提高时，公司的市值才会增加，也才会让你的股票投资升值。同样的道理，DotCom.com公司的股票要成为一只10倍股，首先其市值必须上涨10倍，即从100亿美元增加到1000亿美元。一旦你确定了目标市值，你就得问自己这样一个问题：DotCom.com公司需要盈利多少才能支撑1000亿美元的市值？为了得到一个大致的答案，你可以运用快速增长型公司的平均市盈率进行计算——在目前这个热得发烫的股市中我们假定这类公司的市盈率是每股收益的40倍。</p></li><li><p>彼得·林奇从来没有建议过仅仅因为喜欢在某家商店买东西你就应该购买它的股票，也没有建议过仅仅因为某家厂商生产你最喜欢的产品或者因为你喜欢某家饭店的饭菜就应该购买它们的股票。<span class="under0"><strong>喜欢一家商店、一件产品或者一家饭店是对一家公司产生兴趣并将其股票列入你的研究名单的一个很好的理由，但这并不是购买这家公司股票的充分理由！在你还没有对一家公司的收益前景、财务状况、竞争地位、发展计划等情况进行充分研究之前，千万不要贸然买入它的股票。</strong></span></p></li><li><p>你必须留意什么才是公司未来的增长之源，并且预测公司的增长速度何时可能会放慢下来。</p></li><li><p>此外，我的投资组合中还有投资业绩很差的严重套牢股票，目前其卖出价格远低于我当初的买入价格，我继续持有这些表现令人失望的股票并不是因为固执或者怀旧，而是因为这些公司的财务状况相当不错，我认为这意味着其股价上涨的好日子还在后头。</p></li><li><p>那些目前卖价低于过去买价的严重套牢股票让我想到一个重要的观点：你没有必要在所选择的每一只股票上都赚钱。根据我个人的经验，一个投资组合中10只股票中有6只股票能够赚钱的话就会产生十分令人满意的投资业绩了。</p></li><li><p>投资者只要挑选到少数几只大牛股就能够获得一生的投资成功，因为你从这几只大牛股上获得的盈利会远远超过在那些表现不尽如人意的股票上所遭受的损失。</p></li><li><p><span class="under0"><strong>持续关注一家公司的发展状况对于投资来说至关重要。</strong></span></p></li><li><p><span class="under0"><strong>虽然投资者被忠告要从长远考虑，但是每一次在市场震荡时投资者耳边持续不断听到的股市评论使得他们的神经高度紧张而更加关注股市的短期波动。不受股市短期波动的影响而进行操作的投资者面临很大的心理挑战。如果投资者能够远离那些针对最近股市涨跌进行评论的陈词滥调，而是像查看汽车里的机油那样每六个月左右才查看一次股票的价格，他们的投资过程可能会轻松得多。</strong></span></p></li><li><p>顺便说一句，指望依靠当天交易这种短线投资来赚钱谋生就像指望依靠赛车和玩21点赌牌谋生一样，机会非常渺茫。</p></li><li><p>那些想知道在任何一个交易日股票走势如何的人们都会问：道琼斯指数收盘是多少点？而我更感兴趣的问题是：上涨股票数目与下跌股票数目之比是多少？这种上涨/下跌比率（advance/declinenumbers）更加真实地描绘了当天股市的真实情况，尤其是在目前这种只有少数股票上涨而大多数股票都在下跌的市场行情中，这一指标最为真实地反映了股市的真实情况。那些购买了“被市场低估”的小盘股或中盘股的投资者由于他们的自作聪明而受到了市场的惩罚。他们为此迷惑不解：为什么当标准普尔500指数上涨了20%时我买的股票却下跌了呢？答案是：推动标准普尔500指数上涨的主要动力是一些大盘股大幅上涨，而不是小</p></li><li><p><span class="under0"><strong>历史情况告诉我们，市场修正（correction，下跌10%或者更多）每隔几年就会发生一次，熊市（bearmarket，下跌20%或者更多）每隔6年会出现一次。从1929~1932年股市大崩盘之后，大熊市（severebearmarket，下跌30%或者更多）又发生了5次，因此跟别人打赌说这是我们看到的最后一次熊市行情无疑是非常愚蠢之举，这也正是为什么你一定要牢记在心的非常重要的一个原则是：绝不要用你明年的大学学费、结婚费用或者其他开支的资金来购买股票或者共同基金。这样你就不必在一个大跌的市场中被迫卖掉股票以换成现金来支付不得不支付的必要开支。如果你是一个长线投资者，那么时间最终会站在你这一边。</strong></span></p></li><li><p>我详细叙述这些情况是为了说明什么呢？我想说的是，如果我们能够在股市由涨转跌之前及时脱身从而避免损失那就简直太棒了，但是至今为止还没有任何人能够准确预测出市场何时会由涨转跌。不仅如此，即使你卖出了股票避开了股市下跌，你如何能够确定你能赶在下一轮的股市上涨行情之前及时再次入市呢？</p></li><li><p><span class="under0"><strong>可见，在股市中耐心等待更长的时间会让你的投资回报增加一倍还要多。</strong></span></p></li><li><p>股票投资的基本原则非常简单并且永恒不变。股票并非彩票。与每一只股票紧密相关的都是一家上市公司，公司经营有时会更好、有时会更差。如果一家公司的经营状况比以前更差，那么这家公司的股价就会下跌；如果一家公司的经营状况比以前更好，那么这家公司的股价就会上涨。如果你持有一家盈利不断增长的公司的股票，那么你的股票投资回报将会十分丰厚。从第二次世界大战以来，公司整体盈利已经增长了55倍，与此同时整个股市也上涨了60倍。尽管在此期间发生过4次战争、9次经济衰退、换了8位总统，并且有1位总统遭到弹劾，但这一切都未能改变股价随着公司盈利增长而不断上涨的势头。</p></li><li><p><span class="under0"><strong>对于未来10年我的投资建议是：继续寻找未来的大牛股。你们中的任何一个业余投资者都有可能找到一只大牛股。</strong></span></p></li><li><p><span class="under0"><strong>如果你在股市暴跌中绝望地卖出股票，那么你的卖出价格往往会非常之低。</strong></span></p></li><li><p><span class="under0"><strong>即使10月19日的行情让你对股市的走势感到惊恐不安，你也不必在这一天甚至在第二天把股票抛出，你可以逐步减持你的股票投资组合，从而最终能够获得比那些由于恐慌将股票全部抛出的投资人更高的投资回报，因为从11月份开始股市就稳步上扬，到1988年6月，市场已经反弹了400多点，也就是说涨幅超过了23%。</strong></span></p></li><li><p><span class="under0"><strong>从10月的股市暴跌中我们可以汲取很多教训，我自己总结出3点：①不要让烦心之事毁掉一个很好的投资组合；②不要让烦心之事毁掉一次愉快的度假；③当你的投资组合中现金比重很小时千万不要出国旅游。</strong></span></p></li><li><p>不管某一天股市下跌508点还是108点，最终优秀的公司将会胜利，而普通公司将会失败，投资于这两类完全不同的公司的投资者也将会相应得到完全不同的回报。</p></li><li><p>第一条投资准则是：千万不要听信任何专业投资者的投资建议！</p></li><li><p><strong>当你决定了依靠自己进行投资时，你应该努力独立思考。这意味着你只依赖于自己的研究分析进行投资决策，而不要理会什么热门消息，不要听证券公司的股票推荐，也不要看你最喜爱的投资通讯上那些“千万不要错过的大黑马”之类的最新投资建议，这也意味着即使你听说彼得·林奇或者其他权威人士正在购买什么股票也根本不要理会。</strong></p></li><li><p>你对一只股票的走势判断得越正确，就越有可能导致你对其余股票的判断出现失误，但是即便如此，你仍然可以在总体上取得很好的投资回报，足以让你成为一个战胜市场的成功投资者。</p></li><li><p>为了获得上述惊人的丰厚投资回报，你必须在正确的时机及时买入和及时卖出股票。即使你错过了股票的最高卖出价位或最低买入价位，如果你所购买的是上面所提到的那些大家都熟知的公司股票，那么你的投资回报仍然要比购买那些谁都搞不懂的、业务十分怪异的公司的股票要好得多。</p></li><li><p><span class="under0"><strong>不要投资于你根本不了解的公司股票</strong></span></p></li><li><p>人们似乎更喜欢购买一些他们对其业务根本搞不懂的公司的股票。这似乎已经成为华尔街的一条不成文的规则：如果你根本不了解一家公司，那么你就把一辈子攒的钱都拿出来投资这家公司的股票。投资者总是远离那些就在自己日常生活中能够近距离观察到的公司的股票，反而费尽心机寻找那些生产的产品让人根本无法了解的公司的股票。</p></li><li><p><span class="under0"><strong>找到有发展潜力的公司只是股票投资的第一步，接下来第二步还要仔细进行研究分析。</strong></span></p></li><li><p><span class="under0"><strong> 因为如果你不能事先确定好你的投资目标，又不能坚持自己的投资信念的话，你将会成为一个潜在的股票市场牺牲品，你会在市场行情最低迷的时刻放弃所有的希望，丧失全部的理智，不惜一切代价地恐慌地抛出股票。</strong></span></p></li><li><p>这个经验告诉我，不仅股市行情非常难以预测，而且小规模投资者也总是更容易在不该悲观的时候反而非常悲观，在不该乐观的时候反而非常乐观，因此，当他们想在牛市中追涨买入以及在熊市中杀跌卖出时，往往会事与愿违，弄巧成拙。</p></li><li><p>在高中以及波士顿学院就读期间，我一直在做球童，我用自己获得的弗朗西斯·奎梅特（FrancisOuimet）[2]球童奖学金支付了波士顿学院的大学学费。大学期间，除非是必修课，否则科学、数学和会计这些进入商业社会所必需的基础课我一概不会选修。我喜欢的是文科，学习了一般的文科课程历史、心理学和政治学之外，我还学习了形而上学、认识论、逻辑学、宗教学和古希腊哲学等文科课程。现在我回过头来看，很显然，学习历史和哲学比学习统计学能够更好地为股票投资做好准备。股票投资是一门艺术，而不是一门科学，因此一个接受训练、习惯于对一切事物进行严格数量分析的人在投资中反而有很大的劣势。如果选择股票这项工作可以量化分析，那么你只需租用附近的克雷（Cray）计算机运算分析一段时间就可以赚到大钱了，但事实上这种做法根本不管用。每个投资者在上小学四年级时学会的数学知识对于股票投资来说就已经足够了（例如克莱斯勒汽车公司拥有10亿美元现金，5亿美元长期债务等）。</p></li><li><p>我的投资组合中的股票数目不断增加，我一度仅储蓄和贷款协会的股票就持有了150只之多。我并不满足于只购买一两只储蓄和贷款协会的股票，而是把资金平均分配于一大批储蓄和贷款协会的股票上（当然是在我确定每一只股票本身的盈利前景之后才投资的）。</p></li><li><p><span class="under0"><strong>如果一只股票的价格下跌时公司的基本面仍然良好，那么你最好是继续持有它，而比这更好的做法则是进一步买入更多的股票</strong></span></p></li><li><p>能够取得如此出色的投资业绩，我必须感谢我寻找到的那些大牛股，包括七棵橡树公司、克莱斯勒汽车公司、TacoBell公司、PepBoys汽车配件公司以及所有那些快速成长型的企业、困境反转型企业和那些不再受投资者青睐的企业。我想要买入的股票恰恰是那些传统的基金经理人想要回避的股票。换句话说，我将继续尽可能像一个业余投资者那样思考选股。</p></li><li><p>最后我再说一次，也许你根本不应该与股票市场沾边儿，这是一个值得进一步详细讨论的问题，因为进入股市必须要有坚定的信念，没有坚定信念的投资者只会成为股市中的牺牲品。</p></li><li><p>投资于债券、货币市场或者大额可转让定期存单，这些都是债权投资的不同形式而已，本质上都是为了获取利息收入。</p></li><li><p>不过各位也可以十分明显地看到，虽然6%和8%的年利率只有两个百分点的差异，但由于复利的巨大作用，经过300多年的时间最终积累形成的财富相差29万亿美元以上。</p></li><li><p><span class="under0"><strong>为什么股票长期投资收益率远远超越公司债券和国库券呢？对此一个合乎逻辑的解释是：投资股票时投资者可以从公司的增长中分享到相应的回报，股票投资者是一家业务兴盛且迅速扩张的公司的一个合伙人，而投资债券的投资者不过只是公司吸引的闲置资金的一个最方便的来源而已。当你借给别人钱时，你可以得到的最大回报无非就是收回本金，再加上一点利息而已。</strong></span></p></li><li><p>唠唠叨叨这么长一大段话的目的是为了说明财富不是永恒不变的，没有人能保证大公司不会变成小公司，也根本不存在所谓的不容错过的蓝筹股。即使是买对了正确的股票，但如果在错误的时间以错误的价格买入，也会损失惨重。</p></li><li><p><span class="under0"><strong>在正确的时间购买了错误的股票所遭受的损失只会更加惨重。</strong></span>从理论上计算出来的股票年投资收益率为9.8%，而在现实中有些时候看起来似乎这种收益率永远也不可能实现。1966年道琼斯指数上涨到了当时有史以来的最高点995.15点，然后开始下跌，一直到1972年才反弹到这一最高点下方。同样，1972~1973年道琼斯指数创下最高点后，长期持续下跌，过了10年直到1982年重新反弹回这一水平。</p></li><li><p>坦白地讲，根本没有办法能够把投资与赌博完全区分开来，我们没有办法把投资归到一个十分纯粹的可以让我们感到安全可靠的活动类别之中。安全谨慎的投资对象和轻率鲁莽的投资对象之间并没有一个界限绝对明确的分界线。人们认为投资股票就如同在酒吧里赌博而对股票非常排斥，直到20世纪20年代后期普通股才最终获得了“谨慎投资”的地位，而恰恰此时股票市场已经过度高估到可以说购买股票更像是赌博而不是投资的危险程度。</p></li><li><p><span class="under0"><strong>一旦我们接受货币本身具有风险这一让人不安的事实，我们才能够真正地区分究竟什么是赌博什么是投资。进行区分时不应该根据参与者的行为类型（例如债券、股票、赌马等），而应该根据参与者的技巧、投入的程度以及事业心。对于一个老练的赌马者来说，如果他能够严格遵守一定的系统方法进行下注，那么赌马也能够为他提供一个相对安全的长期收益，这种赌马的行为对他来说和持有共同基金或者通用电气的股票并没有什么分别。对于那些轻率鲁莽且容易冲动的“投资”股票的人来说，四处打听热门消息并频繁买进卖出，跟赌马时只根据赛马的鬃毛是不是漂亮或者骑士的衣衫是不是华丽就胡乱下注根本没有什么两样。</strong></span></p></li><li><p>对于我来说，投资只不过是一种能够想方设法提高胜算的赌博而已。至于地点是在大西洋赌城、标准普尔500指数，还是债券市场，都无关紧要。事实上，股票市场最经常让我联想到的就是梭哈扑克游戏（studpoker）</p></li><li><p>任何一位每月定期参加梭哈游戏的人很快就会发现，每次那几个“幸运的家伙”都会提前显露出来，因为这种人随着牌一张一张摊开不断仔细计算和重新计算自己的输赢机会大小，然后根据计算结果来下注，从而使他们投入的本钱所能赢回的钱最大化。那些能够持续赢钱的人在自己牌的赢面变得更大时会增加赌注，一旦出现局势不利于他们时，他们就会主动认输出局；而那些持续输钱的人则会不管赢面大小都下注，盼望着奇迹出现使他们能够享受到打败对手的快感，结果却只是又一次痛饮失败的苦酒。梭哈扑克牌和在华尔街投资一样，奇迹出现的次数刚好让那些输钱的人不会死心总想翻本，一赌再赌而一输再输。</p></li><li><p><span class="under0"><strong>那些持续赢钱的人乖乖接受一手好牌也会大输的事实：他们偶尔也会在拿到三张“A”的时候下最大的赌注，但没想到竟会输给对手藏在手里的同花大顺。他们坦然接受这一打击并且继续打下一局牌，他们自信只要一直坚持自己的基本策略，随着时间的延长他们最终一定会赢钱。在股票市场上赚钱的人也会碰到不时发生的亏损、出乎意料的挫折以及意外发生的不利情况，但是即使是股市崩盘也不会使他们从此退出股市。</strong></span></p></li><li><p>如果我选择的股票中有70%的表现与我预期的一样，我就非常高兴了，如果有60%的表现与我预期的一样，我也会十分感激。只要有60%的股票表现与预期的一样，就足以在华尔街创造一个骄人的投资业绩纪录了。</p></li><li><p><span class="under0"><strong>能赚大钱的股票往往来自所谓的高风险类型的公司股票，但是与风险更加相关的是投资者，而不是公司的类型。</strong></span></p></li><li><p>“购买通用电气公司的股票是一个很好的投资对象吗？”这并不是我针对一只股票所询问的第一个问题，即使通用电气的股票是一个不错的投资对象，也并不意味着投资者就应该购买这只股票。投资者到离自己最近的镜子那儿好好照一照自己，认识清楚自身的实际状况之前，研究公司的财务指标是毫无意义的。<span class="under0"><strong>开始投资任何股票之前，投资者都应该首先问自己以下三个个人问题：①我有一套房子吗？②我未来需要用钱吗？③我具备股票投资成功所必需的个人素质吗？投资于股票是好是坏，更多的是取决于投资者对于以上这三个问题如何回答，这要比投资者在《华尔街日报》上读到的任何信息都更加重要。</strong></span></p></li><li><p>购买一套房子可以一举多得：地方政府房地产税可以用来抵扣联邦税相当于获得了一份红利，房屋本身可以抵御通货膨胀，房地产在经济萧条时期是资产保值的最佳避风港，更不用说房屋每天为你遮风挡雨带来的舒服享受。最后，如果你决定将房子卖出，你可以用你获得的收入再购买一套更好的房子，这样就可以避免为你上一次获得的房屋投资利润交税。</p></li><li><p><span class="under0"><strong>普通人一般买房的过程如下：先买一套面积较小的房子（第一套房子），然后换成一套面积中等大小的房子，再往后再换成一套大房子，最终等到孩子们长大搬出去住以后，你就不再需要这么大的房子了，这时你可以卖掉这套大房子，搬到一套较小的房子里去，在这样一连串的搬迁中你会赚到一笔可观的利润足以让你安度晚年，而且这笔增值收入还不用交税，因为富有同情心的政府给了你一生唯一一次买卖房屋增值收入的免税待遇。这种优惠待遇在股票买卖中永远不会发生，政府只会对股票交易利得尽可能多而且尽可能重地征税。</strong></span></p></li><li><p>有句古老的华尔街格言说：“不要投资于容易损耗或者需要维修保养的东西”，这句也许可以用到赛马投资上，但是在房屋投资上，这简直就是一派胡言。</p></li><li><p><span class="under0"><strong>房地产跟股票一样，长期持有一段时间的赚钱可能性最大。与股票经常频繁换手不同的是，房地产可能会被一个人长期持有，我认为平均持有年限是7年左右。与此相比，纽约股票交易所87%的股票每年都会换手一次。人们买卖股票要比买卖房屋便捷得多，卖掉一套房子时要用一辆大货车来搬家，而卖掉一只股票只需打一个电话就可以搞定。</strong></span></p></li><li><p><span class="under0"><strong>难怪人们能够在房地产市场上赚钱却在股票市场上赔钱，他们选房子时往往要花几个月的时间，而选择股票时却只花几分钟的时间。事实上，他们在选择一个好微波炉时花的时间也比选择一只好股票的时间多得多。</strong></span></p></li><li><p>但是在这种情况下，这位寡妇即使是购买蓝筹股也太过于危险而不应考虑。如果没有太多意外情况的话，股票未来10~20年的走势相对来说是可以预测的，至于未来两三年内股票的价格是涨还是跌，对于这个问题的预测的准确概率可能会与你掷硬币猜正反面的准确概率差不多。蓝筹股可能也会在三年甚至五年的时间里一直下跌或者一动也不动，因此如果碰上市场像踩了一块香蕉皮一样突然大跌时，这位寡妇的宝贝儿子德克斯特就没钱上哈佛而只能去上夜校了。</p></li><li><p><span class="under0"><strong>有很多种复杂的公式可以计算出应该将个人财产的多大比例投入股票市场，不过我这里有一个非常简单的公式，对于在华尔街进行股票投资和赌马都同样适用：在股票市场的投资资金只能限于你能承受得起的损失数量，即使这笔损失真的发生了，在可以预见的将来也不会对你的日常生活产生任何影响。</strong></span></p></li><li><p><span class="under0"><strong>在我看来，真正的天才由于过度沉醉于理论上的思考，结果他们的理论总是被股票实际走势所背叛，现实中的股票走势远远比他们想象出来的理论要简单得多。</strong></span></p></li><li><p>要想取得股票投资成功一个非常重要的个人素质是要有能力在得到的信息不完全、不充分以及得到的信息不完全准确的情况下做出投资决策。华尔街的事情几乎从来不会十分明朗，或者说一旦事情明朗化时，再想要从中谋利已为时太晚，那种需要知道所有数据的科学思维方式在华尔街只会一再受挫。</p></li><li><p><span class="under0"><strong>最后，至关重要的是你要能够抵抗得了你自己人性的弱点以及内心的直觉。绝大多数的投资者内心的一个秘密角落里都会隐藏着一种自信，觉得自己拥有一种预测股票价格、黄金价格或者利率的神奇能力，尽管事实上这种虚妄的自信早已经一次又一次地被客观现实击得粉碎。让人感到不可思议的是，每当大多数的投资者强烈地预感到股价将会上涨或者经济将要好转时，却往往是正好相反的情况出现了。</strong></span></p></li><li><p><strong> 问题并不在于投资者以及他们的投资顾问长期以来一直非常愚蠢或者反应迟钝，而在于当他们得到信息时，原来的信息所反映的事实现在可能已经发生了改变。当大量正面的金融消息慢慢传播开来广为渗透，以至于绝大多数的投资者对未来短期内的经济发展前景充满信心时，其实经济已经很快就遭受了严重打击。</strong></p></li><li><p>人类内在的本性让投资者的情绪成了股市的晴雨表。这些一点也不谨慎小心的投资者不断地在三种情绪之间变化：担心害怕、洋洋自得、灰心丧气。在股市下跌后或者经济看来停滞不前的时候，这些股票投资者就会变得对股市非常关注，由于过于担心股市进一步下跌以至于他们没有胆量乘机以低价买入好公司的股票；在股市开始上涨时，他们以较高的价格追涨买入股票，他们的股票也会随着股市上涨而上涨，于是他们就开始洋洋自得起来，而其实这个时候他们更应该对公司的基本面给予充分的关注，但是他们却并没有这样做。最后，他们的股票不断下跌直到跌至他们的买价以下时，他们开始灰心丧气，决定放弃投降，慌慌张张地就把股票给低价卖掉了。</p></li><li><p><span class="under0"><strong>一些人把自己想象成逆向投资者，认为当其他的投资者都向左转时他们采取相反的做法向右转就能大赚一笔，但其实他们总是等逆向投资已经非常流行以至于逆向投资成了一个被大家普遍接受的观点时，才会变成逆向投资者。真正的逆向投资者并不是那种与人人追捧的热门股对着干的投资者（例如卖空一只所有人都在买入的股票），真正的逆向投资者会耐心等待市场热情冷却下来，然后再去买入那些不再被人关注的公司股票，特别是那些让华尔街感到厌倦无聊的公司股票。</strong></span></p></li><li><p>当投资大亨E.F.赫顿（E.F.Hutton）讲话时，每个人都洗耳恭听，而这恰恰正是问题所在，这时每个人应该做的反而是赶紧躺下睡觉，在听到有人预测市场走势的时候，最重要的技巧不是静静聆听，而是打起呼噜睡大觉。投资的窍门不是要学会相信自己内心的感觉，而是要约束自己不去理会内心的感觉。只要公司的基本面没有什么根本的变化，就一直持有你手中的股票。</p></li><li><p>既然股市是以某种方式与宏观经济活动相关的，那么另一个预测股市的方法是，通过预测通货膨胀和经济衰退、国民经济的繁荣和萧条以及利率的变动趋势来预测未来股市的走势。是的，利率和股市之间的关系确实存在非常奇妙的相关性，但是谁又能够根据银行业的规律性预测出利率的变化呢？在美国有6万名经济学家，他们中很多人被高薪聘请从事预测经济衰退和利率走势的专职工作，然而如果他们能够连续两次预测成功的话，他们可能早就成为百万富翁了。</p></li><li><p><span class="under0"><strong>有些人总想等着那些预测衰退即将结束或者牛市即将开始的铃声响起，但问题是这种铃声从来不会响起。记住，事情从来不会十分明朗，一旦明朗早已为时太晚。</strong></span></p></li><li><p><span class="under0"><strong>上帝和我们开的一个最大的玩笑是，下一次的情况永远不会和上一次的一模一样，因此我们根本不可能为下一次的情况事先做好任何准备，这让我想起玛雅人认识世界的故事。</strong></span></p></li><li><p>几年来，在宴会上我总是站在大厅中间，靠近盛着潘趣酒的大酒杯旁边，听着离我最近的10个人谈论股票，总结出了我自己的一套关于市场预测的“鸡尾酒会”理论。</p></li><li><p>在股市上涨的第一个阶段——股市已经下跌了一段时间以至于根本没有人预测股市会上涨——人们都不愿谈论股票。事实上，如果他们慢慢地走过来问我从事什么职业时听到我的回答是：“我管理着一家共同基金。”他们听完后会礼貌地点点头就走开了。即使他们没有走开，他们听了我的回答后也会很快把话题转到凯尔特球队的比赛、即将进行的大选，或者天气情况上面，很快他们就会转过头去和旁边的一位牙医谈起有关治疗牙斑的事情。当10个人宁愿与牙医谈论有关治疗牙斑的事情而不愿与一个共同基金经理人谈论股票时，很有可能股市将要止跌反弹了。</p></li><li><p>在第四个阶段，他们再一次簇拥到我的周围，但是这一次是他们告诉我应该买哪些股票，甚至是牙医也会向我推荐三五只股票。过了几天，我在报纸上看到了有关那位牙医向我推荐的股票的评论，并且它们的股价都已经上涨了。当邻居们告诉我该买哪只股票，而且后来股价上涨后我非常后悔没有听从他们的建议时，这是一个股市已经上涨到了最高点而将要下跌的准确信号。</p></li><li><p>我根本不相信能够预测市场，我只相信购买卓越公司的股票，特别是那些被低估而且（或者）没有得到市场正确认识的卓越公司的股票是唯一投资成功之道。不论现在道琼斯工业平均指数是1000、2000还是3000点，在过去10年里一直持有万豪国际酒店集团公司（Merriott）、默克制药公司（Merk）以及麦当劳公司的股票，所获得的回报都会比持有雅芳、伯利恒钢铁公司以及施乐公司的股票要好得多，而且也比将资金投资在债券或货币市场基金上好得多。</p></li><li><p>巴菲特之所以能够成为有史以来最伟大的投资者的原因在于，当他认为股票被严重高估时，他就把所有的股票都卖掉，然后把包括一大笔投资利润在内的所有资金退还给他的投资合伙人。以我个人的经验来看，巴菲特这种自愿返还其他人愿意让他继续管理并支付管理费的投资资金的做法在金融史上是前无古人后无来者的。</p></li><li><p><span class="under0"><strong>一个又一个案例表明，即使正确预测市场走势却选错了股票仍然会让你亏损掉一半的投资。如果你依赖整个大盘的上升来带动你选择的股票上涨，那么你最好还是坐上大巴去亚特兰大城赌博算了。如果你早晨醒来时暗自思忖的是：“我打算买股票，因为我估计今年股市会上涨。”那么你应该拔掉电话线并且尽可能离股票经纪人越远越好，你想要依赖预测市场走势来投资赚钱，这是根本不可能的。</strong></span></p></li><li><p><span class="under0"><strong>投资者要做的是选择一只正确的股票，至于股市自己会照顾自己的。</strong></span></p></li><li><p><span class="under0"><strong>这并不是说不存在被高估的市场，而是说担心股市好坏是毫无意义的。当你无法找到一只合理定价或者能够满足你的其他选择标准的公司股票，这时你就会知道市场已经被高估了。巴菲特说他把资金退还给合伙人是因为他对合伙人说他根本找不到任何一只值得投资的股票，他仔细研究了数百家公司，结果发现根据基本面分析没有一家公司的股票值得买入。</strong></span></p></li><li><p>不要过高估计专业投资者的技巧和智慧。<br>  充分利用你已经知道的信息和知识。<br>  寻找那些尚未被华尔街发现和证实的投资机会——在华尔街“雷达监测范围之外”的公司。<br>  在投资股票之前先买一套房子。<br>  投资的是公司，而不是股市。<br>  忽略股市的短期波动。<br>  投资股票能够赚大钱。<br>  投资股票也能够亏大钱。<br>  预测经济是没有用的。<br>  预测股市的短期走势是没有用的。</p></li><li><p>股票的长期回报相对而言是可以预测的，而且远远高于长期债券的投资回报。<br>  持续关注你所持有股票的公司情况，就像是在玩一局永远不会结束的梭哈扑克牌游戏。<br>  并不是每个人都适合于股票投资，也并不是每个人一生中的每个阶段都适合于股票投资。<br>  一般业余投资者早在专业投资者数年之前，就已经十分了解当地优秀的上市公司及其产品了。<br>  拥有一种与众不同的优势将会帮助你在股票上赚钱。<br>  在股票市场上，一鸟在手胜过十鸟在林。</p></li><li><p><span class="under0"><strong>寻找10倍股的最佳地方就是从你家附近开始：在那里找不到，就到大型购物中心去找，特别是到工作的地方去找。我们前面已经提到过很多10倍股，例如Dunkin’sDonuts甜甜圈公司、TheLimited、斯巴鲁、Dreyfus、麦当劳、Tambrands以及PepBoys汽车配件公司，第一批发现这些公司经营非常成功的投资者遍布全美国各个地方，新英格兰的那位消防员、肯德基公司在俄亥俄州第一家连锁店的消费者、那些蜂拥冲进Pic’N’Save公司的顾客们，这些业余投资者们早在华尔街得到最初的信息之前就有机会对自己说：“这家公司太棒了，我是不是买入它的股票呢？”</strong></span></p></li><li><p>一个经常出现的情况是，当投资者正在努力挑选一只好股票时，一只好股票也正在努力地挑选投资者。</p></li><li><p>一般情况下，如果你对医生们进行调查，我敢打赌他们当中可能只有一小部分人购买了医药股，而大部分人购买的是石油股；如果你对鞋店的老板进行调查，则可能结果是绝大多数人买了航空股而不是制鞋业的股票，反过来航空工程师可能涉足更多的是制鞋业的股票。<span class="under0"><strong>我实在想不明白：为什么股票就像门前的草坪一样，人们总是觉得别人家的草坪更绿一些呢？</strong></span></p></li><li><p>真的，真的。要判断一只股票会不会上涨并没有必要完全了解公司的所有情况，但投资者应该明白非常重要的两点：①一般来说，石油专家比医生在买卖Schlumberger石油服务公司的石油股上更具有优势；②一般来说，医生在投资医药股上要比石油专家的优势大得多。<span class="under0"><strong>一个在某一行业拥有优势的人总是比没有优势的人在这一行业进行股票投资的胜算更大——毕竟在行业上没有优势的人是最后一个知道这一行业发生重大变化的人。</strong></span></p></li><li><p>尽管购买那些自己一无所知的股票的人们也可能会非常幸运地碰上一只大牛股而获得丰厚的回报，但在我看来他们是给自己加上完全不必要的障碍进行竞争，这就像一位马拉松运动员决定在雪橇比赛中捍卫自己的名誉一样。</p></li><li><p><span class="under0"><strong>你所寻找的是具有以下特征的公司股票：每股股票的资产价值超过了每股股票的市场价格。在这种让人高兴的情况下，你真的可以不花一分钱就能买到一大笔价值不菲的资产，我自己就做了很多次这样的股票投资。</strong></span></p></li><li><p>我可以在本书余下的部分继续分析在某一个行业工作给普通选股者带来的优势。除此之外，作为消费者在选股上的优势是其消费经验十分有助于选择成立不久的新公司，规模较小的、发展很快的公司股票，特别是处在零售行业中的这种公司股票。令人兴奋的是，在选股时无论利用在某一行业工作的优势还是作为消费者亲身体验的优势，你都可以发展你自己特有的一套选股系统，而这种系统完全独立于华尔街常规选股渠道之外，如果你依赖华尔街投资专家的推荐来选股，那么你总是要比专业投资者晚得多才能得到重要的投资信息。</p></li><li><p>那么到底我从这几家基金公司大牛股上赚了多少钱呢？一分钱也没有。我竟然连任何一家金融服务公司的一股股票都没有买过。Dreyfus基金公司的股票一股也没买，Franklin基金公司的股票一股也没买，Federated基金公司的股票一股也没买。我错过了金融服务业和共同基金业所有的大牛股，当我恍然发现这些基金公司的股票是真正的大牛股时早已为时太晚了。我想我可能就像前文提到的那些医生一样，只顾忙于研究自己所在行业之外的加利福尼亚州联合石油公司的股票了。</p></li><li><p><strong> 事实上，你应该将最初的信息（任何引起你注意一家公司的东西）看做是秘密塞进你信箱的一条匿名却让人很感兴趣的消息。这种态度就可以避免只是因为你看到某种你喜欢的东西就一时冲动马上买入一家公司的股票，或者更糟糕的是只是由于给你消息的人名声很大就马上买入这只股票，比如：“哈里叔叔正在买入这只股票，他做股票投资发了大财，因此他推荐这只股票肯定有道理吧。”或者是，“哈里叔叔正在买入这只股票，我也跟着他买进，他上一次推荐的股票就上涨了一倍。” </strong></p></li><li><p><span class="under0"><strong>我认为，购买股票之前首先要做好公司分析研究的功课，这和你以前发誓不再理会股票市场短期波动同等重要。可能有些人根本不做我所说的这些前期分析研究功课也在股票市场上赚到了钱，但是为什么要冒根本不必要的风险呢？不做研究就投资如同不看牌就玩梭哈扑克游戏一样危险。</strong></span></p></li><li><p><span class="under0"><strong>由于某些原因，股票分析这一行被搞得看起来非常神秘又高深莫测，让业余投资者敬而远之，以至于那些在日常消费中非常谨慎的业余投资者在股票投资上却非常轻率，只是一念之间就将一生的积蓄都投在了某只根本没有仔细研究过的股票上面。</strong></span>一对夫妇可以花费整整一个周末的时间来寻找去伦敦的最低机票，但是当他们购买500股荷兰航空公司（KLM）的股票时在分析这家公司上花费的时间却连5分钟都不到。</p></li><li><p>这种愿意花上几小时研究Charmin卫生纸的性能却不愿意同样花上几小时研究生产Charmin卫生纸的宝洁公司年报的投资综合症是一种常见病，但是很容易治愈，你只需在选股时和选购日常用品一样用心分析研究就可以治愈此病了。即使你已经购买了一些股票，再次对这些公司进行仔细分析研究也是很有必要的，因为其中有几只股票的走势可能不会甚至根本不可能会与你的预期完全相符。之所以如此，是因为股票市场上有不同类型的股票，并且每一种类型股票的股价上涨空间都有一定的限度。在分析公司股票时，你需要对不同类型的股票进行初步分类以区别对待。</p></li><li><p>如果你由于一家公司生产的某一种产品很受欢迎而考虑购买它的股票，那么你首先要弄清楚的第一个问题是：这种产品的成功对于这家公司的净利润影响程度有多大？</p></li><li><p><span class="under0"><strong>公司的规模大小与投资者从其股票中得到的预期投资收益有很大关系。你对其股票感兴趣的公司规模有多大呢？抛开具体的产品不谈，规模大的公司股票一般不会有太大的涨幅。虽然在某种市场情况下大公司的股票可能表现不错，但是只有投资于规模较小的公司股票才有可能获得涨幅最大的投资收益。你买入像可口可乐这种巨型公司的股票时，根本不要指望两年后它的股价可以上涨4倍。如果你在合适的价位买入可口可乐的股票，可能6年后你的投资会上涨3倍，但是想要持有可口可乐股票短短两年时间内就大赚一笔是根本不可能的。</strong></span></p></li><li><p>宝洁和可口可乐公司本身并没有出现什么差错，最近两家公司的表现仍然非常出色，但是你需要知道的是，由于它们是大公司，因此你不要对大公司股票的涨幅抱有自欺欺人的幻想和不切实际的期望。</p></li><li><p>在其他条件都一样的情况下，购买小公司的股票可以获得更好的回报。</p></li><li><p>一旦我确定了某一特定行业中的一家公司相对于同行其他公司而言规模是大是小之后，接下来我就要确定这家公司属于6种公司基本类型中的哪一种类型：<span class="under0"><strong>缓慢增长型、稳定增长型、快速增长型、周期型、隐蔽资产型以及困境反转型。</strong></span>划分股票种类的方法几乎和股票经纪人的数量一样，非常之多，但是我已经发现这6个基本类型完全可以涵盖投资者进行的所有有效分类。</p></li><li><p>一家具体公司的增长速度是快还是慢，要与整个国民经济的增长速度相比较而言。正如你可能会猜到的那样，缓慢增长型公司的增长速度非常缓慢，大致与一个国家国民生产总值（GNP）的增长速度相符，接近于最近美国国民生产总值年平均增长速度约3%。快速增长型公司的增长速度非常快，有时一年会增长20%~30%甚至更高，正是在这种快速增长型公司中你才有可能找到最具有爆发性上涨动力的股票。<strong>我所划分的这六种股票类型中有三类与增长型股票有关。 我将增长型股票细分为慢速增长（蜗牛）、中速增长（稳健）以及快速增长——快速增长型股票是最值得关注的超级股票。</strong></p></li><li><p>那些风行一时的快速增长行业早晚都会变成缓慢增长行业，许多预期这些行业将会持续快速增长的分析师和预言家会被事实无情地嘲弄。人们总是倾向于认为事情永远不会改变，但是事实证明改变永远不可避免。</p></li><li><p>在我的投资组合中很难找到增长率为2%~4%的公司，因为如果公司的增长速度不是很快，它的股票价格也不会上涨很快。既然盈利增长才能使公司股价上涨，那么把时间浪费在缓慢增长型的公司上又有什么意义呢？</p></li><li><p><span class="under0"><strong>投资于稳定增长型股票能否获得一笔可观的收益，取决于你买入的时机是否正确和买入价格是否合理。</strong></span></p></li><li><p><strong> 在大多数正常情况下，两年时间内能从高露洁股票上获得50%的回报就应该感到相当满意了。你之所以选择购买稳定增长型公司的股票是因为你考虑的是从这种类型的股票上赚取利润要比Shoney’s或者SCI这种快速增长型的股票更加稳定可靠。通常情况下，在我购买了稳定增长型股票后，如果它的股价上涨到30%~50%，我就会把它们卖掉，然后再选择那些相似的价格还没有上涨的稳定增长型股票反复进行同样的投资操作。</strong></p></li><li><p><span class="under0"><strong>我总是在自己的投资组合中保留一些稳定增长型公司的股票，因为在经济衰退或者经济低迷时期这类股票总能为我的投资组合提供很好的保护作用。</strong></span>你会看到1981~1982年间，当整个国家的经济看起来即将崩溃并且股票市场随之也将崩溃时，百时美的股价表现却明显不同于整个股市，反而继续稳步上涨（见图74）。正如我们已经看到的那样，1973~1974年间的股市大崩溃中它的表现就没有这么好了，当时没有一个公司能够幸免于难，另外这时这只股票的价格已经被严重高估。一般来说，在股市灾难发生时，百时美、Kellogg、可口可乐、MMM、RalstonPurina以及宝洁公司是投资者的好朋友，你知道它们将来也不会破产，并且很快它们的股票就会被市场重新估价，股价会重新恢复到以前的水平。</p></li><li><p>快速增长型公司是我最喜欢的股票类型之一：规模小、新成立不久、成长性强、年平均增长率为20%~25%。如果你能够明智地选择，你就会从中发现能够上涨10~40倍甚至200倍的大牛股。对于规模小的投资组合，你只需寻找到一两只这类股票就可以大幅度提高你的投资组合的整体业绩水平。</p></li><li><p><span class="under0"><strong>快速增长型公司并不一定属于快速增长型行业。事实上我更钟爱不属于快速增长型行业的快速增长型公司，</strong></span></p></li><li><p><span class="under0"><strong>投资快速增长型公司股票的诀窍是弄清楚它们的增长期什么时候会结束以及为了分享快速增长型公司的增长所付出的买入价格应该是多少。</strong></span></p></li><li><p>周期型公司是指那些销售收入和盈利以一种并非完全可以准确预测却相当有规律的方式不断上涨和下跌的公司。在增长型行业中，公司业务一直在不断扩张，而在周期型行业中，公司发展过程则是扩张、收缩、再扩张、再收缩，如此不断循环往复。<strong> 汽车和航空公司、轮胎公司、钢铁公司以及化学公司都是周期型公司，甚至国防工业公司的行为也像周期型公司，因为它们的盈利随着各届政府政策的变化而相应上升与下降。</strong></p></li><li><p><span class="under0"><strong>如果你在错误的周期阶段购买了周期型公司的股票，你会很快亏损一半还要多，并且还要等上好几年的时间才会再一次看到公司业务重新繁荣起来。</strong></span></p></li><li><p><span class="under0"><strong>周期型公司股票是所有股票类型中最容易被误解的股票，这正是最容易让那些不够谨慎的投资者轻率投资于误认为十分安全的股票类型。因为主要的周期型公司都是些大型的著名公司，因此很自然地容易被投资者将其与那些值得信赖的稳定增长型公司混为一谈。由于福特公司的股票是一只蓝筹股，所以人们可能认为它与另一只蓝筹股百时美的股票（见图74）的股价表现会一模一样，但事实上却并非如此。由于福特公司在衰退时期亏损高达数十亿美元而在繁荣时期盈利又会高达数十亿美元，公司交替性地大盈大亏使得其股价相应大起大伏，上下波动得非常剧烈。在股市不景气或者国民经济衰退时，如果像百时美这样的稳定增长型公司市值损失50%的话，那么像福特这样的周期型公司市值损失则会高达80%，这正是20世纪80年代初期福特公司股票的表现情况。你需要知道的是福特的股票与百时美的股票的股价表现完全不同。</strong></span></p></li><li><p>尽管有些公司未能困境反转会让投资者赔钱，但偶然几次的成功使得对于困境反转型公司的投资非常激动人心，并且总体而言投资这类公司股票的投资回报非常丰厚。</p></li><li><p><strong>投资隐蔽资产型公司的机会随处可见，当然，要抓住这种机会需要对拥有隐蔽资产的公司有着实际的了解，而一旦清楚了解了公司隐蔽资产的真正价值，所需要做的只是耐心等待。</strong></p></li><li><p><span class="under0"><strong>一家公司不可能永远属于某一种固定的类型，因为公司的增长率不可能永远保持固定不变。在我投资股票的这些年间，我看到很多公司开始时属于一种类型，而结束时却属于另一种类型。快速增长型公司的发展过程就像人类本身的生命周期一样，早期生龙活虎激情无限，但后来精力逐渐耗尽慢慢衰老。那些快速增长型公司不可能永远保持两位数的增长率，早晚它们的增长动力会被耗尽，然后变成增长率只有个位数的缓慢增长型或稳定增长型公司。</strong></span></p></li><li><p>如果你不能确定你的股票属于哪一种类型，那么就去问问你的经纪人。如果是经纪人第一个向你推荐这些股票的，那么你绝对应该问一问，不然的话你怎么会知道这些股票是不是你所寻找的那种类型的股票呢？你寻找的到底是缓慢增长型、稳定增长型、快速增长型、困境反转型、周期型或者隐蔽资产型公司中的哪一种类型股票呢？<span class="under0"><strong>把你的投资策略建立在一些普遍流传的陈词滥调上绝对是非常愚蠢的，这些陈词滥调包括：“当你的投资翻番时就卖出股票”“持有期满两年后就卖出股票”，或者“当股价下跌10%时马上卖掉股票止损”，等等。绝对不可能找到一个普遍适用于各种类型股票的投资法则。</strong></span></p></li><li><p>当你所购买的是一家有潜力发展成为另一个沃尔玛的年轻公司的股票，这家快速增长型公司有机会给你带来10倍的高回报，而你却把这家新公司当做稳定增长型公司并且仅仅为了兑现50%的回报就卖掉这只股票是十分愚蠢的。从另一方面来说，当RalstonPurina的股价已经翻了一番并且公司基本面看起来已经不再那么令人激动时，如果你还指望这只股票再次翻番而继续持有，那你肯定是疯了。</p></li><li><p><strong>分析一个公司的股票就像分析一个故事一样，将股票分类只是分析公司股票的第一步。现在至少你已经知道了这个故事大致属于什么类型，下一步就是了解各种细节以帮助你猜测这个故事的未来到底会如何。</strong></p></li><li><p>13条选股准则</p><ul><li><p>8.1.1　公司名字听起来枯燥乏味，甚至听起来很可笑则更好</p><p>公司业务枯燥乏味</p><p>一家业务枯燥乏味的公司与一家名字枯燥乏味的公司对投资者来说几乎一样好，而当一家公司业务和名称都枯燥乏味时那就是最好不过了。业务和名称都枯燥乏味的公司保证能够避开华尔街那些所谓专业投资者们的关注，直到最后他们才发现各种利好消息，这才促使他们买入这种类型公司的股票，从而进一步推升股价。</p></li><li><p>8.1.3　公司业务令人厌恶</p></li><li><p>8.1.4　公司从母公司分拆出来</p></li><li><p>8.1.5　机构没有持股，分析师不追踪</p></li><li><p>8.1.6　公司被谣言包围：据传与有毒垃圾或黑手党有关</p></li><li><p>8.1.7　公司业务让人感到有些压抑</p><p>  很多投资者热衷于投资高增长行业，这里总是人声鼎沸热闹非凡，但我却并非如此。相反我热衷于投资低速增长行业，例如塑料小刀和叉子行业，我更喜欢的是比低增长行业增长率更低的零增长行业，比如殡葬服务业，往往在这种零增长行业中可以寻找到最赚钱的大牛股。</p><p>  投资高增长行业没有什么刺激之处，除了看到这个行业的股票大跌以外。20世纪50年代的地毯行业、60年代的电子行业以及80年代的电脑行业都是令人激动的高增长行业，但是这些行业中的无数大公司和中小公司都没能保持长盛不衰，这是因为对于一个热门行业中的每一种产品来说，都会有1000个麻省理工学院的研究生在琢磨如何在中国台湾地区更便宜地生产制造出相同的产品。一旦有一家电脑公司设计出了世界上最好的文字处理系统，就会有10家竞争对手正在投资1亿美元开发一个更好的文字处理系统，在8个月后这种更好的产品就会上市，而在瓶盖加工行业、商家优惠券收集行业或者汽车旅馆连锁行业却根本不会发生这种情况。</p><p>  在增长率为零的行业，特别是让人厌烦和压抑的行业中，你根本不用担心竞争的问题。你不必整天提心吊胆地防备着周围潜在的竞争对手，因为根本没有其他公司会对这样一个零增长行业感兴</p><p>  我宁愿购买生产药品、软饮料、剃须刀片或者香烟的公司的股票，也不愿购买生产玩具的公司的股票。</p><p>  没有什么样的秘密消息能比一家公司内部人士正在买入自家公司的股票更能表明一只股票的投资成功可能性了。</p><p>  公司内部人士卖出自家公司的股票通常没有什么意义，因而对此做出反应就会很愚蠢。</p><p>  但是公司内部人士购买自家公司的股票只有一个原因：他们认为股票的价格被低估了，他们相信最终股价肯定将会上涨。</p><p>  <strong> 当股票被公司回购之后，这些股票就不再流通，因此该公司流通股份总数就相应减少。这首先会对提高每股收益产生奇妙的影响，每股收益的提高反过来又会对股价产生奇妙的影响。如果一家公司回购了自己一半的股份，而且总收益保持不变，那么每股收益就会增长一倍，而很少有公司能够通过削减成本或者销售更多新产品让每股收益同样增长一倍。</strong></p><p>  除了回购股票的做法以外，企业运用多余资金一般还有以下几</p><p>  种选择：①提高股息；②开发新产品；③开拓新的业务；④进行收购兼并。</p></li></ul></li><li><p>9.1　避开热门行业的热门股<br>  <span class="under0"><strong>如果说有一种股票我避而不买的话，那它一定是最热门行业中最热门的股票，这种股票受到大家最广泛的关注，每个投资者上下班途中在汽车上或在火车上都会听到人们谈论这种股票，一般人往往由于禁不住这种强大的社会压力就买入了这种股票。</strong></span></p></li><li><p><span class="under0"><strong>热门股票上涨得很快，总是会上涨到远远超过任何估值方法能够估计出来的价值，但是由于支撑股价快速上涨的只有投资者一厢情愿的期望，而公司基本面的实质性内容却像高空的空气一样稀薄，所以热门股跌下去和涨上来的速度一样快。如果你没能聪明地及时脱手卖出的话（事实上你已经买入这种股票就表明你肯定不会聪明地及早卖出），你很快就会发现你的账面盈利变成了亏损，因为当热门股下跌时，它决不会慢慢地下跌，也不会在跌到你追涨买入的价位时停留一段时间，让你毫发无损地卖出。</strong></span></p></li><li><p>如果你要依靠投资一个接一个出现的热门行业中的最热门股票所赚的钱来维持生计的话，那么很快你就得接受福利救济才能生存了。</p></li><li><p>高增长行业和热门行业吸引了一大批希望进入这些行业淘金的聪明人，企业家和风险投资家都在彻夜不眠地盘算着如何才能尽早地进入这些行业。假如你有一个稳赚不赔的商业创意，但却无法用专利或者利基来加以保护，那么一旦你获得成功，你就得防备其他人群起效仿，在商业界，效仿是一种最不纯粹要命的攻击方式。</p></li><li><p>9.2　小心那些被吹捧成“下一个”的公司</p><p>  <span class="under0"><strong>另一类我避而不买的股票是被吹捧成下一个IBM、下一个麦当劳、下一个英特尔，或者下一个迪士尼之类公司的股票。</strong></span>就我个人的经验而言，被吹捧成下一个的公司几乎从来都不会真正成为它的楷模那样卓越非凡的明星——不管是百老汇、图书畅销排行榜、全美篮球联赛还是华尔街都不例外。有多少次当你听说一名职业棒球运动员被称为下一个威利·梅斯（WillieMays），或者一部小说被称为下一部《大白鲨》时，想一想什么时候看到过“第一名被淘汰出局而第二名却安然无恙”的情况呢？在股票上也存在着类似的情况。</p></li><li><p>9.3　避开“多元恶化”的公司</p><p>  <strong> 那些盈利不错的公司通常不是把赚来的钱用于回购股票或者提高分红，而是更喜欢把钱浪费在愚蠢的收购兼并上。这种一心一意想要“多元化”的公司寻找的是具备以下特点的收购对象：①收购价格过于高估；②经营业务完全超出人们的理解范围。这两点毫无疑问会使公司在收购后发生的损失最大化，“多元化”的最终结果变成了“多元恶化”。</strong></p><p>  <span class="under0"><strong>基本上每隔10年是一个轮回，公司似乎总是在两个极端之间进行折腾：一个10年是大量收购疯狂地进行多元恶化（这时公司花费数十亿美元进行令人兴奋的大收购），接下来的另一个10年则是疯狂地大量剥离，进行瘦身重组（这时那些当初兴奋地收购来的公司由于业绩表现并不令人兴奋而不得不远远以低于当初买入价格的价格卖掉进行剥离）。这种从兴奋地高价买入到失望地低价卖出的轮回现象就像人们把他们的帆船买来卖去一样。</strong></span></p></li><li><p>9.4　当心小声耳语的股票</p><p>  这些一旦冒险成功将获巨大回报但成功机会非常微小的高风险股票的共同特点是它们都让你赔上一大笔钱，除了这一事实以外，另一个共同特点就是吹牛吹破天，却根本没有什么实质内容，这也正是那些被人们小声耳语的股票的本质。</p><p>  <span class="under0"><strong>我总是尽量提醒自己（显然往往并不成功），如果公司的前景非常美好，那么等到明年或者后年再投资仍然会得到很高的回报。为什么不能暂时不投资，等到公司有了良好的收益记录可以确信其未来发展很好时再买入它的股票呢？当公司用业绩证明自己的实力以后，仍然可以从这只股票上赚到10倍的回报，当你对公司的盈利前景有所怀疑时，看一段时间再做投资决定也不迟。</strong></span></p><p>  小心过于依赖大客户的供应商公司股票</p><p>  如果一家公司把25%~50%的商品都卖给了同一个客户，这表明该公司的经营处于十分不稳定的状态之中。</p><p>  除了取消合同的风险之外，大客户还拥有很大的谈判优势可以逼迫供应商降价和提供其他优惠，这将会大大压缩供应商的利润空间，因此购买这种过于依赖大客户的供应商公司的股票几乎不可能获得很大的投资成功。</p><p>  小心名字花里胡哨的公司</p></li><li><p><span class="under0"><strong>其实这时你要问的根本问题是：是什么因素使一家公司具有投资价值？为什么这家公司未来的价值会比现在的价值更高？关于以上问题的解释有很多理论，但我个人认为，最终还是归结为两点：收益和资产，尤其是收益。有时要经过数年时间股价才能调整到与公司真实价值相符的水平，有时股价低于价值的时间持续得如此之久，以至于投资者怀疑这种价格是否还会最终回归于价值。股票价值最终将会决定股票价格，或者说至少有相当多的案例表明坚信价值决定价格是值得的。</strong></span></p></li><li><p>尽管有时容易忘记，但是我们必须牢记，一股股票绝非一注彩票，一股股票代表着对一家公司的部分所有权。</p></li><li><p>只要你还没有破产清算以致要把所有的东西廉价变卖掉用来向债权人清偿债务，那么除了净资产价值以外，你本身还代表着另外一种价值：挣取收入的能力。在你的工作生涯里，你可能会为家里带来数千、上万或者数百万美元的收入，这取决于公司给你支付的薪水高低以及你的工作努力程度。这和投资一样，不同的人的收入以复利形式最终累积成的财富总额存在着巨大的差别。</p></li><li><p>既然你能够想到自己本身还代表着换取收入的盈利能力价值，那么你可能也会想着把自己归为我们前文提到过的6种类型股票中的某一类。在派对聚会上也许把不同的人按照6种基本股票类型进行分类是一种相当有趣的游戏。那些从事的工作比较稳定但薪水很低并且升职机会相当有限的人属于缓慢增长型，这种人相当于美国电力公司这类的电力公司，图书管理员、中小学教师和警察都属于缓慢增长型股票。那些工作薪水丰厚、升职前景明朗的人，例如公司里的中层管理人员，就属于稳健增长型，相当于打工族中的可口可乐公司和RalstonPurinas公司。那些在较短的时间抓住机会赚上一大笔钱然后在其余不挣钱的很长一段时间里依靠这笔收入精打细算过日子的人，例如农民、酒店和度假胜地的服务员、回力球运动员、经营夏令营的商人以及圣诞树的销售商，就属于周期型。记者和作家也大致属于“周期型”，但是他们有可能财富陡增从而使他们成为潜在的快速增长型股票。依此类推，那些自己根本不是依靠劳动为生而依靠家族财富生活的人属于像金矿股票和铁路公司股票一样的隐蔽资产型，例如那些饱食终日无所事事的家伙、拥有信托基金的男男女女、大地主、锦衣玉食的富贵人家以及其他诸如此类的人。</p></li><li><p>那些街头流浪儿、无家可归者、穷困潦倒者、破产者、被解雇者以及其他失业者，只要他们继续奋斗和进取，他们就有可能成为困境反转型。演员、发明家、房地产开发商、小企业家、运动员、音乐家和罪犯都是潜在的快速增长型。这类人失败的可能性比稳健增长型要高，而一旦这些属于快速增长型的人成功了，他们的收入可能会在一夜之间增长10倍、20倍甚至100倍，使他们成为相当于TacoBell或者Stop＆Shop的明星一族。</p></li><li><p><span class="under0"><strong>在任何一张股票价格走势线和收益线并列的股票走势图上你都可以看出收益的重要性到底有多大。大多数证券公司都有这种股票走势图手册，经常翻阅股票走势图手册会对你有所启发。将走势图一张一张翻看下去你会发现，股票的价格线与收益线的波动是并驾齐驱的，如果股票价格线的波动偏离了收益线，它迟早还会回到与收益线相一致的趋势上。</strong></span></p></li><li><p><span class="under0"><strong>人们可能会关心日本人和韩国人在做什么来影响股票，但是最终决定一只股票命运的还是收益。人们可能会把赌注押在股票短期波动上，但从长期来看公司收益的波动最终决定了股价的波动。当然你会发现有时也有例外发生，但是如果你仔细观察自己持有股票的走势图，你就会发现我所描述的股票价格随着每股收益波动而波动几乎是一个普遍规律。</strong></span></p></li><li><p>（判断股票价格是不是被高估的快捷方法就是比较股票价格走势线与收益线是否相符。如果你购买的是大家都十分熟悉的那些增长型公司，例如Shoney’s、TheLimited、万豪国际酒店集团公司，你在股票价格线低于收益线时购买它们的股票，在股票价格线远高于收益线时卖掉它们的股票，那么你大赚一笔的成功概率就相当大。（对于雅芳股票来说这种操作绝对非常成功！）我并不是非得要提倡按照这种方法进行投资操作，但我实在想不出比这更好的投资策略了。）</p></li><li><p><span class="under0"><strong>对收益进行的任何严肃认真的讨论，都会涉及到每股市价与每股收益的比率（price/earningsratio），也被称为本益比（p/eration），或市盈率倍数（priceearningmutiple），或者简称为市盈率（P/E）。市盈率是用来描述股价和收益之间关系的一个简单的数字指标。</strong></span></p></li><li><p>跟收益线的作用相似，市盈率也是一个十分有用的指标，用来判断股票价格相对于公司潜在盈利能力是高估、合理，还是低估。</p></li><li><p><strong>市盈率可以看做是一家上市公司获得的收益可以使投资者收回最初投资成本所需的年数，前提当然是要假定公司每年的收益保持不变。假如你用3500美元购买了凯玛特公司100股的股票，目前该股票的每股收益是3.50美元，因此你购买的100股股票1年后应该获得的收益为350美元，而你最初的投资（3500美元）需要10年的收益才能完全收回，但是如果你知道股票的市盈率倍数，那么你根本不用进行上述计算就可以得出答案，一看凯玛特股票的市盈率为10倍，你马上就知道收回最初投资需要10年时间。</strong></p></li><li><p>如果你购买一只股票的股价是收益的两倍（即市盈率为2倍），那么只要2年后你就能用获得的公司收益挣回最初的投资，但是如果一只股票的股价等于收益的40倍（即市盈率为40倍），你就必须等待40年的时间才能用获得的公司收益收回最初的投资成本，到那时你可能已经变成老爷爷或老奶奶了。<span class="under0"><strong>既然周围有这么多低市盈率的股票，为什么还有人会买高市盈率的股票呢？这是因为他们想在伐木场的工人中间找到未来的著名影星哈里森·福特。公司收益并非一直固定不变，就像人们的收入一样。</strong></span></p></li><li><p>有些股票的市盈率是40倍，而其他股票的市盈率只有3倍，这种情况表明那些以很高的市盈率买入股票的投资者愿意拿出很多钱来“赌”公司的未来收益状况将会大大改善，而与此同时对于那些只愿以很低的市盈率来买入股票的投资者则认为这些公司的发展前景相当值得怀疑。看看报纸，你一定会吃惊地发现，不同股票之间市盈率的高低差别非常巨大。</p></li><li><p><strong>你也会发现缓慢增长型公司的股票市盈率趋于最低，而快速增长型公司股票的市盈率趋于最高，周期型公司股票的市盈率则介于两者之间。如果你按照上面讨论过的股价波动取决于收益波动的逻辑推断，情况本来就应该是这样。公用事业公司股票的平均市盈率（最近这段时间是7~9倍）低于稳定增长型公司的平均市盈率（这段时间是10~14倍）；相应稳定增长型公司股票的平均市盈率又低于快速增长型公司的平均市盈率（14~20倍）。<span class="under0">一些专门寻找便宜货的投资者认为不管什么股票只要它的市盈率低就应该买下来，但是这种投资策略对我来说没有什么意义。我们不应该拿苹果与桔子相比，因此对于陶氏化学公司股票而言明显偏低的市盈率，对于沃尔玛公司股票而言却并非如此。</span></strong></p></li><li><p><span class="under0"><strong>例如，如果你要购买可口可乐公司的股票，那么看一下你现在相对于公司收益水平所支付的股价，再看一下别人过去相对于公司收益水平支付的股价，比较你和别人支付的股价是否相当，这对于你进行投资决策会很有帮助。在进行比较时，市盈率可以告诉你一个大致的答案。</strong></span></p></li><li><p><span class="under0"><strong>即使关于市盈率你什么都记不住的话，你也一定要牢记一点：千万不要买入市盈率特别高的股票。只要坚决不购买市盈率特别高的股票，就会让你避免巨大的痛苦与巨大的投资亏损。除了极少数例外情况，特别高的市盈率是股价上涨的障碍，正如特别重的马鞍是赛马奔跑的障碍一样。</strong></span></p></li><li><p><span class="under0"><strong>如果一家公司的市盈率非常高，那么未来它的收益必须持续保持令人难以置信的高增长速度，才能维持投资者过去为其支付的高股价。</strong></span>1972年尽管麦当劳本身的运营还像过去那样优秀，仍然称得上是一家伟大的公司，但是它的股价却被投资者哄抬到每股75美元，市盈率高达50倍。由于麦当劳公司的收益增长根本不可能达到投资者如此之高的预期水平，导致它的股价从75美元大跌回到了25美元，它的市盈率也相应又回到与实际情况更为相符的13倍。股价大跌并非是由于麦当劳公司本身的运营出了什么错，只不过是由于1972年每股75美元的股价实在是太过于高估了。</p></li><li><p>如果说麦当劳公司的股价算是被高估了，那么我们再来看一下20世纪60年代后期一只热门股RossPerot的EDS公司（ElectronicDataSystems,EDS）股票的情况。当我看到一家证券公司撰写的有关这家公司的研究报告时，我简直不敢相信自己的眼睛。这家公司的市盈率竟然高达500倍！这意味着即使EDS公司的收益保持不变，你也要花上5个世纪（500年）的时间才能把你的最初投资收回来。不仅市盈率高得让我难以置信，而且更让我吃惊的是写这篇报告的分析师竟然认为这个市盈率还是比较保守的，因为EDS公司股票市盈率应该能够达到1000倍。</p></li><li><p>一家公司股票的市盈率并非独立存在，而是相互依存。所有上市公司的股票共同组成了一个整体，作为这个整体的股票市场本身也有一个自己的市盈率。<span class="under0"><strong>股票市场整体的市盈率水平对于判断市场整体上是被高估或是低估是一个很好的风向标。我知道我已经建议大家根本不要理会整个市场的走势，但是当你发现有一些股票的价格相对于其收益水平明显已经上涨到非常不合理的高度时，很可能市场上大多数股票的价格相对于其收益水平也已经上涨到非常不合理的高度。</strong></span>1973~1974年的股市大跌之前整个股市就属于这种情况，同样在1987年的股市暴跌前同样属于类似的情况（尽管这一次与前一次的高估程度并不相同）。</p></li><li><p>利率水平对市盈率水平有着很大的影响，这是由于在利率较低时，债券的投资吸引力降低，投资者愿意在购买股票时支付更高的价格。但是除了利率之外，在牛市市场中形成的令人难以置信的乐观情绪能够把市盈率哄抬到一个令人匪夷所思的水平，比如EDS公司股票市盈率达到了500倍，雅芳公司股票市盈率达到了64倍，宝丽来公司股票市盈率达到了50倍。那时，快速增长型公司的市盈率上涨到了一个高入云霄虚无飘渺的高度，而缓慢增长型公司的市盈率也涨到了在正常情况下快速增长型公司才具有的市盈率水平，在1971年整个市场的平均市盈率上涨到了20倍的最高点。</p></li><li><p>任何一位稍微了解一点儿市盈率的投资者都应该能够看出股市整体达到如此之疯狂的高市盈率水平是极不正常的，我真希望当时他们当中能有人告诉我这一点。1973~1974年，股市经历了自20世纪30年代大萧条以来最剧烈的一次暴跌，使整体市盈率水平得到修正后回归于正常水平。</p></li><li><p><strong> 虽然你不能准确预测公司的未来收益，但至少你可以了解一下公司为提高收益所制定的发展计划，然后你就可以定期查看公司对这些计划实施后是否真的有效地提高了收益水平。一家公司可以用5种基本方法增加收益：削减成本，提高售价，开拓新的市场，在原有市场上销售出更多的产品，重振、关闭或者剥离亏损的业务。这些都是投资者在分析一家公司未来发展前景时应该调查研究的关键之处。如果你的职业或生活让你在分析一家公司业务上具备了独特的优势，那么在调查研究以上这些方面时这种独特优势会最有帮助。</strong></p></li><li><p><span class="under0"><strong>第一步，你已经弄清了自己所研究的公司股票究竟是属于缓慢增长型、稳定增长型、快速增长型、困境反转型、隐蔽资产型、周期型公司股票这六种类型中的哪一种。第二步，根据股票的市盈率倍数，你可以大致估计一下，这只股票目前的价位水平相对于公司不久的将来发展前景来说是低估还是高估了。接着第三步是要尽可能详细地了解公司正如何经营运作以使公司业务更加繁荣，增长更加强劲，或者实现其他预期将会产生的良好效果，这就是我们最想要了解的公司未来发展的“故事”。</strong></span></p></li><li><p>除了隐蔽资产型公司（你只管耐心抱牢这种公司的股票等着别人来重新发现这种公司拥有的房地产，或者石油储备，或者电视台等隐蔽资产的真正价值）之外，对于其他类型的公司，你必须寻找到能够推动这些公司收益持续增长的动力因素。你越能够确定这种推动公司收益增长的动力因素究竟何在，你就越能够确定公司未来发展前景将会如何。</p></li><li><p><span class="under0"><strong>在下单购买一只股票之前，我喜欢进行一个两分钟的独白，内容包括：我之所以对这只股票感兴趣的原因是什么；需要具备哪些条件，这家公司才能取得成功；这家公司未来发展面临哪些障碍。这个两分钟的独白既可以只是一个人小声喃喃自语，也可以用让站在你旁边的同事们能听清楚的音量高声宣讲。一旦你能够向家人、朋友或者自己心爱的小狗（我并不是指“一个在公共汽车上说凯撒世界公司（CaesarsWorld）将会被收购的家伙”）讲述这家公司未来的发展前景，如果连一个小孩子都能听懂你的分析，那就表明你已经真正抓住了这家公司发展的关键了。</strong></span></p></li><li><p>除了LaQuinta以外，还根本没有其他公司来抢占处于高端的希尔顿酒店和低端的廉价旅馆之间的这部分中端旅馆市场。如果有其他竞争对手想偷偷抢夺LaQuinta的中端旅馆市场，也根本不可能做到而一点儿也不让华尔街察觉到。这正是我更喜欢选择旅馆和酒店业的股票而不是选择高科技股票的一个原因，当你由于一项令人兴奋的新技术而投资于一家高科技企业股票时，可能另一项更加令人兴奋的更新的技术已经在另一家高科技企业的实验室研发成功了，但是任何一家想要进军酒店旅馆和餐厅连锁业的公司首先必须在某些地方现身出来开设连锁分店——它们不可能一夜之间就建起100家分店，而且如果它们开的分店位于其他地区，那么也不会对本地旅馆市场产生什么影响。</p></li><li><p>如果这家公司最初是在得克萨斯州形成了一套成功的经营模式，那么投资者应该一直捂紧自己的钱袋，等到这家公司证明自己在伊利诺伊州或者缅因州复制这一经营模式同样也能够成功赚钱时，再购买它的股票，这种做法才是明智之举。这正是我在研究Bildner’s公司股票时忘记询问的那个最重要的问题：它的经营策略在其他地方进行复制也能同样获得成功吗？我本应该对以下这些不利情况感到担心和忧虑：公司缺乏熟练能干的店面管理人员、财力有限、不具备克服最初的失败继续发展的能力。</p></li><li><p><span class="under0"><strong>在公司经营能力得到证明之前，千万不要提前贸然买入这家公司的股票。</strong></span>如果我能等待一段时间，观察一下公司的发展情况，再决定是否买入Bildner’s的股票，我可能当时就根本不会买入这只股票。我本来也应该及早卖出这只股票，波士顿的两家新分店以及纽约分店均告惨败都已经非常清楚地表明Bildner’s经营模式存在问题。在手上的牌变得更差之前，就应该及早摊牌认输出局，还不至于输得太惨，我当时一定是趴在桌上睡着了。</p></li><li><p>专业投资者总是不断地给上市公司打电话，而业余投资者却从来没想过要这样做。如果你有某些具体的问题要问，那么向上市公司投资者关系部门打电话询问是一个最好的办法。你可以委托你的经纪人再帮你做一件事：查找你感兴趣的上市公司的联系电话号码。即使是来自十分偏僻的美国堪萨斯州首府托皮卡的只持有100股股票的小股东，上市公司也会很高兴有机会与他们交流对公司的看法。如果是一家规模很小的上市公司，说不定你还有机会和公司总裁交谈呢。</p></li><li><p>我可能永远也不能对自己的这种感觉进行科学的论证，但是如果你无法想象这家公司的一位普通工作人员由于持有自家公司股票竟然那么富有的话，那么你的想法很可能是正确的，不买它的股票很可能是最正确的选择。</p></li><li><p><span class="under0"><strong>前面我们已经讨论过市盈率了，但是在这里我们再加一个精炼有效的投资原则：任何一家公司股票如果定价合理的话，市盈率就会与收益增长率相等。在此我谈一下收益增长率，你怎样找到这一数据呢？问问你的经纪人公司的收益增长率是多少，然后把收益增长率与市盈率进行比较。如果可口可乐公司股票的市盈率是15倍，那么你应该预期这家公司每年收益增长率约为15%，其他公司与此类似。如果公司股票市盈率低于收益增长率，那么你可能为自己找到了一只被低估的好股票。比如，一家年收益增长率为12%的公司（也被叫做“12%成长股”），而市盈率只有6倍，那么这只股票的投资盈利前景就相当吸引人了。反之，如果一家公司收益年增长率为6%，而股票市盈率为12倍，那么这家公司股票的投资盈利前景就十分令人担忧了，这只股票的股价将会面临下跌。一般来说，如果一家公司的股票市盈率只有收益增长率的一半，那么这只股票赚钱的可能性就相当大；如果股票市盈率是收益增长率的两倍，那么这只股票亏钱的可能就非常大。在为基金进行选股时我们一直使用这个指标来进行股票分析。</strong></span></p></li><li><p>如果你的经纪人不能为你提供一家公司增长率的数据，你自己可以从《价值线》或者标准普尔公司报告上找出这家公司每年收益的数据，然后计算出每年收益相对于上一年的收益增长率，然后再把收益增长率与股票市盈率进行比较。这样你除了用公司市盈率与行业平均市盈率水平进行比较来判断股价是否高估以外，又多了一种用市盈率与收益增长率比较来判断股价是否高估的方法。至于公司未来的收益增长率，各位业余投资者猜测的准确程度和我们专业投资者是半斤八两。在考虑到股息时，我们可以用一个稍微复杂点儿的公式来对公司收益增长率和市盈率进行比较。我们首先要找到公司收益的长期增长率（假定A公司收益的长期增长率为12%），然后加上股息收益率（假定A公司的股息收益率为3%），最后除以市盈率（假定A公司股票市盈率为10），12加上3再除以10等于1.5。如果公司收益增长率除以市盈率的结果小于1，那么这只股票就比较差，如果结果是1.5，那么这只股票还不错，但是你真正要找的是公司收益增长率相当于市盈率的2倍或者更高的股票。如果一家公司的收益增长率是15%，股息收益率是3%，市盈率是6倍，那么公司收益增长率相当于市盈率的3倍，这种股票真是太棒了。</p></li><li><p>对于困境反转型公司和陷入困境的公司，我非常重视对公司负债情况进行分析。在危机之时，是负债而不是其他任何因素最终决定公司是否能够幸免于难还是破产倒闭，那些新成立不久的并且债务负担沉重的公司总是面临很大的经营风险。</p></li><li><p><span class="under0"><strong>当你为了账面价值而购买一只股票时，你必须仔细考虑一下那些资产的真实价值是多少。在佩恩中央铁路公司的账面上，穿越大山的隧道以及报废的轨道车都被作为资产入账。</strong></span></p></li><li><p>就像账面价值经常会高估公司资产的真实价值一样，账面价值也经常会低估公司资产的真实价值，而在这种公司的股票之中你可能会找到隐蔽资产型大牛股。</p></li><li><p>仅仅执迷于上述这种现金收益率的计算并没有什么意义，如果你购买股票的依据是现金流量的话，那么一定要牢记这个现金流量指的是自由现金流量（freecashflow）。自由现金流量是指扣除正常的资本支出（capitalspending）之后剩余下来的现金，这是一笔流入进来却不必再用于支出的现金流量，由此可见生铁公司的自由现金流量要比菲利普·莫里斯公司少很多。</p></li><li><p><span class="under0"><strong>有关增长率还有一点需要说明：在其他条件完全相同的情况下，收益增长率较高的股票更值得买入，</strong></span>比如，收益增长率为20%（市盈率为20倍）的股票要优于增长率为10%（市盈率为10倍）的股票。这听起来似乎深奥难懂，但是如果投资者了解到收益增长的重要性就会十分清楚了，因为正是收益的增长最终推动了股价的增长。假设开始时两家公司的每股收益都是1美元，一家公司的收益增长率为20%，另一家公司的收益增长率为10%，让我们来看一下这两家公司经营10年之后是如何形成巨大收益差异的（见表131）。</p></li><li><p>开始时，A公司股价每股20美元（相当于每股收益1美元乘以20倍市盈率），到了第10年末时股价为每股123.80美元（相当于每股收益6.19美元乘以20倍市盈率）。B公司开始每股的价格为每股10美元（相当于每股收益1美元乘以10倍市盈率），期末的价格为每股26美元（相当于每股收益2.60美元乘以10倍市盈率）。</p></li><li><p>我看过一份调查报告，访问大学生和其他一些年轻人，让他们猜测一下公司的平均利润率是多少，他们猜测是20%~40%。正确的答案是，在过去几十年里公司平均利润率仅仅只有5%左右。税前利润，或者税前利润率（pretaxmargin）是我分析公司的一个工具。公司每年销售收入减去所有的成本，包括折旧费和利息费用，就是税前利润。1987年福特汽车公司的销售收入是716亿美元，税前利润是73.8亿美元，因此税前利润率是10.3%。零售商的税前利润率要比制造商更低，一家优秀的超级市场或药店连锁公司的税前利润率，比如Albertson’s公司，也只有3.6%。另一方面，制造生产高利润药品的公司，例如默克公司，税前利润率通常能够达到25%甚至更高。因为不同行业的平均税前利润率水平差别很大，所以不同行业的公司进行税前利润率比较并没有太大的意义。比较有用的做法是对同一行业内的不同公司的税前利润率进行比较。根据税前利润率的定义可以推断，税前利润率最高的公司的经营成本最低，而经营成本最低的公司在整个行业都不景气时存活下来的机会更大。</p></li><li><p>这里也许有一个复杂难懂的地方，那就是在行业复苏阶段，公司业务好转，行业内税前利润率最低的公司将会成为最大的黑马。我们来看看下面两家目前销售收入都是100美元的公司在业务好转前后税前利润发生了什么样的变化</p></li><li><p>在业务恢复好转的过程中，A公司的税前利润增长了将近50%，而B公司的税前利润则增长了3倍还要多，这可以解释为什么原来处于灾难边缘的不景气公司在业务反弹时能够摇身一变为一只大黑马股票。这种乌鸦变凤凰的现象一再发生在汽车行业、化学工业、造纸业、航空业、钢铁业、电子行业以及非铁材料行业。目前萧条的行业中，例如疗养院、天然气公司以及零售业，也存在着具有这种潜力的大黑马。</p></li><li><p><span class="under0"><strong>因此你应该这样选股：如果你决定不管行业是否景气都打算长期持有一只股票，那么你就应该选择一家税前利润率相对较高的公司；如果你打算在行业成功复苏阶段持有一只股票，你应该选择一家税前利润率相对较低的公司。</strong></span></p></li><li><p>一家增长型公司的生命周期可以划分为三个发展阶段：第一阶段是创业期，这一时期公司主要解决在基本业务方面遇到的各种困难和缺陷；第二阶段是快速扩张期，这一时期公司不断开拓新的市场；第三阶段是成熟期，也叫饱和期，这个时期公司开始要面对想要进一步扩张已经不再像过去那样容易的现实。每一个阶段都要持续好几年的时间。对于投资者来说，第一阶段风险最大，因为此时公司能否成功还是未知数；第二阶段则最安全，并且也是赚钱最多的时期，因为此时公司只需简单地复制成功的经验就能持续快速增长；第三阶段最容易出现问题，因为公司的增长已经接近上限，公司必须找到新的方法才能使收益进一步增长。</p></li><li><p>市盈率。对于这家公司来说市盈率是高还是低，这家公司的市盈率与同行业中类似的公司相比是高还是低？</p></li><li><p>机构投资者持股占该公司总股本的比例。机构投资者持股比例越低越好。</p></li><li><p>公司内部人士是否在买入本公司股票？公司是否回购自己的股票？二者都是有利的信号。</p></li><li><p><span class="under0"><strong>投资的关键并非确定一个持股的合理数量，而是逐一调查研究确定每一只股票的质量。</strong></span></p></li><li><p><span class="under0"><strong>以我个人的观点，投资者应该尽可能多地持有符合以下条件的股票：①你个人工作或生活的经验使你对这家公司有着特别深入的了解；②通过一系列的标准进行检查你发现这家公司具有令人兴奋的远大发展前景。你通过认真研究结果发现符合这些条件的也许只有一只股票，也许会有十来只股票，股票数量的多少无关紧要，关键是质量高低。</strong></span>也有可能你决定专注于研究困境反转型或隐蔽资产型股票，你可以从中选择一些股票进行投资；也许你正好对某一只困境反转型或隐蔽资产股票有着特别深入的了解，那么你可以只集中投资于这一只股票。<span class="under0"><strong>只是为了投资组合多元化而分散投资于一些你并不了解的公司股票是毫无益处的，对小投资者来说愚蠢的多元化投资所导致的后果非常恐怖、非常可怕。</strong></span></p></li><li><p><span class="under0"><strong>尽管应该集中投资，但是把所有的资金都押在一只股票上是不安全的，因为尽管你已经尽了最大的努力进行研究分析，但你选择持股的这家公司有可能会遭受事先根本预料不到的严重打击。我觉得对于一个小的投资组合来说持有3~10只股票比较合适，这样适当分散投资也许会给你带来以下好处。</strong></span></p><p>  （1）如果你寻找的是10倍股，那么你持有的股票越多，在这些股票中出现一只10倍股的可能性就越大。在几只发展前景都良好的快速增长型公司中，到底哪一个公司发展得最好增长最快往往出乎你的意料。</p><p>  （2）持有的股票越多，你在不同的股票之间调整资金配置的弹性就越大，这是我的投资策略的一个重要组成部分。</p></li></ul><ul><li><p>有些人将我的成功归因于我专门投资于增长型股票，但这话只说对了一半。我对增长型股票的投资从来没有超过基金资产的30%~40%，其余大部分基金资产分散投资于我在本书中所讲述过的其他类型公司股票。我一般将10%~20%左右的基金资产投资于稳定增长型公司的股票，10%~20%左右的基金资产投资于周期型公司的股票，剩下的基金资产投资于困境反转型公司的股票。尽管我总体上拥有1400只股票，但我管理的麦哲伦基金的一半资产只投资于100只股票，2/3的基金资产投资于200只股票，1%的资金分散投资于500只目前只能算是二流投资机会却有可能在以后成为一流投资机会的股票，我定期监视追踪这些股票的发展变化。我一直在所有股票类型中寻找具有投资价值的股票。如果我发现困境反转型公司股票中存在着比快速增长型公司股票中更多的投资机会，那么我就会增加困境反转型公司股票在投资组合中的比重。如果原来我作为二流投资机会的股票由于出现了新的利多情况让我信心大增的话，那么我就会把这只股票的投资比重增加到主要持股的水平。</p></li><li><p>分散投资于几种不同类型的股票，对此在前面的第3章我们已经进行过讨论。如果你对一只股票做了所有应该做的研究工作，并且以合理的价格买入，这样就已经把投资风险降低到相当小的程度了，但是除此之外，还应该考虑以下情况。</p><p>  缓慢增长型公司的股票是低风险、低回报的股票，因为投资者对这类公司的收益增长预期比较低，股票价格相应也比较低；稳定增长型公司股票是低风险、中回报的股票，如果你持有可口可乐公司的股票，那么如果下一年这家公司事事顺利的话，你可能会盈利50%，如果下一年这家公司事事不顺的话，你也许会亏损20%；隐蔽资产型公司股票是低风险、高收益的股票，但前提是你能够确定隐蔽资产的真正价值。如果对一只隐蔽资产型公司股票的分析是错误的，你并不会损失太大，但是如果你对一只隐蔽资产型公司股票的分析是正确的，那么你就会获得2倍、3倍甚至可能是5倍的高回报。</p><p>  周期型公司股票既可能是低风险、高回报的股票，也可能是高风险、低回报的股票，完全取决于你预测公司业务发展周期的准确程度。如果你正确地预测到了公司业务发展周期，你可能获利高达10倍，反之，如果你错误地预测了公司的业务周期，你可能亏损高达80%~90%。</p><p>  同时，10倍股也有可能来自于快速增长型或困境反转型公司股票中，这两种类型的股票都属于高风险、高回报的股票。<span class="under0"><strong>快速增长型或困境反转型公司股票上涨的潜力有多大，下跌的潜力也会有多大。</strong></span>如果一只快速增长型公司的业务从快速增长变成疲软衰退，或者一只曾经陷入困境后成功反转复苏的公司旧病复发再次陷入困境，那么股价将会下跌到让你倾家荡产。当我购买了克莱斯勒公司这只困境反转型股票时，如果一切顺利我将会盈利400%，但如果一切都不顺利我将会亏损100%。投资困境反转型股票你必须事先认识到这类股票高风险与高回报并存的特点，结果是我非常高兴又非常意外，我竟然获得了15倍的惊人回报。</p></li><li><p><span class="under0"><strong>根本不存在任何一种合适的方法能够量化分析投资风险与回报具体是多少，你在设计自己的投资组合时，应该加入2只稳定增长型公司的股票，从而在一定程度上平衡持有4只快速增长型公司股票和4只困境反转型公司股票的巨大投资风险。再次强调一下，关键是只买入你真正清楚了解的公司的股票。你买入一只稳定增长型公司股票的目的是在一定程度上降低投资风险，但是如果你买入的价格过高，结果不但不能降低投资风险，反而会增加投资风险。</strong></span>记得在20世纪70年代期间，即使是买入百时美这家卓越企业的股票也具有很大的投资风险。投资者过于追捧这只卓越企业的股票，使这家公司股票的市盈率高达30倍，但公司收益增长率实际上只有15%，因此这只股票的股价已经明显过高，根本不可能再有什么太大的上涨空间。后来百时美公司连续10年保持收益增长，才使过于膨胀的股价最终达到比较合理的市盈率水平。如果你以收益增长率两倍的市盈率买入百时美公司的股票，那么你就是在冒不必要的巨大风险追逐不太可能实现的盈利。</p></li><li><p><span class="under0"><strong>最后，你的投资组合设计可能需要随着年龄的改变而改变。年轻的投资人未来还有一生的时间可以挣得很多的工资收入，因此可以用更多的资金来追逐10倍股；那些年纪大的投资人却并不能如此，他们更需要从股票投资中获得稳定的收入来维持生活。因此年轻的投资人比年长的投资人有更多的时间进行尝试，即使犯一些错误也不要紧，直到寻找到一只超级大牛股从而成就一番伟大的投资事业。一个投资者和另一个投资者的条件和情况往往有很大的不同，所以每个投资者只能根据自身的情况进一步分析如何构造符合自身需要的投资组合。</strong></span></p></li></ul><ul><li><p><span class="under0"><strong>一些投资者总是习惯性地卖出“赢家”——股价上涨的股票，却死抱住“输家”——股价下跌的股票，这种投资策略如同拔掉鲜花却浇灌野草一样愚蠢透顶；另外一些人则相反，卖出“输家”——股价下跌的股票，却死抱住“赢家”——股价上涨的股票，这种投资策略也高明不了多少。这两种策略都十分失败的原因在于，二者都把当前股票价格变化看做公司基本价值变化的指示器（TacoBell公司1972年股价表现非常糟糕，但只是股票表现不佳而已，公司本身经营仍然非常成功）。正如我们看到的，当前的股票价格变化根本没有告诉我们关于一家公司发展前景变化的任何信息，并且有时股价变化与基本面变化的方向完全相反。</strong></span></p></li><li><p>在我看来，一个更好的投资策略是根据股票价格相对于公司基本面的变化情况来决定买入和卖出以调整投资组合中不同股票的资金分配。例如，如果一只稳定增长型公司的股票上涨了40%——这是我期望从这只股票上得到的最高投资收益率，但并没有出现任何利好消息让我认为这家公司将来还会给投资者带来新的惊喜，那么我就会卖出这只股票，转而持有另外一只股价还没有上涨得十分具有投资吸引力的稳定增长型股票。在完全相同的情况下，如果你不想将原来那只股票全部卖出，那么你可以只卖出一部分。</p></li><li><p><span class="under0"><strong>通过把资金在几只收益中等的稳定增长型股票之间进行买入和卖出的转换操作，总体上能够得到与长期持有一只大牛股相当的投资收益率：6次有30%收益率的投资，其累计复利收益接近于投资一只上涨4倍的大牛股。</strong></span></p></li><li><p><strong> 只要快速增长型公司的收益继续增长、规模继续扩张，并且没有出现影响公司增长的障碍，我就会继续持有这些快速增长型公司的股票。每隔几个月我都会重新核查一下公司的发展情况，如同我以前根本不了解这家公司一样进行认真仔细的分析。如果是在两只快速增长型公司股票之间进行选择，我发现，其中一只股票已经上涨了50%并且公司发展前景让我感到怀疑，而另一只股票已经下跌或者基本没动但公司发展前景更好，那么我会卖出前一只股票然后将资金用来增持后一只股票。</strong></p></li><li><p><span class="under0"><strong>我对周期型公司股票和困境反转型公司股票也是这样进行投资操作。卖出那些基本面恶化并且股价上涨的股票，把资金用来增加买入那些基本面好转并且股价下跌的股票。</strong></span></p></li><li><p>事实上，买入股票的最佳时机往往就是你确信发现了价值可靠却价格低廉的股票之时——正如你在商场中发现了一件价廉物美的商品一样。然而在以下两个特殊的时期，各位很有可能会发现特别便宜的股票。</p><p>  第一个可能发现特别便宜股票的特殊时期，是在一年一度通常在年底投资者为了减税而卖出亏损股票的时候，因此一年之中股价下跌最为严重的时期是在10~12月间并不让人感到意外。毕竟这时正是假期时间，经纪人也像我们一样想多挣些钱去度假，所以他们有着很大的积极性打电话问客户是否卖出亏损股票以获得税收抵减。出于某种原因，投资者似乎很乐意卖出股票用亏损来抵减应纳税所得，好像这是一个绝妙的减税机会或是一种特别的免费礼物——我无法想出还有什么其他情形之下失败反而会让人如此高兴。机构投资者同样喜欢在年底抛售那些亏损的股票，从而把投资组合清理得干干净净，显得投资组合里的全部持股都是上涨的股票。所有这些年底的抛售行为综合在一起将会向下打压股价，尤其对于价位较低的股票，一旦一只股票的股价下跌到每股6美元的下限，那么那些用保证金账户融资购买股票的投资者们就不能用这些股票作为担保，所以用保证金账户购买股票的投资者在股价下跌时不得不卖出低价股。机构投资者也往往不得不卖出低价股，如果他们不这样做就会违反这种或那种投资限制性规定。这些投资者的卖出会导致更多投资者跟风卖出，结果会把非常好的股票打压到低得惊人的价位。</p><p>  如果你已经列出了一系列你想买入的公司股票名单，只要其股价下跌到合理价位你就准备买入，那么年底你最有可能找到等待已久的低价买入良机。</p><p>  第二个可能发现特别便宜的股票的特殊时期，是在股市崩盘、大跌、激烈振荡、像自由落体一样直线下跌的时候，这种现象股市每隔几年就会出现。在这些令人惊惶的时期可能你的内心吓得直喊“卖出”，此时如果你能鼓足勇气保持理智，你将会抓住你做梦都想不到竟然会出现的投资良机。在市场突变时期专业投资者总是由于过于忙碌或者过多束缚而不能迅速行动抓住机会。</p></li><li><p>在1987年的夏秋之间股市跌了1000点，所有的公司股票都不可避免地出现大跌，但是现实生活中表172中所列的那些公司经营稳健，盈利良好，没有出现任何经营差错。其中大多数公司的股票后来快速反弹。每发现一个低价买入这些好公司股票的时机，我都尽可能地抓住决不错过。我曾错过第一次低价买入Dreyfus基金公司股票的时机，但这一次我决不会错过了（受骗一次，骗子太坏，受骗两次，自己太傻）。</p></li><li><p><span class="under0"><strong>早在真正应该卖出股票的时机之前，由于怀疑主义者大声嚷嚷着“卖出”的影响，即使那些深思熟虑和意志坚定的投资者也会因此怀疑是否应该卖出。</strong></span></p></li><li><p>我在每股1美元的价位买入，在每股5美元的价位卖出，获得了5倍的高回报，我怎么还能抱怨呢？<span class="under0"><strong>我们都曾接受过同样的智慧格言的教诲：“见好就收”和“一鸟在手胜过两鸟在林”。但当你发现了合适的股票并且以合理的价格买入，所有的证据都表明这只股票将会越涨越高，一切都向着有利于你的方向发展，如果此时你却将它抛出真是太愚蠢了，这简直是一种耻辱。</strong></span>上涨5倍的投资回报能把1万美元变为5万美元，但再上涨5倍就能将最初的1万美元变为25万美元。即使天天在股市里摸爬滚打的基金经理人抓住一只上涨25倍的大牛股也并不是常见的事，对于个人投资者而言一生中只有1~2次机会能够抓住一只上涨25倍的大牛股。如果你抓住一只大牛股，你就应该一直持有直到获得最大的回报。我的同事彼得·德罗斯第一个向我推荐了美国玩具反斗城公司的股票，他管理的基金客户告诉我，他就是这么做的，他管理的基金一直坚决持有这只股票，最终获得了25倍的惊人投资回报。</p></li><li><p>由于煽动效应（drumbeateffect）的影响，业余投资者与专业投资者同样容易被愚弄。我们这些专业投资者周围有一大批投资专家在耳边嘀嘀咕咕地煽动，而业余投资者的周围则有亲戚、朋友、经纪人和各种各样的传媒报道在耳边叽叽喳喳地煽动。</p></li><li><p>如果股价高低不能告诉你何时应该卖出，那么什么能告诉你何时应该卖出呢？根本没有一个完全适用的统一公式可以确定卖出时机。诸如“利率上升就卖出股票”“在下一次经济衰退来临之前卖出股票”也许是值得遵循的建议，但前提是我们能够提前知道利率上升和经济衰退这些事情何时发生，但是我们根本不可能知道，因此这些投资格言也只不过是好听却无用的陈词滥调。</p></li><li><p><span class="under0"><strong>多年以来我学会的一个经验就是：像思考何时购买股票一样思考何时卖出股票。我毫不关注外部宏观经济情况的变化，除了少数几个非常明显的重大事件之外，我能够确定这一重大宏观经济事件将会以某一具体方式影响到某一具体行业。比如，当油价下跌时，很明显将会对石油服务公司产生影响，但对制药公司却没有什么影响。1986~1987年间，我认为美元汇率下跌会降低那些大部分汽车在美国销售的外国汽车制造商的利润，于是我卖出了捷豹（Jagur）、本田、Subaru和沃尔沃汽车公司的股票。但是在90%的情况下，我卖出股票是因为找到了那些发展前景更好的公司的股票，尤其是当我手中持有的公司原来预计的发展前景看起来不太可能实现时。</strong></span></p></li><li><p>事实证明，如果你很清楚地知道自己当初买入一只股票的理由，自然你就会清楚地知道何时应该卖出这只股票。以下让我们来根据股票的6种类型逐一讨论一下何时应该卖出股票的信号。</p></li><li><p><span class="under0"><strong>何时应该卖出一只缓慢增长型股票</strong></span></p><p>  <span class="under0"><strong>对于这种类型的股票我实在帮不了你什么忙，因为我一般很少持有缓慢增长型公司股票。对于我持有的少数缓慢增长型公司股票，当上涨了30%~50%时，或者基本面情况恶化时，即使股价已经下跌我也会坚决赔钱卖出。其他应该卖出缓慢增长型公司股票的信号有：</strong></span></p><ul><li>公司连续两年市场份额都在流失，并且正在聘请一家新的广告代理商。</li><li>公司没有正在开发新产品，研发经费开始削减，公司明显表现出吃老本的想法，满足于过去的荣耀而不思进取。</li><li>公司新收购了两个与主营业务无关的业务，看起来有多元化发展导致经营恶化的趋向，并且公司声称正在寻找收购“处于技术发展前沿”的公司。</li><li>公司为收购兼并支付了太高的代价，导致资产负债表恶化，从账上没有负债和有数以百万美元的现金，变成账上没有现金和有数以百万美元的负债，即使公司股价大幅下跌，公司也金可以用来回购股票。</li><li>尽管公司股价相对较低，但股息收益率仍然很低，分配无法引起投资者的兴趣。</li></ul></li></ul><ul><li><p><span class="under0"><strong>何时应该卖出一只稳定增长型股票</strong></span><br>  <span class="under0"><strong>我经常用其他类型股票来替换稳定增长型公司股票。期望从稳定增长型股票中找到一只10倍股是毫无意义的。如果一只稳定增长型股票的股价线超过收益线，或者市盈率远远超过正常市盈率水平，你应该考虑卖出这只股票，等股价回落后再买回来，或者买入其他没有上涨的稳定增长型股票，就像我做的那样。</strong></span></p><p>  其他一些应该卖出一只稳定增长型股票的信号是：</p><ul><li>过去两年中新产品的业绩有好有坏，其他产品仍然处于试验阶段，还需要一年时间才能投入市场。</li><li>这家公司的股票市盈率为15倍，而同行业中与其相当的公司市盈率只有11~12倍。</li><li>过去一年中没有公司管理人员和董事购买自家公司股票。</li><li>一个占公司利润25%的主要业务部门容易受到即将发生的经济萧条的严重打击（如房地产业、石油勘探业等）。</li><li>公司增长率已经开始放缓，尽管公司通过削减成本可以保持盈利，但未来成本削减的可能性相当有限。</li></ul></li></ul><ul><li><p><span class="under0"><strong>何时应该卖出一只周期型股票</strong></span></p><p>  <span class="under0"><strong>卖出周期型股票的最佳时机是在公司增长达到顶峰周期即将结束时，但谁知道周期何时会结束呢？究竟谁知道他们讨论的到底是什么周期？有时早在一家周期性公司出现第一个业绩滑坡信号的一年之前，那些很有远见的先锋性投资者就开始卖出所持有的全部股票。周期型股票往往根本没有任何明显实在的原因就会无缘无故地开始下跌。</strong></span></p><p>  要成功地进行周期型股票投资，你必须弄明白一些特殊的游戏规则，正是这些特殊的游戏规则使得周期型股票投资十分复杂难搞。在表现类似于周期型公司的国防工业企业中，通用动力公司曾经一度实现盈利增长而股价却大跌了50%，这是由于那些富有远见的周期观察者们提前卖出股票，目的是为了避免在公司盈利下跌时的抛售浪潮。</p><p>  <span class="under0"><strong>除了在扩张周期结束时卖出之外，另一个卖出周期型股票的最佳时机是当某些事情确实开始变得糟糕时。</strong></span>例如，成本已经开始增长，现有的工厂满负荷运营，公司开始投资以增加生产能力。无论在上一个萧条期与最近一个繁荣期之间，是什么因素导致你买入了一家周期型公司股票，这些因素现在的变化都是在提醒你最近这一次繁荣期已经结束了。</p><p>  另一个明显的卖出信号是，公司的存货不断增加，而且公司无法处理掉新增加的存货，这意味着公司将来只能以更低的价格和更低的利润处理掉这些积压的存货。我总是对存货的增加非常关注。当公司停车场上都堆满了存货，这肯定是你应该卖出周期型股票的时机，事实上这时你才卖出可能已经有些晚了。</p><p>  大宗商品价格下跌是另一个应该卖出周期型股票的信号，通常早在公司收益出现问题的几个月之前，汽油、钢材等大宗商品价格就已经下跌了。还有一个有用的信号是商品期货价格低于现货价格，如果你有特别的优势能够知道什么时候先人一步买入周期型股票，那么你也同样会注意到大宗商品价格的变化，从而知道何时应该先人一步卖出。</p><p>  商业竞争对于周期型公司来说同样是一个不利的信号，新进入这个产业的竞争对手为了赢得顾客只能大幅降价，这又会逼得其他所有厂商降价，从而导致所有厂商的利润减少。只要市场对镍有着强劲的需求，那么就根本没有其他任何公司可以挑战Inco公司的地位，Inco公司就可以实现很好的盈利，但当市场需求下滑或其他生产竞争对手开始加入时，Inco公司就面临麻烦了。</p><p>  其他应该卖出周期型股票的信号包括：</p><ul><li>公司在未来12个月内两个关键的工会劳动合同期满，而且工会领导人要求全部恢复他们在上一个合同中放弃的工资和福利。</li><li>公司产品的最终需求正在下降。</li><li>与以较低的成本对老厂进行现代化改造相反，公司已经决定用比改造老厂高一倍的资本支出预算来建立一家非常豪华的新厂。</li><li>公司努力降低成本，但仍然无法与国外厂商竞争抗衡。</li></ul></li></ul><ul><li><p><span class="under0"><strong>何时应该卖出一只快速增长型股票</strong></span></p><p>  <span class="under0"><strong>快速增长型股票的卖出技巧是不要过早卖出而错失一只未来会上涨10倍的大牛股。另外，如果一家快速增长型公司经营陷入崩溃，收益锐减，那么原来由于投资者争相买入而哄抬到很高水平的市盈率也会相应大大下降，这对于那些十分忠诚地死死抱着这家公司股票的股东来说面临着损失巨大的双重打击。</strong></span></p><p>  应该重点观察的是快速增长型公司在快速增长的第二阶段末期的发展情况，对此我们在前面已经做过解释。</p><p>  如果TheGap服装公司已经停止建立新的专卖店，并且原来的专卖店已经显得十分破旧，你的孩子们开始抱怨TheGap公司的专卖店里竟然没有当今最流行的酸洗粗斜布服装，那么可能这时你就应该考虑卖出这只股票了。如果目前有40个华尔街的证券分析师都对一只快速增长型股票给予最高的推荐评级，机构投资者持有这家公司60%的股票，并且有三种国家级主流杂志都在极力吹捧公司的CEO，那么这时绝对应该考虑卖出这只股票了。</p><p>  与周期型股票在周期将要结束时市盈率会越来越低完全不同，快速增长型公司的股票却会越来越高，甚至可能会高到不可思议和不合逻辑的程度。你还记得我们前面谈过的宝丽来公司和雅芳公司，以它们如此庞大的市值规模，市盈率竟然会高达50倍？任何一个四年级的小学生都能看出此时应该卖出股票了。雅芳计划销售十亿瓶香水？这怎么可能实现呢？果真如此的话，美国每两个家庭主妇中就得有一个是雅芳的销售业务代表。</p><p>  当假日酒店的股价达到40倍市盈率时，你就应该已经把这只股票卖出了，你完全可以确信这只股票已经涨到尽头了，事实已经证明你绝对是正确的。当你在美国主要的高速公路上每隔20公里就看见一家假日酒店，你到直布罗陀旅游时也会看见一座假日旅店建在岩石之上，这时你就应该担心假日酒店未来的增长空间了，假日酒店还能向哪里继续扩张呢？难道要到火星上吗？</p><p>  其他应该卖出快速增长型公司股票的信号是：</p><ul><li>公司最近一个季度同一商店销售额降低3%。</li><li>公司新开设的分店销售业绩十分令人失望。</li><li>公司两位高级管理人员和几位核心员工辞职离开后加盟到竞争对手公司。</li><li>最近公司刚刚结束了一场路演，在两个星期内穿梭12个城市与机构投资者交流沟通，向他们描述公司极度乐观的发展前景。</li><li>公司股票市盈率高达30倍，而未来两年最乐观的盈利增长率预期只有15%~20%而已。</li></ul></li></ul><ul><li><p><span class="under0"><strong>何时应该卖出一只困境反转型股票</strong></span><br>  <span class="under0"><strong>卖出一只困境反转型股票的最佳时机是在公司成功转危为安之后，所有的困难都已经得到解决，并且每个投资者都知道这家公司已经东山再起了。无论在公司陷入崩溃困境之前是增长型、周期型或其他类型，都早已是昨日云烟。原来持有过这家公司股票遭受严重损失的股东并不需要因为再次持有其股票而内心窘迫不安。一家公司重组成功后，与重组之前相比会完全不同，你应该重新对这家公司股票进行分类。</strong></span></p><p>  其他应该卖出困境反转型公司股票的信号是：</p><ul><li>过去连续5个季度公司债务持续下降，但公司最近的季度财务报告显示这个季度公司债务增长了2500万美元。</li><li>公司存货增长速度是销售增长速度的两倍。</li><li>市盈率相对于预期收益增长率而言高得离谱。</li><li>公司下属实力最强的分公司50%的产品都销售给一个最主要的客户，而这家客户自身正在遭受销售增速放缓的痛苦。</li></ul></li></ul><ul><li><p><span class="under0"><strong>关于股票的荒唐理论和错误观念可以说数不胜数，我在这里只讨论其中的12种错误观点，因为我认为这12种错误观点是人们关于股票价格的最愚蠢且最危险的说法。我之所以把它们指出来是希望能帮助大家把这些错误的认识从脑海中彻底根除，也许其中有一些说法你听起来会感到非常熟悉。</strong></span></p><p>  <span class="under0"><strong>1　股价已经下跌这么多了，不可能再跌了</strong></span></p><p>  在宝丽来股票一路下跌的过程中，那些根据“不可能再跌了”的错误理论而买入股票的投资者肯定会为他们买入的决定而后悔不迭，因为事实与他们的预期完全相反，宝丽来股价再跌、再跌、再跌，一直跌到比他们想象得低得多的价位。这只一度非常辉煌的大牛股在不到一年的时间里从每股143.5美元下跌到了每股14.125美元，此时才是真正“不可能再跌了”的价位。那些相信“不可能再跌了”错误理论的投资者，为此付出的代价实在太惨重了。</p><p>  <span class="under0"><strong>根本没有什么法则能够告诉我们股价大概会下跌到什么程度，我是在1971年得到这一教训的。</strong></span>当时我在富达公司是一个迫切希望成功却相当缺少经验的分析师。当时凯撒工业公司（KaiserIndustries）已从每股25美元下跌到每股13美元。当股价跌到每股11美元的时候，在我的推荐下，富达基金公司买入了500万股，那是在美国证券交易所历史上规模最大的一笔大宗交易之一，我非常自信地认为这只股票绝对不会跌破10美元。</p><p>  当凯撒公司股价下跌到8美元时，我赶紧打电话告诉我母亲，让她马上买入这只股票，因为我认为这只股票绝对不可能跌破7.50美元，幸亏我母亲没有听从我的建议。1973年我非常震惊地看着凯撒公司股价从7美元跌到6美元又跌到4美元，在这一价位上才最终证明确实不可能再跌了。</p><p>  <span class="under0"><strong>2　你总能知道什么时候一只股票跌到底了</strong></span></p><p>  <span class="under0"><strong>抄底买入，就像把鱼钩放到水底钓大鱼，是一种最流行的投资娱乐活动，但往往被钓住的并不是鱼而是渔夫。想要抄底买入一只下跌的股票，就如同想要抓住一把下跌的刀子。通常来说一个更稳妥的办法是，等刀落到地上后，扎进地里，晃来晃去了一阵后停止不动了，这时再抓起这把刀子也不迟。想要抓住一只迅速下跌的股票抄底买入，不但抄不到底，可能连你的老底儿都会输个精光，因为你在错以为是底部的价位买入，其实根本不是底部，离真正的底部还远着呢，就像想抓住一把迅速下坠的刀子，不但抓不住，反而会伤到手导致剧烈的疼痛，因为你抓错了地方。</strong></span></p><p>  <span class="under0"><strong>但是即使投资者已经研究得非常清楚，也难以在最低价抄底买入。通常股价在重新上涨之前都会振荡整理，一般来说这个振荡整理期会长达2~3年，有时候时间甚至会更长。</strong></span></p><p>  <span class="under0"><strong>3　股价已经这么高了，怎么可能再涨呢</strong></span></p><p>  在斯巴鲁公司已经上涨了20倍以后，如果当时我自找麻烦地问自己“这只股票怎么可能再涨呢”，那么我就不可能此时还会去买入这只已经上涨了20倍的股票。我查看了公司的基本面，发现斯巴鲁的股价相对于其实际价值仍然十分便宜，于是就买入了这只股票，后来这只股票让我获得了7倍的投资回报。</p><p>  <span class="under0"><strong>关键是一只股票能够上涨多高并没有什么人为武断的上限。如果一家公司的发展前景良好，投资收益会继续增长，基本面也没有什么改变，仅仅因为“股价不可能再涨”就放弃持有这家公司的股票实在是太糟糕了。那些建议客户当投资上涨1倍时就自动卖出股票的投资专家们应该为此感到耻辱和羞愧，因为如果投资者按照他们的建议操作的话，永远也没有机会抓住一只上涨10倍的大牛股。</strong></span></p><p>  像菲利普·莫里斯、Shoney’s、Masco、麦当劳和Stop＆Shop这些公司的股票已经一年又一年地不断打破人们根据“股价不可能再涨了”的理论设置的心理最高价位，一次又一次再创新高。</p><p>  坦白地讲，我也根本无法预测哪只股票能上涨10倍或者5倍，只要公司继续保持良好的发展前景，我就会坚决继续持有这只股票，希望它最终能给我带来令人高兴的意外惊喜。这种意外惊喜并不是公司本身经营的成功，而往往是公司股票带来的高回报。</p><p>  <span class="under0"><strong>4　股价只有3美元，我能亏多少呢</strong></span></p><p>  你听到人们说这句话有多少次了？可能连你自己也这样说过。当你偶然碰到一只股价只有3美元的股票时，你就会想：“这总比买入那些50美元的高价股要安全得多。”</p><p>  我在投资管理这一行干了20年，总算明白了这个道理：无论一只股票股价是50美元还是1美元，当这只股票股价下跌到零时，对于你来说都是老本亏了个精光，亏损都是100%。一位投资者以每股50美元买入后亏损掉了99%的投资，另一位投资者以每股3美元的价格买入后亏损掉了83%的投资，买入低价股的有什么理由嘲笑买入高价股的呢？不过是五十步笑百步而已，二者的亏损程度其实差别不大。</p><p>  <span class="under0"><strong>关键在于，当股价下跌时，一只表现糟糕的低价股和一只表现糟糕的高价股同样非常危险。如果你以1000美元进行投资，不论是购买股价为43美元的股票，还是购买股价为3美元的股票，如果两只股票都是下跌到0美元的话，你所亏损的总金额都是同样的1000美元，不管你买入的是低价股还是高价股，选择一只错误的股票可能下跌的最大幅度都是一样的，最大亏损程度都是100%。</strong></span></p><p>  很有趣的是，我注意到，那些依靠股价下跌来投机获利的空头（shortseller）往往都是在股价底部附近建立空头头寸而不是在股价高点附近，这些空头投机者喜欢一直等到一家公司明显已经陷入深渊而且肯定要破产时才会建立空头头寸。对于他们来说在每股8美元或6美元时建仓，与在每股60美元时建仓并没有多大差别，因为只要股价已经下跌到了零，在两种价位上建仓他们所获得的收益率都是同样的100%。</p><p>  猜一猜空头投机者在股价为8美元或6美元时把股票卖给了谁？肯定是那些在对自己说着“我能亏多少呢”想低价买入捡便宜货的不幸投资者。</p><p>  <span class="under0"><strong>5　最终股价会涨回来的</strong></span></p><p>  <span class="under0"><strong>果真如此的话，西哥特人、皮克特人、成吉思汗的大军最终都应该会杀回来的。</strong></span>过去人们都说RCA公司股价最终会涨回来的，但65年过去了，它的股价仍然没有涨回来，尽管RCA还是一家世界闻名的非常成功的大公司。</p><p>  <span class="under0"><strong>6　黎明前总是最黑暗的</strong></span></p><p>  人们有一种心理倾向会这样认为：既然事情已经变得这么糟糕了，那么将来不可能变得更糟糕了。在1981年，美国作业的石油钻井有4520口，到1984年就只有2200口了。在那个时候许多人开始购买石油服务业的股票，因为他们相信最糟糕的时候已经过去了。两年过去后还在作业的钻井减少到只有686口了，到今天为止，也只有不到1000口钻井在作业了。</p><p>  <span class="under0"><strong>在黎明之前总是最黑暗的，但是有时在最后变得一片漆黑之前也总是最黑暗的。</strong></span></p><p>  <span class="under0"><strong>7　等到股价反弹到10美元时我才会卖出</strong></span></p><p>  根据我个人的经验，从来没有一只严重套牢的股票会如你所愿地反弹到你设定的卖出心理价位。事实上，就在你说“等股票反弹到10美元我才会卖出”的那一刻，就可能已经注定你将会面临这样的悲惨结局：这只股票在9.75美元以下的价位上上下下振荡几年之后，然后直线下跌到4美元，最终一路大跌到只有1美元的股票面值。整个痛苦的过程可能要持续十年之久，在此期间你得一直忍受着这只你并不喜欢的股票一路下跌对你的心理折磨，而所有这一切仅仅是因为你的内心深处有一个声音告诉自己：我要等到这只股票反弹到10美元才卖出。</p><p>  <span class="under0"><strong>每当我陷入这种心理误区时，我都会提醒自己，除非我对这家公司有着足够的信心，在股价下跌时愿意追加买入更多的股票，否则我就应该立刻卖出这家公司的股票。</strong></span></p><p>  <span class="under0"><strong>8　我有什么可担心的，保守型股票不会波动太大</strong></span></p><p>  两代保守型投资者都是伴随着这样一种观点长大的：投资于公用事业股票肯定不会出错的。买入这些根本不用操心的公用事业股票后，你只需要把股票锁进保险箱，然后等着公司派发股息就行了。但是由于核事故问题和投资收益率基数（RateBase）问题，突然间即使像联合爱迪生公司这样过去一直表现非常稳健的公用事业股票也损失掉了80%的市值。但和原来突然下跌一样，后来联合爱迪生股票突然又反弹了，不但完全弥补了以前的市值损失，而且上涨得更高。</p><p>  <span class="under0"><strong>投资者如果没有随着公用事业股票波动性的改变而相应改变投资策略，还是一味坚持原来的投资策略，肯定会在财务上和心理上遭受双重的严重打击。</strong></span></p><p>  <span class="under0"><strong>公司发展是动态的，公司发展前景是变化的，根本没有任何一只你可以不管不问只需一直持有的股票。</strong></span></p><p>  <span class="under0"><strong>9　等的时间太长了，不可能上涨了</strong></span></p><p>  <span class="under0"><strong>投资者肯定碰到过这种情况：你一直等待一家公司股价上涨，但等了很久却一直也没有上涨，于是你实在等得不耐烦了就放弃了这只股票，可是就在你卖出这只股票的第二天，你梦寐以求很久的上涨就发生了，我称这种情况为“不卖不涨，一卖就涨”。</strong></span></p><p>  由于我已经习惯于一直耐心持有一只一动不动的股票，所以我能够一直持有默克股票。大多数情况下我赚到钱的时候都是在我持有一只一动不动的股票三四年之后，只有默克股票让我等了更长的时间。<span class="under0"><strong>只要公司经营一切正常，原来吸引我购买这家公司股票的因素没有什么变化，那么我就非常自信我的耐心早晚会得到回报。</strong></span></p><p>  <span class="under0"><strong>EKG公司股票已经好几年没有什么波动了，我把这种一条直线似的股价走势图称为“一块石头的心电图”，但这却是一个非常好的兆头。每当我看到一只吸引我的股票的股价走势图像一块石头的心电图一样时，我都会把它当做一种强烈的暗示：下一波大涨快要到来了。</strong></span></p><p>  <span class="under0"><strong>持有一家你非常喜欢而所有其他人都毫无兴趣不予理睬的公司股票，的确需要非同寻常的耐心。也许股价一直一动不动会让你开始想是不是别人是对的而我是错的，但是只要公司的基本面表明公司发展前景很好，那么你的耐心通常会得到很高的回报</strong></span></p><p>  <span class="under0"><strong>10　看看我损失了多少钱，我竟然没买这只大牛股</strong></span></p><p>  这可能听起来像是一件非常可笑、不值一提的事，<span class="under0"><strong>但我却知道我的许多进行股票投资的朋友们都经常受着这种痛苦的折磨：他们一边仔细看着“纽约股票交易所十只涨幅最大的股票”，一边想着他们由于没有买入这些大牛股而少赚了多么巨大的一笔钱。那些没有购买升值很大的棒球卡、房屋、珠宝、家具的人也会出现这种由于错失赚大钱的机会而后悔万分的情况。</strong></span></p><p>  <span class="under0"><strong>在股票市场投资中，认为别人在股市赚的钱就是我们自己赔的钱并非一种有益的态度。</strong></span>事实上，这种态度只会让人完全疯狂。你知道的股票越多，你发现你错过的大牛股也就越多，很快你就会责备自己损失了数十亿甚至数万亿美元。如果你刚刚抛出了所有股票，而当天股市就上涨了100点，你会半夜忽然醒来，痛苦万分地抱怨自己道：“我今天遭受了损失1100亿美元的严重打击。”</p><p>  这种想法最糟糕的地方是会导致人们为了追逐最高的回报而盲目购买他们本来不应该购买的股票，他们这样做只是为了避免像以前一样由于错过大牛股而“亏损”掉一大笔钱。这样盲目投资经常会让他们发生真正的亏损，而不仅仅是由于错过大牛股而产生心理上的亏损。</p><p>  <span class="under0"><strong>11　我错过了这只大牛股，我得抓住下一只这样的大牛股</strong></span></p><p>  麻烦在于被投资者寄予厚望的“下一个”极少能够像原来的成功公司那样取得巨大的成功，</p><p>  <span class="under0"><strong>12　股价上涨，所以我选的股票一定是对的；股价下跌，所以我选的股票一定是错的</strong></span></p><p>  如果我一定要选出哪一个投资谬论是最最愚蠢的，那么我会选这一个：当你买入的股票股价上涨时，就认为自己选择的是一只好股票。当投资者最近以5美元的价格买入的某只股票上涨到6美元时，他们就会洋洋自得，好像股价上涨就证明他们买入这只股票有多么聪明。当然，如果此时投资者马上卖出股票，就可以获得一笔不错的盈利，但大多数投资者并不会在这种股价上涨内心得意洋洋的情况下卖出股票，相反，他们内心相信股价上涨证明这只股票是值得继续持有的，因此他们会一直持有这只股票，直到后来股价下跌到比他们买入的价格更低时，他们才意识到他们投资的股票其实并不是他们想象的那样好。如果需要进行选择的话，他们会继续持有一只股价从10美元上涨到12美元的股票，而卖出一只股价从10美元下跌到8美元的股票，他们会对自己说他们这样做是“留住赢家扔掉输家”。</p><p>  因此，当人们说：“看，这只股票两个月内就上涨了20%，这证明我选的肯定是一只大牛股”，或者说“太糟了，这只股票两个月内就下跌了20%，这证明我选的肯定是一只垃圾股”，这时他们把公司的股票价格和公司的发展前景完全混淆在一起了。<span class="under0"><strong>除非他们是寻找20%回报的短线交易者，否则的话，炫耀你选择的股票短期内上涨多少是毫无意义的，短期内，你选择的股票上涨或下跌，既不代表你的选股是正确的，也不代表你的选股是错误的。当你购买了一只股票后，短期内股价上涨或者下跌只能说明有人愿意支付更多或更少的价钱去购买同一只股票而已。</strong></span></p></li></ul><ul><li><p>实际上我对期权确实略知一二，我知道期权有着短期获取暴利的可能，对于那些不满足于一点一点慢慢赚钱只想快速发大财的小投资者来说很有诱惑力。实际上他们选择了期权投资反而等于选择了快速变穷而不是快速变富的道路。这主要是由于期权与股票不同，它只是一份合同，有效期只有一两个月，到期后期权就变得一文不值了——之后期权投资者必须再购买另一种期权，这只会再次损失掉100%的投入资金。经过一连串这样的期权投资失败，投资者就会输得倾家荡产。</p></li><li><p>期权另一个非常危险的特征是代价太昂贵了。期权看起来似乎十分便宜，但是如果你意识到自己必须购买4~5份期权才能获得一年期限的股票买卖选择权，那么就会明白期权的代价有多大了。从字面上理解，期权是一个期字加一个权字，购买期权就是购买期限，你想要购买的期限越长，你需要额外支付的溢价就越高。每一笔期权交易都需要支付给经纪人很高比例的佣金。期权交易简直就是经纪人的摇钱树，经纪人几乎不需要付出什么努力就能从客户的期权交易中获得很大的收益，一个经纪人只要有少数几个期权交易活跃的客户就可以过上非常舒服的生活了。</p></li><li><p>卖空就如同从邻居那里借来一种东西（在卖空股票时你并不知道你借来股票的邻居的名字），然后将其卖掉，把钱装进自己的口袋，或早或晚你再买回来同样的东西将其还给你的邻居，结果谁也不比谁高明多少。这种行为严格说来并不是一种偷窃行为，但也并不是一种睦邻友好的行为，这种行为更像是一种具有犯罪动机的借用行为。</p></li><li><p><span class="under0"><strong>在我们持有的一只股票价格下跌时，我们中的任何一个人都难免会感到内心惊慌，但是这种惊慌是有一定限度的，因为我们知道一只股票的股价再跌也不可能跌到零以下。如果你卖空的某一只股票价格上涨了，你就会开始意识到没有什么能够阻止股价的上涨，因为股票的涨幅是没有任何限制的，因此卖空的亏损也是无限的。</strong></span></p></li><li><p>由于指数基金（indexfund）和转换基金（switchfund）的兴起进一步提高了股票换手率和交易规模。指数基金买入卖出几十亿美元的股票却根本不考虑相关企业的个别特征，转换基金使投资者可以从股票投资中撤出把股票换成现金或者相反把现金变为股票，根本没有任何时间延误，也不需要为此受到任何惩罚和付出代价。</p></li><li><p><span class="under0"><strong>我们不要忘记，为新设立的公司进行筹资，这才是股票存在的首要目的。</strong></span></p></li><li><p><span class="under0"><strong>如果星期一效应的确存在的话，那么我想我知道原因何在，这是因为在周末整整两天投资者不能再和上市公司进行交流，所有通常的基本面信息渠道中断了，使得平时工作时非常繁忙的投资者一下子空闲下来，从上周五交易结束到下周一交易开始之间有60个小时的自由时间，于是他们就有了充足的时间关注各种各样令人担心的事件：日元被抛售、日元升值、尼罗河洪水、巴西咖啡收成受损、杀人蜂的行进情况，或者其他周日报纸上的恐怖和灾难事件报道。周末也使投资者有时间阅读经济学家在为报纸撰写的专栏文章中对未来经济长期发展所做的令人十分沮丧的悲观预测。</strong></span></p></li><li><p>如果你从本书最后这一部分学到了一些东西的话，我希望你能够记住以下投资原则：</p><ul><li>未来1个月、1年或者3年的某一天，股市将会突然大跌。</li><li>股市下跌是个极好的机会，买入你喜爱的股票。股价修正——华尔街对股价大幅下跌的定义——使十分优秀的公司股票变得十分廉价。</li><li><span class="under0"><strong>不要妄想预测1年或2年后的市场走势，那是根本不可能的。</strong></span></li><li>你并不需要一直正确，甚至不需要经常正确，照样能够取得高人一筹的投资业绩。</li><li><span class="under0"><strong>那些让我赚到大钱的大牛股往往出乎我的意料之外，公司收购而大涨的股票更是出乎我的意料之外，但要获得很高的投资回报需要耐心持有股票好几年而不是只持有几个月。</strong></span></li><li>不同类型的股票有着不同的风险和回报。</li><li><span class="under0"><strong>连续投资一系列的稳定增长型股票，尽管每次只有20%~30%的投资收益率，但由于复利的作用累积下来会让你赚到一大笔钱。</strong></span></li><li>短期股价走势经常与基本面相反，但长期股价走势最终取决于公司盈利成长性及其可持续性。</li><li>一个公司目前经营得十分糟糕，并不代表这家公司将来经营得不会更加糟糕。</li><li>只是根据股价上涨，并不能说明你是对的。</li><li>只是根据股价下跌，并不能说明你是错的。</li><li>机构投资者重仓持有且华尔街十分关注的稳定增长型股票在跑赢市场且股价高估之后必然面临停滞或下跌。</li><li><span class="under0"><strong>仅仅因为股价便宜就买入一只发展前景普通的公司股票是一种肯定失败的投资之道。</strong></span></li><li><span class="under0"><strong>因为股价似乎略为高估就卖出一只杰出的快速增长型公司股票是一种肯定失败的投资之道。</strong></span></li><li>公司盈利不会无缘无故地增长，快速增长型公司也不可能永远保持快速增长。</li><li>没有买入一只好股票并不会让你损失一分钱，即使是一只10倍股。</li><li>一只股票本身并不知道你持有它。</li><li>不要过度迷恋你手中的大牛股，因为股价大涨而洋洋自得，不再关注公司的基本面变化。</li><li><span class="under0"><strong>如果一只股票价格跌到零，你的亏损是100%，让你输个精光、血本无归，不管你的买入价格是50美元、25美元、5美元还是2美元。</strong></span></li><li>根据公司基本面认真分析后，清除部分股票把资金配置到其他更好的股票上，能够进一步改善你的投资组合业绩。当股价高估以致与公司的真实表现相脱节，而且更好的投资选择出现时，卖掉高估的股票转向其他更好的股票。</li><li>公司出现利好，如同玩梭哈时翻出好牌，此时应该加大赌注，反之应该减少赌注。</li><li><span class="under0"><strong>卖出盈利股票却死抱着亏损股票不放，如同拔掉鲜花却浇灌野草，根本不可能因此改善投资业绩。</strong></span></li><li>如果你认为自己不能战胜市场，那么买入一只共同基金，这样会省去你自己投资需要花费的大量精力和金钱。</li><li><span class="under0"><strong>总会有让人担心的事情发生，不要庸人自扰。</strong></span></li><li>打开你的心灵之门，接纳所有创新的想法。</li><li><span class="under0"><strong>你并不需要“亲吻所有的女孩”。我也曾错过许多10倍股，但这并不妨碍我仍然能够战胜市场。</strong></span></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2019 年度总结</title>
      <link href="/2020/01/01/2019-summary/"/>
      <url>/2020/01/01/2019-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>小时候幻想的2020年就这样悄然到来。09年我念初一，19年大学毕业，彻底告别了学生生涯，开始正式工作。</p><p>在<a href="http://www.sail.name/2018/12/31/2018-summary/">2018 年度总结</a>, 提到了  </p><blockquote><p>“ 时间过得真的很快。今年因为各种原因, 我比往年更多的感觉到了疲惫。 ”</p></blockquote><p>没想到的是19年过得比18年更加疲惫。工作过后, 很多东西不一样, 每天需要思考的事情更多了。有段时间我很低迷。</p><p><span class="under0"> <strong> 最近，我意识到，其实很多事情，或多或少是因为自己或者别人强加给自己的。这个世界并非像说得那样充满了自由，正义，和平，民主，还有很多很操蛋的地方。我希望自己可以过得更快乐一些，也希望我的朋友们，也可以过得很快乐。如果有一天，你很痛苦或者难受的时候，不要怀疑自己，要好好爱自己，对自己有信心。对于那些扯淡的人和事，就去tm的。</strong> </span></p><p>19年也有很多令我开心的事情。</p><hr><h3 id="爱情"><a href="#爱情" class="headerlink" title=" 爱情 "></a><strong> 爱情 </strong></h3><p>三月我和宝宝在一起了。这是我今年最大的收获。</p><p><img src="/img/杂文/2019-summary/9.jpeg" alt="9.jpeg"></p><p>一起度过了很多开心的日子。低迷的时候,宝宝依然陪伴着我。在一起很幸福,幸福得我都胖了。</p><p>列了部分今年宝宝做的好吃的:</p><p><img src="/img/杂文/2019-summary/f1.jpg" alt="f1.jpg"><br>烤鱼<br><img src="/img/杂文/2019-summary/f2.jpg" alt="f2.jpg"><br>烤肉<br><img src="/img/杂文/2019-summary/f3.jpg" alt="f3.jpg"><br>家常菜<br><img src="/img/杂文/2019-summary/f4.jpg" alt="f4.jpg"><br>芋儿鸡<br><img src="/img/杂文/2019-summary/f5.jpg" alt="f5.jpg"><br>红烧鸭<br><img src="/img/杂文/2019-summary/f6.jpg" alt="f6.jpg"><br>玉米火腿土豆鸡<br><img src="/img/杂文/2019-summary/f7.jpg" alt="f7.jpg"><br>蒸蛋<br><img src="/img/杂文/2019-summary/f8.jpg" alt="f8.jpg"><br>牛排<br><img src="/img/杂文/2019-summary/f9.jpg" alt="f9.jpg"><br>焖饭<br><img src="/img/杂文/2019-summary/f10.jpg" alt="f10.jpg"><br>饼干<br><img src="/img/杂文/2019-summary/f11.jpg" alt="f11.jpg"><br>吃了一个夏天的冰粉!<br><img src="/img/杂文/2019-summary/f12.jpg" alt="f12.jpg"><br>蜂蜜柠檬水</p><hr><h3 id="健身"><a href="#健身" class="headerlink" title=" 健身 "></a><strong> 健身 </strong></h3><p>18年结束了百度的实习后，就回了学校。花了两三个月减了差不多20斤。在19年，继续锻炼，取得更好的成绩。</p><p><img src="/img/杂文/2019-summary/10.jpeg" alt="10.jpeg"></p><p>不过毕业过后,工作太忙了,都没多少时间锻炼,又胖了一些。今年恢复锻炼。</p><hr><h3 id="毕业"><a href="#毕业" class="headerlink" title=" 毕业 "></a><strong> 毕业 </strong></h3><p>六月从矿大毕业了。因为实习的原因,大三大四在学校待的日子其实是比较少的,比较遗憾。</p><p>但是总的说来,我度过了一个十分不错的大学四年。认识了很多朋友,还加入了翔工作室。这四年里，有很多人帮助了我，无以为报，我会帮助更多的人。</p><p>如果可以重来一次，或许会做得更好。但我不想重来。<br><img src="/img/杂文/2019-summary/b4.jpg" alt="b4.jpg"><br>当初蹭进爷实验室的地方<br><img src="/img/杂文/2019-summary/b1.jpg" alt="b1.jpg"><br>大一刚开学的时候,班主任给我们拍的<br><img src="/img/杂文/2019-summary/b2.jpg" alt="b2.jpg"><br>大四毕业,可惜人没来齐<br><img src="/img/杂文/2019-summary/b3.jpg" alt="b3.jpg"></p><hr><h3 id="读书"><a href="#读书" class="headerlink" title=" 读书 "></a><strong> 读书 </strong></h3><p>19年虽然开始工作了,但是在下半年其实还是看了不少的书。很多都在博客上做了记录,但是还是有一些没有做记录。希望新的一年看过的书都能做一些记录。</p><p>19年做了记录的书有</p><p><a href="http://www.sail.name/2019/12/29/reading-notes-of-Capitalism/">《资本论》</a><br><a href="http://www.sail.name/2019/12/21/reading-notes-of-only-boring-people-will-be-brilliant-at-breakfast/">《只有乏味的人会在早餐时才华横溢》</a><br><a href="http://www.sail.name/2019/11/03/reading-notes-of-soft-skills/">《软技能:代码之外的生存指南》</a><br><a href="http://www.sail.name/2019/09/15/reading-notes-of-most-important-thing-to-invest-in/">《投资最重要的事》</a><br><a href="http://www.sail.name/2019/08/25/reading-notes-of-Puppy-money/">《小狗钱钱》</a><br><a href="http://www.sail.name/2019/08/24/reading-notes-of-Tolerance-and-freedom/">《容忍与自由》</a><br><a href="http://www.sail.name/2019/07/23/reading-notes-of-learning-way/">《学习之道》</a><br><a href="http://www.sail.name/2019/07/21/reading-notes-of-nine-defeats-and-one-victory/">《九败一胜》</a><br><a href="http://www.sail.name/2019/05/04/reading-notes-of-no-eggs-for-him/">《不吃鸡蛋的人》</a><br><a href="http://www.sail.name/2019/04/26/reading-notes-of-deliberate-management/">《刻意练习》</a><br><a href="http://www.sail.name/2019/04/05/reading-notes-of-lover/">《情人》</a></p><p>这几年读书相比以前目的性更强了一些，怀念那些无忧无虑看书的日子。如果非要推荐一本的话,就是<a href="http://www.sail.name/2019/12/29/reading-notes-of-Capitalism/">《资本论》</a>了。<br>分享<a href="http://www.sail.name/2019/12/21/reading-notes-of-only-boring-people-will-be-brilliant-at-breakfast/">《只有乏味的人会在早餐时才华横溢》</a>中一句喜欢的话：<span class="under0"> <strong> 商人早早起床吃了第一餐，赶火车进城，在昏暗无光、灰灰蒙蒙的商业世界混上一天，夜晚回到家里，吃完晚餐就睡觉，这种生活以我看来比奴工都不如——捆绑他的不是铁链，是金枷</strong></span>。</p><p>前阵子梦圆问我，我是怎么看书以及做笔记的。这里也做一下回答:</p><p>对于电子书: 我主要是使用平板，电脑，手机的<code>kindle app</code>来看的。我购买了亚马逊的<code>kindle unlimited</code>的服务，两年只要100多元，可以免费看很多书。当然有的书，如果不能免费看，就直接购买了。做笔记的话,<code>kindle app</code>里面的笔记内容都可以导出的，然后我会整理到博客。如果你会写一点简单的正则的话，那处理起来就更快啦。</p><p>对于纸质书，做笔记我主要是使用的<code>office lens</code>。可以通过将图片通过<code>office lens</code>转为印刷的图片，并且同步到<code>one note</code>。同步过后，还可以在<code>one note</code>提取出图片上的文字。在<a href="http://www.sail.name/2017/10/08/Description-butoon-of-vim/">vim按键说明</a>一文中，我有提过这个方法。</p><p>对于其他的一些资源的话,我都收藏在这里了<a href="https://www.sail.name/Resource/">Resource</a>。</p><hr><h3 id="博客"><a href="#博客" class="headerlink" title=" 博客 "></a><strong> 博客 </strong></h3><p>在今年4月初的时候,我将博客接入了<code>Google Analytics</code>。之所以在写博客的第四年才开始统计数据,是因为博客主要是我记录平时遇到的一些问题和生活杂感的地方,所以也不大关注数据。但是既然已经写了这么久的博客了,觉得还是有必要好好运营一下。</p><p>以下数据均是从2019年4月4日——2019年12月31日的数据</p><h4 id="PV-UV"><a href="#PV-UV" class="headerlink" title=" PV/UV "></a><strong> PV/UV </strong></h4><p><img src="/img/杂文/2019-summary/1.png" alt="1.png"></p><h4 id="用户分布"><a href="#用户分布" class="headerlink" title=" 用户分布 "></a><strong> 用户分布 </strong></h4><p><img src="/img/杂文/2019-summary/4.png" alt="4.png"></p><h4 id="用户所在城市"><a href="#用户所在城市" class="headerlink" title=" 用户所在城市 "></a><strong> 用户所在城市 </strong></h4><p><img src="/img/杂文/2019-summary/5.png" alt="5.png"><br>其中国内城市用户数排名是: 北京 &gt; 上海 &gt; 深圳 &gt; 广州 &gt; 郑州 &gt; 杭州 &gt; 成都。在一定程度上可以反应国内城市互联网发达情况。</p><h4 id="设备"><a href="#设备" class="headerlink" title=" 设备 "></a><strong> 设备 </strong></h4><p><img src="/img/杂文/2019-summary/7.png" alt="7.png"></p><h4 id="操作系统"><a href="#操作系统" class="headerlink" title=" 操作系统 "></a><strong> 操作系统 </strong></h4><p><img src="/img/杂文/2019-summary/6.png" alt="6.png"><br>Linux用户还是不少的。不过华为的鸿蒙系统何时才能发布呢？难道要等到2510年吗？</p><h4 id="移动设备"><a href="#移动设备" class="headerlink" title=" 移动设备 "></a><strong> 移动设备 </strong></h4><p><img src="/img/杂文/2019-summary/2.png" alt="2.png"></p><p>新的一年，希望文章质量能更高一些。之前一些低质量的文章，可能会删除或者做一些调整。</p><hr><h3 id="其他"><a href="#其他" class="headerlink" title=" 其他 "></a><strong> 其他 </strong></h3><p>19年我还做一些其他事情，不过因为还没有太大的进展，暂且就不写了。</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>工作过后，我开始比从前更多的思考生活的意义或者说这一生应当怎样度过。这是一个很大的问题，我还没有想好，但是还有很多事情等着我去做。</p><p>希望2020年底写总结的时候，不要再感觉那么累了(笑)。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《资本论》</title>
      <link href="/2019/12/29/reading-notes-of-Capitalism/"/>
      <url>/2019/12/29/reading-notes-of-Capitalism/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="Preface"></a><strong>Preface</strong></h3><p>今年的互联网并不平静。年初的996.ICU,前阵子的网易裁员以及华为251。经济下行,巨头的日子也不好过。更别说小公司了。</p><p>断断续续一个多月,看完了<a href="https://www.amazon.cn/gp/product/B00QRQV0K0/ref=kinw_myk_ro_title" target="_blank" rel="noopener">《资本论》</a>。<br><img src="/img/阅读笔记/reading-notes-of-Capitalism/1.png" alt="1.png"></p><p>看完才发现这个版本不是完全版本的,是对原著进行浓缩，在缩减篇幅的同时，充分保留了原著思想中的精华部分，以及完整的体系。后面可能还会看下其他版本。本文做下记录。</p><p>2020年即将到来，希望接下来的日子，大家都会过得更好。</p><hr><p>第1卷　资本的生产过程</p><p><span class="under0"> <strong> 劳动力独特的使用价值，能够创造出比自身价值大的价值，资本家正是看中这个价值差额，才去购买劳动力。资本家不仅懂得用劳动力的低价值去换取劳动力创造的高价值，而且更懂得用延长的劳动过程去换取更多的价值。</strong> </span></p><p>实际上，劳动生产力是由多种情况决定的，比如工人的平均熟练程度、科学发展水平及其在工艺上应用的程度、生产过程的社会结合、生产资料的规模和效能以及自然条件等。<strong> 总而言之，生产一种物品所需要的劳动生产力越高，生产该种物品所需要的劳动时间就越少，而凝结在该物品中的劳动量就越小，该物品的价值就越小。由此可见，商品的价值量与商品中的劳动量成正比，与生产力成反比。</strong></p><p>商品是一种二重的东西，即使用价值与交换价值。</p><p>作为使用价值的创造者，劳动尤其是有用劳动，不仅是人类和自然之间进行物质变换的生存条件，而且是人类生活得以实现的必然选择，应该是不以社会形式为转移的。</p><p>正如上面提到的生产上衣和麻布的劳动一样，劳动之所以算作有价值的劳动，并不是因为劳动和布、纱有生产关系，而是因为它们是人类劳动力有一定目的的耗费，是不同的生产活动为某种使用价值而形成的结合和凝结。总而言之，从生理学的角度来看，一切劳动都可以看作是人类劳动力的耗费；从抽象的人类劳动来看，一切劳动尤其是有一定目的的耗费，有用劳动都可以形成商品价值。</p><p>即便是一个极简单的物品，没有一个标准去衡定它的价值，我们是无法像看到它的使用价值那样，用肉眼看出它的商品价值的，只有从它们的交换价值出发，才能探索到隐藏在其中的商品价值。</p><p><span class="under0"> <strong> 货币形式的出现，使商品内在的矛盾，即使用价值与价值、具体劳动与抽象劳动、私人劳动与社会劳动之间的矛盾，完全转变成为商品与货币的对立。因此，一切商品只有换成货币才能实现自己的价值。</strong> </span></p><p>在一定的社会关系下，劳动产品可以采取物与物关系的虚幻形式，转换为商品，就是成为可感觉的物品。当劳动产品一旦作为商品来生产的时候，商品就感染了拜物教的性质。当商品的价值可以用货币形式来表现的时候，拜物教同商品生产就分不开了。以上分析已经表明，商品世界的拜物教性质，是来源于生产商品的劳动所特有的社会性质。</p><p><span class="under0"> <strong> 马克思说：“金银天然不是货币，但货币天然是金银。”金银是商品，也有价值，当它们越来越多地扮演了一般等价物的角色时，它们就成为了货币商品。</strong> </span></p><p>作为发挥力量的手段，劳动者直接掌握的东西，不是劳动对象，而是劳动资料。</p><p>从资本家消费劳动力的过程来看，工人在资本家的监督下劳动，他的劳动属于资本家，而资本家为使劳动正常进行，使生产资料用得合乎目的，对生产劳动进行监视，尤其是教导工人像为自己劳动那样节约成本。当然，劳动工具受到的爱惜，也不过是仅限于劳动使用上必要的程度而已。</p><p>劳动资料是在劳动进行过程中所需要的一切物质条件</p><p>正如商品本身是使用价值和价值的统一体一样，商品生产过程必定是劳动过程和价值形成过程的统一，不仅要生产价值，而且要生产剩余价值。</p><p>换而言之，劳动力的价值决定它的交换价值，劳动力在劳动过程中的价值增殖构成它的使用价值。</p><p>正如卖出油的使用价值不归油商所有一样，货币所有者支付劳动力的日价值，劳动力的使用价值即劳动本身的使用不归它的卖者所有。</p><p><span class="under0"> <strong> 劳动力是人所具有的并在物质资料生产过程中力和智力的总和。亦称劳动能力。它是社会生产力的主要因素之一。劳动力是生产的能动性因素、主导因素，任何社会生产都不可能没有劳动力。生产资料只有在劳动力的运用下，才能在物质资料的生产中发挥作用。</strong> </span></p><p>土地即为天然存在的生产资料作为不变资本，土地虽然不像普通的劳动资料那样，将所消耗的生产资料的价值转移到新产品上保存下来，却因为它是天然存在的资本，只有使用价值，不会把价值转给产品，没有价值可以丧失。</p><p><span class="under0"> <strong> 剩余价值率才是劳动力受资本剥削的程度或工人受资本家剥削程度的准确表现。</strong> </span></p><p><span class="under0"> <strong> 资本主义社会，通过剩余价值的形式在工人身上榨取剩余劳动，剩余价值率＝剩余劳动时间/必要劳动时间，剩余价值率是资本家的剥削率，是工人受资本家剥削程度的准确表现。</strong> </span></p><p><strong> 撇开伸缩性不说，商品交换性质本身没有给工作日规定任何界限，而且也没有给剩余劳动规定任何界限。由于资本家要坚持他作为买者的权利，他会尽量延长工作日，如果可能的话，他甚至会把一个工作日变成两个工作日。虽然已卖出商品的特殊性质给它的买者规定一定的消费界限，但是工人也要求坚持他作为卖者的权利，要求把工作日限制在一定的正常量内。另外，权利同权利之间的对抗，而且这两种权利都是被商品交换规律所承认的。因此，在平等的权利之间，团结就是力量，力量将会起决定作用。在资本主义生产的历史上，工作日的正常化过程表现为规定工作日界限的斗争从14世纪中叶至17世纪末叶关于延长工作日的强制性法律到资产阶级和工人阶级之间的斗争。</strong></p><p><span class="under0"> <strong> 实质上，资本主义生产就是剩余价值的生产，就是剩余劳动的吸取。通过延长工作日，资本家不仅夺去工人道德和身体上正常发展和活动的条件，使人们的劳动力处于萎缩状态，而且使劳动力本身未老先衰和死亡。换句话说，资本家靠缩短工人的寿命，就是在一定期限内延长工人的生产时间获得增殖。</strong> </span></p><p><span class="under0"> <strong> 作为剩余劳动的榨取者和劳动力的剥削者，资本家不仅迫使工人阶级从事更多的劳动，创造出超出自身生活需要的价值，而且无论是在精力、贪婪和效率方面，都远远超过以往那些以强制劳动为基础的生产制度。在既有的技术条件下，资本家使劳动者服从自己，却没有直接改变生产方式。因此，单靠延长工作日这种形式的剩余价值生产，与生产方式本身的变化是无关的。</strong> </span></p><p>通过延长工作日而生产的剩余价值，叫作绝对剩余价值；通过缩短必要劳动时间而生产的剩余价值，叫作相对剩余价值。因此，要降低劳动力的价值，就必须提高这些产业部门的生产力。然而，商品的价值不仅取决于劳动的价值，而且还取决于生产该商品的生产资料，比如皮靴的价值不仅取决于鞋匠的劳动，而且还取决于皮革、蜡和线等的价值。另外，那些为生产必要生活资料提供不变资本物质要素的产业部门生产力的提高，尤其是那些生产日常生活资料能够决定劳动力价值的部门，它们商品的便宜也会降低劳动力的价值。</p><p>。因此，一个资本家提高劳动生产力来使商品便宜，绝不是抱有降低劳动力价值和减少必要劳动时间的想法，但是他最终促成一般剩余价值率提高的结果。当然，我们必须把资本同这种必然趋势的表现形式区别开来。</p><p><span class="under0"> <strong> 为理解相对剩余价值的生产，我们会用6便士或1/2先令来表示一个劳动小时的价值，而12小时工作日的价值就用6先令来表示。在一定的劳动生产力的条件下，假定12个劳动小时内能够制造出12件商品，每件商品用掉的生产资料和原料的价值是6便士，每件商品花费1先令，其中6便士是生产资料的价值，6便士是加工时新加进的价值。如果资本家使劳动生产力提高一倍的话，就是12小时工作日能够生产24件商品，每件商品的价值就会在生产资料价值不变的前提下降低到9便士，其中6便士是生产资料的价值，3便士是劳动新加进的价值。当然，一个工作日仍然同从前一样只创造6先令新价值，只不过现在这6先令的新价值只是原来分摊在每件产品上总价值的1/2。就每件产品来说，生产资料变成产品不再像以前需要一个劳动小时，而是半个劳动小时。此时，这个商品的个别价值低于它的社会价值，就是说这个商品所花费的劳动时间少于社会平均的劳动时间。在生产方式发生变化以后，每件商品平均花费1先令，但是商品的现实价值不是它的个别价值，而是它的社会价值。换而言之，商品的现实价值不是用生产者在个别场合实际花费的劳动时间来计量的，而是用所必需的社会劳动时间来计量。因此，采用新方法的资本家会按1先令的社会价值出售自己的商品，就是通过提高劳动生产力来获得3便士的超额剩余价值。</strong> </span></p><p>由此可见，资本家采用改良的生产方式不仅可以在一个工作日中占有更多的剩余劳动，而且可以促进新的生产方式的普遍采用，降低商品的个别价值和社会价值之间的差额。由劳动时间决定价值的规律，使采用新方法的资本家感觉到，他必须使自己的商品低于社会价值，迫使他的竞争者也采用新的生产方式。当然，只有当劳动生产力的提高扩展到同生产必要生活资料有关的生产部门，构成劳动力价值要素的商品才会便宜起来。</p><p><span class="under0"> <strong> 资本家提高劳动生产力是为了缩短生产商品的必要劳动时间，相对延长剩余劳动时间，他们所得到的利润都来源于工人在生产商品过程中所创造的价值和剩余价值。</strong> </span></p><p><span class="under0"> <strong> 提高劳动生产力来使商品便宜，并使工人本身便宜，是资本的内在的冲动和经常的趋势。</strong> </span></p><p>当然，生产商品的资本家不会关心商品的绝对价值，他关心的只是商品所包含的剩余价值。虽然剩余价值的实现本身就包含着预付价值的补偿，但是由于相对剩余价值的增加和劳动生产力的发展成正比，商品价值的降低和劳动生产力的发展成反比。换而言之，使商品便宜的过程会使商品中包含的剩余价值提高，而只是关心生产交换价值的资本家也会力求降低商品的交换价值。这个谜底也就是政治经济学奠基人之一魁奈用来为难论敌的那个矛盾。因此，<span class="under0"> <strong> 在资本主义生产中，发展劳动生产力的目的是为了缩短工人为自己劳动的工作日部分，并以此来延长工人无偿为资本家劳动的工作时间。</strong> </span></p><p><span class="under0"> <strong> 同一生产部门的资本主义企业之间，在生产技术和经营管理等方面存在着差别，因而这些企业生产出来的商品的个别价值也必然是参差不等的。但商品不是按照个别价值、而是按照由社会必要劳动时间决定的社会价值出售的。那些采用先进技术、劳动生产率较高的企业，其商品的个别价值低于社会价值，但仍按社会价值出售，因此它会比其他企业多得到一部分剩余价值，这就是超额剩余价值。</strong> </span></p><p><strong> 资本主义的管理是二重的，而它所管理的生产过程本身也具有二重性，就是存在制造产品的社会劳动过程和资本的价值增殖过程。就其形式来说，资本主义的管理是专制的，而且是具有特有形式的专制。当资本家的资本达到资本主义生产所需最低限额的时候，资本家便摆脱体力劳动，甚至可以把直接和监督工人、工人小组的职能交给特种雇佣工人。</strong>正如军队需要军官和军士一样，在同一资本指挥下共同工作的工人也需要军官（经理）和军士（监工），不仅在劳动过程中以资本的名义进行指挥和监督工作，而且需要他们减少非生产费用。然而，凯尔恩斯教授却把资本主义生产方式从共同的劳动过程中产生的管理职能，同从这一过程产生对抗性质的管理职能混为一谈。实际上，资本家之所以是资本家，并不是因为他是工业的领导人，而且因为资本的属性。正像封建时代，战争和法庭裁判中的最高权力是地产的属性一样。</p><p>在一定的条件下，工人发挥的生产力就是资本的生产力，是无须支付报酬而发挥出来的社会生产力。另外，考虑到工人在本身属于资本以前不能发挥这种生产力，这种社会生产力可以看做是资本天然具有的生产力，是资本内在的生产力。</p><p><strong> 为了在一定期限内完成大量的商品，资本家把制造一件产品的各种操作分配给不同的手工业者，共同完成一种产品。在生产过程中，随着分工越来越细，这种局部操作逐渐成了特殊工人的专门职能，最终把人变成生产机构的一个器官。</strong></p><p>劳动生产率不仅取决于劳动者的技艺，而且也取决于工具的完善程度。在工场手工业时期，工人可以通过劳动工具去适应局部工人的特殊职能，并使劳动工具简化、改进和多样化。由此可知，工场手工业时期就如同创造机器物质条件一样，而机器只不过就是由许多简单工具结合而成的。考虑到局部工人及其工具的简单性，我们的研究应该从工场手工业的全貌来考察。</p><p>在工作过程中，工人重复做同一个简单有限的动作，缩小了劳动流程中的空隙，增加了劳动力的支出。同时经常使用工具使劳动工具简化、改进和多样化。从而为机器的产生创造了物质条件。</p><p>既然工场手工业时期所特有的机器始终是由许多局部工人结合成的，那么总体工人具备的技艺程度最好能够经济地使用。这些生产素质使总体工人本身的所有器官分离而成为特殊的工人或工人小组，各自担任一种专门的职能。虽然局部工人可以作为总体工人的一个器官，他的片面性甚至缺陷就成为他的优点，但是从事片面职能的习惯会使他本能地起作用，并准确地以机器部件的规则性发生作用。由于总体工人的各种职能都比较简单，即使有些比较复杂，也不过是低级和高级的组合而已，总体工人的器官即各个劳动力，需要极不相同的教育程度，从而创造出具有极不相同的价值。当然，工场手工业不仅能够发展劳动力的等级制度，而且能够发展与此相适应的工资等级制度。因此，在等级制度的阶梯旁边，工人被简单地分为熟练工人和非熟练工人。当然，凡是能够缩短劳动力再生产的事情，都会扩大剩余劳动的研究领域。</p><p><span class="under0"> <strong>工场手工业的分工提高了生产效率，促进了社会生产力的发展，但它是以资本家对人的绝对权威控制为前提，工场这个社会生产机构只是属于资本家。而社会分工使独立的商品生产者互相对立，他们只承认竞争强加在他们身上的压力。</strong> </span></p><p><span class="under0"> <strong>正如其他发展劳动生产力的方法一样，机器能够使商品便宜，缩短工人的工作日部分，从而无偿地延长工人给予资本家的工作时间。实际上，机器是生产剩余价值的手段。</strong> </span></p><p><strong> 如果把机器看作使产品便宜的手段，生产机器的劳动就必须要少于使用机器所代替的劳动。对于资本来说，使用机器的界限表现得更为狭窄。由于使用劳动力的价值是由资本支付决定，资本只有在机器价值和所代替劳动力价值之间存在差额的情况下，才会使用机器。</strong></p><p>它从手工工具改变为机器开始，<span class="under0"> <strong> 机器本身并不创造价值，但当它把自身的价值转移到它所生产的产品上时，机器的价值就会得到体现 </strong></span></p><p>机器生产对工人的影响<br>（a）资本对补充劳动力的占有妇女劳动和儿童劳动！这是资本主义使用机器的第一个口号，而且这种代替劳动和工人的有力手段也使得工人家庭全体成员都受资本的直接统治，使雇佣工人人数大大地增加。这样的强制劳动，不仅夺去儿童游戏的时间，而且夺去家庭本身需要的自由劳动时间。<span class="under0"> <strong> 因此，机器在增加人身剥削材料，即扩大资本固有的剥削领域的同时，也提高对劳动的剥削程度。</strong></span></p><p>（b）工作日的延长作为资本的承担者，机器是提高劳动生产率，尤其是缩短生产商品必要劳动时间的最有力手段。在资本直接占领的工业中，资本成为把工作日延长到超过一切自然界限的最有力手段。因此，它不仅创造使资本能够任意发展自己的新条件，而且创造出资本对别人劳动贪欲的新动机。<span class="under0"> <strong>虽然机器的有形损耗来源于机器的使用和不使用，就像铸币磨损和自然贬值，前一种磨损同机器的使用成正比，后一种损耗在一定程度上同机器的使用成反比。其实，机器除了有形损耗以外，还有所谓无形损耗。只要机器能够更加便宜地再生产出来，或者出现更好的机器，原有机器的交换价值就会受到损失。</strong> </span>即使原有的机器还十分的年轻和富有生命力，它的价值也不再由物化在其中的劳动时间来决定，而是由它本身的再生产或其他机器的必要劳动时间来决定。虽然机器会贬值，但是机器总价值的再生产时期越短，无形损耗的危险就越小。因此，在某个生产部门最初采用机器时，那些使机器更加便宜的新方法，不仅会涉及机器的个别部分或装置，而且会涉及机器的改良。</p><p>一般来说，在其他条件不变和工作日已定的情况下，要双倍剥削工人就必须把投在机器、厂房、原料和辅助材料等的不变资本部分增加一倍。随着工作日的延长，生产的规模会扩大，而投在机器和厂房上的资本部分却保持不变，却能带来剩余价值的增加和必需开支的减少。<strong>实际上，机器生产相对剩余价值，不仅由于劳动力贬值，使劳动力再生产所必需商品更加便宜，而且由于机器工人的劳动变为高效率的劳动，把机器产品的社会价值提高到个别价值以上，从而使资本家能够用较小的价值部分来补偿劳动力的日价值。因此，在机器生产被垄断的这个过渡时期，利润特别高，而高额的利润激起对更多利润的贪欲，资本家会尽量延长工作日来彻底利用这个“初恋时期”。</strong></p><p><span class="under0"> <strong> 在一定量资本所生产的剩余价值中，机器要提高剩余价值率，就只有减少工人人数。这是利用机器生产剩余价值内在的矛盾。随着机器在一个工业部门的普遍应用，机器生产的商品价值就会成为所有同类商品的社会价值标准，而且这种内在的矛盾就会表现出来。正是这种没有意识到的矛盾，它不仅能够增加相对剩余劳动和绝对剩余劳动，而且会推动资本家延长工作日，以便弥补被剥削工人人数的相对减少。</strong></span></p><p>因此，机器的应用创造出无限度延长工作日的动机，而且使劳动方式和社会劳动体的性质发生变革，甚至打破对这种趋势的抵抗。<span class="under0"> <strong> 虽然那些被机器排挤的工人会失业和制造出过剩的劳动人口，但是由于工人阶层会受资本的支配，工人不得不听命于资本强加给他们的规律。因此，机器消灭工作日的一切道德界限和自然界限，成为缩短劳动时间的最有力手段，甚至可以算是把工人及其家属全部变成受资本支配的最可靠手段。</strong></span></p><p>通过不断的反抗，工人阶级迫使国家强制缩短劳动时间，并且强行规定工厂实施正常的工作日。从剩余价值的生产不能通过延长工作日来增加以后，资本家就通过加快发展机器体系来生产相对剩余价值，而且使得相对剩余价值的性质发生了变化。一般来说，提高劳动生产力使单个商品的价值下降，就是使工人能够在同样的时间内以同样的劳动消耗生产出更多的东西，而且加在总产品上的劳动时间仍然和以前同样多。然而，强制缩短工作日，不仅能够有力地推动生产力的发展和生产条件的节约，而且能够迫使工人在同样的时间内增加劳动消耗，提高劳动力的紧张程度，就是把劳动凝缩到一定的程度。当然，这种压缩就是在一定时间内的大量劳动，而且实际上也是如此。实际上，缩短工作日不仅是使劳动凝缩的主观条件，而且是使工人有可能在一定时间内付出更多劳动的办法。虽然通过两种方法可以在同一时间内榨取更多的劳动，就是提高机器的速度和扩大工人的劳动范围，但是资本家手中的机器可以由法律强制实行，是一种可以客观和系统利用的手段。</p><p><span class="under0"> <strong> 资本主义生产不仅是商品的生产，而且是剩余价值的生产。因此，工人不是为自己生产，而是为资本生产，必须生产剩余价值。工人进行生产已经不够，只有为资本家生产剩余价值或者为资本的自行增殖服务才能够满足生产的需要，比如一个教员不仅可以训练孩子的头脑，而且可以为校董的发财致富劳碌，才能发挥生产的最大效用。其实，生产工人的概念决不只包含活动和效果、工人和劳动产品之间的关系，而且包含一种特殊的历史生产关系。当然，这种生产关系可以把工人变成资本增殖的直接手段，是生产工人的不幸。</strong></span></p><p><span class="under0"> <strong> 在资本主义社会，生产剩余价值是生产工人的本质特征。一旦工人的生产并不超出工人只生产自己劳动力的等价物的那个点，那么剩余劳动就消失了，资本主义也就不复存在了。</strong></span></p><p>绝对剩余价值的对称。指在工作日长度不变的条件下，通过缩短必要劳动时间，相应地延长剩余劳动时间而生产的剩余价值。和绝对剩余价值不同，它的增加不是由于创造出来的价值绝对地增加了，而是通过缩短必要劳动时间，把一部分原来的必要劳动时间转化为剩余劳动时间，从而使剩余价值相对地增加。它是资本家提高剥削程度的两种基本方法之一。</p><p><span class="under0"> <strong> 工人的劳动分为必要劳动和剩余劳动两部分。资本家要达到价值增殖的目的，一方面是延长工作日；另一方面是改进设备、技术，缩短必要劳动时间。在资本主义前期，以第一种方式为主；后期以第二种为主。</strong></span></p><p><span class="under0"> <strong>在商品市场上，工人出卖的是劳动力，而劳动作为价值的实体和内在尺度，本身没有价值。让我们考察一下，劳动力的价值和价格的转化形式就是工资。</strong></span></p><p><span class="under0"> <strong>计件工资是资本主义工资的一种形式，它以一定时间内生产的产品数量来计算。它掩盖了资本家利用延长劳动时间，增加劳动强度来剥削工人的实质。</strong></span></p><p><span class="under0"> <strong>虽然工作日的价值可以表现为一定时间内的劳动价值或价格，但是工资的形式消灭工作日分为必要劳动和剩余劳动、有酬劳动和无酬劳动的一切痕迹。</strong></span></p><p><span class="under0"> <strong>总而言之，奴隶劳动的所有权关系掩盖奴隶为奴隶主劳动的事实，而在雇佣劳动下，货币关系掩盖雇佣工人无偿劳动的事实。虽然这种表现形式掩盖现实关系，正好显示出它的反面，但是资本主义生产方式的一切神秘性、一切自由幻觉和一切辩护遁词，都是以这个表现形式为依据的。因此，劳动力的价值和价格转化为工资形式，就是转化为劳动本身的价值和价格，具有决定性的重要意义。</strong></span></p><p><span class="under0"> <strong>生产过程是以购买劳动力为开端，而工人只能在劳动力发挥作用的时候，尤其是在把它的价值和剩余价值实现在商品上以后，才得到报酬。因此，工人生产可以被看作是为资本家消费基金生产剩余价值，也可以被看作是可变资本以工资形式流回到工人手里的形式。当然，资本家用货币把商品价值支付给工人，而工人只有不断地再生产这种基金的时候，才会被雇用。当工人把一部分生产资料转化为产品的时候，他生产的产品就部分转化为货币，而工人今天或下半年的劳动价值却是用他上星期或上半年的劳动来支付的。如果我们从阶级的角度考察资本家和工人的话，货币形式所造成的错觉就会立即消失，可变资本就会表现为劳动者维持和再生产所必需生活资料的表现形式。由此可知，在一切社会生产制度下，这种基金都必须由劳动者本身来生产和再生产，而工人生产的产品也会不断地以资本的形式离开工人，不断地以工人劳动的支付手段的形式流回到工人手里。实际上，资本家只不过是把工人自己的物化劳动预付给工人而已。</strong></span></p><p><span class="under0"> <strong>因此，资本家通过消费别人无酬劳动即剩余价值，而保存原资本价值。</strong></span>当然，资本家占有的资本价值等于若干年生产不付等价物而占有的剩余价值额，而所消费的价值额就等于原有资本价值。</p><p><span class="under0"> <strong>在连续不断的再生产过程中，工人获得的工资，不过是用工人以前的劳动来支付的，工人不仅创造了剩余价值和可变资本，而且还创造了全部资本。</strong></span></p><p><span class="under0"> <strong>由此可见，资本家最不可少的生产资料就是工人本身的生产和再生产，而工人的个人消费也是资本生产和再生产的一个要素，就像劳动过程中需要擦洗机器一样。</strong></span></p><p><span class="under0"> <strong>同由锁链管理的罗马奴隶相比，雇佣工人却是由看不见的线系在资本所有者的手里。</strong></span></p><p><span class="under0"> <strong>当然，这种独立的假象需要雇主的经常更换和契约的法律虚构来保持的。</strong></span></p><p><span class="under0"> <strong>一般来说，把剩余价值当作资本使用，就是将剩余价值再转化为资本，叫作资本积累。</strong></span></p><p>至于2000镑追加资本的情况，它的产生过程是一清二楚的，就是资本化的剩余价值。<span class="under0"> <strong>实际上，它的任何一个价值原子都是由别人的无酬劳动产生的，并不是合并追加劳动力的生产资料以及维持这种劳动力的生活资料。虽然维持这种劳动力的生活资料是剩余产品不可缺少的组成部分，是资本家从工人阶级那里夺取贡品的不可缺少组成部分。因此，资本家会用贡品的一部分来购买追加劳动力，甚至以十足的价格来购买。当然，用等价物交换等价物不过是征服者的老把戏，都是用从被征服者那里掠夺来的货币去购买被征服者的商品而已。</strong></span></p><p><strong> 如果追加资本所雇用的工人就是生产者的话，那么工人必须继续使原有资本增殖，要用耗费比过去劳动更多的劳动；如果我们把这看作是资本家阶级和工人阶级之间交易的话，那么用从前雇用工人的无酬劳动来雇用追加的工人也不会改变问题的实质。虽然资本家还会把追加资本转化为机器，而机器又把这种追加资本的生产者抛向街头，甚至是用几个儿童来代替他们，但是工人阶级总是用他们这一年的剩余劳动创造下一年雇用追加劳动的资本。实际上，这就是所谓“资本生资本”。换而言之，资本家所预付的追加资本，也就是他的“最初劳动”的价值的确是积累的前提，甚至是第二个追加资本的前提。因此，过去对无酬劳动的所有权，成为现今资本占有无酬劳动的唯一条件，而资本家积累得越多就越能更多地积累。</strong></p><p>资本积累就是资本规模不断扩大的再生产。资本家把剩余价值中的一部分转化为资本，投入到生产中，扩大再生产的规模。扩大再生产则可能带来社会的全面繁荣</p><p><span class="under0"> <strong> 用从劳动者那里掠夺来的货币去购买劳动者的商品，资本家这种对无酬劳动的占有，成为扩大再生产的唯一条件。</strong></span></p><p>1．产品属于资本家，不属于工人；2．产品价值包含预付资本的价值和剩余价值，而且要耗费工人劳动的剩余价值不需要资本家耗费任何东西；3．只要找到买者，工人就可以重新出卖劳动，保持自己的劳动力。</p><p><span class="under0"> <strong> 为了获取最大限度的剩余价值，进行更多的资本积累，资本家的贪欲是永无止境的。他们加强对工人的剥削，通过资本积累来扩大再生产规模，获取更多的剩余价值。</strong></span></p><p>此外，<span class="under0"> <strong>同货币贮藏者相比，资本家财富的增长，不同自己的个人劳动和个人消费的节约成比例，而是同他榨取别人劳动力的多少和强迫工人放弃生活享受的程度成比例的。因此，虽然资本家的挥霍从来不像封建主那样直截了当，但是资本家的挥霍依旧隐藏着最肮脏的贪欲和最小心的盘算。</strong></span></p><p>剩余价值率首先取决于劳动力的剥削程度。工人把劳动力作为商品卖给资本家，然后工人劳动力在资本家手中只作为他的生产资本的一个要素来执行职能。</p><p><span class="under0"> <strong>资本的积累对工人阶级命运会产生非常不利的影响。因为资本的积累，使扩大规模的再生产成为可能，一方面生产出更多更大的资本家，另一方面再生产出更多的雇佣工人，资本积累无形中就演变成无产阶级的增加和受剥削范围的扩大。</strong></span></p><p><span class="under0"> <strong>不管是更换雇主，还是获得高额的工资，这些都不能掩盖工人与资本家的隶属关系和被剥削的状况。资本主义生产关系致使资本家永远都凌驾于劳动者之上，</strong></span></p><p><span class="under0"> <strong>在以上最有利的积累条件下，工人可以忍受对资本的从属关系，就像伊登所说的“安适和宽松的”形式。随着资本的增长，这种关系更为扩大，也就是说，资本剥削和统治的范围随着它本身的规模和臣民人数的增大而扩大。当工人生产的价值日益增加并越来越多地转化为追加资本的剩余产品中的时候，这些价值就会以支付手段的形式流回到工人手中，使他们能够扩大自己的享受范围，比如较多的衣服、家具等消费基金，甚至是积蓄一小笔货币准备金。虽然待遇的提高和持有财产的增加不能消除工人与资本的从属关系和资本家的剥削，但是由于资本积累而提高的劳动价格，却在一定程度上使雇佣工人能暂时多获得一些利益。</strong></span></p><p>另外，在约翰·威德的《中等阶级和工人阶级的历史》一书中曾经提到，“不论工业工人还是农业工人，他们就业的界限是一致的，那就是雇主能够从他们的劳动产品中榨取利润。如果工资率过高，使雇主的利润降低到平均利润以下，雇主就会不再雇用他们，或者只有在他们答应降低工资的条件下，才会继续雇用他们”。<span class="under0"> <strong>实际上，不管劳动力的出卖条件对工人是怎样的有利，追加资本的目的都是使劳动力不断地再出卖，使财富作为资本不断地扩大再生产。</strong></span></p><p>由此可见，<span class="under0"> <strong>劳动价格的提高被限制在这样的界限内，就是限制在使资本主义制度的基础不受侵犯的界限内，而且是能够保证资本主义制度扩大再生产的界限内。当然，资本主义积累的本性决不允许劳动剥削程度的任何降低或劳动价格的任何提高，更别提危及资本关系的不断再生产和规模不断扩大的再生产。</strong></span></p><p><span class="under0"> <strong> 实际上，资本之所以能在一个人手中大量增长，是因为它在许多人手中的丧失，绝不同于积累和积聚的集中。</strong></span></p><p>随着资本量的扩大，资本积累不断发生质的变化，通过减少资本的可变部分来不断增加资本的不变部分而实现资本构成的改变。随着总资本的增长，总资本可变部分的相对减少也会加快，而且比总资本的增长还要快。实际上，工人人口的绝对增长总是比可变资本即工人人口的就业手段增长得快，而资本积累也会超过资本增殖的平均需要追求能力和规模的增长，并形成过剩的或追加的工人人口。</p><p><span class="under0"> <strong> 作为资本主义财富发展的必然产物，过剩的工人人口形成一支绝对地隶属于资本，可供支配的产业后备军，就好像它是由资本出钱养大的一样。由于不受人口实际增长的限制，过剩的工人人口为不断变化的资本增殖需要创造出随时可供剥削的原料。实际上，作为资本主义积累的杠杆，甚至可以算是资本主义生产方式存在的条件，产业后备军的确在经济停滞和繁荣时期，对现役劳动军起到压力的作用，并在生产过剩和亢进时期抑制现役劳动军的要求。换而言之，相对过剩人口是劳动供求规律借以运动的背景，它的作用范围也限制在绝对符合资本的剥削欲和统治欲的界限之内。</strong></span></p><p>。如果撇开这些形式不说，过剩人口经常具有三种形式：流动的形式、潜在的形式和停滞的形式。</p><p>相对过剩人口增多会对在业工人造成极大的压力，致使在业工人不得不过度劳动和忍受资本家的摆布。</p><p>随着美洲金银产地的发现，土著居民要么被剿灭、被奴役，要么被埋葬于矿井，而对东印度和非洲开始进行的征服和掠夺，也都标志着资本主义生产时代的曙光。</p><p><span class="under0"> <strong> 分工出现之后，一个人仅靠自己生产的产品无法满足全部生活需要，他必须用自己的产品或以自己产品售出所得的金钱，购买所需要的生活资料。所以，在他制作自己的产品及产品尚未售出的阶段，他必须有足够的积蓄维持生活，这就是资本积累最原始的状态。</strong></span></p><p>如果我们用A表示劳动力，Pm表示生产资料，那么所要购买的商品额就可以表示为W＝A＋Pm。因此，从内容来看，G—W表现为G—W＝A＋Pm；就是说，G—W要分成G—A和G—Pm；因此货币额G也要分成两部分，其中一部分购买劳动力，另一部分购买生产资料。这两个购买序列属于两个完全不同的市场，一个属于真正的商品市场，而另一个则属于劳动市场。</p><p><span class="under0"> <strong> 资本的本质具有两个特征：第一，资本作为能够带来剩余价值的价值，体现着资本家剥削工人的阶级关系。第二，资本还是一种运动，是以价值为主体的运动。资本只有在不断的运动中，才能不断地增殖。资本要保存和增殖自己的价值，必须连续不断地进行循环。</strong></span></p><p>资本主义生产过程就是连续不断的再生产过程，它不仅表示剩余价值的生产，而且表示剩余价值的周期再生产；处在生产形式上的产业资本不是执行一次职能，而是周期反复地执行职能。</p><p><span class="under0"> <strong> 资本主义生产是连续不断的再生产，资本家将他的资本分割为货币资本、生产资本和商品资本，资本作为整体同时并列处在不同阶段，每一部分资本都不断地依次通过不同的循环阶段，完成自己的循环过程。既是流通过程和生产过程的统一，又是产业资本三个循环的统一。</strong></span></p><p>一种商品越容易变坏，在它生产出来之后就越要赶快消费掉，赶快卖掉，它能够离开产地的距离就越小，它的空间流通领域就越狭窄，它的销售市场也就越带有地方性质。因此，一种商品越容易变坏，它本身的这种物理性能对于它作为商品的流通时间的绝对限制越大，它就越不适于成为资本主义生产的对象。这种商品只有在人口稠密的地方，或者当产销地点的距离由于运输工具的发展而相对缩短时，它才会成为资本主义生产的对象。而当一种物品的生产集中在少数人手里和人口稠密的地点时，甚至能够为这样一类产品，如大啤酒厂、牛奶厂生产的产品，造成较大的市场。</p><p><span class="under0"> <strong> 商品生产的一般规律是：劳动创造的价值和劳动生产率成反比。这个规律，不仅适用于其他任何产业，而且也适用于运输业。</strong></span></p><p><span class="under0"> <strong> 资本的周转是以预付资本的形式为起点，经历一系列循环运动，已经增殖的资本又重新回到它的起点。这种资本周转是资本循环运动的不断重复，是以实现预付资本价值的增殖为目的。</strong></span></p><p>总之，凡是被称作劳动资料的东西，都是这样，例如厂房、机器等。这部分不变资本，按照它在丧失使用价值时所丧失掉的交换价值的比例，把价值转移到产品之中。这种生产资料究竟把多少价值转给或转移到它帮助形成的产品中去了，要根据平均计算来决定，也就是要根据它执行职能的平均持续时间来计量。这个持续时间，从生产资料进入生产过程那一刻起，到它完全损耗，而必须用同一种新的物品来替换或再生产时为止。因此，这部分不变资本即真正的劳动资料，其特征是：</p><p>固定在劳动资料上的这部分资本的价值，和其他部分一样要进行流通。我们曾经说过，全部资本价值一直处在不断流通之中，因此从某种意义上来说，一切资本都是流动资本。但这里考察的流通是一种独特的流通。首先，这个资本部分不是在它的使用形式上进行流通，只是它的价值进行了流通，并且这种流通是逐步地、一部分一部分地进行的，和从它那里转移到作为商品进行流通的产品中去的价值是一致的。在它执行职能的全部时间内，它的价值总有一部分固定不动，和它帮助生产的商品相对立，保持着自己的独立。</p><p>劳动力在执行职能期间，不断地把它的价值的等价物加入到产品中去，这个等价物随着产品的流通不断地转化为货币。如果要使生产的循环连续进行而不致中断，那么，这个等价物就必须不断地由货币再转化为劳动力，或者说，不断地经过它的完全的循环的各种形式，也就是说，它必须不断地周转。</p><p><strong> 我们以前讲过，资本家由于使用劳动力而支付给工人的货币工资，实际上只是工人必要生活资料的一般等价形式。从这个角度来说，可变资本在物质上应该是由生活资料构成的。但是在这里，当我们考察周转时，问题却在于其形式。资本家所购买的，并不是工人的生活资料，而是工人的劳动力本身。形成他的可变资本部分的，不是工人的生活资料，而是工人能够发挥作用的劳动力。资本家在劳动过程中，生产地消费的是劳动力本身，而不是工人必需的生活资料。因此，由于和固定资本相对立而取得流动资本的规定性的形式的，不是工人的生活资料，也不是工人的劳动力，而是生产资本中投在劳动力上的那部分资本的价值。正是由于这部分价值的周转形式，所以才取得了一种和不变资本某些组成部分相同，但和它的另一些组成部分相反的性质。</strong></p><p>劳动力在不断把它自身的价值加进产品的同时，还不断地把无酬劳动的化身——剩余价值，加到产品中去。因此，也和成品的其余价值要素一样，剩余价值不断地被成品带入流通并转化为货币。不过在这里，要研究的首先是资本价值的周转，而不是和它共同进行的剩余价值的周转，所以，我们暂且撇开后者不说。</p><p>资本家购买劳动力价值的可变资本也属于流动资本。由劳动力创造的，相当于劳动力价值的那一部分价值，随着产品的出售转化为货币。如果要使生产过程连续不断地进行，这些货币就必须作为可变资本又用来购买劳动力，从而完成它的一次周转。</p><p>固定资本和流动资本的形式规定性即其定义之所以产生，只是由于在生产过程中执行职能的生产资本会有不同的周转。而周转之所以会不同，又是由于生产资本的不同组成部分把它们的价值转移到产品中去的方式是不同的，而不是由于它们在价值增殖过程中有独特的作用，或它们在产品价值的生产中有不同的作用。最后，价值转给产品的方式——这个价值通过产品的形态变化和产品流通的方式而在原来的实物形式上更新的方式——之所以有差别，又是由于生产资本借以存在的物质形式上有差别，在形成单个产品时，生产资本的一部分会全部消费掉，另一部分只是逐渐消耗掉。因此，只有生产资本才能够分为固定资本和流动资本。</p><p><strong> 以这种方式得到补偿的追加资本，虽然支出的方法不规则，但也同样属于流动资本。<span class="under0">因为立即排除机器的故障是一件至关重要的事，所以在每一个较大的工厂，除了雇用真正的工厂工人，还要雇用一批工程师、木匠、机械师、钳工等等。他们的工资就是可变资本的一部分，他们的劳动的价值被转移到产品中。</span>另一方面，在生产资料上耗费的支出，也应该按照平均计算决定，而且会按照这个计算，不断形成产品的价值部分，虽然实际上这种支出是在不规则的期间内预付的，从而也是在不规则的期间内加入到产品或固定资本中去的。这种投入到真正修理上的资本，从某种角度来看，形成了一种独特的资本，它既不能被列入流动资本，也不能被列入固定资本，不过作为一种经常支出来说，还是算作流动资本较为合适。</strong></p><p>生产过程的全部时间，分为生产时间和非生产时间，劳动产品的存储时间也是生产时间的一部分，劳动产品存储时间的长短，对资本周转的速度会产生直接的影响。葡萄酒被存放起来，不加入人工劳作，但封存以后，光、热和振动都会加速酒的藏酿进程，这种生产过程的中断对于酒至关重要。</p><p>由于漫长的生产时间（只包括比较短的劳动时间），从而漫长的资本周转时间，使造林不适合私人经营，因而造林这种生产行为也就不适合资本主义经营。资本主义经营本质上就是私人经营，即使这种经营是由联合的资本家代替单个资本家，也是如此。</p><p><span class="under0"> <strong> 资本周转时间是资本生产时间和资本流通时间之和。流通时间包括了商品出售时间和商品购买时间，其中商品出售时间的延长和缩短，直接决定着流通时间以及整个周转的长短。</strong></span></p><p>交通运输工具的改善，不仅可以缩短运输时间，还可以改变商品的储备时间。市场上商品储备量的减少，会加速资本的回流。这样，资本的总流通时间缩短了，周转时间也随之缩短。</p><p>世界市场的扩张起源于海外殖民。资本主义生产的进步和交通运输工具的发展，为资本主义开拓世界市场提供了可能性和必要性。英国作为近代最大的殖民国家，始于16世纪止于18世纪后期工业革命的殖民扩张，商业资本起了主要作用，商业资本家成为殖民扩张的主要推动者。当葡萄牙、西班牙这两个老牌殖民国家称霸海上时，人迹罕见的北美东岸成为英国最早的殖民活动地区。</p><p><span class="under0"> <strong> 整个资本周转过程中，生产时间和流通时间都要占用一定量的资本，资本在整个周转时间内所需要的预付资本量，是生产资本与流通资本的总和。为了不使生产在资本的流通时间内中断，不能预付足够的流动资本的情况下，就只能缩小生产的规模。</strong></span></p><p>一窍不通的经济学家，总是会忽视这一要点：生产要不间断地进行，产业资本就始终只能有一部分实际上进入生产过程。也就是当一部分处在生产期间的时候，另一部分必须总是处在流通期间。换句话说，资本的一部分，只有当另一部分脱离真正的生产而处于商品资本或货币资本形式的条件下，才能作为生产资本执行职能。因此，忽视了这一点，也就完全忽视了货币资本的意义和作用。</p><p><strong> 资本周转中，流通时间会对处在生产期间的预付资本产生极大的影响，资本周转时间越长，为维持再生产所需要的预付资本量就越大。而在周转时间中，资本流通的时间越长，处在流通阶段的资本就越多。</strong></p><p>在资本的周转过程中，只有可变资本才能创造剩余价值，可变资本的每一次周转，都会带来一定的剩余价值量。因此，可变资本周转的次数越多，创造的剩余价值也越多。</p><p>英国产业革命以后的100多年，是资本主义机器大生产蒸蒸日上的发展时期，也是自由资本主义在欧美全盛的时期。从19世纪70年代起，自由资本主义开始向垄断资本主义阶段过渡。这个时期，以电力的应用为主要标志。发电机、电动机和内燃机的发明和应用，有力地推动了社会生产力的发展，加速了资本积聚和集中，而资本积聚和集中的结果，又必然走向垄断。</p><p>产品的不同，决定生产产品所需时间的长短也会不一样，资本家仅限于劳动期间内才付给工人薪酬，那些劳动时间长，技术含量低的生产，所得收入就会很低。</p><p><span class="under0"> <strong> 资本的周转期间越短，从而它的再生产期间在一年内更新的间隔时间也就越短，资本家原来以货币形式预付的可变资本部分也就会更加迅速地转化为工人在补偿这个可变资本时所创造的价值产品（此外，还包括剩余价值）的货币形式，从而，资本家必须从他个人的基金中预付货币的时间就越短，和一定的生产规模相比，他预付的资本就越少；而且，当剩余价值率已定时，他在一年内榨取的剩余价值量也就相应的越大，因为，他可以更加多地使用工人自己创造的价值产品的货币形式来不断重新购买工人，并且推动他的劳动。因此，在生产规模已定的情况下，预付的可变货币资本（以及全部流动资本）的绝对量，会按照周转期间缩短的比例而减少，年剩余价值率则会按照这个比例而提高。在预付资本的量已定时，生产规模会随着再生产时间的缩短所造成的年剩余价值率的提高而扩大，因而，在剩余价值率已定时，在一个周转期间内生产的剩余价值的绝对量，也会随着这种提高而增加。总之，根据以上的研究可以得出：由于周转期间长短的不同，在劳动剥削程度相等时，为了推动等量的生产流动资本和等量的劳动而必须预付的货币资本量是极不相同的。</strong></span></p><p>第二，这一点和第一点区别而有联系。B的工人和A的工人一样，也是用在他手中的那个已经变成流通手段的可变资本，来支付他所购买的生活资料的费用的。例如，他在从市场上取走小麦的同时，还必须用一个货币形式的等价物来补偿小麦。但是，和A的工人不同的是，B的工人用以支付并从市场上取走生活资料的货币，并不是他在这一年内投入市场的价值产品的货币形式，因此，虽然他对生活资料的卖者提供货币，但是，没有为后者提供任何可供其用得到的货币购买的商品——不管是生产资料，还是生活资料，与之相反，A的工人却提供了商品。因此，在B的情况下，虽然资本家从市场上取走了劳动力，取走了这种劳动力的生活资料，同时也取走了B所使用的劳动资料形式的固定资本以及生产材料，而且把货币的等价物作为对于它们的补偿投入市场；但是，他们在一年的时间内却没有把任何产品投入到市场，来补偿从市场上取走的生产资本的各种物质要素。如果我们设想某一社会不是资本主义社会，而是共产主义社会，那么首先，货币资本就会完全消失，因而，由货币资本所引起的交易上的伪装也自然就会消失。<span class="under0"> <strong> 问题可以简单地归结为：在社会主义中，社会必须预先计算好，可以把多少劳动、生产资料和生活资料用在这样一些产业部门而不致受任何损害，而且这些部门，如铁路建设，在一年或一年以上的较长时间内不仅不能提供任何生产资料和生活资料，不提供任何有用效果，而且还会从全年总生产中取走劳动、生产资料和生活资料。与之相反，在资本主义社会，社会的理智总是在事后才起作用，因此，某种巨大的社会紊乱可能并且必然会不断发生。</strong></span></p><p>因为产品的供给情况不同，例如劳动时间短、资本周转快的煤炭生产，由于资本在一年中能够周转多次，因此，它自己所使用的流动资本要素，可以由它本身生产的产品来供给。</p><p>商品市场行情的变化，出售的难易程度以及由此引起的把产品一部分投入较近或较远的市场的必要性，都决定了商品流通时间的长短。也连带影响了资本周转期间的长短。</p><p>资本的直接生产过程，其实也就是资本的劳动过程和价值增殖过程。这个过程的结果当然是商品产品，但它的决定性动机则是生产剩余价值。</p><p>社会总资本的运动，是社会各个资本运动的总和。它不仅包括资本的流通，而且也包括一般的商品流通。在熙来攘往的巴西维拉佩索市场上，人们购买商品用来满足个人的生活消费的行为，并不构成资本流通的环节，而只是一般的商品流通行为。</p><p>商品资本的流通，当然还包含剩余价值的流通，从而也必然包含资本家的个人消费，即包含着对剩余价值的消费起媒介作用的买和卖。因此，由各个单个资本综合而成的社会资本的循环，也就是说，从社会总资本的角度来考察的循环，不仅包括资本的流通，同时也包括一般的商品流通。后者本来是由两部分构成：一是资本自身的循环；二是进入个人消费的那些商品的循环，也就是工人用他们的工资、资本家用他们获得的剩余价值购买的那些商品的循环。</p><p>当我们考察单个资本的周转时，货币资本主要显示出两个方面的特点。第一，它是每个单个资本登上舞台，作为资本开始它的过程的形式并行使其职能的，因此，它表现为发动整个运转过程的第一推动力。第二，由于周转时间的长短不同以及周转时间两个组成部分（劳动时间和流通时间）的比例不同，从而必须不断以货币形式预付和更新的那部分预付资本价值与它所推动的生产资本即连续进行的生产的规模之间的比例自然也就不同。但不管这个比例是怎样的，能够不断执行生产资本职能的、处在周转过程中的那部分资本价值，总是受货币形式与生产资本并存的那部分预付资本价值的限制。这里说的只是正常的周转、只是一个抽象的平均数，至于为消除流通的停滞而追加的货币资本是撇开不说的。</p><p><strong> 关于第一点：商品生产是以商品流通为前提的，而商品流通又通过商品表现为货币，并以货币流通为前提；商品可以分为商品和货币的这种二重化性质，是产品表现为商品的规律。同样，资本主义的商品生产，无论是社会地考察还是单个地考察，都要求货币形式的资本或货币资本作为每一个刚开办的新企业的第一推动力和持续的动力。尤其是在流动资本的情况下最为明显，它要求货币资本作为动力在一段时间必须不断地反复出现。全部预付资本价值，也就是资本的一切由商品构成的部分劳动力、劳动资料和生产材料，都必须用货币不断地一再购买。</strong></p><p>同一些劳动资料，即同一固定资本，可以用延长每天的使用时间的办法，也可以用增加使用强度的办法，更有效地加以利用，而无需为固定资本追加货币支出。这时，只是固定资本的周转加快了，但同时它的再生产的各种要素也更迅速地提供出来。关于劳动力在生产过程中的社会结合和各个单个工人所积累起来的熟练程度，情况也是如此。</p><p>资本主义机器大生产一方面更多地利用生产剩余价值来加强对工人的剥削，另一方面又很快地改变社会生活，推动社会向前发展。</p><p><span class="under0"> <strong> 由于周转时间的长短不同，推动生产资本所必需的货币资本量也就有大有小。我们还知道，周转时间可以划分为劳动时间和流通时间，这就要求增加那种在货币形式上潜在的或暂歇的资本。在其他条件不变的情况下，周转时间，单就它由劳动期间的长度决定而言，是由生产过程的物质性质所决定，因此，也就不是由这个生产过程的特殊的社会性质所决定。但是，在资本主义生产的基础上，所有历时较长范围较广的事业，一般要求在较长时间内预付较大量的货币资本。所以，这一类领域里的生产要取决于单个资本家所拥有的货币资本的界限。但随着信用制度和与此相关联的联合经营（例如股份公司）的出现，这个限制便被打破了。因此，货币市场上出现的这些混乱会使这类企业陷于停顿，并且也会引起货币市场的混乱。</strong></span></p><p>只不过在社会公有的生产中，货币资本不再存在了，由社会把劳动力和生产资料分配给不同的生产部门。生产者也许会得到以纸的形式出现的凭证，以此从社会的消费品储备中，取走一个与他们的劳动时间相当的量，但这些凭证不是货币，因为它们是不流通的。</p><p><strong> 货币资本对生产规模的限制不是绝对的，通过加强对劳动力的剥削，提高生产力，增加固定资本的使用强度，或者像图中利用潮汐来发电那样，加强对自然物质的利用。这样即使不增加货币资本，或货币资本不按照生产规模扩大的比例而增加，生产规模仍然可以扩大。</strong></p><p>社会总产品可以分成两大部类：1．生产资料：是一种具有必须进入或至少能够进入生产消费的形式的商品。2．消费资料：是一种具有进入资产阶级和工人阶级的个人消费的形式的商品。</p><p>每一部类的资本又都分成两个组成部分：1．可变资本：从价值方面看，这个资本的价值等于该生产部门使用的社会劳动力的价值，也就是为这个社会劳动力而支付的工资总额。从物质方面看，这个资本是由发挥作用的劳动力本身构成的，也就是由这个资本价值所推动的活劳动构成的。2．不变资本：即该部门在生产过程中使用的全部生产资料的价值。这些生产资料本身又可以分成固定可变资本（如机器、工具、建筑物、役畜等等）和流动不变资本（生产材料，如原料、辅助材料、半成品等等）两部分。</p><p>我们在考察单个资本的产品价值时曾经说过，固定资本因损耗而逐渐失去的价值，会一点一点地转移到在损耗期间生产的商品产品中去，不管这个固定资本在其生产期间是否由于这种价值转移得到了实物补偿。相反，在这里，当我们考察社会总产品及其价值时，却不得不撇开至少是暂时撇开固定资本在当年因损耗而转移到年产品中去的那部分价值，因为固定资本的这一部分不会在当年重新得到实物补偿。</p><p>第II部类的年商品生产是由种类繁多的产业部门构成的，不过，按它们的产品来说，也可分成以下两大分部类：（a）消费资料。这些费资料主要进入工人阶级的消费，但因为它们是必要的生活资料，所以也构成资产阶级的消费的一部分，虽然就其质量和价值来说，这部分消费资料往往和工人的必要生活资料不同。但是这里为了研究的目的，我们可以把这个分类概括为必要消费资料这个项目。（b）奢侈消费资料。它们只进入资产阶级的消费，所以这部分消费资料只能和资本家花费的剩余价值交换，当然剩余价值是绝对到不了工人手中的。</p><p><span class="under0"> <strong> 生产消费资料过程中，生产工人必要生活资料的资本家，在支付工人工资后，又把这些必要生活资料卖给自己的工人，资本家的预付资本，就通过工人用工资购买这些必要生活资料而直接流回资本家手中。</strong></span></p><p><span class="under0"> <strong> 尽管攫取剩余价值是单个资本家的动机，简单再生产实质上还是以消费为目的的；但是，剩余价值不管它的比例如何，在这里最终都只是用于资本家的个人消费。</strong></span></p><p>生产出的奢侈消费资料，只进入资产阶级的消费，一般工人根本无法购买，它只能由资本家用剩余价值来购买，资本的回流由资本家把货币工资支付给工人开始，工人再用这些货币工资购买必要的生活资料，资本家又用这些货币工资购买这些奢侈消费资料，最后，这些货币才回到资本家手中。图中铺着20张虎皮的奢华客厅，充分显示了购买奢侈品，显露财富已经成为资本家生活必不可少的一部分。</p><p><span class="under0"> <strong> 资本家用来购买生产资料和劳动力，为了生产剩余价值而预先垫付的资本。从一个孤立的生产过程来看，预付资本好像是从资本家私人基金中预付的。但是，从再生产过程来看，情况却完全不是这样。因为资本家用来购买劳动力的可变资本，是工人自己再生产出来的产品的一部分，并且不断以工资的形式流回到工人手中。工人这个月的工资，是用他上个月的劳动产品转化的货币来支付的。当然，资本家依靠原始积累成为货币所有者的情况是可能的。</strong></span></p><p>第二次世界大战后，欧洲对通货膨胀视如洪水猛兽，至今仍未放松警惕。通货膨胀最初是指纸币的发行量超过了商品流通所需要的数量而引起贬值，物价随之上涨的现象。在宏观经济学中，通货膨胀主要是指价格和工资的普遍上涨。图中的韩国工人对着因遭金融风暴冲击而大幅贬值的钞票一筹莫展。</p><p>马克思一再指出，当国内再生产出现失衡，生产过剩或生产不足时，对外贸易都能起到补救作用。所以进出口商品结构、数量的调控必须考虑到有利国内再生产的总量平衡和结构平衡。外汇平衡是国民经济综合平衡的重要内容。中国历史上穿越西部地区的“丝绸之路”曾是对外贸易的第一条通道。</p><p>资本主义的发展首先表现为物质的极大丰富，商品的大量堆积。为了便于商品交换，世界各地陆续出现了许多大型的商业中心，这里的商品齐全，品质优良，加之方便、舒适的购物环境，逐渐改变了人们的消费习惯。人们在购物的同时，还可以休闲娱乐。</p><p><span class="under0"> <strong>积累的货币是由进行实际积累的资本家提供的。但是，货币贮藏不是生产，早在资本主义商品生产以前的简单商品流通中就已经产生了货币贮藏。因此，社会拥有的货币量，总是大于实际流通中的货币量。</strong></span></p><p><span class="under0"> <strong>被贮藏的货币，因为离开了流通领域，在一段时间内失去了流通能力。但将其积聚在银行中，就变成了可供支配的资本、“可贷资本”、货币资本，它们便不再是被动的东西，而是能动的，生利的东西。</strong></span></p><p>剩余产品，也即是剩余价值的承担者，对于它的占有者第I部类的资本家而言，当然是不费分文的，他们不用按任何方式预付货币或商品就可以得到它。预付，在重农学派看来，其实就是在生产资本的要素上实现的价值的一般形式。因此，第I部类资本家预付的只不过是他们的不变资本和可变资本。工人不仅通过自己的劳动，为他们保存了不变资本。工人不仅用一个新创造的具有商品形式的相应的价值部分为他们补偿了可变资本价值，而且工人还通过自己的剩余劳动向他们提供了一个以剩余产品形式存在的剩余价值。他们通过相继出售这种剩余产品形成了货币贮藏，形成了可能的追加的货币资本。</p><p>不变资本的积累，取决于社会的生产力发展状况。在一个国家执行职能的生产资本越多，生产资料的生产规模就越大，劳动生产力就越发达，剩余产品的量也就越大，不变资本积累的数量也就越来越多。</p><p><strong> 在资本主义再生产过程中，由于社会存在着大量的相对过剩人口，劳动力的追加总是非常容易的。在必要时，只要通过延长劳动时间或提高劳动强度，即使不增加劳动力的数量，也可以推动更多的劳动，从而实现扩大再生产。</strong></p><p><span class="under0"> <strong>剩余价值和利润实际上是一个事物的两种说法，在数量上它们也相等，利润是剩余价值的一个转化形式。剩余价值是对可变资本而言，而利润是对全部预付资本而言。</strong></span></p><p><span class="under0"> <strong>利润率因生产力的发展而下降，但同时利润量反而会增加，这个规律也表现为：资本所生产的商品的价格下降，同时商品所包含的并通过商品出售所能够实现的利润量却会相对增加。</strong></span></p><p>生产中消耗的不变资本和可变资本的价值，叫作生产商品的资本主义耗费。生产商品本身的实际耗费和资本主义耗费之间的差额，就是剩余价值。追求更多的剩余价值正是资本家从事商品生产的唯一目的和内在动机。</p><p>在资本主义生产条件下，工人创造剩余价值的那部分劳动是无酬劳动，无需资本家花费一文钱，这样商品生产的成本只能用资本的耗费来计算，而不能用劳动的实际耗费计算。劳动者只不过是构成生产资本的一个要素，而资本家永远是生产的主人。</p><p><span class="under0"> <strong>资本的总公式是G—W—G’；这就是说，一个价值额之所以投入流通，就是为了从流通中取出一个更大的价值额。这个更大价值额是在资本主义的生产中产生，在资本的流通中实现。资本家实际关心的是产品的价值超过在产品生产中使用的资本的价值的余额部分。资本家预付总资本时并没有也不必考虑它的各个组成部分在产生剩余价值的生产上所起的不同作用。他把这一切组成部分同样可以不加区别地预付出去，其主要目的为了生产一个超过预付资本的价值余额。</strong></span></p><p>虽然只有可变资本部分才能创造剩余价值，但它只有在劳动的生产条件（不变资本）也被预付的情况下，才会创造出剩余价值。资本家并不关心资本是可变资本还是不变资本，他们只关心总资本的增殖，因此他们将两种资本完全混同在一起对待。因为他实际获利的程度不是决定于剩余价值和可变资本的比率，而是决定于利润和总资本的比率，即不是决定于剩余价值率，而是决定于利润率。</p><p><span class="under0"> <strong>利润是在资本经济中剩余价值的现象形态，这是由本质到现象的“转化”。剩余价值是对可变资本而言的，与雇用劳动力相联系，直接表现了它的本质；而利润是与全部预付资本相联系的。图中鲜明地表现出工人与资本家在生产关系上的对立，但这一剥削关系却被利润模糊淡化了。</strong></span></p><p><span class="under0"> <strong>商品包含的价值，应该等于制造商品所耗费的劳动时间，这个劳动的总和则由有酬劳动和无酬劳动（资本家对工人的剥削）构成。而对资本家来说，构成商品成本的劳动只有他所支付的物化在商品中的那部分。商品包含的剩余劳动（被资本家无偿占有）虽然同有酬劳动的性质一样，同样也需要工人付出劳动，并且它同有酬劳动创造一样的价值，并作为价值形成要素加入商品，但是它不需要资本家耗费什么东西。资本家可以出售他没有支付分文的某种东西，这就是资本家的利润的本质。</strong></span></p><p>商品价值超过商品成本价格的余额，或者说，商品包含的劳动总额超过它包含的有酬劳动额的余额就是剩余价值或利润。因此，不管剩余价值来自何处，它肯定是一个超过全部预付资本的余额。</p><p>用可变资本来计算的剩余价值的比率，叫作剩余价值率；用总资本（可变资本与不变资本的总和）来计算的剩余价值的比率，叫作利润率。这是用两种不同的计算方法计算出同一个量的不同的比率或关系。</p><p><span class="under0"> <strong>虽然商品价值超过它的成本价格的余额是产生于直接生产过程，但是在流通过程中它才得到实现。由于这个余额是否实现，或者实现到什么强度，都要取决于流通的状况，因此就造成了一种假象，好像这个余额是来自于流通过程。由于资本的一切部分都无差别地表现为超额价值（利润）的源泉，从而，资本关系也就披上了神秘的面纱。</strong></span></p><p><span class="under0"> <strong>剩余价值和利润实际上是一个事物的两种说法，并且在数量上它们也相等，但是利润是剩余价值的一个转化形式，在这个形式中，剩余价值被神秘地去掉了其剥削的本质，它的起源和它存在的秘密被掩盖了，被抹杀了。这样，只有通过仔细的分析，才能使剩余价值从利润中脱壳而出。在剩余价值中，资本和劳动的关系被毫无掩饰地暴露出来了；在资本和利润的关系中，也就是在资本和剩余价值的关系中，资本表现为一种对自身的关系，在这种关系中，资本就是它的原有的价值额，它不同于由它自身创造的新价值。从表面上看，似乎可以说这个新价值是由资本通过生产过程和流通过程的运动中创造的。但是这种情况是怎样发生的，现在却神秘化了，好像这个新价值来自资本本身固有的秘密性质。</strong></span></p><p><span class="under0"> <strong>工人的劳动以工资的形式表现，利润就不像是由工人劳动创造的，而像是资本家全部预付资本的产物，于是剩余价值也就不再被认为是由劳动创造的。可见，利润这个剩余价值的转化形式源于资本主义生产关系本身，同时它又反过来掩盖了资本主义的剥削关系。</strong></span></p><p><strong> 即使在一定限度内额外时间比正常劳动时间支付较高报酬，工作日的延长还是会提高利润。因此，在现代工业制度下，不断增长的增加固定资本的必要性，也就成了资本家延长工作日的一个主要动力。</strong></p><p>利润率会受到不变资本节约程度和商品价格的影响。在商品价格不变的情况下，不变资本的节约，会降低总预付资本量，从而导致利润率的升高。而资本家却总是浪费工人的生命和健康，把压低工人的生存条件本身，看作不变资本使用上的节约，以此来提高利润率。</p><p><strong> 把固定资本的价值再生产出来所需要的时间，是由它们在其中发挥作用和被使用的整个劳动过程的持续时间决定的。如果工人每天被规定做苦工18小时，而不是12小时，那么，一周就会多出三天，即一周就会变为一周半，两年就会变为三年。如果额外时间不给报酬，工人就会在正常的剩余劳动时间之外，每两周再白送一周，每两年再白送一年。这样，机器价值就会以加快50％的速度进行再生产，并且只需花费平常必要时间的三分之二就行了。</strong></p><p>在资本主义社会，指剩余价值量同预付总资本量的比率。是剩余价值率的转化形式，表示资本增殖即资本家赢利的程度。资本家以一定量的价值额投入周转，获得更大的价值额。这个增殖额是雇佣工人的无偿劳动所创造的剩余价值。但是，对资本家来说，预付资本的各个组成部分对于剩余价值的生产是同等重要的，不管剩余价值从何而来，它总归是超过成本价格以上的余额，从而也是超过全部预付总资本的余额。这个余额同预付总资本保持一个比率，即利润率。</p><p>但问题还不只是限于：在活劳动的承担者工人，同经济的，合理而节约地使用他的劳动条件之间，存在着异化和毫不相干的现象。资本主义生产方式按照它的对立的、矛盾的性质，以浪费工人的生命和健康，压低工人的生存条件来节约不变资本，以此看作提高利润率的手段。</p><p>这种节约是用下列的方法实现的：使工人挤在一个狭窄到对工人健康有害的场所；把危险的机器塞进同一些场所而没有相应的安全设备；对于那些明知按其性质来说有害健康的生产过程，却放任不管不采取任何预防措施，等等。<span class="under0"> <strong>总之，资本主义生产对资本的使用尽管非常吝啬，但对工人的使用却非常浪费，</strong></span><br>正如另一方面，由于资本主义生产的产品通过商业进行分配的方法和它的竞争方式，它对物质资料也非常浪费一样；资本主义生产中单个资本家获得的东西其实就是社会失去的东西。资本有一种趋势，就是在使用工人的活劳动时，把它缩减为社会必要劳动，并且尽可能地利用劳动的各种社会生产力来不断缩减生产产品所必需的劳动，因而尽量节约直接使用的需要支付报酬的活劳动，它还有一种趋势，在使用这种已经缩减到必要程度的劳动时做到最合理而节约。如果决定商品价值是商品所包含的必要劳动时间，而不是商品一般地包含的劳动时间，那么，这种决定只有通过资本才能实现，同时还可以通过不断地缩短生产商品所需要的社会必要劳动时间来实现。这样一来，商品的价格就会最大限度地得到缩减，因为生产商品所需要的劳动的每一个部分都已经缩减到它的最低限度了。</p><p>如果在生产部门A的一个投资中，总资本每700中有600用在不变资本上，只有100用在可变资本上；而在生产部门B的一个投资中不变资本与可变资本的比率正好相反，600用在可变资本上，只有100用在不变资本上，那么，A的总资本700就只能推动100劳动力；而B同样大的700总资本却能推动600劳动力。可变资本不仅代表它本身所包含的劳动；在剩余价值率已定时，它同时还代表由它本身所包含的劳动所推动的超额劳动或剩余劳动。在具有相同的劳动剥削程度时，在A中，利润率仅为100/700＝1/7＝14.2％；在B中等于600/700＝85.7％，B的利润率是A的六倍。其实在这个场合，实际上从利润本身来说B也是A的六倍，此时，B的利润是600，而A的利润是100，因为用相等的总资本，B所推动的活劳动为A所推动的活劳动的六倍，所以在剩余价值率相同时，生产了六倍的剩余价值，也就是生产了六倍的利润。</p><p>利润比较高的生产部门由于资本增量与存量的投入使生产大大增加，直至出现供过于求，该部门商品价格大幅度下降，从而引起利润率的下降；而利润率比较低的部门，由于资本增量很少光顾，资本存量大量转移，生产大量缩减，直至出现供不应求。引起价格上涨，利润率提高。这种状况会一直持续到上述部门能够按照平均利润率，实现等量资本获等量利润。</p><p>等量资本要求获得等量报酬，这是资本的必然要求。如果资本有机构成高、资本周转速度慢的企业只能获得较低的利润率，那么，资本所有者就不会经营此类企业；如果资本有机构成低、资本周转快的企业可以获得较高的利润率，那么，资本所有者就会把资本投入这些企业，这样就会造成激烈的竞争。竞争的结果必然导致利润率的平均化。这一矛盾决定了利润率必须平均化。</p><p>因此，如果资本家按商品的生产价格出售他的商品，他就取回与他在生产上所耗费的资本的价值量相一致的货币并且取得予他的社会平均利润。他的成本价格是每个生产部门所特有的。加在这个成本价格上的利润，却不以他的特殊生产部门为转移，而只是归于社会平均利润。</p><p>在资本主义经济里，垄断是指在生产集中和资本集中高度发展的基础上，一个大企业或少数几个大企业对相应部门产品生产和销售的独占或联合控制。垄断者在市场上，能够随意调节价格与产量。</p><p>一般利润率取决于下面两个因素：1．不同生产部门的资本的有机构成，从而在各个部门之间产生了不同的利润率；2．社会总资本在这些不同部门之间的分配，即投在每个特殊部门因而有特殊利润率的资本的相对量。</p><p><span class="under0"> <strong>价值是生产价格的基础，生产价格的变动，归根结底取决于商品价值即生产商品的社会必要劳动时间的变动。</strong></span></p><p>当然，以上所说，是一种对商品成本价格定义的修改。我们原先假定，一个商品生产时所消费的各种商品的价值就是该商品的成本价格。但一个商品的生产价格，对它的买者来说，就是成本价格，并且可以作为成本价格加入另一个商品的价格形成。因为生产价格可以与商品的价值相偏离，所以，一个商品的包含了其他商品的这个生产价格在内的成本价格，可以不等于它的总价值中由其他商品的生产资料的价值构成的部分。必须记住把商品的生产价格看成成本价格的意义，因此，必须记住，如果在一个特殊生产部门把生产商品时所消费的生产资料的价值看作和该商品的成本价格相等，那就总可能有误差。对我们现在的研究来说，没必要对这一点进一步考察。无论如何，商品的成本价格总是小于商品的价值这个论点，在这里仍然是成立的。因为，对资本家来说无论商品的成本价格如何的偏离商品所消费的生产资料的价值，都是没有意义的。商品的成本价格是一个不以资本家的生产为转移的前提，而一个包含剩余价值的商品是资本家生产的结果。</p><p>全部困难是由这样一个事实产生的：商品是当作资本的产品来交换，而不只是当作商品来交换。一定资本在一定时间内生产的商品的总价格，应该满足一种要求，即这些资本要求从剩余价值的总量中，分到和它们各自的量成比例的一份，或者在它们的量相等时，要求分到相等的一份。但是，这些商品的总价格，只是这个资本所生产的各个商品的价格的总和。商品按照它们的价值或接近于它们的价值进行的交换，并不需要资本主义发展到很高的程度。而按照它们的生产价格进行的交换，则需要资本主义的发展达到一定的高度。不同商品的价格变动总是受价值规律的支配，不管最初他们用什么方式来互相确定或调节。在其他条件相同的情况下，如果增加了，价格就会提高；如果生产商品所必需的劳动时间减少了，价格就会降低。</p><p><span class="under0"> <strong>商品不只是当作商品来交换，而是当作资本的产品来交换。从整个社会来看，平均利润率的形成过程，是不同部门的资本所有者通过竞争重新分割剩余价值，从而使等量资本获得等量利润的过程。平均利润的形成实际上是全社会的剩余价值在各部门资本所有者之间重新分配的结果。</strong></span></p><p>不管价格是怎样调节的，我们都会得到如下的结论：</p><p>1．价值规律支配着价格的运动，生产价格降低或提高受到生产上所需要的劳动时间的减少或增加的支配。2．决定生产价格的平均利润，必定总是接近相等于同一定资本作为社会总资本的一个相应部分所分到的剩余价值量。对资本家来说，他们互相计算的利润率是10％还是15％，是没有什么关系的。因为货币表现上的过度是相互的，所以一个百分率并不比另一个百分率代表更多的实际商品价值。至于对工人（在这里，假定资本家还是付给他们正常工资，因而平均利润的提高并不是表示工资的实际扣除，也就是说，并不是表示与资本家的正常剩余价值完全不同的什么东西）来说，那么，可变资本的货币（即工人的工资）表现的提高，必然同平均利润的提高所引起的商品价格的提高相一致（因此工人在获得较高工资时并没有提高他们的实际收入）。事实上，利润率和平均利润这样普遍地在名义上提高到超过实际的全部预付资本的比率和剩余价值，不能不引起工资的提高，以及引起形成不变资本的那些商品价格的提高。如果降低，情况就会相反。既然总剩余价值受到商品的总价值调节，而平均利润以致一般利润率的水平又受到总剩余价值的调节，这是一般的规律，也就是支配各种变动的规律，那么，生产价格就受到价值规律调节。</p><p>商品按照它们的价值或接近于它们的价值进行的交换，比那种按照它们的生产价格进行的交换，所要求的发展阶段要低得多。而按照它们的生产价格进行的交换，则需要资本主义的发展达到一定的高度。</p><p>那么另一方面，也可以说供求关系受到市场价值调节，而不是颠倒过来。或者说，一个中心受到市场价值的调节，供求的变动使市场价格围绕着这个中心发生波动。</p><p>供给和需求两股力量在市场上发生作用，相互竞争，在竞争中可能出现的情况有：需求超过供给，市场价格就会超过市场价值；供给超过需求，市场价格就会在市场价值以下。销售产品的商家总会利用各种促销手段，吸引消费者，强占更多的市场份额。其中最直接有效的促销手段莫过于价格上的优惠。</p><p>只有在供给与需求平衡时，商品才按规定的价值出售。</p><p>要理解供求之间的不平衡，以及由此引起的市场价格同市场价值的偏离，是非常容易的。但是供求一致究竟是指什么却是很难确定的。如果供求之间的比例，可以使某个生产部门的商品总量能够既不高也不低，按照他们的市场价值出售，这种情况下的供求就是一致的。这是我们听到的第一点。第二点是如果市场上的所有商品都能够按照它们的市场价值出售，供求就是一致的。</p><p>需求包括生产需求和生活需求。需求量具有伸缩性和变动性：生活资料价格便宜了，货币工资提高了，工人就会购买更多的生活资料，需求量会扩大；生产资料价格便宜了，资本家对棉花的需求就会增长，投入棉纺织业中的追加资本就会增加。</p><p>如果市场价格由供求决定，那么另一方面，市场价格，并且可以进一步说就是市场价值，又反过来决定供求。说到市场价格对需求的决定，那是很清楚的，因为需求总是按照与价格相反的方向变动，如果价格下跌，需求就会增加，相反，价格上涨，需求就减少。不过市场价格对供给的决定也是这样。因为加到所供给的商品中去的生产资料的价格，决定对这种生产资料的需求，因而也决定这样一些商品的供给，这些商品的供给本身包括对这种生产资料的需求。棉花的价格对棉布的供给具有决定意义。</p><p>第一，资本主义生产的商品所具有的使用价值和这些商品所具有的特殊性质并不会受到资本主义生产本身的关心。在每个生产部门中，资本主义生产所关心的只是生产的剩余价值，在劳动产品中占有的一定量无酬劳动。同样，那些从属于资本的雇佣劳动，从它的性质来说，每个劳动所具有的特殊性质也并没受到它自己的关心，它总是按照资本的需要变来变去，被别人把它从一个生产部门抛到另一个生产部门。第二，事实上，每个生产部门没什么好坏之分，一个生产部门和另一个生产部门一样好或一样坏。每个生产部门都提供同样的利润率，而且，只有它所生产的商品满足了某种社会需要，它才是有用的。</p><p>通过资本在不同部门之间根据利润率的升降进行的分配，不同的生产部门就会有相同的平均利润，因而价值也就转化为生产价格。资本主义体制在一个国家发展越是完善，这个国家就会越适应资本主义生产方式，这样资本就越能实现这种平均化。</p><p>但是，如果商品的出售价格都等于它们的价值，那就像已经说过的那样，极不相同的利润率会在不同生产部门产生，因为投入其中的资本的有机构成不同。在这种情况下，资本自然会从利润率较低的部门抽走，投入利润率较高的其他部门。</p><p><span class="under0"> <strong>根据以上所说可以得出结论，无论单个资本家，还是每一个特殊生产部门的所有资本家总体，都参与总资本对全体工人阶级的剥削，并参与决定这个剥削的程度，这可不是出于一般的阶级同情，而是由于直接的经济利害关系，因为在其他一切条件（包括全部预付不变资本的价值）已定的前提下，平均利润率取决于总资本对总劳动的剥削程度。</strong></span></p><p>每100资本得到的平均利润和每100资本所生产的平均剩余价值相一致。就平均利润来说，不过预付资本价值一定要作为利润率的一个决定因素加进来。事实上，一定生产部门的资本或一个资本家，在对他直接雇用的工人的剥削上特别关心的只有：或者通过把工资降低到平均工资以下的办法，或者通过不一般的过度劳动，或者通过所使用的劳动的额外生产率，从而获得一种额外利润，即超出平均利润的利润。</p><p>等量资本获得等量利润是资本的一种社会权力，是剩余价值在不同部门资本家之间的重新分配。为了提高利润率，资本家加重对工人的剥削。在剥削工人时，资产阶级总是很团结。平均利润形成后，每个部门的资本家获得的利润多少，不仅取决于对本部门的工人的剥削程度，而且取决于资本家阶级对整个工人阶级的剥削程度。</p><p>因此，一般利润率日益下降的趋势，只是劳动的社会生产力日益发展（即社会劳动生产率的提高）在资本主义生产方式下所特有的表现。当然利润率也会由于别的原因而暂时下降，然而我们这里是根据资本主义生产方式的本质证明了一种不言而喻的必然性：在不断发展的资本主义生产方式中，一般的平均的剩余价值率必然表现为不断下降的一般利润率。因为所使用的活劳动的量（即工人直接参加的劳动量），同它所推动的物化劳动的量（不变资本对应的）相比，同生产中消费掉的生产资料的量相比，不断减少，所以，这种活劳动中物化在商品中的剩余价值即劳动的无酬部分同所使用的总资本的价值量相比，也肯定会不断减少。而利润率就是剩余价值量和所使用的总资本价值的比率，因此利润率必然不断下降。</p><p><span class="under0"> <strong>利润率因生产力的发展而下降，但同时利润量反而会增加，这个规律也表现为：资本所生产的商品的价格下降，同时商品所包含的并通过商品出售所能够实现的利润量却会相对增加。</strong></span></p><p><span class="under0"> <strong>因为，生产力的发展以及与之相适应的较高的资本构成，使得数量越来越小的劳动，能够推动数量越来越大的生产资料，所以，相对过剩人口的产生，是和表现为利润率下降的劳动生产力的发展密不可分的，且这种过剩还会由于这种发展而加速。一个国家的资本主义生产方式发展得越快，这个国家的相对过剩人口就表现得越明显。</strong></span></p><p>在资本主义经济中，由于存在诸如劳动剥削程度的提高、相对过剩人口、股份资本的增加等反作用的因素，必然会阻碍着利润率的下降。利润率的下降并不一定表明剩余价值率也下降，由于资本总量增加较快，利润总量也会随之增加。</p><p>总的说来，规律的矛盾在于：资本主义生产方式包含着发展生产力的绝对趋势，而不管价值及其中包含的剩余价值如何，也不管资本主义生产是在什么样的社会关系中进行；而另一方面，它的目的是在保存现有资本价值的基础上最大限度地增殖资本价值（也就是使这个价值越来越快地增加）。它的独特性质是：把现有的资本价值用作最大可能地增殖其自身价值的手段。它用来达到这个目的的方法包含着：使利润率降低，同时使现有资本贬值，凭借已经生产出来的生产力来发展劳动生产力。</p><p><span class="under0"> <strong>在生产领域中，资本家为了追求更多的剩余价值，在利润率下降的过程中，必然努力积累资本，扩大生产规模，获取超额利润。而在分配领域中，由于资本积累的增长，资本有机构成的提高，工人阶级在社会新创造的价值中，所占比例越来越小，以致社会有支付能力的需求减少，剩余价值的实现面临困难。</strong></span></p><p><span class="under0"> <strong>真正限制资本主义生产的是资本自身，换句话说就是：资本及其自行增殖的过程，一般表现为：生产的起点和终点，生产的动机和目的。生产只是为资本的增殖而生产，而不是相反：生产资料只是不断扩大生产者社会生活过程的手段。以广大劳动群众的被剥夺和贫困化为基础的资本价值的保存和增殖，只能在一定的限制范围内运动，这些限制，不断与资本为它自身增殖的目的而必须使用的而且旨在无限制地增加生产，为生产而生产，无条件地发展劳动社会生产力的生产方法相矛盾。社会生产力的无条件的发展这一手段，不断地和现有资本的增殖这个有限的目的发生着冲突。因此，如果说资本主义生产方式是发展物质生产力并且在不断创造同这种生产力相适应的世界市场的历史手段，那么，它同时也就是它的这个历史任务和同它相适应的社会生产关系之间的一种经常的矛盾。</strong></span></p><p>产业资本在其循环过程中，产业资本运动包括购买、生产、销售三个连续的阶段，依次采取货币资本、生产资本和商品资本三种职能，执行着三种不同的资本增殖与价值实现的职能。其中商品资本专门出售商品，使资本的价值和剩余价值得以实现。</p><p>商人预付的货币资本的流通速度主要取决于：生产过程更新的速度和不同生产过程之间相互衔接的速度；工人和资本家对商品消费的速度。</p><p>其实商人资本也不外是在流通领域内执行职能的资本。虽然流通过程是总再生产过程的一个阶段，但是在流通过程中，并不生产任何价值，因而也就不能生产任何剩余价值。在这个过程中，只是同一价值量在形式上发生了变化。事实上不过是商品的形态发生了变化，这种形态变化本身同价值创造或价值变化不存在任何关系。如果生产的商品在出售中实现了剩余价值，那也只是因为剩余价值在此之前已经存在于该商品中；因此在第二个行为，即货币资本同商品（各种生产要素）进行的再交换中，买者也不能实现任何剩余价值，只是在这里通过货币同生产资料和劳动力之间的交换，为以后的剩余价值的生产作了准备。相反，既然这种形态变化要花费流通时间，而在这个时间内资本却根本不生产东西，因而也就不能生产剩余价值，那么，这个时间就会在一定程度上限制价值的创造，通过利润率表现出来的剩余价值就会正好和流通时间的长短成反比。<span class="under0"> <strong>因此，我们可以说，商人资本既不创造价值，也不创造剩余价值。但是，既然它对流通时间的缩短有帮助，那它就能间接地有助于产业资本家所生产的剩余价值的增加。既然它对市场的扩大有帮助，并对资本之间的分工起一种中介的作用，从而使资本能够按更大的规模来经营，那么它的职能就会提高产业资本的生产效率并且能够促进产业资本的积累。既然它能够帮助缩短流通时间，那它就会提高剩余价值和预付资本的比率，当然也就能够提高利润率。</strong></span></p><p><strong> 商业资本是流通领域的资本，它并不创造价值和剩余价值。所以礼品商店利润的来源是礼品制作的产业资本家所剥削获得的剩余价值的一部分，是产业资本家转让给了商业资本家的一部分利润。</strong></p><p><span class="under0"> <strong>因此，商人的出售价格之所以会高于购买价格，并不是因为出售价格比总价值高，而是因为购买价格比总价值低的缘故。</strong></span></p><p><span class="under0"> <strong>产业资本家转让给商业资本家一部分利润，从中也体现了商业资本家和产业资本家共同剥削工人的关系。</strong></span></p><p>对产业资本家来说，延长的流通行为意味着：第一，他的个人时间会因此受到损失，因为这会妨碍他作为在生产过程中的管理者去执行自己的职能；第二他的产品会在更长时间内以货币形式或商品形式停留在流通过程中，而在这个过程中，不仅产品的价值不会增殖，而且直接的生产过程也会中断。如果要使直接的生产过程不被中断，要么就必须限制生产，要么就要预付追加的货币资本，以使生产过程不断按同一规模继续进行。而每一次这样做的结果就是，或者是使原来的资本只能获得较少的利润，或者就必须预付追加的货币资本，以便能够取得与原来相同的利润。即使在商人代替了产业资本家的情况下，这一切仍然不变。不同之处在于，<span class="under0"> <strong>在这里，产业资本家不再把追加的时间花在流通过程中，而是由商人把追加的时间花在流通过程中；产业资本家不再为流通预付追加的资本，而是由商人预付追加的资本。或者，可以换一种说法：不再是产业资本的一个相当大的部分的资本不断在流通过程中流转，而是商人的资本被完全束缚在流通过程中；也不是产业资本家生产的利润少了，而是他必须把他的利润的一部分完全转让给商人，因为现在是由商人代替他在流通领域在行使职能。</strong></span>只要商人资本限制在必要限度以内，那差别就只是在于：由于这种资本职能的划分，就使得专门用在流通过程上的时间减少了，同时为流通过程预付的追加资本也就减少了，而且比在没有这种划分的情况下，总利润中以商业利润的形式表现出来的损失也减少了。用我们上述720c＋180v＋180m的例子来说，如果存在一个价值为100商人资本的时候，给产业资本家带来的利润是162或18％，因此它的利润减少了18，那么，在不存在这种独立的商人资本的时候，必要的追加资本也许就会是200，因此，产业资本家的预付总额不是900，而是1100了，这样，按剩余价值180计算，利润率则只是16.36％。</p><p>商品周转的时间长短会对利润率产生直接的影响。即使总资本相同，资本周转时间不同，利润也会不同。资本周转时间的缩短意味可变资本部分提高了效率。配备先进的生产资料，改进工作流程都会提高生产效率，从而缩短商品周转的时间。</p><p>但是，由于产业资本和商业资本之间的差别，进而在产业资本家和商人之间产生的某种差别，必然也会在商业工人和产业资本直接雇用的工人之间发生。因为商人作为单纯的流通当事人既不能够生产价值本身，也不会创造剩余价值，所以，他雇用的执行同样职能的商业工人，同样也不可能为他直接创造剩余价值。在这里，与在生产工人的场合一样，我们同样假定工资是由劳动力的价值决定的，因此，商人并不是靠克扣工资的办法来发财致富，也就是说，他并没有把他仅仅部分地支付了的对劳动的预付，加进他的成本计算中去，换句话说，他绝不是靠欺骗他的办事员等等的办法来发财致富。就商业雇佣工人来说，其根本困难不在于说明他们是怎样直接为他们的雇主生产利润的，虽然他们不直接生产剩余价值（利润不过是它的转化形式）。这个问题，在对商业利润的一般分析中实际上已经解决了。<span class="under0"> <strong>产业资本之所以能够获得利润，是因为把包含在商品中并且在商品中实现的、但却没有为此支付任何等价物的劳动拿来出卖，同样，商业资本之所以能获得利润，是因为对于包含在商品中的无酬劳动（这是投在这种商品生产上的资本作为总产业资本的一个相应部分来执行职能时包含在商品中的）没有给予全部支付，相反，在出售商品时他却让购买者把这个仍然包含在商品中的、但他并没有支付报酬的那部分支付给自己。商人资本和剩余价值的关系与产业资本和剩余价值的关系是有不同之处的。产业资本通过直接占有别人的无酬劳动来获取剩余价值。而商人资本则是间接地使这个剩余价值的一部分从产业资本手里转移到自己手里，从而分享了这部分剩余价值。</strong></span></p><p>在商品流通进程中会产生两种费用：纯粹流通费用和生产性流通费用。纯粹流通费用是价值由商品形态转化为货币形态和由货币形态转化为商品形态而花费的费用。包括设计费、广告费、财务费用等。它虽然不创造剩余价值，但它是产业资本的必要职能的必要流动。它会加速资本周转，降低平均利润率减少的速度。巨额的广告费用通常不会血本无归，而是有效地拓宽并占领市场。</p><p>尽管商业工人不直接生产剩余价值，但是，他的劳动的价格仍然是由他的劳动力的价值决定的，也就是由他的劳动力的生产费用所决定的，而对于这个劳动力的应用，作为力的一种发挥一种表现和一种消耗，实际上和任何其他部门的雇佣工人的情况一样，是不受他的劳动力的价值限制的。因此，在他帮助资本家实现的利润量和他的工资之间，并不保持任何必要的比例。资本家为他的劳动支出的费用，和他带给资本家的利润，可以是不同的量。他给资本家带来利润，并不是因为他直接生产出了剩余价值，而是因为在他完成一部分无酬劳动的时候，帮助资本家减少了实现剩余价值所需的费用。</p><p>商业资本运动的直接目的是追求利润。商业资本的运动从垫支一定量货币开始，以增殖的货币结束，商品买卖只表现为商业资本获利的媒介和手段。著名的西雅图派克街海鲜市场是专门从事海鲜买卖的商业资本流通场所，市场百年来成就的完善的规划、齐全的商品及其独特的销售方式使其赚取了更多的商业利润。</p><p>商业资本活动的独立性，使它完全不可能超过社会购买力而盲目购进商品，但有时商业资本会发出虚假的需求信号，促使产业资本扩大生产，导致生产过剩，从而诱发经济危机。</p><p>100镑就能买到100磅砂糖。如果这是他在一年内买卖的数量，而且年平均利润率为15％，那他就会在100镑上加进15镑，即在其生产价格1镑的基础上再加进3先令。这样，最终他会按1镑3先令的价格去出售这1磅砂糖。现在，如果我们假定1磅砂糖的生产价格下降到1先令，商人用100镑就能买到2000磅砂糖，并且会按每磅砂糖l先令6/5便士的价格来出售。显然，这时投在砂糖营业上的100镑资本的年利润仍旧为15镑。不过情况发生了变化，在前一个场合，他只要卖100磅，在后一个场合，他却要卖2000磅。生产价格的高低，对利润率没有任何影响；但是，在每磅砂糖的出售价格中对构成商业利润的那部分大小的影响，也就是说，对商人在一定量商品（产品）上可以加价多少，却有很大的、决定性的意义。如果一个商品的生产价格不高，商人在该商品的购买价格上预付的金额，即为一定量该商品预付的金额也就不高，因此，当利润率已经定下来时，他从这个一定量廉价商品上获得的利润额就会很小。或者，我们可以换一种说法：在这种情况下商人能够用一定量资本，例如100镑，购买了大量这种便宜的商品，那么，他从这100镑商品的出售中获得的总利润15镑，就会分成很小的份额，并且分配到这个商品量的每个单位上去。反之，情况也就相反。</p><p>商品流通的不断发展，使货币成为财富的社会表现，导致货币的拥有者不断地存储货币。</p><p>不同商业部门的不同周转时间，其表现是这样的：一定量商品资本周转一次能够获得的利润，同购买这个商品资本所需的货币资本的周转次数成反比。利润越小周转也就越快，尤其是对零售商人来说，是他原则上必须遵循的一个原则。</p><p>职能资本在循环过程中，经常会游离出大量的暂时闲置的货币资本，资本家就把这些资本以偿还和付息为条件借贷出去，供急需货币的企业使用，转化为生息资本。</p><p>我们可以假定，年平均利润率为20％。那么，这时，一台价值100镑的机器，在平均条件、平均的智力水平以及合乎目的的活动下当作资本使用，它就能够提供20镑的利润。因此，一个拥有100镑货币的人，手中也就有了使100镑变成120镑，或能够生产20镑利润的权力。这时，我们可以说，他的手中有100镑可能的资本。如果这个人把这100镑交给另一个人使用一年，让后者把这100镑当作实际资本来使用，他也就给了后者生产20镑利润即20镑剩余价值的权力。而且，对后者来说这个剩余价值什么也没有花费，因为他没有为它支付任何等价物。后者如果在年终把比如说5镑，即把他所生产的一部分利润付给这100镑的所有者，那么，他就是用这5镑来支付这100镑的使用价值，来支付这100镑的资本职能即用它生产20镑利润的职能的使用价值。他支付给所有者的那一部分利润，我们通常将其称作利息。因此，利息其实就是一部分利润的特别名称、特别项目；执行职能的资本不能把全部的利润都装进自己的腰包，而必须把它的这一部分支付给资本的所有者。</p><p>生息资本家把货币资本贷给职能资本家时，实际上是把货币资本当作资本商品转让的。生息资本在投入流通时就作为资本，成为资本商品。与普通商品相比，生息资本不是商品所有权的买卖关系，而是货币作为资本的使用权出让的借贷关系。</p><p>作为资本贷放的商品，按照其性质，既可作为固定资本贷放，又可作为流动资本贷放。货币可以以这两种形式贷放。例如，如果它是以终身年金的形式偿还，让资本一部分一部分地带着利息流回，那它就是作为固定资本贷放。有些商品，例如房屋、船舶、机器等等，由于它们使用价值的性质，它们始终只能作为固定资本贷放。不过，所有的借贷资本，不管它们有什么形式，也不管它们的偿还是如何受它们的使用价值性质的影响，永远都只是货币资本的一个特殊形式。因为在这里贷放的，总表现为一定的货币额，并且利息也都是按这个金额计算的。如果贷出的既不是货币，又不是流动资本，那么它就会以固定资本流回的方式来偿还。贷出者会定期得到利息，并得到固定资本自身已经消耗的一部分价值，就是周期损耗的等价物。那些贷出的固定资本中尚未消耗的部分，一旦到期就以实物形式还回来。如果借贷资本是流动资本，它也就会按照流动资本流回的方式流回到贷出者手中。</p><p><span class="under0"> <strong>生息资本的使用，使资本所有权与使用权分离。一方面是所有权资本，另一方面是职能资本。生息资本家拥有货币的所有权，可以凭借这种所有权获得利息。而货币到了职能资本家手中，就变成了实际执行资本职能的增殖手段，能生产剩余价值。高利贷者总是放债利息很高，贪心地盘剥借债人。</strong></span></p><p>价格形式，也是与商品价格的概念完全相矛盾的一种形式。在这里，价格已经被归结为它的那种纯粹抽象的和没有内容的形式，它不过是对某个按照某种方式执行使用价值职能的东西而支付的一定货币额；而由价格的定义的范畴，我们知道，价格其实是这个使用价值的以货币形式表现的价值。</p><p>第二，生产的直接目的和决定动机就是对剩余价值的生产。从资本本质上来说，它是生产资本的，但只有当它们生产剩余价值时，它们才能够生产资本。在对相对剩余价值进行考察时，进而在考察剩余价值是如何转化为利润时，我们已经看到，在这上面是如何建立起一种为资本主义时期所特有的那种生产方式的。这是劳动的社会生产力发展的一个特殊形式，但是，这种劳动社会生产力其实是作为与工人相对立的资本的独立力量在发挥作用，因而这种社会劳动生产力就直接与工人本身的发展相对立。就像之前我们说过的那样，资本家总是力求将成本价格缩减到它的最低限度，而正是这种努力成了提高社会劳动生产力的最有力的杠杆，不过在这里，社会劳动生产力的不断提高只是表现为资本生产力的不断提高。资本家作为资本的人格化在直接生产过程中取得的某种权威，以及他作为生产的指挥者和统治者时执行的社会职能，与建立在奴隶生产、农奴生产等等基础上的权威相比，实际上有着重大的区别。对于直接生产者大众来说，尽管在资本主义生产的基础上，他们的生产的一定的社会性质是以实行严格管理的权威的形式，并且其劳动过程是以完全按等级安排的社会机构的形式出现的，这种权威的把持者，只是作为同劳动相对立的那些劳动条件的人格化，而不是像在以前的各种生产形式中出现的那种，以政治的统治者或神权的统治者的身份得到这种权威的，但是，在这种权威的把持者中间，在不过是作为商品所有者相互对立的这些资本家自己中间，占统治地位的社会形态却是极端无政府状态，并且，在这种状态中，生产的社会联系只是表现为一种个人自由意志可以压倒一切的自然规律。</p><p>尽管劳动以雇佣劳动的形式出现对整个过程的面貌以及生产本身的特殊方式有决定性的作用，但是雇佣劳动却并不决定价值。真正在价值的决定上具有重要意义的，只是社会一般劳动时间，也即是社会一般可以支配的劳动量，而不同的产品从这个劳动量中吸收的相对量，又将会在一定程度上决定着它们各自在社会上所占的比重。当然，社会的一般劳动时间在商品价值上作为决定要素起作用的一定形式，不仅同劳动作为雇佣劳动的形式，而且同与此适应的生产资料作为资本的形式，都是息息相关的，因为只有在这两个基础上，商品生产才真正成为生产的一般形式。</p><p>首先来谈一谈利润。在资本主义生产方式下，这种剩余价值的一定的形式，是形成新生产资料的前提；因而它就是一种支配再生产的关系，尽管在资本家个人看来，他好像真正能够把全部利润当作收入来消费掉。但实际上在这方面他会碰到限制，这些限制通常会以保险基金和准备金的形式，以竞争规律等形式出现，并且会在实践中向他证明，利润并非只是个人消费品的分配范畴。其次，整个资本主义生产过程都是由产品的价格进行调节的，而真正起调节作用的生产价格，又是由利润率的平均化以及与之相适应的资本在不同社会生产部门之间的分配来调节的。因此，在这里，利润不是表现为产品分配的主导因素，而是表现为资本。</p><p>由此可见，所谓的分配关系，是同生产过程所处的一定历史规定的特殊社会形式，同人们在他们生活的再生产过程中所形成的一定的生产关系相适应的，并且它也是由这些形式和关系产生的。换句话说，这些分配关系的历史性质其实就是生产关系的历史性质，分配关系不过表示生产关系的某一方面的反映。资本主义的分配不同于其他各种生产方式下产生的其他分配形式，但是每一种分配形式，都终将同它赖以产生并且与之相适应的那种生产形式一道消失。</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《只有乏味的人会在早餐时才华横溢》</title>
      <link href="/2019/12/21/reading-notes-of-only-boring-people-will-be-brilliant-at-breakfast/"/>
      <url>/2019/12/21/reading-notes-of-only-boring-people-will-be-brilliant-at-breakfast/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>昨晚读了王尔德的《只有乏味的人会在早餐时才华横》。真的是很小的一册书,一个晚上就看完了。本文做下记录</p><hr><ul><li><p>对他们的伟人一无所知，是英国教育的必要元素之一。</p><p>我们人人都花时间寻找生活的秘诀。其实，生活的秘诀在艺术之中。</p><p>生活的至高目标是生活。很少人在生活。实现自己的完美状态，把自己的梦想逐一变为现实，那才叫生活。</p><p><span class="under0"> <strong> 商人早早起床吃了第一餐，赶火车进城，在昏暗无光、灰灰蒙蒙的商业世界混上一天，夜晚回到家里，吃完晚餐就睡觉，这种生活以我看来比奴工都不如——捆绑他的不是铁链，是金枷。</strong> </span></p><p>劣等艺术比没有艺术还要差远了。</p><p>没有什么是值得做的，除了世人都说无法成功的事</p></li><li><p>我一向认为，只有缺乏想象力的人会死守“始终如一”的立场… </p></li><li><p>没有什么能打垮一个诗人，除了一处印刷错误</p></li><li><p>如果人不能畅所欲言，所谓良好的友谊又何在？人人都可以说动听的话去取悦和奉承，但是真朋友说的永远是逆耳的话，而且不担心令对方痛苦。的确，真朋友宁愿如此，因为这样一来他就会知道自己有益处</p></li><li><p><span class="under0"> <strong> 觉得别人全都远远不如自己，这种意识是唯一叫人活得下去的东西，而我向来悉心培育这样的感觉</strong> </span></p></li><li><p>福楼拜没有写法语文章，他写的是一位艺术大师的文章，作者刚巧是法国人</p></li><li><p>生活模仿艺术，远多于艺术模仿生活……生活向艺术举起镜子，要么复制画家或雕塑家想象的某种奇异事物，要么实现小说中的幻梦</p></li><li><p><span class="under0"> <strong> 小说从尾读起的好处一言难尽。最后一页通常最有兴味，当读者从灾难或结局开始，就会感到和作者平起平坐的愉悦，好比去剧场后台探班一样。人不再沉迷于故事，男主角绝处逢生，女主角呼天抢地，都完全令人无动于衷。读者知道了精心埋藏的秘密，那么，面对小说中傀儡们义不容辞地表现出的不必要的焦灼，就大可一笑而过</strong> </span></p></li><li><p>给人建议总是一桩愚行，给人以好的建议则绝对是致命的。我希望你永远不犯这种错。否则，你将会追悔莫及</p></li><li><p><span class="under0"> <strong> 世界上没有哪个国家像我们国家这样需要不切实际的人。在我们这儿，思想由于一直跟实践相联系而遭受贬低……我们活在一个工作过度，而又教养不足的时代；这时代的人勤勤恳恳，以至于变得愚不可及 </strong> </span></p></li><li><p><span class="under0"> <strong> 人多么容易同情困苦，多么难同情思想</strong> </span></p></li><li><p>人以自己的身份说话时最是言不由衷。给他一副面具，他就会道出真情</p></li><li><p><span class="under0"> <strong> 自责含有一种奢侈。我们责备自己的时候，觉得别人都无权责备我们。给我们赦罪的是忏悔，不是神父</strong> </span></p></li><li><p><span class="under0"> <strong> 随着私有财产的废除，我们将会迎来真正、美好而健康的个人主义。将来不再有人会把生命浪费于积累物品和物品的符号上。人将会生活。生活是世界上最稀有的。多数人只是在生存，仅此而已 </strong> </span></p></li><li><p><span class="under0"> <strong> 社会之中只有一个阶级想钱比富人想得还多，那就是穷人。穷人没有别的可想。这是贫穷的痛苦 </strong> </span></p></li><li><p><span class="under0"> <strong> 民主一度被寄以厚望，但民主不过是代表人民者对人民的压迫。</strong> </span></p></li><li><p>一件艺术品是一种独特心性的独到成果……艺术家一旦留意别人想要什么，并尝试有求必应的时候，他就不再是艺术家，而成了一个沉闷或逗笑的工匠，一个诚实或不诚实的买卖人</p></li><li><p><span class="under0"> <strong>谁都能够同情一个受苦的朋友，但同情一个成功的朋友，这就得有一种极好的性格——实际上，得有一个真正的个人主义者的性格 </strong> </span></p></li><li><p>上等人反驳别人。智者反驳自己</p></li><li><p>执着于行为的对错观念，显示出智力发育的不完全</p></li><li><p><span class="under0"> <strong>爱自己是终生浪漫之始 </strong> </span></p></li><li><p><span class="under0"> <strong>大多数人是别人。他们的想法是别人的见解，他们的生活是一种模仿，他们的热情是一种照搬  </strong> </span></p></li><li><p>一切伟大的观念都是危险的</p></li><li><p><span class="under0"> <strong>模仿结束的地方才是艺术开始之处 </strong> </span></p></li><li><p><span class="under0"> <strong>我从不推迟到明天——既然是可以后天做的事 </strong> </span></p></li><li><p><span class="under0"> <strong>赞美使我谦卑，但是谩骂纷起之际，我知道我摘到了星辰 </strong> </span></p></li><li><p>友善地对待自己毫不关心的人总是不难</p></li><li><p>世人常说，穷人对慈善感恩。当然有些人是感恩的，但是最优秀的穷人从来不会感恩。他们不感恩，愤愤不平，抗命，反叛。他们很有理由如此</p></li><li><p>他们（穷人）干吗要对从富人桌上洒落的面包屑感恩戴德？他们有平起平坐的权利，也渐渐知道了这一点</p></li><li><p>谁都能有常识，只要缺乏想象力</p></li><li><p>自私不是过自己想过的生活，而是要求别人过自己想过的生活</p></li><li><p>现在我从不赞成或反对什么。那样的人生态度是荒唐的。我们降生到世界上，并不是为了炫耀我们的道德偏见</p></li><li><p>使人笃信不疑的事物从来都不真实。那是信仰的致命伤，和传奇的教训</p></li><li><p><span class="under0"> <strong>梦想家是只能借着月光认路的人，他受到的惩罚在于他比全世界更早看见曙光</strong> </span></p></li><li><p>社会往往宽恕罪犯；它从不宽恕梦想家</p></li><li><p>我们教人记诵，我们从不教他们成长</p></li><li><p>时装不过是一种难以承受的丑陋，我们忍无可忍，只好每半年改换它一次</p></li><li><p>我对新朋友总想无所不知，对老朋友总想一无所知</p></li><li><p>历史从不自我重复。历史学家们互相重复。我们对历史的唯一义务是重写它</p></li><li><p><span class="under0"> <strong>我们全都喜欢把别人设想得很好，原因是我们全都替自己担忧。乐观主义的基础在于纯然的恐惧</strong> </span></p></li><li><p><span class="under0"> <strong>什么都不做是世界上最困难的事——最困难且最智性的</strong> </span></p></li><li><p><span class="under0"> <strong>变成自己生活的旁观者，就是逃逸出生活的苦难</strong> </span><br>(这句话说得真的很有道理)</p></li><li><p>文学总是预言了生活。它不抄袭生活，而是照它的目标来塑造生活。我们所知的 19世纪，一大半是巴尔扎克发明的</p></li><li><p>把真人放进小说或戏剧，意味着想象力贫乏的头脑、粗糙而不老练的观察、文体的完全缺失</p></li><li><p>世人称为伤风败俗的书，是一些把世界的可耻面目展示出来的书</p></li><li><p>要活得幸福，你必须知道人生的某些不幸福</p></li><li><p>一切放纵，与一切克制相同，都会自食其果</p></li><li><p>过度会带来无与伦比的成功</p></li><li><p>没什么比做得太现代更危险：它容易一下子就过时</p></li><li><p>电话的价值，在于两人要说的话的价值</p></li><li><p>假如自然令人舒适，人类就永远不会发明建筑</p></li><li><p>只有两种人真正有魅力——无所不知的，和一无所知的</p></li><li><p><span class="under0"> <strong>我纳闷是谁把人定义为理性动物。这是古往今来最不成熟的定义了。人是什么，一言难尽，但人并不理性</strong> </span></p></li></ul><hr><h3 id="后记"><a href="#后记" class="headerlink" title=" 后记 "></a><strong> 后记 </strong></h3><p>最近读的书目的性都比较强，好久没读这文学方面的书了。还是要多看书呀</p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>再谈mac系统空间清理(系统占据磁盘空间过大)</title>
      <link href="/2019/12/15/retalk-mac-system-space-cleaning/"/>
      <url>/2019/12/15/retalk-mac-system-space-cleaning/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>系统提示mbp空间不够。mac磁盘空间，不知道为什么显示被系统占据，但是又不知道系统这部分到底是什么文件。如下图所示<br><img src="/img/Mac/1.png" alt="1.png"><br>其中黄色部分的系统，占据了我磁盘空间的接近200GB,清理之前,黄色系统部分,几乎占据了整个长条。清理过后，只占据了70多GB。</p><p>之前写了一篇博客<a href="http://www.sail.name/2019/07/07/Mac-system-space-cleaning/">mac系统空间清理</a>。但是当时只清理了20多GB的空间出来。没有找到真正空间不足的原因。</p><p>这次彻底解决了，本文做下记录。</p><hr><p>我是通过<code>DaisyDisk</code>这个软件来分析磁盘空间的占据情况。</p><p><img src="/img/Mac/2.png" alt="2.png"></p><p>根据可视化界面可以看出在<code>/private/var/folders/zz/zyxvpxvq6csfxvn_n00000s0000068/C/softwareupdated/com.apple.SoftwareUpdate</code>目录下,有一堆文件,命名类似<code>CFNetworkDownload*</code>。</p><p>直接拖拽删除，软件会提示说，是系统依赖的文件，不可以删除。难道就放任这堆文件，占据接近150GB的空间吗？</p><p>经过一番查找，弄清楚了原因:</p><p>1、<code>/private/var/folders/zz/zyxvpxvq6csfxvn_n00000s0000068/C/softwareupdated/com.apple.SoftwareUpdate</code>大量形如CFNetworkDownload_0gIeHN.tmp的文件是下载软件更新的缓存文件，可以删除。<br>2、<code>2015Mac OSX 10.11 EI Capitan</code>之后，OS X引入了<code>SIP(SystemIntegrity Protection)</code>系统完整性保护，这样有的目录是进不去的。<br>3、在网上搜索Mac关闭SIP，有一堆教程，参考执行，大致步骤：重启时按住Cmd+R进入Recovery模式，然后通过csrutil status, csrutil disable等命令关闭SIP。<br>4、关闭后，<code>sudo su</code>，然后就可以访问相关目录，删除文件了。<br>5、删除文件要谨慎，删除的时候，需要十分明白你在干什么，否则还是保守点别做了，本教程不负任何责任，删除完成后，马上重启电脑，即可重新打开SIP。</p><hr><h3 id="SIP"><a href="#SIP" class="headerlink" title=" SIP "></a><strong> SIP </strong></h3><p>SIP 全称为<code>「System Integrity Protection」即「系统完整性保护」</code>，是 <code>OS X El Capitan</code> 时开始采用的一项安全技术，SIP 将一些文件目录和系统应用保护了起来。但这会影响我们一些使用或设置，比如：更改系统应用图标、终端操作系统目录文件提示「Operation not permitted」、Finder 无法编辑系统目录里的文件。</p><p>因为 SIP 是系统级的权限操作，我们无法直接关闭它，需要前往「macOS 恢复功能」下进行。<br>将 Mac 开机，立即在键盘上按住 <code>Command ⌘ + R</code>，直到看到 <code>Apple</code> 标志或旋转的地球时松开。看到「实用工具」窗口时，恢复功能启动即完成。</p><p><img src="/img/Mac/3.png" alt="3.png"><br><img src="/img/Mac/4.png" alt="4.png"></p><h4 id="查看状态-关闭-开启"><a href="#查看状态-关闭-开启" class="headerlink" title=" 查看状态/关闭/开启 "></a><strong> 查看状态/关闭/开启 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看状态</span><br><span class="line">csrutil status</span><br><span class="line"></span><br><span class="line"># 关闭sip</span><br><span class="line">csrutil disable</span><br><span class="line"></span><br><span class="line"># 开启sip</span><br><span class="line">csrutil enable</span><br></pre></td></tr></table></figure><hr><h3 id="后记"><a href="#后记" class="headerlink" title=" 后记 "></a><strong> 后记 </strong></h3><p>这个磁盘问题，我折腾了大半年了吧。知道这几天才真正解决。多出了接近150GB的空间出来。</p><p>这里有几点体会:</p><ol><li>遇到事情，可以不用一直折腾。但是不要放弃，偶尔回过头来看看。</li><li>方法工具很重要。之前尝试了很多工具,比如<code>OmniDiskSweeper</code>,<code>腾讯柠檬</code>等，都没能彻底解决问题。最近和同事交流才知道了<code>DaisyDisk</code>。</li></ol><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://bbs.feng.com/read-htm-tid-11706537.html" target="_blank" rel="noopener">CFNetworkDownload_xxxxxxx.tmp是什么文件，怎么才能清理释放磁盘空间？</a></li><li><a href="https://sspai.com/post/55066" target="_blank" rel="noopener">macOS 开启或关闭 SIP</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell grep</title>
      <link href="/2019/12/07/shell-grep/"/>
      <url>/2019/12/07/shell-grep/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p><code>grep</code>用了很久，不过以前我用得一直很浅显，就是简单的<code>grep xxx</code>。本文对其他用法做下记录</p><hr><h5 id="或操作"><a href="#或操作" class="headerlink" title=" 或操作 "></a><strong> 或操作 </strong></h5><p>找出文件（filename）中包含123或者包含abc的行<br><code>-E</code>将范本样式为延伸的普通表示法来使用，意味着使用能使用扩展正则表达式。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -E &apos;123|abc&apos; filename</span><br></pre></td></tr></table></figure></p><hr><h5 id="与操作"><a href="#与操作" class="headerlink" title=" 与操作 "></a><strong> 与操作 </strong></h5><p>显示既匹配 pattern1 又匹配 pattern2 的行。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep pattern1 files | grep pattern2</span><br></pre></td></tr></table></figure></p><hr><h5 id="在多个文件中查找"><a href="#在多个文件中查找" class="headerlink" title=" 在多个文件中查找 "></a><strong> 在多个文件中查找 </strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;match_pattern&quot; file_1 file_2 file_3 ...</span><br></pre></td></tr></table></figure><hr><h5 id="标记匹配颜色-–color-auto-选项："><a href="#标记匹配颜色-–color-auto-选项：" class="headerlink" title=" 标记匹配颜色 –color=auto 选项："></a><strong> 标记匹配颜色 –color=auto 选项：</strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep &quot;match_pattern&quot; file_name --color=auto</span><br></pre></td></tr></table></figure><hr><h5 id="搜索多个文件并查找匹配文本在哪些文件中"><a href="#搜索多个文件并查找匹配文本在哪些文件中" class="headerlink" title=" 搜索多个文件并查找匹配文本在哪些文件中 "></a><strong> 搜索多个文件并查找匹配文本在哪些文件中 </strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -l &quot;text&quot; file1 file2 file3...</span><br></pre></td></tr></table></figure><hr><h5 id="在多级目录中对文本进行递归搜索"><a href="#在多级目录中对文本进行递归搜索" class="headerlink" title=" 在多级目录中对文本进行递归搜索 "></a><strong> 在多级目录中对文本进行递归搜索 </strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># .表示当前目录。</span><br><span class="line">grep &quot;text&quot; . -r -n</span><br></pre></td></tr></table></figure><hr><h5 id="grep静默输出"><a href="#grep静默输出" class="headerlink" title=" grep静默输出 "></a><strong> grep静默输出 </strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#不会输出任何信息，如果命令运行成功返回0，失败则返回非0值。一般用于条件测试。</span><br><span class="line">grep -q &quot;test&quot; filename</span><br></pre></td></tr></table></figure><hr><h5 id="在grep搜索结果中包括或者排除指定文件"><a href="#在grep搜索结果中包括或者排除指定文件" class="headerlink" title=" 在grep搜索结果中包括或者排除指定文件 "></a><strong> 在grep搜索结果中包括或者排除指定文件 </strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#只在目录中所有的.php和.html文件中递归搜索字符&quot;main()&quot;</span><br><span class="line">grep &quot;main()&quot; . -r --include *.&#123;php,html&#125;</span><br><span class="line"></span><br><span class="line">#在搜索结果中排除所有README文件</span><br><span class="line">grep &quot;main()&quot; . -r --exclude &quot;README&quot;</span><br><span class="line"></span><br><span class="line">#在搜索结果中排除filelist文件列表里的文件</span><br><span class="line">grep &quot;main()&quot; . -r --exclude-from filelist</span><br></pre></td></tr></table></figure><hr><h5 id="打印出匹配文本之前或者之后的行"><a href="#打印出匹配文本之前或者之后的行" class="headerlink" title=" 打印出匹配文本之前或者之后的行 "></a><strong> 打印出匹配文本之前或者之后的行 </strong></h5><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">#显示匹配某个结果之后的3行，使用 -A 选项：</span><br><span class="line">seq 10 | grep &quot;5&quot; -A 3</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">#显示匹配某个结果之前的3行，使用 -B 选项：</span><br><span class="line">seq 10 | grep &quot;5&quot; -B 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line"></span><br><span class="line">#显示匹配某个结果的前三行和后三行，使用 -C 选项：</span><br><span class="line">seq 10 | grep &quot;5&quot; -C 3</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line"></span><br><span class="line">#如果匹配结果有多个，会用“--”作为各匹配结果之间的分隔符：</span><br><span class="line">echo -e &quot;a\nb\nc\na\nb\nc&quot; | grep a -A 1</span><br><span class="line">a</span><br><span class="line">b</span><br><span class="line">--</span><br><span class="line">a</span><br><span class="line">b</span><br></pre></td></tr></table></figure><hr><h5 id="只显示全字符合的列"><a href="#只显示全字符合的列" class="headerlink" title=" 只显示全字符合的列 "></a><strong> 只显示全字符合的列 </strong></h5><p>只匹配整个单词，而不是字符串的一部分（如匹配‘magic’，而不是‘magical’），<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">grep -w pattern files</span><br></pre></td></tr></table></figure></p><hr><h4 id="综合使用场景"><a href="#综合使用场景" class="headerlink" title=" 综合使用场景 "></a><strong> 综合使用场景 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#包含java不包含grep的进程</span><br><span class="line">ps -ef |grep java|grep -v grep</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://blog.csdn.net/mmbbz/article/details/51035401" target="_blank" rel="noopener">Linux: grep多个关键字“与”和“或”</a></li><li><a href="https://my.oschina.net/2shui/blog/882875" target="_blank" rel="noopener">grep多条件与或查找 多文件查找</a></li><li><a href="https://man.linuxde.net/grep" target="_blank" rel="noopener">grep命令</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>react合成事件</title>
      <link href="/2019/12/07/react-syntheticEvent/"/>
      <url>/2019/12/07/react-syntheticEvent/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近在代码中遇到了react合成事件的相关问题，本文做下记录。</p><hr><h3 id="合成事件-SyntheticEvent"><a href="#合成事件-SyntheticEvent" class="headerlink" title=" 合成事件(SyntheticEvent) "></a><strong> 合成事件(SyntheticEvent) </strong></h3><p>在react中,事件处理程序将传递 <code>SyntheticEvent</code> 的实例，这是一个跨浏览器原生事件包装器。 它具有与浏览器原生事件相同的接口，包括 <code>stopPropagation()</code> 和 <code>preventDefault()</code> ，除了事件在所有浏览器中他们工作方式都相同。</p><p>如果您发现由于某种原因需要底层浏览器事件，只需使用 <code>nativeEvent</code> 属性来获取它。 每个 <code>SyntheticEvent</code>对象都具有以下属性：</p><table><thead><tr><th>类型</th><th>属性</th></tr></thead><tbody><tr><td>boolean</td><td>bubbles</td></tr><tr><td>boolean</td><td>cancelable</td></tr><tr><td>DOMEventTarget</td><td>currentTarget</td></tr><tr><td>boolean</td><td>defaultPrevented</td></tr><tr><td>number</td><td>eventPhase</td></tr><tr><td>boolean</td><td>isTrusted</td></tr><tr><td>DOMEvent</td><td>nativeEvent</td></tr><tr><td>void</td><td>preventDefault()</td></tr><tr><td>boolean</td><td>isDefaultPrevented()</td></tr><tr><td>void</td><td>stopPropagation()</td></tr><tr><td>boolean</td><td>isPropagationStopped()</td></tr><tr><td>DOMEventTarget</td><td>target</td></tr><tr><td>number</td><td>timeStamp</td></tr><tr><td>string</td><td>type</td></tr></tbody></table><hr><h3 id="异步事件"><a href="#异步事件" class="headerlink" title=" 异步事件 "></a><strong> 异步事件 </strong></h3><p><code>SyntheticEvent</code>对象是通过合并得到的。这意味着在事件回调被调用后，<code>SyntheticEvent</code>对象将被重用并且所有属性都将被取消。 这是出于性能原因。 因此，您无法以异步方式访问该事件。<br><span class="under0"><strong>如果要以异步方式访问事件属性，应该对事件调用 event.persist() ，这将从池中删除合成事件，并允许用户代码保留对事件的引用。</strong></span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">clickHandle = <span class="function">(<span class="params">e</span>) =&gt;</span> &#123;</span><br><span class="line">    # 这一行必须不可少</span><br><span class="line">    e.persist();</span><br><span class="line">    <span class="built_in">console</span>.log(e);</span><br><span class="line">    <span class="built_in">console</span>.log(e.type);</span><br><span class="line">    # 这里是异步的</span><br><span class="line">    setTimeout(<span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">      <span class="built_in">console</span>.log(e);</span><br><span class="line">      <span class="built_in">console</span>.log(e.type);</span><br><span class="line">    &#125;, <span class="number">100</span>);</span><br><span class="line"></span><br><span class="line">    # 这里也是异步的</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;<span class="attr">event</span>:event&#125;)</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><hr><h3 id="合成事件机制"><a href="#合成事件机制" class="headerlink" title=" 合成事件机制 "></a><strong> 合成事件机制 </strong></h3><p><img src="/img/react/react-syntheticEvent/syntheticEvent.png" alt="syntheticEvent.png"></p><p><code>react</code>的所有事件都挂载在<code>document</code>中。当真实<code>dom</code>触发后冒泡到<code>document</code>后才会对<code>react</code>事件进行处理，所以原生的事件会先执行，然后执行<code>react</code>合成事件，最后执行真正在<code>document</code>上挂载的事件。</p><p><code>react</code>事件机制分为三个部分:</p><p><span class="under0"><strong>事件注册部分，</strong></span>所有的事件都会注册到<code>document</code>上，拥有统一的调函数<code>dispatchEvent</code>来执行事件分发。<code>React</code>使用对象池来管理合成事件对象的创建和销毁，这样减少了垃圾的生成和新对象内存的分配，大大提高了性能。也就是说不同的事件，可能会共享一个合成事件对象。</p><p>触发<code>document</code>注册原生事件的回调<code>dispatchEvent</code>,获取到触发这个事件最深一级的元素,遍历这个元素的所有父元素，依次对每一级元素进行处理。构造合成事件。将每一级的合成事件存储在<code>eventQueue</code>事件队列中。遍历<code>eventQueue</code>。通过<code>isPropagationStopped</code>判断当前事件是否执行了阻止冒泡方法。如果阻止了冒泡，停止遍历，否则通过<code>executeDispatch</code>执行合成事件。释放处理完成的事件。</p><p><span class="under0"><strong>事件分发部分，</strong></span>首先生成合成事件，注意同一种事件类型只能生成一个合成事件<code>Event</code>，如<code>onclick</code>这个类型的事件，<code>dom</code>上所有带有通过<code>jsx</code>绑定的<code>onClick</code>的回调函数都会按顺序（冒泡或者捕获）会放到<code>Event._dispatchListeners</code> 这个数组里，后面依次执行它。也就是说，<code>React</code>以队列的方式，从触发事件的组件向父组件回溯，调用它们在JSX中声明的<code>callback</code>，<code>React</code>自身实现了一套事件冒泡机制。</p><p><span class="under0"><strong>事件存储部分，</strong></span>合成事件以对象池的方式实现创建和销毁，大大提高了性能。</p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="http://cn.voidcc.com/question/p-mvzpkdzm-t.html" target="_blank" rel="noopener">合成事件(SyntheticEvent)</a></li><li><a href="http://cn.voidcc.com/question/p-mvzpkdzm-t.html" target="_blank" rel="noopener">React.js onClick事件返回所有空值</a></li><li><a href="https://segmentfault.com/a/1190000013363525" target="_blank" rel="noopener">揭秘React形成合成事件的过程</a></li><li><a href="http://cycle263.github.io/blogs/framework/React/implement/event.html" target="_blank" rel="noopener">react合成事件</a></li><li><a href="http://www.ptbird.cn/react-syntheticEvent.html" target="_blank" rel="noopener">React 合成事件（SyntheticEvent）</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《软技能:代码之外的生存指南》</title>
      <link href="/2019/11/03/reading-notes-of-soft-skills/"/>
      <url>/2019/11/03/reading-notes-of-soft-skills/</url>
      
        <content type="html"><![CDATA[<ul><li><p><span class="under0"><strong> 你所能犯的最大错误就是相信自己是在为别人工作。这样一来你对工作的安全感已然尽失。职业发展的驱动力一定是来自个体本身。记住：工作是属于公司的，而职业生涯却是属于你自己的。</strong></span></p></li><li><p><span class="under0"><strong> 大多数软件开发人员从职业生涯一开始就犯了几个严重的错误。截至目前，最大的错误就是没有把自己的软件开发事业当作一桩生意来看待。不要被愚弄了，当你为了谋生一头扎进写代码的世界时，其实你和中世纪小镇上开铁匠铺的铁匠没什么差别。</strong></span>确实，时代或许已经改变了，我们中大多数人现在为公司工作，但是我们的技能和生意都还是自己的，我们随时都能换个地方另起炉灶。</p></li><li><p><span class="under0"><strong> 但是，如果你已经习惯于领取一份固定的薪酬（注意，你的工资还真不是取决于你的表现），这会很容易导致你产生另一个心态——你只是在为某家公司打工。尽管在你的职业生涯的某个特定时间段里，你可能确实是在为某家公司打工，但是千万不要让那个特定的角色固化了你和你的整个职业生涯——这一点非常重要！</strong></span></p></li><li><p>不过，通常软件开发人员售卖的就是他们把一个想法变成一个数字化的现实产品的能力。</p></li><li><p>即使只是想一想“作为一个企业我能提供什么”，就会对你如何考量自己的职业生涯产生深远的影响。企业需要持续不断地改进和完善自己的产品。你也应该这么做。作为一名软件开发人员，你提供的服务具备有形价值，你要传达的不仅是这款软件的价值是什么，还有它与别的成千上万款软件开发人员提供的服务有何不同。</p></li><li><p>你需要认识到仅有服务或产品是不够的。想赚到钱，你就必须能让潜在的客户了解该产品或服务。</p></li><li><p>专注于你正在提供怎样的服务，以及如何营销这项服务；想方设法提升你的服务；思考你可以专注为哪一特定类型的客户或行业提供特定的服务；集中精力成为一位专家，专门为某一特定类型的客户提供专业的整体服务（记住，作为一个软件开发人员，你只有真正专注于一类客户，才能找到非常好的工作）。</p></li><li><p><strong> 每个人都是独一无二的，你为自己设立的职业目标肯定与我的不同。但是，要实现任何目标，都必须先知道目标是什么。当然，说比做要容易得多。我发现大多数人，包括软件开发人员在内，要么缺乏对自己人生目标的具体认知，要么没有尽力去实现自己的人生目标，浑浑噩噩混过一生。这是大多数人的自然状态。我们通常不会充分思考自己该关注什么，因而我们的行动也就漫无目标、无的放矢。</strong></p></li><li><p><span class="under0"><strong> 无论因为何种原因你没有为自己的职业生涯设定目标，现在都是时候设定目标了。不是明天，也不是下周，就是现在。没有明确的方向，你走的每一步都是徒劳的。不要随心所欲地生活，不要随遇而安地行走在职业生涯的漫漫长路上。</strong></span></p></li><li><p>大目标并不需要那么具体，但是必须足够清晰，能够让你知道自己是在向它前进还是离它越来越远</p></li><li><p>较小的目标可以让你航行在自己的轨道上，激励你保持航向朝着更大的目标前进。如果你准备达成一个大目标，却没有分解为小目标，那么当你偏离航向时也不会有时间去校正。达成较小的目标也能经常奖励自己，帮助并激励自己。每一天、每一个星期的小胜利会让我们觉得自己正在取得进展、达成目标，这让我们感觉良好，帮助我们继续前进。较小的目标似乎也不像大目标那样令人望而生畏。</p></li><li><p>如果你还没有足够的时间去思考自己的未来，你还没有一个清晰、明确的目标，那么赶快放下这本书，为自己确定一些目标。这并非易事，不过你会很高兴自己那么做了。不要成为大海上漫无目的随波逐流的船。启航之前总要规划好航海图。</p></li><li><p><span class="under0"><strong> 如果你想成为一名出色的软件开发人员，就得学会高效地与他人相处（即使写代码是你工作当中最为享受的一部分）。</strong></span></p></li><li><p>如果你还是觉得自己的工作就是写写代码，那你最好要三思。作为一个软件开发人员，你的工作就是与人打交道（其实几乎所有的职业都是这样）。</p></li><li><p>我们常常容易犯的一项错误就是，轻率地否决同事的想法，以便于可以提出自己的想法。然而随着你做出这样的错误判断，你往往会发现他们对你的想法充耳不闻，仅仅因为你让他们感觉自己是无足轻重的。<strong> 如果你希望人们接受你的想法，并认可其中的价值，首先你最好先主动给他人相同的礼遇。如果你不能保全他人的自尊，那你永远也不可能赢得他的心。</strong></p></li><li><p><span class="under0"><strong> 在人际交往方面获得成功的关键在于：停止用“我”和“我想要什么”来思考。你应当开始思考对他人而言什么才最重要，什么才是他们需要的。通过这种换位思考，你会避免让他人觉得自己不受重视，你也能少批评人。被你用这种方式对待的人，也更可能用讨人喜欢的方式与你打交道，也更认可你的想法的价值。</strong></span></p></li><li><p><span class="under0"><strong> 你应该做的第一件事是确保自己仍旧保持技术能力。如果你力所不及，那么世界上所有的面试技巧都不能帮助你找到工作。确保自己一直阅读技术书籍和博客文章，并会花些时间提升自己的技能。</strong></span><br>asd</p></li><li><p>身为雇员的最大的好处就是稳定。此处的稳定并非特指在某一特定的工作岗位或者为某一特定的雇主工作。相反，我说的“稳定”是指你知道自己能以预设的方式谋生。在接下来的日子里，你作为一名雇员，只要你拥有一份工作，你就可能会得到一份薪水。你将来也可能会失去这份工作、不得不去找新工作，但是你至少在一段相对稳定的时间内，每个月都可以维持在某个收入水平上。作为一名雇员也是一条比其他选择更轻松的道路，因为你的职责是有限的，路线明晰。寻找和申请工作都有一个明确定义的流程。你也无需操心“做什么才能赚钱”这种问题。</p></li><li><p>你可能会害怕专攻软件开发的某一领域，担心自己陷入很窄的专业领域，从而与其他的工作和机会绝缘。虽然专业化确实会把你关在一些机会的大门之外，但与此同时它将打开的机会大门要比你用其他方式打开的多得多。</p></li><li><p>许多开发人员都在为创业型公司工作，薪水低廉、上班时间长得令人觉得荒唐，就是指望公司上市或被收购，能够靠期权股票发财。但是，我认为这个赌注风险极高。我不建议你为了“中彩票”而选择去创业公司。一旦选择了那条路，你可能耗尽心力却一无所获。选择为小公司或初创公司工作的一个更好的理由是，你喜欢那种快节奏的、令人兴奋的工作环境，也希望构建伟大的产品并见证它的成长。</p></li><li><p>在一家中等规模的公司里，角色定义通常很明确，你也会更稳定。我要说的是，中等规模的公司往往要比大公司还稳定，因为大公司往往还有大裁员或者周期性重组。如果你喜欢稳定，那你会发现中等规模的公司最适合你。</p></li><li><p>关于大公司的最后一点是：办公室政治。大公司通常有着复杂的政治体制，堪比大型政府机构。作为软件开发人员的你可以尽量避开政治，但即便如此，其他人的政治权谋也会以某种方式影响到你。</p></li><li><p><span class="under0"><strong>在任何公司里能让你脱颖而出的最重要法宝就是承担更多的责任。</strong></span></p></li><li><p>金钱总是追随着责任。有任何机会去承担更多责任时，承担起来！</p></li><li><p>没有人愿意涉足的领域是搜寻机会最好的地方。可能有一个没人愿意碰的遗留应用，或者代码库里的某个特别令人讨厌的模块。正因为没有人愿意碰，所以你也无需去抢，这些就成为你日益强大的帝国的领地。如果你能把沼泽变为良田，你也就展现了自己的价值。</p></li><li><p>另一种间接承担责任的方式是成为团队中其他人的导师，自愿帮助新人加速成长，为任何有需要的人提供帮助。</p></li><li><p><span class="under0"><strong>哪项工作是没有人愿意去做，你愿意承担起来，并将其简化或者自动化的？</strong></span></p></li><li><p>如何令自己引人注目每天都记录自己的活动日志——把这个日志以周报的形式发送你的经理。提供演讲或培训——选择一个对你的团队有用的话题。发表意见——只要在会议上就这么做，或者只要你能得到的机会就这么做。保证“曝光度”——定期与老板会面，确保你经常被注意到。</p></li><li><p><span class="under0"><strong>在任何组织中，总是有很多人会告诉你为什么这个想法行不通，为什么那个问题太难。这样的人不胜枚举。千万不要成为他们中的一员。相反，你要成为那个永远能为各种问题找到解决方案的人，要成为勇于执行这些解决方案以获得成果的人。</strong></span></p></li><li><p><span class="under0"><strong>忘记那些围绕职位晋升的政治游戏和惺惺作态吧——如果你能解决别人无法解决或不愿解决的问题，无论在哪家公司，你都能轻而易举地成为最有价值的人。</strong></span></p></li><li><p>在你当前的工作岗位上，你可以通过何种方式承担更多的职责？对于你的老板和经理，你现在的“曝光度”如何？下一周，你可以采取何种具体方式来提升自己的“曝光度”？目前你正在自己学习些什么？确定要自学的最有价值的东西是什么，制订一份下一年的自学计划。</p></li><li><p>成为专业人士是一种心态。如果我们总是与恐惧、自毁、拖延和自我怀疑做斗争，那么问题就是：我们正在像外行那样思考问题。外行毫不起眼，外行人废话连篇，外行屈从于逆境。专业人士可不这么想。不管怎样，他引人注目，他恪尽职守，他始终如一。</p></li><li><p>一位专业人士需要知道在什么时候说“不”，即使是面对自己的老板。因为，正如BobMartin所说，专业人士有着不可逾越的底线。有时，坚守底线甚至意味着被炒鱿鱼，但这就是你被称为“专业人士”要付出的代价。<span class="under0"><strong>短期内，这可能是痛苦的，但如果你能持之以恒地选择坚守正道，那么与选择其他路线相比，你的职业生涯会得到更大的回报，并且你也能睡个好觉。</strong></span></p></li><li><p><span class="under0"><strong>许多软件开发人员犯的一个巨大错误就是，当无法达到标准时，他们不是完善自己、迎接挑战，而是降低标准。</strong></span></p></li><li><p><span class="under0"><strong>如果你在某个领域降低了自己的标准，那么你最终会不经意间在其他领域也降低标准。一旦你越过了底线，选择妥协，就很难再回头。</strong></span></p></li><li><p><span class="under0"><strong>在考虑辞掉工作之前，你需要有一个切实可行的计划。我强烈推荐先在业余时间启动你想创建的业务，等能从这项业务中产生足以维持生计的收入时，你再转为全职。这种离职的过程漫长而又痛苦，但用这种方式做事非常重要，不仅是经济上的原因。</strong></span></p></li><li><p>为自己工作比想象中要难得多。我们已经谈到了，在正式辞职之前就开始你的新业务（作为副业）非常重要，这样你就不会经济窘迫，但这样做对你而言也许还有更重要的原因：为自己当老板做好准备。</p></li><li><p>许多有抱负的创业者其实也不知道运营业务到底有多难，更遑论处理企业运营的开销和非开发费用到底需要多少额外的工作量。</p></li><li><p>我喜欢这样思考问题。想象一下，在马路上慢跑和被吃人的狮子追着玩命狂奔之间的差异。这其实就是为别人工作和为自己工作之间的差异。当你为自己工作时，你会更加努力地工作，因为你只有工作的时候才赚钱。</p></li><li><p><span class="under0"><strong>虽然你为自己工作的真实动机可能就是因为你热爱自己正在做的事情，但是不要指望热情可以持续很久。随着时间的流逝，热情往往会变得捉摸不定乃至于消失殆尽。</strong></span></p></li><li><p>你会发现，作为自由职业者，你大概需要收取每小时75～100美元的费用才能在净收入方面等同于你做员工时每小时50美元的薪水。许多自由职业者对此不明就里，还是按照做员工时的计算方式收费，或者稍稍高一点，然后就发现自己现在的收入只能勉强糊口。</p></li><li><p><span class="under0"><strong>通用的规则是，成为自由职业者之后，你的时薪水平应该是作为全职雇员时的两倍（见表121）。然而，遗憾的是，很多人并没有这样收费。</strong></span></p></li><li><p>许多软件开发人员一开始就深陷创业者最常犯的错误之中——在为产品找到客户之前就构建好产品。</p></li><li><p>人类创造出的每个产品（包括这本书在内）都是为了解决某个特定的问题。没有要解决的问题的产品毫无意义，毫无意义的产品自然也就不会有用户，也就意味着你不会赚到钱。有些产品专门解决一些特殊群体遇到的特定问题。例如，一款能够帮助牙医管理自己的病人的软件产品，或者一本能帮助软件开发人员学会如何使用.NETUnity框架的书。还有一些产品解决普遍的问题，例如，无聊——娱乐产品（如电视节目和视频游戏）可归入此类。无论一个产品要解决何种问题，以及哪些人群有这个问题，必须在创建产品之前就要明确识别。</p></li><li><p>如果你想开发出一款产品，第一步应该是筛选出一组特定的受众，他们也是你的解决方案的目标用户。针对这些人你要解决的问题是什么，你可能已经有了总体概念。不过在很多情况下，你要多做一些调研，找出要么没被解决的问题，要么没有被很好解决的问题。</p></li><li><p><span class="under0"><strong>而许多开发人员是反着来的。他们在尚未有受众的时候就创建产品，然后再四处推销，努力寻找受众。当你以这样的方式做事情时，你要冒很大的风险，因为执果索因往往更加困难。</strong></span></p></li><li><p>如果你想让自己的产品也同样成功（虽然也许在规模上达不到），首先打造一个成功的博客，使用播客、演讲、视频和其他媒体来发展自己的受众。接下来，一旦你有了受众，你就能够向这些受众销售自己的产品。你之所以购买这本书可能就是因为你已经是我博客的粉丝，或者因为关注我的其他工作而无意中发现这本书，或者你之前听过我的播客。这就是发展自己的受众的威力。</p></li><li><p>所以你可以这么做：创建一个简单的销售网页，讲述你将要创建的产品以及它将解决什么问题，讲述你的产品会包含哪些内容以及产品上市的确切时间，给个折扣价让感兴趣的人可以提前预订产品，保证产品一发布他们就能拿到。你还要提供退款保证，让潜在客户知道如果你的产品不能如期交付或者不能令他们满意，他们可以得到退款。</p></li><li><p><span class="under0"><strong>我反复强调不要贸然辞职，踏上创业之路，但是我要再啰唆一次：从小处着手。太多崭露头角的创业者为自己的第一个产品设置了非常激进的目标，不顾一切地追求新的梦想。你必须明白并意识到，自己的首次创业可能会失败，很可能第二次、第三次也是如此。直到经过足够多的失败，你才可能真正成功。如果你倾尽所有投入创业，如果你为一次创业成功赌上自己的整个未来，你可能会把自己置于绝境——没有资源，甚至没有意志再去尝试一次。所以别这么做。从小处着手，作为副业开发你的第一个产品。</strong></span></p></li><li><p>我还建议你去读读EricRies的《精益创业》（TheLeanStartup）［CrownBusiness，2011］，从中获取一些关于如何创建小企业，以及如何起步的想法。</p></li><li><p>通常，当你着手创建一家创业公司的时候，你对自己要创建怎样的公司已经有了想法。通常，这家公司要有些独一无二的知识产权，使得它的那些规模更大的竞争对手难以进入并简单地复制你正在做的。很好的创业候选是能够申请专利或受保护的新技术和新方法，而糟糕的创业候选则包括餐厅或其他缺乏独创、很容易被复制的服务。好的创业项目要有规模扩张的潜力——想想Twitter、Dropbox和Facebook等。</p></li><li><p>研究一下一两家你心仪的创业公司的历史。注意它们是如何开始以及如何获得融资的。这些公司创立时是一个创始人还是多个创始人？这些公司的创始人还成功创立过其他公司吗？这些公司什么时候获得融资的？它们获得了多少资金？这些公司启动的时候是否加入了加速器计划？</p></li><li><p>真正解决这个问题需要缜密的时间管理。你可以在你想工作的任何时间再去工作，但是你必须要设定每周的日程表并且坚持下去。日程表越有规律、越是规划得当越好。我的妻子和朋友们经常跟我开玩笑，问我都已经在家为自己工作了，为什么还要坚持“朝九晚五”的典型工作模式，不过这份日程表确实能够保证我专注、严肃地对待自己的工作。我们不能过分相信自己可以不受外界干扰或者能够智慧地管理时间。我们需要提前做好计划，否则会屡屡经受不住诱惑。相信我，我了解这一点，我自己就经受过一长串的失败。</p></li><li><p><span class="under0"><strong>你还记得第一次写代码或者第一次学某种编程语言吗？那时候你觉得它很难，不是吗？或许到现在它还是有点儿难。但是，不管你现在身居何处，回顾过去，曾经的艰难与那些看起来的“不可能”，你现在也都从容应对。现在我们要做的，不过就是把那些将来看起来很简单的任务和工作提前一些，假设现在就是将来。</strong></span></p></li><li><p><span class="under0"><strong>他们相当短视，因为他们只会以现在的视角看问题。当下转瞬即逝，还没仔细看上几眼就成了过眼烟云。我们更应该着眼于未来。</strong></span></p></li><li><p>对技术虔诚的一大问题是，我们中的大多数崇拜某项特定的技术，只是因为自己熟悉这种技术。我们很自然会相信自己选择的是最好的，然而这会让我们经常忽略任何反对意见。我们不可能充分了解现存的所有技术，从而给“哪项技术最好”做出最英明、最睿智的判断，于是我们倾向于选择我们了解的技术并先入为主地认为它是最好的。人生多艰，无暇他顾。</p></li><li><p>其实在现实生活中，营销本身并没有那么糟糕。你的营销手段决定了你的营销对象是受益还是受损。营销需要人们的关注，以便让人们关注你，关注你的产品。优秀的营销会将人们的需要或者期待与能够满足此愿望的产品或服务关联起来。<span class="under0"><strong>所以，营销追求的是“实现价值在先，要求回报在后”。</strong></span></p></li><li><p><span class="under0"><strong> 营销就是一个“乘数效应”——你的营销越好，你的才华才能表现得越发淋漓极致。这就是对于软件开发人员来说，学习营销技能至关重要的原因。</strong></span></p></li><li><p>营销的核心在于将一些人所需要的所期待的产品或者服务与产品或服务本身连接起来。所以“自我营销”也就是把希望得到你提供的产品或者服务的人和你自己连接起来。尽管营销经常声誉不佳，但如果你能以正确的方式营销自己并没有错。</p></li><li><p>所以，自我营销并不能确保你一定成功，但是它却是你可控的重要元素。</p></li><li><p>别以为软件开发领域有什么不同。你也许是世界上最有天赋的软件开发人员，但是如果没有人知道你的存在，你也只不过是浮云一片。当然，你总能找到工作，但永远不会发挥出你的全部潜力，除非你能学会“如何自我营销”的技能。</p></li><li><p>这个策略需要时间，需要持之以恒。随着时间的推移，你写的每一篇博客，你采访的每一期播客，还有你写下的每一本书、每一篇文章，都有助于营销自己，提升你的个人品牌的认知度。最终你在这个领域就成了权威，拥有了追随者。这些声望转化为更好的机会，最终成就你的事业。</p></li><li><p><span class="under0"><strong> 我想强调的是：所有这一切都取决于你的能力——能给其他人带来怎样的价值。自我营销的基本机制是，要想让人们追随你、倾听你，你就要带给他们价值：你能为他们的问题提供答案，甚至是给他们带去欢乐。如果你在持续自我提升的同时并没有给他人带来价值，那么你终究不会走得太远，因为每个人都会离你而去。</strong></span></p></li><li><p><span class="under0"><strong> 要打造一个品牌，你需要四个要素——品牌所要传递的信息、品牌的视觉符号、品牌的一致性和品牌的曝光率。</strong></span>要构建成功的品牌，这四大要素缺一不可。我们将逐个介绍，以便让你了解如何使用这些概念来打造个人品牌。</p></li><li><p>选择某个细分市场，然后以它为核心建立你的品牌，越有针对性越好。</p></li><li><p>只是持之以恒还不足以使你的博客大获成功，你还应该确保你写的都是高质量内容。为什么要重视博客内容的品质？原因有两个。第一个也许也是最重要的一个原因是，博客内容的质量越高，越能吸引人持续浏览你的博客，或者通过RSS和电子邮件订阅阅读。在你给读者提供更多有价值的信息的同时，你也就成功积累了自己的目标客户。</p></li><li><p>我要强调一点：别担心。你的博客不需要完美。在起步之初，你的博客很可能会很糟糕。但是，随着不断尝试贡献出优秀的内容，而不是将自己脑子里的东西随意丢到网页上，不考虑格式和结构还有一大堆拼写错误，你终会成功。</p></li><li><p>我要推荐的第一个策略就是开始评论其他人的博客。找到撰写类似主题的博客的开发人员，在他们的博客写下有意义的评论，只要有机会就链接到自己的博客上。（通常在为了评论而进行注册时，你的个人主页会包含你的博客链接，所以你甚至都不用亲自在评论中链接到自己的博客。）</p></li><li><p>当你营销自己的时候，如果你所做的一切都只是为了自己的利益而不给别人带来真正的价值，那么即使你所做的都正确无误，那也无济于事。你可以写博客、在社交媒体上分享自己的内容、在大会发言、著书立说，尽你所能来推广自己，但是，如果你表达的和你传递的信息不能帮到其他人，那么每个人都将会无视你。人们最关心的还是自己。没人想听到你的成功故事，也不想知道为什么他们要帮你获得成功，但是他们肯定想听到你会怎样帮他们获得成功。所以，要想让自我营销的所有努力奏效，基本的方法就是帮助他人获得成功。</p></li><li><p>要想给人们想要的东西，要先知道他们想要什么。但是这并非易事，因为如果你问他们，他们可能会撒谎。他们并非故意撒谎，而是他们也只有一个模糊的概念，并不确切地知道自己想要什么。就像新娘在找心目中的完美婚纱时，只有切实看到了才会知道“这就是我想要的”。</p></li><li><p>通过提供免费内容，你让人们有机会无需投入资金就能了解你生产的内容多么有价值。你可能暂时没有收费的打算，但是一旦有此计划，你很容易说服人们去付费，因为他们早已通过你提供的免费内容知道你提供高品质的内容。免费还会让人们对你心生感激之情，他们也希望能通过购买你开发的产品或服务来回报你。</p></li><li><p>每次当你开始着手做某件事情的时候，无论是创建博客、截屏视频还是别的活动，你应该从它是如何为他人创造价值的角度来看待它。正如我坐在这里写这本书的时候，我时常都在想，我写下的每个字是否能让你获益。我该如何向你传递这些对你有益的信息？我如何才能为你提供价值？</p></li><li><p>要想用好社交媒体，首先你要给自己积累足够多的粉丝，或者至少是让人们进入你的社交网络。如果你拿着大喇叭大声呼喊却无人听到，那也无济于事。</p></li><li><p><span class="under0"><strong> LinkedIn最为人津津乐道的功能就是你可以邀请联系人为自己的能力背书。这项功能很棒，你一定要善加利用。对于列在LinkedIn个人主页上的每一项工作，请务必找前同事或者经理为它们背书。这可能会让你觉得有点儿不自在，不过LinkedIn页面上的背书可能会与你原来的认知相去甚远。背书提供了社会证明，这对于塑造个人形象是一个强有力的工具。想想你最近一次在亚马逊上买东西的经历。你有没有阅读产品评论，找到评价最高的产品？那是我在网上购物的基本方法，我还知道很多人也是这样在网上购物的。</strong></span></p></li><li><p><span class="under0"><strong> 你无需把自己包装成为专家，只是热心希望通过分享自己所学而对他人有所帮助。（事实上，你会发现，你应该经常采用这种方法。太多人希望被包装成为“专家”，从此不再真诚谦逊。</strong></span></p></li><li><p>另一条成为“演说家”的路径是代码训练营[1]和用户组举办讲座。大多数大城市里都有各种软件开发人员组成的用户组，加入离自己近的用户组并不难。在加入用户组一段时间后，你可以询问组织者是否可以就某个特定的话题做一次讲座。大多数用户组都欢迎新人分享，因此只要你的话题有趣，就有机会出场。这样的机会非常好。你面对的是一个较小规模但是更宽容的听众群体。此外，这也是向当地的公司和招聘人员推销自己的好机会</p></li><li><p>刚开始的时候，最好的方式是在免费视频网站（如YouTube）上通过创建截屏视频的方式做分享。截屏视频就是在你演示如何操作的时候录制你的计算机屏幕。如果你能通过这些截屏视频一板一眼地教会其他开发人员某个概念，你就可以轻松赢得“精通某某领域的专家”的美誉。这种声誉可以帮你赢得更好的工作，如果你是自由职业者，专家”的美誉还能带给你客户</p></li><li><p>许多软件开发人员误解了写书的原因。他们想当然地认为大多数图书和杂志作者能够通过写作赚大钱。但是，事实很简单，你不会为了赚钱而去写书。写书是为了提高自己的声誉。</p></li><li><p>那些出版过专著的作者会发现自己更容易获邀在各种会议发表演讲，能够建立自己在某一学科的权威地位，这些都能为你带来更多的客户和更好的工作机会。</p></li><li><p>你也可以通过亚马逊的KindleDirectPublishing（Kindle直接出版）计划将自己的书直接在亚马逊上出售，或者使用Smashwords、BookBaby这样的服务来将自己的书发行到多个市场。这些服务甚至可以帮你将你的书转换为电子书格式。</p></li><li><p>如果你真的想在自我营销方面获得成功，你就一定要学着克服我们大多数人都会有的一种恐惧——看起来像个傻瓜。</p></li><li><p><span class="under0"><strong> 但是，如果想通过自己的努力获得成功，你就必须学会不在乎别人怎么想。你必须学会如何无惧自己被别人看作傻瓜。</strong></span></p></li><li><p><span class="under0"><strong> 在第一次做某件让自己不自在的事情的时候，你可能无法想象终有一天自己竟然觉得做起这些事儿来如此怡然自得。你会误导自己去认为“这不适合我”或者“别人在这个领域有天赋，而我没有”。你必须学会克服这种想法，认识到大多数人在第一次面对挑战时都需要克服这样的不适感，尤其是他们面对一群人的时候。</strong></span></p></li><li><p>首先，如果你看起来像个傻瓜，那最糟糕的情形会是什么？你不会因为让自己出丑而受到身体上的伤害。无论你在讲台上演讲得多糟糕，也没有人真的在乎。诚然，站在讲台上抖抖索索、汗如雨下可能会让你看起来很可笑，而当这一切都结束的时候，没人会记住这些。</p></li><li><p>你是否思考过自己是如何学习的？学习的真正含义是什么？我们几乎都是下意识地倾向于学习自己感兴趣的东西。当别人给我讲一个精彩纷呈的故事时，我们通常不会做笔记，也不会记住确切情节；然而我们中大多数人在听到故事后，不费吹灰之力就能将它复述出来。</p></li><li><p><span class="under0"><strong> 教育的首要目标，并不在于“知”而在于“行”。</strong></span></p></li><li><p><span class="under0"><strong> 熟知了这三个关键点后，我可以高效地学习一门技术，无需通晓全部细节。我发现，如果我了解三项主题——如何开始，我能做什么，以及相关基础知识，那么我就能随着学习深入学会所需的其他知识。如果我想提前掌握所有知识，那只是在浪费时间，因为真正重要的内容会湮没在那些细枝末节中。这种新方法能让我关注重点。当我确实需要了解更多细节时，我可以利用参考资料来弥补这些不足。有多少次你从头到尾仔细阅读一本技术书籍，却发现自己实际用到的也只是书里介绍的技术的一小部分？</strong></span><br>  (说得很有道理)</p></li><li><p>“十步学习法”的基本思想就是：要对自己要学的内容有个基本的了解——了解自己不知道什么就足矣。然后，利用这些信息勾勒出学习的范围，</p></li><li><p>即需要学哪些内容，以及学成之后又会获得什么。依靠这些知识，你可以找出各种资源（不局限于书）来帮助自己学习。最后，你可以创建自己的学习计划，列出要去学习哪些相关课程，筛选学习材料，只保留能帮助自己达成目标的优质内容。</p></li><li><p><span class="under0"><strong> 在学习过程中，大家很容易犯的一个错误就是试图解决太大的问题而把自己搞得不堪重负。例如，试图全面掌握物理学是不切实际的，因为这一主题太过庞大，也不够聚焦。你不可能在有限的时间里学会与物理学有关的一切——穷尽一生也不可能。因此，你要明确自己的学习范围。</strong></span></p></li><li><p><span class="under0"><strong> 在此过程中，你可能会受到诱惑，为了学习该主题下的不同子主题，你可能会扩张你的学习范围而不够聚焦，但是请务必抵制住这个诱惑，尽可能地保持专注。你一次只能学一样东西。你可以稍后再回头学习别的分支领域，但就目前而言，选择一个专注而聚焦的范围，潜心学习吧。</strong></span></p></li><li><p>在全力以赴启动之前，明确“成功”的含义极为重要。如果不知道成功是什么样子，很难找准目标，也很难知道自己什么时候已经真正达到目标。在尝试学习任何东西之前，你都应该在自己脑海中清晰地描绘出成功的样子。当你知道自己的目标是什么的时候，你就可以更轻松地使用倒推的方式，明确实现目标所需的步骤。</p></li><li><p><span class="under0"><strong> 好的成功标准应该是具体的、无二义性的。</strong></span></p></li><li><p><span class="under0"><strong> 要尝试收集到多种多样的资源以帮助你学习，而不是只读一本关于这一主题的书。资源可以是多种多样的，不局限于书籍。</strong></span></p></li><li><p><span class="under0"><strong> 对于大多数学科而言，学习是一个自然的过程。从A开始，前进到B，最后到达Z。这个顺序对你掌握随机的碎片化知识价值不大。你需要找出在最短的时间内从A到Z的正确路径，并且到达沿途的重要地标。</strong></span></p></li><li><p>大多数人，包括我自己，在学习过程中通常会犯两类错误：第一类错误是在知之不多的情况下就盲目开始，即行动太快；第二类错误是在行动之前准备过多，即行动太晚。要想在这二者之间取得平衡，你掌握的知识要恰到好处，</p></li><li><p>起初，你会觉得这步似乎并不重要，不过还是让我们先来考量一下其他的方式——大多数人学习的方式。大多数人会试图通过读书或观看视频来掌握某个主题。他们会提前吸收很多信息，然后再付诸实践。这一方法的问题在于，在他们读书或看视频的时候，他们并不知道哪些内容是重点。他们只是因循他人设计好的学习路径</p></li><li><p>现在，考虑一下我在这里建议的方法。你无需提前了解全部内容，你要做的首要的一件事情就是亲自操作和亲身体验。采用这种方法，你通过探索和实践进行学习。在操作的过程中，你的大脑自然地产生各种问题：它是如何工作的？如果我这么做，会发生什么？我该如何解决这个问题？这些问题引导着你</p></li><li><p><span class="under0"><strong>最后，千万不要忘了，你在第3步中定义的成功标准。试着把自己正在学习的内容与最终目标关联起来。你掌握的每个模块，都应该以某种方式推动你向着终极目标前进。</strong></span></p></li><li><p>在现实中，你只需要超前别人一步，就可以成为他们的老师。有时候，比学生超前太多的“专家”反而不能得心应手地“教”，因为他们无法与学生产生共鸣。他们忘了初学者是什么样子，很容易专注于他们认为简单的细节。</p></li><li><p><span class="under0"><strong>你可以用多种方式将自己所学教给他人。你可以写博客，也可以制作YouTube视频。你也可以跟自己的爱人探讨，将自己所学解释给他/她。重点在于，你要花时间将自己学到的东西从大脑中提取出来，以别人能够理解的方式组织起来。在经历了整个这个过程之后你会发现，有很多你以为自己明白了的知识点，其实并没有摸透。于是你会将那些以前自己没太明白的东西联系起来，并且简化自己大脑中已有的信息，将它们浓缩并经常复习。前景非常诱人。所以，不管做什么，千万不要跳过这一步。这一步对于保持信息以及深入理解知识而不仅仅只是流于表面至关重要。</strong></span></p></li><li><p>我们还要将我们该如何看待这个人或者他说了什么与他取得的成果分开来。这不像看起来那么容易。当我们向别人寻求帮助时，我们必须要假设我并不知道什么最好，否则我们也就没有求助的必要了。这就意味着，我们提出来的分析结果可能是错的。我们必须相信我们所想的正与真理背道而驰，并且必须相信一位导师已经实现的成果，而不是相信自己的逻辑和推理。</p></li><li><p>在寻找一位导师的时候，你必须要抛开自己的判断和推理，只去关注导师的成就。你可以去找那些已经实现了你所设定的目标的人做你的导师，或者水平略胜你一筹的人做你的导师。你也可以去找已经帮助别人实现你设定的目标的人，即使他自己还没有达到这个水平。寻找导师时的检查单他们做到了我想要去做的？他们曾经帮助他人做到了我想做的？他们现在取得了什么可以展示的成就？你能和这个人和睦相处？他充满智慧吗？</p></li><li><p><span class="under0"><strong>如果你想在一家公司里获得晋升，那么在公司内部给自己寻找一位导师无疑是明智之举。你的老板或者你老板的老板这样的资深人士是导师的不二人选，你很可能会提前接受晋升所需要的各种教育。此外，与高管做朋友对你的职业生涯毫无害处。</strong></span></p></li><li><p>即使你能给自己找到一位完美匹配的导师，也不能保证这位导师愿意收你为徒。事实上，越成功的人越忙，他们根本没有太多的空闲时间。那么你如何说服未来的导师自己值得他投入呢？完成这一任务的最佳途径就是交换互助。你能提供的最好的交换物就是自己对学习的渴望……还有……免费工作。没错，拒绝免费劳动力是相当困难的。如果你愿意以单调的工作换取学习的机会，你会发现自己的导师更容易接受你的请求。</p></li><li><p>一定要有耐心！大部分人在第一次听到“不”的时候就止步不前。别做这样的人。恰恰相反，要做一个别人用棍子赶才能赶走的人——即便如此，过一会儿也还要<br>回来。你的顽强不会总有回报，但是你可能会惊讶地发现回报来得很频繁。</p></li><li><p>我最喜欢告诉人们，只要在某些方面快人一步，就能帮助别人。无论你生活在哪里，也无论你从事何种职业，你总有机会在某个方面领先别人一步，所以你一定可以帮到某个人。</p></li><li><p>我们在生活中都需要别人的帮助以看到自己看不到的东西，因为当遇到涉及自身的问题和麻烦的时候，我们都会有些目光短浅。伟大的高尔夫球手老虎伍兹也需要一位教练，虽然他技不如伍兹，但是他能看到伍兹看不到的东西。要想成为导师，你只需要敏锐的观察力和足够的耐心。你愿意带着同情心倾听你的门徒，在他们需要鼓励的时候给予支持，在他们需要动力的时候也会从后面推一把。</p></li><li><p>在你担任导师的时候，你通常会比自己的学生还学得多，你会修正自己关于某个课题的观点，以全新的视角观察和思考。在你做导师的时候，你经常面对的都是最强悍的问题：为什么？为什么这样就是对的？为什么要用这种方法？当你被迫去探究这些“为什么”的时候，你会发现其实自己并不知道为什么。你可能还会发现，当你想去帮助别人的时候，你探求答案的过程能让你愈加深入思考，甚至可能完全改变你最初的想法。</p></li><li><p>帮助他人时的成就感。深入学习和领悟知识的途径。你的徒弟有朝一日会帮到你。自身的成长。帮助别人成长的过程也就是自己成长的过程。</p></li><li><p>你觉得你在某方面已然是专家了，才敢把这些东西拿出去教给别人。然而，能将自己的专业知识教授给别人，却是成为专家的一部分要求。如果在某个领域你从来没有教会别人，那么很难说明你在该领域获得了足够的专业知识。</p></li><li><p>我们能够识别模式，并且套用这些固定的模式去解决许多问题，而没有做到“知其然”也“知其所以然”。这种肤浅的理解力无碍于我们完成工作，因而不易被察觉。然而一旦我们试着向别人解释某件事情的运作原理或背后的原因的时候，我们在认知上的漏洞就会暴露出来。</p></li><li><p><span class="under0"><strong>我发现最好的教学方式就是以谦虚的视角来观察问题，以权威的口吻去诠释问题。我的意思是说，当你教别人的时候，无需让自己表现得比学生更智慧、更博学，但要充满信心，坚信自己所说的一切。没人愿意跟一个对自己讲的内容毫无底气的人学习，也没有人愿意在学习的过程中被人看作是愚不可及的。要把这一切做到恰到好处还需要一些练习，因为很容易从一个极端走向另一个极端。你要明白，你教的目的是为了帮助别人，而不是为了证明自己的优越性或者寻求认可。</strong></span></p></li><li><p><span class="under0"><strong>然而你并不要止步于写博客。另一个重要方法就是在本地用户组的聚会上或者自己的工作场所进行演讲。只要记住一个原则：心态谦卑，信心满满（而不是傲慢自大）。即使你可能不是最好的演讲者，你也会做得很好。</strong></span></p></li><li><p>视频，尤其是教程截屏，也是一种很好的教学方式，很容易上手。你可以使用像Camtasia或ScreenFlow这样的录屏软件来录制你的屏幕，并提供一个画外音来解释操作过程。这种教学方式能够真正给你带来挑战，迫使你去思考呈现信息的最佳方式（音频、视频和实际演示）。</p></li><li><p>但是，这并不意味着，在软件开发中不存在永恒不变的核心领域。许多计算机科学课程中包含的算法、操作系统、关系型数据库理论和其他主题都是永恒的。然而最简单的事实是，当你坐在办公桌前开始写代码的时候，你极少会用到在学校学到的技能。身为软件开发人员，我们所做的大部分工作，都是如何使用新技术，学会如何用它们完成工作。我们很少需要回溯到计算机科学的本源。同样，这并不意味基础的计算机科学教育毫无价值。能够深入挖掘问题并理解问题（而不是停留在表面上）的能力更具价值。对大多数软件开发人员来说，在工作中取得成功的更直接因素还是相关工作经验。</p></li><li><p><span class="under0"><strong>专注于自身强项，这没什么不妥，但有时候，如果弱点得不到解决，通常会成为你的职业或生活的桎梏。我们每个人都有弱点。我们的知识也有使我们不能高效工作的短板。我们能发现并消除的知识短板越多，长久来看我们从中受益越多。</strong></span></p></li><li><p><span class="under0"><strong>这就是知识上的短板造成的问题。我们总是倾向于掩饰自己的短板，而且我们也总是太忙，忙到无暇去填补它们。结果，我们要么不能真正明白自己在做什么，要么为了避开自己的短板而采取低效的方法。</strong></span></p></li><li><p><span class="under0"><strong>你的知识短板并不全都显而易见。事实上，大多数的知识短板，你只能隐约觉察到。对于自己不知道的，你很难清楚地意识到，也很容易忽略。知识短板会阻碍你进步。准确识别它们的最佳方式之一就是看看自己在哪些工作上花费了大量的时间，或者一直进行重复性劳动。通常，你会发现，自己的知识短板使工作速度放缓，额外需要大量的时间完成任务。由于理解得不彻底，你只能摸索着前进。这正是我不理解Lambda表达式的时候发生的情况。我花了大量的时间去调试代码，而不是用几个小时去理解它。</strong></span></p></li><li><p>重复性工作也是如此。任何你所做的重复性工作都值得彻查一番，看看是否有自己不理解的地方，如果你这样做了，可能会提高你的工作效率。想想键盘快捷键。你一直重复使用某个应用，但是并没那么高效，原因是你不得不手动在屏幕上拖曳鼠标并点击。键盘快捷键可能就是你的知识短板。花点儿时间学习每天会用几个小时的应用（提示：你的IDE编程环境）的快捷键，一周能给你节约好几个小时的时间。</p></li><li><p>另一种识别知识短板的方法就是，时刻都要试图了解自己不理解或不清楚的事物。你可以维护一份清单，列出自己需要去研究或者自己不清楚的所有事物，追踪有哪些主题总是不断出现在这个清单上。你会惊讶地发现这份清单的增长速度有多快。你只要对自己坦诚：如果遇到不理解的知识，不需要马上就学会，但是一定要把它添加到清单中，这样你至少可以找出自己的知识短板。</p></li><li><p>外行静坐等待灵感，其他人则唤起激情努力工作。</p></li><li><p>我们的思维模式是这样的：花一些时间先把所有的事务在脑子里过一遍，然后才能达到思维高峰以完成任务。你可以把这个过程想象为汽车在高速公路上行驶时的提速过程。车子在进入高速行驶之前需要更换几个挡位。如果你总是不断地起步停车，那么你的整体速度就会很慢很慢。要让车回到高速，换到五挡，需要花点儿时间。但是，一旦你开到五挡，那就能轻松巡航了。</p></li><li><p>每天，在坐下来工作之前，我都会做一些健身活动。之所以这样做，是因为我不希望中途有事情打断我专注的状态。一旦我做好准备坐下来工作，我做的第一件事就是计划我的这一天。</p></li><li><p>另外，我还会退出所有会让自己不断分心的聊天软件，或者保持隐身状态。我觉得聊天软件完全就是浪费时间。在大多数情况下，电子邮件更为合适，因为我可以在闲暇时间回复，而不会在正专注工作的时候被打断。</p></li><li><p><span class="under0"><strong>每天都像机器一样高强度工作可不是长久之计，所以我要确保自己有一些休息时间，或者有那么几周我会称之为“无工作周”，基本上在这几周里，我不会使用番茄钟，也不会把整周都排满。</strong></span></p></li><li><p>在长假期间，我要么会把博客和播客这类任务挂起，要么只做最小量的工作，来维持自己每周的承诺。我发现，在长时间努力工作之后，这种休息是必需的。（完成本书之后，我会休息一段时间。）</p></li><li><p>番茄工作法只有被当作估算和评估工作的工具使用时，才能发挥它的真正威力。通过跟踪自己在一天内完成了多少个番茄钟，以及为每天要完成的番茄钟的数量设定目标，你瞬间有能力去真正评估自己每日工作的努力程度，也能知晓自己的工作能力。</p></li><li><p>使用番茄工作法，你可以把每周看作是由有限个番茄钟组成的。想在每周完成一定数量的任务？你要搞清楚自己一周能工作多少个番茄钟，并相应地设置任务的优先级。通过计算自己完成的番茄钟的数量，可以确切知道自己一周完成了多少任务，也就不会觉得自己没完成足够量的任务。如果你没能完成自己设定的任务，但是却用完了足够数量的番茄钟，那么问题就不是工作量是否饱满，而是给某个任务项设置的优先级是否正确。正确使用番茄工作法教会我“设置优先级”的真正价值。当每周我只有这么多番茄钟可分配的时候，我必须小心翼翼地使用这些宝贵的番茄钟。在使用番茄工作法之前，我一直幻想着自己可以在一周内完成超出自己实际能力许多的工作，过高地估计了自己的时间而低估了完成任务所需的时间。</p></li><li><p>有一个大问题一直困扰着我：我总为自己没有做更多的事情而感到内疚。这与我一天完成多少工作无关，就好像我永远不能放松似的。我总觉得自己应该在做事，以至于坐下来玩游戏（我最喜欢的消遣之一）时我都无法享受其中，因为我觉得自己在浪费时间，我本应该做更多的工作。也许你也有同感。</p></li><li><p>这个问题的根源在于，你无法准确地评估每天到底自己完成了多少任务，也没有为自己每天到底要完成多少任务设定明确的目标。也许，像我一样，你也试图通过列出一份每日任务清单来解决这一问题。这看起来似乎是一个好主意，但是，当你完成某些任务耗费的时间比你预计的要长的时候，你将备受打击。就算你每天累得像狗一样，还是无法完成清单上的任务，所以即使你竭尽全力还是觉得自己很失败。这可真令人很沮丧。我们不一定能够控制完成一项任务到底需要多少时间，但是我们可以控制自己这一天中愿意为某项任务（或某些任务）花多少时间。如果你努力工作一整天，就会感觉很好；如果在这一天中你工作松懈却又完成了列表中的所有任务，那只不过是因为任务比预期的简单而已，你还真不应该为此而沾沾自喜。制订任务列表全凭主观臆断，每天能够专注完成的工作量才是最重要的。</p></li><li><p>其他的著名高产人士，像史蒂芬·霍金（StephenKing）也讲过类似的话：每人每天能够专注地、富有成效地工作的时间是有上限的。你的时间只有这么多，要怎么利用你自己说了算。</p></li><li><p><span class="under0"><strong>我开始意识到，要想确保自己在追求目标的道路上获得持续的进展，唯一的方法就是确立一个明确的目标，规定自己要在预先确定的时间段内需要取得多大的进展。</strong></span></p></li><li><p>每周跑步3次。每周发布一篇博客。（写作本书时）每天写一章。每周完成50个番茄钟的工作。你可以自己试试。花点儿时间制订自己的“定额表”。想想自己每周或每月要完成哪些任务，把它们写下来。你不需要现在就做出承诺，但是适当的练习对你有帮助。</p></li><li><p>定额工作法的规则挑选一项重复性任务。明确有效时限，在此期间该任务被重复执行。明确在给定的有效时限内该任务应该完成的次数的定额。给自己承诺：一定要达成定额。调整。调高或者调低定额，但是不能在有效时间段之内调整。</p></li><li><p>多任务导致效率低下的根本原因似乎在于，我们根本没有能力真正去践行多任务并行。对于很多活动，我们可能会自认为是在进行多任务并行，但实际上我们做的不过是在不断地进行任务切换。这样的任务切换看起来确实是工作效率下降的罪魁祸首。任务切换越多，浪费的时间也就越多，因为你的大脑并不能专注于一项任务。真正的多任务并行是指同时做两件甚至更多事情（这是可以提高效率的，正如我们将在后面讨论的一样），但大多数时候我们只是在做任务切换。正如我们在第36章谈到的那样，当你认为专注对于提升工作效率非常重要的时候，这一点就讲得通了。多任务并行的时候，很容易打破专注力，最后你不得不花时间回到之前的任务。当你不在专注模式下时，很容易会拖延时间，或者会让其他的干扰分散注意力。如果你认为自己处于专注状态时工作效率最高，且需要花些时间才能到达这种状态，你就能明白，在各种任务间快速切换并不会提高效率。</p></li><li><p>潜在的适合批量处理的领域处理电子邮件。打电话。修复bug。开短会。</p></li><li><p>新鲜感消退之后，现实就会浮现。无论你是接手一个新项目还是学习一项新技能，你最终都会到达这种状态：你兴趣索然，积极性低，进展异常缓慢，或者看起来毫无进展。最终，你会身心俱疲。你可以尝试否认或者掩盖这个事实，但是最终你还是知道，你再也不会为这份工作、这个项目、这项任务感到兴奋不已。你觉得自己无比倦怠。</p></li><li><p>你越是努力工作，完成的工作就越多，这种倦怠感来得就会越快。这就是难以取得工作成效的原因。工作效率越高，你从中体会到的愉悦感就越少。</p></li><li><p><span class="under0"><strong>遗憾的是，大多数人从来没有真正穿越过这堵墙。环顾四周你就会发现我说的是真的。有多少人在成功来临之前，或者项目完成之前就放弃了？回首你自己的经历，有多少半途而废的项目：跆拳道黄带（在拿到黑带以前放弃了）、落满灰尘的吉他（好久没弹了）、尘封在衣橱里的足球鞋（好久没踢了）……我知道我已经撞到这堵墙很多次，未能突破。我自己的经历里，充斥着大量以失败告终的例子。不过也有好消息。还记得，我答应过你，我一定会分享治愈倦怠的方法？好了，它就在这里，非常简单。你准备好了吗？穿过那堵墙！</strong></span></p></li><li><p><span class="under0"><strong>大多数人在“撞墙”的时候会选择放弃。他们不是想方设法去穿越它，因为他们觉得自己已经倦怠了。在撞墙之前，竞争非常激烈。选手们站满跑道，每个人都热情高涨、激动不已。跑道是如此轻松，没有人会被淘汰。然而，由于很多人没有穿越过那堵墙，所以墙的另一侧极为宽阔，人数寥寥，没有太多竞争。大部分选手都已经中途退出了比赛。因为总共也没几位选手留下来，所以因成功到达墙的另一侧的选手能得到更丰厚的奖品。所以，如果能穿越到墙的另一侧，你会发现突然间一切都变得轻而易举，你的动机和兴趣再次回归。我们面对新任务的时候，动机和兴趣水平都很高，我们的兴趣和动机也会在任务完成后继续高涨。初学吉他会很轻松有趣，但是坚持不懈成为高手却是漫长单调的过程。成为吉他大师是最大的乐趣和回报。</strong></span></p></li><li><p>前面介绍的适用于电子邮件的批量处理策略在这里同样适用。你可以在一天内集中一两次进行社交媒体活动。你可以只在午餐时段或者晚上查看Facebook，而不用不停地查看Facebook。相信我，即使这样你也不会错过任何有用的东西。</p></li><li><p>如果能准确了解自己的时间花在哪儿了，就能识别并且消除那些最大的时间杀手。试着弄清楚自己每天在不同任务上花费的时间。即使是跟踪一下每天吃饭花了多少时间，也能真正了解时间都去哪儿了。</p></li><li><p>我们的大脑非常善于养成习惯。我们会根据周围的事物自发地养成习惯。一件事情做得越多，越可能形成习惯。习惯的力量往往基于奖励的价值。我们都喜欢做能够带来更好回报的事情。然而，奇怪的是，可变化的奖励要比已知的标准奖励更让人着迷。这就是在赌场能看到那么多人的原因。不知道自己是否能得到奖励或者不知道奖励有多大，会形成一种很坏的习惯，即公认的“上瘾”。</p></li><li><p>试着从小事做起。选一个你找出来的坏习惯，不要试图马上就改变它。相反，尽量找出这个习惯被什么触发，你这么做有什么表现，以及是什么奖励激励你产生冲动要这样做。有时候，你甚至会发现，所谓的“奖励”不过是个幻象——一个你期望能够实现却从未兑现的承诺。例如，许多人都有买彩票的习惯，因为他们认为自己会中奖，尽管他们从未中过奖。</p></li><li><p>最后也是最困难的部分是，强迫自己坚持足够长的时间，以使新习惯取代旧习惯。只要你能在新的习惯上坚持足够长的时间，新习惯最终一定会变得很轻松且是自发的。</p></li><li><p>他在一篇题为“每天写代码”（WriteCodeEveryDay）的文章中，谈到了自己的经历。他之前在业余项目上毫无进展，直到养成了每天至少用30分钟写一定量有用的代码的习惯。在实行新惯例之后，它成了一种习惯，这使他的生产力获得了巨大的提高。</p></li><li><p>关于这个问题，我们已经讨论过，原因之一就是：大型任务给人带来沉重的心理负担。面对大问题时，我们倾向于花更多的时间思考问题本身，而不是采取行动去解决问题。人类倾向于选择阻力最小的路径。当面对一项大任务的时候，检查电子邮件或者泡上一杯咖啡看起来就是更容易的路径，于是拖延随之而来。</p></li><li><p>但是拖延还不是我们不喜欢大型任务的唯一原因。任务越大，越难明确定义。如果我让你去商店买鸡蛋、牛奶和面包，这个任务就是非常明确的，你知道该做什么。完成这项任务很容易，你正确完成任务的概率也很高。</p></li><li><p>大型任务往往也很难估算完成时间。如果我问你，写好一个找出列表中规模最大的项目的算法需要多长时间，你也许可以给我一个非常准确的估计值。但是，如果我让你告诉我，实现网站上的购物车功能需要多久，你的估计值不会比瞎猜好多少。</p></li><li><p><span class="under0"><strong>把大型任务分解为更小的任务，是我一直用来完成更多工作、更准确地估算要完成这项工作我需要多长时间的技巧之一。</strong></span>事实上，这本书采用这样的结构并非巧合。你可能想知道为什么这本书有这么多章。在我开始着手写这本书的时候，我特意选择将每一篇拆分成很多小的章，而不是少数几个篇幅很长的章。原因有两个方面。</p></li><li><p><span class="under0"><strong>把大任务分解为小任务的关键步骤就是确定出因为缺失了哪些信息而导致你无法创建更小、更明确的任务。如果你在把大任务拆分成小任务的时候遇到问题，很可能是由于缺少信息。但是这并不是坏事。在项目早期发现信息不足要比项目已经进展很多后才发现信息不足要好很多。把大任务分解为小任务的时候，务必确保每个小任务都有一个明确的目标。试着明确这些目标经常会发现之前用别的方法遗漏了的重要信息。</strong></span></p></li><li><p>然而，在我看来，我们认为艰苦的工作最有可能是让我们获益良多的工作。艰苦的工作最有可能是推进我们职业发展或者为我们打开机遇之门的工作。所有没有任何好处的工作看起来总是那么轻而易举。</p></li><li><p>如果真想富有成效，你就不得不学会工作的时候既聪明又努力。光有聪明是不够的。一定量的机智是必须具备的，然而要想获得真正的成功，面对挫折的时候一定量的毅力也是必要的。</p></li><li><p>但是，这种思维方式是有问题的。问题在于，你的伙伴中如果有人愿意在一件事情上坚持更长的时间，那么最终他就会超越你。一开始，你可能领先于他们。起初，你的激情让你暂时爆发，但是那些愿意投入漫长的努力，并愿意为了完成工作执着于枯燥工作的人，最终会超过你，并且遥遥领先。赛跑比的是谁耐力更长久，而不是看谁冲刺更有力。</p></li><li><p>在所有的情况下，我们所面对的现实就是，没有一件事情是轻而易举的。</p></li><li><p><span class="under0"><strong>如果真想成功，如果真想要成为成功人士，你就不得不在有些时候通宵达旦。你可能会在自己的职业生涯的数年里每周工作60～70小时。为了获得领先的地位，你可能会好几年都不得不放弃看电视或者与朋友们外出游玩。你无法欺骗这个制度。你的收获取决于你的付出。种瓜得瓜，种豆得豆。没有播种，永远没有收获。</strong></span></p></li><li><p><span class="under0"><strong>只有少数人能到达顶峰，只有少数人能看到真正的成功。大多数人都在自己的职业生涯中碌碌无为。他们不愿意投入时间，也不愿意做出必要的牺牲以获得真正的成功。你可以听从本书中所有的建议，但是如果你不愿意努力工作，那么它们对你不会有任何益处，一点儿益处都没有。你必须愿意付出努力。你必须愿意将自己所学的东西付诸实践，让它们发挥作用。</strong></span></p></li><li><p>他断言，每当我们试图提升自己至一个更高水平的时候，阻力一定会伸出它那丑陋的脑袋，试图让我们原地不动。</p></li><li><p>至少你知道，当你逃避工作，代之以浏览Facebook的时候，有1亿人也在做着同样的事。</p></li><li><p>这是只有你自己才能做出的选择。你只需下定决心去做那些需要做的工作。你必须认识到，工作最终必须要被完成，所以还不如现在就做，而不是拖到以后；你必须认识到，你要想实现目标，要想发挥出自己的全部潜力，唯一的途径就是自愿咬紧牙关、硬着头皮、开始工作。</p></li><li><p>任何行动往往都比没有行动好，特别是当你一直停滞在不愉快的情势下很长时间的时候。如果这是一个错误，至少你学到了一些东西。这样一来，它就不再是一个错误。如果你仍然选择停滞不前，那么你就学不到任何东西。</p></li><li><p>我们明知道应该采取行动的时候却选择拒绝采取行动，恐惧可能是最大的原因。但是，不要让自己掉进恐惧的陷阱很重要。我们必须要学会克服恐惧，并且认识到，尽管我们即将采取的行动可能不是最好的，但是它几乎总是比默认选择不采取行动要好。</p></li><li><p>也许你想学弹吉他，也许你现在工作不开心想找个新工作，也许你的财务状况需要进行大的调整。无论你在逃避什么，无论是什么在困扰着你，都不要拒绝采取行动。当下就是行动的时刻。当下就是决策的时刻。</p></li><li><p>很多时候，你需要试错好多次之后才能找出正确的行动方向。在任何行动上耽误的时间越长，完成整个试错过程找出正确方向的用时也就越长。大多数我们急于做出的选择往往都是微不足道的。<span class="under0"><strong>我们经常试图耗费300%的努力寻找95分的解决方案，而不是满足于找到90分的解决方案</strong></span></p></li><li><p>即使是一些看似重要的选择——改变生活的那种，用随机掷骰子的方式都比优柔寡断、无所作为要好。很多大学生认为，选择专业和选择职业都是非常重要的决定。尽管这一决定可能很重要，但也不会比其他选择更重要，有多少大学生毕业的时候只有华而不实的学位或者是泛泛而谈的专业正是因为他们没有做到当断则断呢？举棋不定、优柔寡断让他们丧失了采取行动的机会。</p></li><li><p><span class="under0"><strong>通常，无所作为就像坐在一辆停着的汽车上转动方向盘。你有转过停着的汽车的方向盘吗？这并不容易。但是，当车子开起来的时候再去转方向盘就容易多了。然而，我们中很多人都坐在自己生活上的“车库”里，坐在停着的汽车的方向盘后面，拼命地左右转动着方向盘，试图在我们已经被抛出行车道之前确定应该前进的方向。更好的做法是立刻上车，发动它，这样至少你在某些方向上前进着。</strong></span></p></li><li><p>有时候，当你完全不确定要做什么的时候，最好的行动就是做一些事情，然后在前进途中再调整方向。有时候，这是前进的唯一方法。如果你一直停在原地，你就会因为从没见过而不知道需要在哪里左转。只有开始做一些事情的时候，你才能预测自己将来要采取的一切行动，评估哪些可能是错的。</p></li><li><p><span class="under0"><strong>事实上，你在职业生涯中做出的许多关键决策很大程度上是以财务状况为基础的。身为软件开发人员，你也同样受此影响。这里的一点知识就足以让你受益良久。</strong></span></p></li><li><p><span class="under0"><strong>在整个职业生涯中，如果你工作30年，每两周领一次薪水，那么你一共会领780次薪水。如果你工作40年，则会领1040次薪水。这期间你怎样支配这些薪水将会决定你工作多长时间、你退休时能攒多少钱，甚至会决定你能不能退休。重要的是，你要了解每个月自己的钱都花哪儿了，并且清楚这些钱是为你所用了还是阻碍了你的未来发展。在本章中，我们会探讨一些与收入相关的关键的财务概念，这有助于你更好地管理你的钱财，也能以与以前略有不同的方法来思考财务问题。</strong></span></p></li><li><p><span class="under2"><strong>问题在于，我们中大多数人在对待钱的问题上，都是只看眼前，而不是长远打算。我们总在盘算这个东西这个月会花多少钱，而不是算总共会花多少钱。</strong></span></p></li><li><p>事实证明，赚钱多并不能让一个人在财务上更精明。那些从我朋友那里获得短期贷款的医生和律师们，受困于短期思维，和我在职业生涯早期保有相同的心态。他们靠薪水过活，因为每个月他们都花光自己赚到的那么多钱。</p></li><li><p><span class="under0"><strong>他们挣的越多，花的也越多。因为他们觉得理所应当，所以他们会透支所有信用去买更大的房子、更好的汽车。</strong></span></p></li><li><p><span class="under0"><strong>还有另一种思维方式，不会让你挣得多花得也多。你可以建立长远的理财思维，考虑物品的实际开销，而不是根据你每个月的收入多少来确定花销多少。这种思维方式基于“资产与负债”的概念。关于资产和负债的定义有很多种，这里我给出了自己的定义。所谓资产，是指实用价值高于维护成本的东西。也就意味着，一样东西如果有资格被定义为“资产”，必须能够带来比自身成本更高的价值。但是，负债的含义则恰恰相反。所谓负债，是指成本高于带来的价值的东西。也就是说，要保有“负债”，你不得不往外掏钱，但是你永远也拿不回来与自己掏出的钱一样多的钱。</strong></span></p></li><li><p>关于资产，一个清晰的例子就是你持有的每个季度派发一次红利的股票。持有股票并不会花你分文，但是只要一直持有，每3个月它就会给你带来一次收入。股票自身的价格会上涨也可能会下跌，但是按照我的定义，只要它能带来红利，它就是资产。</p></li><li><p><span class="under0"><strong>我们都需要一个居住的地方。不论是买还是租，我们都要为住房付钱。即使你有自己的房子，你还是要继续为住房付费，因为你在使用原本可以出租的资源。所以，当你拥有一套房子的时候，本质上你不过就是从自己手里租了一套房子而已。如果你的房子的价钱高于你所需要的基本住所的费用，那么房子对你而言就是负债。对大多数人来说，房子都是一笔巨大的负债，因为他们无法从中获得额外的实用价值，房子给他们的价值不会比租房高。</strong></span></p></li><li><p><span class="under0"><strong>车也是如此。你只是需要一种代步工具，但是，如果你在购车上的开销不能给你带来比购买便宜车更高的价值，那么它就是负债。</strong></span></p></li><li><p>他声称，任何能把钱装在你口袋里的东西才是资产，而任何需要你把钱从口袋里掏出来的东西都是负债。依这样的观点行事肯定错不了。</p></li><li><p>关键是要意识到，某些东西你买来后能够给你带来产出，或者产生的价值会高于你最初的投资，而别的东西则会消耗你的收入，或者不值你为它花的钱。当你持有这样的观点之后，你的思维方式可能更倾向于长期而不是短期。<span class="under0"><strong>你每张工资单上的钱都是辛苦工作赚来的，但是每个月资产为你赚的钱则不需要辛苦工作。如果你用自己工作赚来的钱去购买不需要辛苦工作就能够增值的资产，那么你最终只需要做相同或更少的工作就能赚到更多的钱。如果你每个月把自己工作赚来的钱花在负债上，则会背道而驰，你被迫更辛苦地工作去赚更多的钱，以便继续支付保有这些负债的费用。</strong></span></p></li><li><p><span class="under0"><strong>即使没什么资产也别担心，其实大多数人都没有。</strong></span></p></li><li><p>也就在那一天，我深刻地意识到，要想有朝一日真正成为富人，我不仅要学会“节流”——不把自己的薪水浪费在负债上，还要学会“开源”——拿出薪水中的很大一部分进行投资，让这些资产帮我赚更多的钱。</p></li><li><p><span class="under0"><strong>你的薪酬谈判能力很大程度上受声望的影响。想想看，著名的运动员或电影明星，他们的名声带来的谈判能力有多强？同样的原理也适用软件开发人员或任何其他领域。你的名字越为人所知，你在谈判时掌握的主动权也就越大。</strong></span></p></li><li><p>那么，怎样才能打造自己在软件开发领域的名气呢？对某些人来说，这是要看机遇，但对大多数软件开发人员来说，这需要仔细的规划和策略。我强烈建议软件开发人员打造个人品牌，并积极地营销自己。</p></li><li><p>如果在预审面试时被直接问及期望薪酬是多少，那就给出相同的答复，就说这取决于贵公司的整体薪酬方案，包括福利。他们可能会说明福利都有哪些，或者可能会说明他们只是需要一个大体的数值。在这种情况下，你应该试着尽可能绕过问题，问下面这样的一系列问题。</p></li><li><p><span class="under0"><strong>但要确保该范围的最小值略高于你心里价位的最低值。</strong></span></p></li><li><p>一旦有offer在手，你几乎总是会想还价。还价的数额由你决定，不过我强烈建议还价的数额要充分满足自己的胃口。你可能会认为提一个与他们报价接近的数目更有可能得到满意的反馈，但是一般情况下这种做法往往会适得其反。还是选择较高的价码作为还价吧</p></li><li><p>一定要清楚自己值什么价钱。尽可能详细地研究一下自己求职的公司的薪酬范围，研究一下与你申请的职位类似的职位的薪酬范围。尽管并不一定总是靠谱，但你还是可以利用一些网站来获得此类信息。你对自己薪酬的调查工作做得越好，谈判起来就越容易。如果你能说出准确的数额范围和统计数据，表明自己要求的薪酬相当合理，就会处于有利地位。</p></li><li><p>要求这样的薪酬的理由绝对不是“我需要这么多钱”。没人在乎你需要什么。相反，你要说清楚自己为什么值这个价钱，你能给公司带来什么好处。你可以讲一下自己对之前的雇主们的贡献，以及为什么付给你你要求的薪水是一笔很好的投资。</p></li><li><p>期权从根本上说就是赋予你在未来</p></li><li><p>某个日期之前以固定价格购买一定数量股票的选择权。但你也可以购买另一种让自己在未来某个日期之前以固定价格出售一定数量股票的选择权。这种期权能让你在股价下跌的时候也赚钱，与附录B中讨论的卖空股票类似。</p></li><li><p><span class="under0"><strong>为什么要投资房地产？与持有股票相比，房地产投资上手更难、所需资金更多，那为什么它还是优质投资？可能听起来有些莽撞，但我建议投资房地产的最大原因就是稳定性。毫无疑问，你看过房地产价格大幅波动，所以会对此说法表示怀疑，让我对此进行解释。尽管房地产价格可能会大幅波动，但是我建议投资的是可租赁房产。这种房产的稳定的收入就是——租金。</strong></span></p></li><li><p><span class="under0"><strong>因此，即使物业本身的总价会大幅涨跌，但是，只要你愿意经受波动并且长期持有，瞄准租金收入而不是房产价格上升，这笔投资就是非常坚实而稳健的。我自己就经历了几次史上最严重的房地产危机而毫发无损。</strong></span></p></li><li><p>聪明的房地产投资（不是投机）始于认识到房地产投资是一项长期投资。如果你相信自己可以通过倒卖房产或者低价购买抵押房产而快速致富，那你终究会自食恶果。</p></li><li><p>要执行这一战略，第一步就是房地产市场的学习。在房地产投资领域，购入房产的时候最赚钱，而非出售房产的时候。你能找到的交易越好，你的起点就会更好。还记得我们曾经讲过股市的流动性很强吗？房地产市场与之相反。流动性强的市场通常效率很高，这就意味着，股票市场的定价很悬殊的场景并不多。</p></li><li><p>我经常在没有现场看房的情况下给卖家发报价，快速测试卖家的反应，以确保自己抢在别人之前抓住一笔好交易。我几乎总是开出一个极低的报价，低到让我的房地产中介都不好意思向对方提出。有时候，卖家会接受这个报价，或者他们会还一个比我这个报价略高一点点的价格。</p></li><li><p>最后，在你购买了房产之后，我的建议是物业管理要到位。我强烈反对自己管理租赁房产。在我看来，在这方面不值得投入精力，并且让人头疼。每个月我花的最值钱的钱就是请物业管理公司打理我的租赁房产。</p></li><li><p><span class="under0"><strong>规划退休计划的关键就是利用逆向思维，精确计算每个月的生活费用，找出办法来确保自己的收入能满足这一要求，同时还留有余地，以备不时之需。</strong></span></p></li><li><p><span class="under0"><strong>那么理论上讲，你也能提前很长时间退休。节约开支可以让你两头受益——在加速存钱的同时，也让存下来的钱能更经花。简而言之，为退休攒钱最有效的方法就是搞清楚如何缩减每个月的开支。不用投资、不用工作也不必祈求加薪，没有什么比勤俭持家更能让你获益良多。勤俭节约，才能细水长流。</strong></span></p></li><li><p>一旦算出自己退休以后每个月的生活开销是多少，当你的“被动收入”达到每月所需的生活开销的时候，你就可以正式退休了。所谓被动收入，就是不用工作就能获得的收入。你必须确保被动收入会随着通货膨胀而增加——这也是说房地产是一个很好的投资选择的主要原因。</p></li><li><p>要提前退休，你需要找出一种方法来构建超过你每月开支数额的被动收入来源，并且需要能够保证自己的收入能冲抵通货膨胀。你不能把100万美元都用来购买年收益率只有2%的美国国债，并且还乐此不疲。你也许能够每年以很低的风险或者毫无风险地赚到2万美元，不过通货膨胀最终会吞噬你的原始资本和利润。</p></li><li><p><span class="under0"><strong>但是投资房地产并不是产生满足你退休所需的被动收入的唯一途径。你可以选择购买高收益率的股票，股票升值的时候足以对抗通胀。你也可以创立或者购买知识产权，获取版权收入。这可以是专利、音乐作品、书籍，甚至是电影剧本。你可以购买一家公司，或者创建自己的公司，最终将其转手给别人打理，而你只需要从剩余利润中分一杯羹。如你所想，所有这些产生被动收入的投资方法都伴随着巨大的风险，所以你一定要多管齐下。达成上述这些被动收入来源中的任何一个都是艰难的，所以如我所说，只有准备好付出成功所需的辛苦工作，才能选择这条路。</strong></span></p></li><li><p><span class="under0"><strong>要加速这一进程，有三种主要方法。首先，我们已经谈过了，削减开支。买最小的房子或者租最小的公寓，或者免费跟你的父母住在一起，要通过各种手段做到这一点。买辆二手车，或者干脆过无车生活。切断有线电视，不要外出吃饭，买旧家具用。不只是节俭，关键还要便宜！你的生活开支越少，每个月能省下来用于投资的钱越多。（我跟你说过的，这并不容易。）</strong></span></p></li><li><p><span class="under0"><strong>在你能犯的财务错误里，最大的莫过于背上债务。不幸的是，我们似乎已经被培养得对“背上债务是正常的”观点欣然接受，经常看不到债务对我们生活的坏处和破坏性有多强。</strong></span></p></li><li><p>关于这一点，我们之前已经谈及一二，但一般来说债务都是不好的，因为债务完全与好的一面——靠你的钱获得利益——背道而驰。<span class="under0"><strong>当你身背债务的时候，通常会靠自己的钱去支付利息。这就意味着，别人可能通过你的开销致富。</strong></span></p></li><li><p>假设你以年利率5%的贷款买了一辆标价3万美元的车，要在6年内还清贷款。在这6年期间，除了3万美元的本金之外，你还要支付4786.65美元的利息。所以，这辆车最后花掉你34786.65美元。实际上，这辆车的花费比这还要多。你为这辆车花费的4786.65美元的利息本可以为你赚钱。你本可以靠这些钱获得利益的，而不是白白地用来支付利息。算出确切的数额有点儿难，但如果你把每个月用于支付利息的钱投到一项年收益5%的项目上，那么6年下来用于支付利息的这4786.65美元的回报大约是2000美元。因此，事实上，这笔债务可能花了你近7000美元。</p></li><li><p><span class="under0"><strong>但是，在所有与债务有关的错误中，最大的一个就是不必要的债务，也就是说，在不需要欠债的时候欠债。这里我还是用购车贷款的例子，因为贷款买车是人们犯的最大错误。人们很容易就走进一家汽车经销店，买一辆新车，让自己背上不必要的债务。</strong></span></p></li><li><p>问题在于，这么做完全是颠倒顺序。通常，我们是按照相反的顺序做事的。不妨这样想想。贷款买车本质上是先买车再为买车攒钱。当你这么做的时候，买每样东西你都要付更多钱。</p></li><li><p>通过这样做，你买车的时候实际上获得了折扣而不是多付钱，因为你为买车积攒的钱随着时间推移会给你而不是别人累积利息</p></li><li><p>尽管债务被我描绘的很丑陋，但这并不代表所有的债务都是不好的。如果你能利用债务赚到的钱比为这一债务支付的利息多，这样的债务就是好的。</p></li><li><p>买房子并不总是比租房好，但在一些市场上，根据不同的利率，举债买房会让你有利可图，因为你会省掉付房租的钱。</p></li><li><p><span class="under0"><strong>背负债务的底线就是确保在背上债务之前，这笔债务实际上是一笔投资，它将为你产生的回报高于你为这笔债务所支付的利息。只有在绝对紧急的情况下，才可以背上不产生盈利的债务。</strong></span></p></li><li><p>在讲述我的故事之前，我要先明确自己对“退休”的定义，因为不同人对它的看法会有很大的不同。我说的“退休”并非指这样的景象——玩着沙狐球，在乡村风格的餐厅吃着早餐和晚餐，享受早到的优惠等。（尽管我今天早上确实在BobEvans[1]吃的早餐。）我说的退休也不是终年坐在热带沙滩上喝着玛格丽特鸡尾酒——尽管也不排除这种可能性。我无法想象无所事事的退休生活。显然，我现在并不是无所事事，我正在写这本书。<span class="under0"><strong>相反，我把退休定义为“自由”，具体而言，即财务自由——一种不会囿于财务状况被迫用自己别无选择的方式将自己的时间花费在不合心意的事情上的能力。</strong></span></p></li><li><p>大约就是在这个时候，房地产市场开始暴跌——艰难时刻降临。很多投资房地产的朋友都惊慌失措，纷纷抛售自己的房产。幸运的是，我的所有房产都是以30年期固定利率贷款购买的，所以房价下跌并没有真正影响到我。当然，我的房产价值缩水不少，但是我的按揭贷款没变、房租收入没变，又有什么关系呢？</p></li><li><p>在任何给定的时间，都是一方在追另一方在跑。只要双方偶尔切换一下角色其实就没问题了。但是，如果一个人总是在追，另一个人就会跑得越来越远。</p></li><li><p>畏惧失败似乎是大多数人的本能。人都喜欢做自己擅长的事情，逃避做那些自己不能胜任的或是缺乏技能的事情。我们似乎与生俱来就畏惧失败。甚至连我3岁的女儿都害怕失败。我妻子教她读书时，她的进步明明很大，但是你能看得出来当她读到不熟悉的字时，她读的声音会很轻；对认识的字，她会很有自信地大声读出来。给她一个具有挑战性的词汇或者一些与她的能力不匹配的任务，她会说：“妈妈，你来读。”幼小的她也倾向于放弃而不是去尝试。在大多成年人身上这种现象会被放大。大多数人在面对重大挑战时，或者有直接或间接失败可能性的情况时，都会逃避这种情况发生。当你在夜总会选择避免与体重300磅、可能会痛打你一顿的大猩猩一样的家伙搏斗时，这个做法是说得过去的，但当你面对一个上台演讲的机会或者学习一门新的编程语言时，害怕失败就说不过去了，在这种情况下，就算失败也不会对你有实质性的伤害。</p></li><li><p><span class="under0"><strong>我认为，对“失败”性质的误解还会助长这种对个人价值伤害的恐惧感。我们都被告之，并且倾向于认为，失败是一件不好的事情。我们没有看到，失败的阴影中暗含着一线曙光，我们只把失败看作是终点——失败这个词本身暗示着死胡同、绝望的终点，而不是通往成功之路上的一个暂时壁垒。</strong></span></p></li><li><p><span class="under0"><strong>失败不同于被打败。失败是暂时的，被打败是永恒的。失败是那些碰巧发生在你身上的——你不能完全控制它。被打败却是你可以选择的——是对失败的某种程度的接受。要实现不畏惧失败，第一步就是真正意识到失败不是终点——除非你选择把它看作是终点。生活不易，你随时都会被击垮，但是否要重新站起来却完全取决于你自己。它取决于你是否决定为自己最值得拥有的东西战斗，取决于你是否要享受获得成功后的喜悦和乐趣，大多数情况下，它来自于战胜困难的成就感。</strong></span></p></li><li><p><span class="under0"><strong>大多数伟大的人取得的最大成功与他们所经历的最大失败只有一步之遥。”</strong></span></p></li><li><p>你不能把别人说的话都当作福音。没有人可以垄断真理。现实中，很大程度上，正是你自己发现了真理。这并不意味着你可以忽视这世界上的公认真理、只管自行其是，<span class="under0"><strong>但这意味着你可以决定你想要过怎样的生活，你该怎样去生活。</strong></span></p></li><li><p>股票就是一家公司所有权的百分比。如果一家公司想要在股市上公开上市，那么它必须先注册成立为股份制公司。注册成立之后，公司就成为一个法人实体。于是从本质上说，公司就拥有了许多人类的属性。一家公司可以拥有不动产以及其他财产，签署法律协议，获得信贷，起诉或者被起诉。各个国家和地区对法人实体责权利的规定都制定了各种各样的法律。那么，为什么一家企业要成为股份制公司并在股票市场上卖出自己的股份呢？最大的原因是为了筹集资金。当一家股份制公司首次在股市销售股票时（销售股票也被称作“交易”），这个过程被称为首次公开发行（InitialPublicOffering，IPO）。在首次公开发行中时，公司可以卖出自己一定比例的股份</p></li><li><p>以筹集资金。例如，如果某家公司上市发行100万股，每股售价10美元，那么该公司在IPO时可以募集到1000万美元的资金。企业出售股份以获取资金这笔钱可以用来进一步拓展公司业务，例如，雇用更多的员工、购买设备，甚至是收购其他公司。最棒的一点就是，这笔钱还不需要偿还。公司现在由股东掌控，有关公司的重大决策将由股东投票表决——一个股东（无论个人或实体）如果拥有公司的多数股份，那么他就拥有公司的控股权，即控制该公司</p></li><li><p>指数就是挑选一批个股来测量股市</p></li><li><p>整体表现的工具。在美国股市，最广为人知的指数就是道琼斯工业平均指数（DowJonesIndustrialAverage），通常简称为道琼斯指数，它是在收集并计算了总部设在美国的30家大型上市公司股价之后得出的指数。收看道琼斯指数之后你就可以得出基本的结论：股市在上涨还是在下跌。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS内存溢出</title>
      <link href="/2019/10/29/JavaScript-heap-out-of-memory-by-node/"/>
      <url>/2019/10/29/JavaScript-heap-out-of-memory-by-node/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>随着项目的越来越大, 最近开始遇到项目在build的时候, 报错<code>JavaScript heap out of memory</code>。</p><hr><h3 id="内存溢出"><a href="#内存溢出" class="headerlink" title=" 内存溢出 "></a><strong> 内存溢出 </strong></h3><p><code>nodejs</code> 默认限制了最大可使用的内存大小,<code>nodejs V8</code>引擎在 64 位机器上默认限制使用内存最大不超过 1.7GB，超过这个限制官方建议尝试优化为多线程方式。</p><p><span class="under0"><strong> 解决办法可以是增加 nodejs 可使用的最大内存大小，也可以从降低程序内存消耗的角度入手。</strong></span></p><hr><h3 id="解决方法"><a href="#解决方法" class="headerlink" title=" 解决方法 "></a><strong> 解决方法 </strong></h3><h4 id="修改max-old-space-size"><a href="#修改max-old-space-size" class="headerlink" title=" 修改max_old_space_size "></a><strong> 修改max_old_space_size </strong></h4><p>更改环境变量</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># windows</span><br><span class="line"><span class="keyword">set</span> NODE_OPTIONS=--max_old_space_size=4096</span><br><span class="line"></span><br><span class="line"># mac/linux</span><br><span class="line">export NODE_OPTIONS=--max_old_space_size=4096</span><br></pre></td></tr></table></figure><p>修改<code>package.json</code>的<code>script</code>脚本,如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev&quot;: &quot;NODE_ENV=development node --max-old-space-size=4096 index&quot;,</span><br></pre></td></tr></table></figure><h4 id="降低程序内存消耗"><a href="#降低程序内存消耗" class="headerlink" title=" 降低程序内存消耗 "></a><strong> 降低程序内存消耗 </strong></h4><p>比如配置<code>webpack</code>关闭<code>sourceMap</code></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://lzw.me/a/angular-javascript-heap-out-of-memory.html" target="_blank" rel="noopener">nodejs 执行失败报错 “JavaScript heap out of memory” 的解决办法</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>检验中文的正则表达式</title>
      <link href="/2019/10/29/all-chinese-regular-expressions/"/>
      <url>/2019/10/29/all-chinese-regular-expressions/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近在表单中文检验的时候, 碰到了一个问题，比较诡异。用户名中带有<code>䶮</code>字,检查不是中文。做下记录。</p><hr><p>最初正则是这样写的:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([\\u4E00-\\u9FA5]|·)*$/</span><br></pre></td></tr></table></figure><p>但是某个用户名字中带有<code>䶮</code>字, 被认为不是中文。</p><p>使用以下的正则即可:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^([\\u4e00-\\u9fa5\\u4dae\\uE863]|·)*$/</span><br></pre></td></tr></table></figure></p><p><span class="under0"><strong> \u4dae\uE863 分别匹配的是 䶮; 因为后面的两个字会因为有些编码器的版本问题而无法匹配到. </strong></span></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://blog.csdn.net/pigaps/article/details/50174571" target="_blank" rel="noopener">匹配全部中文的正则表达式</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS函数前面的一元运算符</title>
      <link href="/2019/10/13/The-unary-operator-in-front-of-the-js-function/"/>
      <url>/2019/10/13/The-unary-operator-in-front-of-the-js-function/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在改祖传代码的时候，我发现代码中有的地方，在函数表达式前面加了一个<code>!</code>。其实这个<code>!</code>就是让这个函数变成了自执行函数表达式，从函数声明转换成了函数表达式。</p><hr><p>比如我们有这样一个函数</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br></pre></td></tr></table></figure><p>这是一个函数声明,函数是不能执行的。除非将该函数赋值为一个表达式,函数表达式是可以执行的。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br><span class="line">a();</span><br></pre></td></tr></table></figure><p>除了上面那样执行，我们还可以写成如下这样的自执行函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>)&#125;());</span><br><span class="line">(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>)&#125;)();</span><br></pre></td></tr></table></figure><p>其实<code>!</code>或者前函数前面加一个一元运算符，也是讲一个函数声明转为成一个函数表达式</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">!<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br><span class="line">-<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br><span class="line"># 甚至可以写成如下</span><br><span class="line"><span class="literal">true</span> &amp;&amp; <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br><span class="line"><span class="number">0</span> , <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;</span><br></pre></td></tr></table></figure><p>回到文章开头提到的问题，我看到的祖传代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">+<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;<span class="built_in">console</span>.log(<span class="string">'1111'</span>);&#125;()</span><br></pre></td></tr></table></figure><p><code>function() {console.log(&#39;1111&#39;);}</code> 是一个函数声明,前面加上<code>+</code>,就成了一个表达式。后面再加上一个<code>()</code>,就成了立即执行函数。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://swordair.com/function-and-exclamation-mark/" target="_blank" rel="noopener">function与感叹号</a></li><li><a href="https://blog.csdn.net/ForMyQianDuan/article/details/51888965" target="_blank" rel="noopener">javascript 函数前面有加号，叹号的意思</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>判断是PC还是移动端</title>
      <link href="/2019/10/13/Judge-is-pc/"/>
      <url>/2019/10/13/Judge-is-pc/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近上班真的很累，很多东西都没有时间来整理出来。最近写了一些h5,本文是对判断用户是PC还是移动端的记录。</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">isPc() &#123;</span><br><span class="line">  <span class="keyword">const</span> userAgentInfo = navigator.userAgent;</span><br><span class="line">  <span class="keyword">const</span> Agents = [<span class="string">"Android"</span>, <span class="string">"iPhone"</span>, <span class="string">"SymbianOS"</span>, <span class="string">"Windows Phone"</span>, <span class="string">"iPad"</span>, <span class="string">"iPod"</span>];  </span><br><span class="line">  <span class="keyword">const</span> filtrArrLenthg = Agents.filter(<span class="function"><span class="params">item</span> =&gt;</span> userAgentInfo.indexOf(item) &gt; <span class="number">0</span>).length;</span><br><span class="line">  <span class="keyword">return</span> filtrArrLenthg === <span class="number">0</span> ?  <span class="literal">true</span> : <span class="literal">false</span>;</span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><p>上面代码片段，所做的工作就是拿到用户的<code>userAgentInfo</code>,判断这个字符串中是否有移动端的信息,如果有,则是移动端,反之就是PC。</p><p>比如我在chrome浏览器中<code>navigator.userAgent</code>的值就是<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;Mozilla/5.0 (Macintosh; Intel Mac OS X 10_13_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.90 Safari/537.36&quot;</span><br></pre></td></tr></table></figure></p><p>不能命中<code>Agents</code>的任何一个元素, 所以就是PC。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://segmentfault.com/q/1010000013079292" target="_blank" rel="noopener">判断客户端是PC还是移动端的问题？</a></li><li><a href="https://blog.csdn.net/kongjiea/article/details/17612899" target="_blank" rel="noopener">js判断客户端是pc端还是移动端</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《投资最重要的事》</title>
      <link href="/2019/09/15/reading-notes-of-most-important-thing-to-invest-in/"/>
      <url>/2019/09/15/reading-notes-of-most-important-thing-to-invest-in/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近读了《投资最重要的事》,本文做些记录。</p><hr><ul><li><span class="under0"><strong>“对于价值投资者来说，必须以价格为根本出发点。”杰出投资的要素是什么？价格是主要因素。“我们的目标不在于‘买好的’，而在于‘买的好’。”“以低于价值的价格买进，这才是投资的真谛。”</strong></span></li></ul><ul><li><p>屡屡观察到一些信奉价值投资理念的基金经理，在投资那些周期性股票时，与常人的行为相反。他们总是在那些行业平均市盈率高企时选择买入其中的某些股票，而在它们的平均市盈率降下来后，却卖出那些股票。表面上看，他们是买在高点（高市盈率），卖在低点（低市盈率），其实不然。当行业处于周期低谷的时候，即使是最好的公司，它也可能面临经营压力，盈利难求，市盈率高企。但如果该行业即将复苏，那么基金经理应该在行业复苏前、市盈率高企时，买入行业里最好的公司的股票，等待行业复苏带来的公司盈利大幅增长，从而收获股价的大幅上涨。要知道，周期性行业公司股价的上涨，大部分都是盈利上涨带来的，而不是股票估值水平提升带来的。</p></li><li><p><span class="under0"><strong>买的好的“好”字，指的是价格要好，要以低于价值的价格买入好公司的股票。但我们一定不要教条地认为，买入的价格低就是买的好，上面的例子告诉我们，有时候买的高也是可以买的好的。</strong></span>价值<br>投资者与成长投资者的一个区别是，价值投资者是防守型投资，他们不主动出击去追捧股票，他们相信时间的价值，愿意寂寞地等待价值的回归，并坚信最终的荣耀属于价值投资者 。</p></li><li><p><span class="under0"><strong>杠杆不会使投资变得更好，也不会提高获利概率。它只是把可能实现的收益或损失扩大化，这个方法还引入了全盘覆灭的风险。”</strong></span></p></li><li><p><span class="under0"><strong>我们一般都认为只有高风险才能带来高收益，其实大部分时候我们承受了高风险，得到的却是资产的损失。</strong></span></p></li><li><p>“投资艺术有一个特点不为大众所知。门外汉只需些微努力与能力，便可以取得令人尊敬（即使并不可观）的结果。但是如果想在这个容易获取的标准上更进一步，则需要更多的实践和智慧。”</p></li><li><p>格雷厄姆给出的答案非常精辟：“要想在证券市场上取得投资成功，第一要正确思考，第二要独立思考。”</p></li><li><p>巴菲特强调投资成功必须将用脑和用心相结合：“要想在一生中获得投资的成功，并不需要顶级的智商、超凡的商业头脑或秘密的信息，而是需要一个稳妥的思考框架作为决策的基础，并且有能力控制自己的情绪，使其不会对这种思考框架造成侵蚀。格雷厄姆的书能够准确和清晰地提供这种思考框架，但对情绪的约束是你自己必须做到的。”</p></li><li><p>霍华德·马克斯说得更加直白：“记住，你的投资目标不是达到平均水平；你想要的是超越平均水平。因此，你的思维必须比别人更好——更强有力、水平更高。其他投资者也许非常聪明、消息灵通并且高度计算机化，因此你必须找出一种他们所不具备的优势。你必须想他们所未想，见他们所未见，或者具备他们所不具备的洞察力。你的反应与行为必须与众不同。简而言之，保持正确可能是投资成功的必要条件，但不是充分条件。你必须比其他人做得更加正确……其中的含义是，你的思维方式必须与众不同。”</p></li><li><p><span class="under0"><strong>巴菲特一再重复的他一生最基本的投资原则：在别人恐惧时贪婪，在别人贪婪时恐惧。</strong></span></p></li><li><p>我简要概括如下：<br>  1.最重要的不是盲目相信股市总是有效或者总是无效，而是清醒认识股市相当高效而且相当难以击败，只有真正的高手才能长期战胜市场。<br>  2.最重要的投资决策不是以价格为本，而是以价值为本。<br>  3.最重要的不是买好的，而是买得好。<br>  4.<strong>最重要的不是波动性风险，而是永久损失的可能性风险。 </strong><br>  5.最重要的巨大风险不在人人恐惧时，而在人人都觉得风险很小时。<br>  6.最重要的不是追求高风险高收益，而是追求低风险高收益。<br>  7.最重要的不是趋势，而是周期。<br>  8.最重要的不是市场心理钟摆的中点，而是终点的反转。<br>  9.最重要的不是顺势而为，而是逆势而为。<br>  10.最重要的不是想到逆向投资，而是做到逆向投资。<br>  11.最重要的不是价格也不是价值，而是相对的性价比，即安全边际。<br>  12.最重要的不是主动寻找机会，而是耐心等待机会上门。</p></li><li><p>学习价值投资的艺术，和学习打网球的艺术一样，和学习钢琴、绘画等艺术也一样，大师讲的道理相当简单，大师的基本动作也非常简单，但是要做好、做得非常熟练则相当不简单，需要长期坚持练习和实践。所以即使是巴菲特这样伟大的投资大师， 80 多岁了，还在持续不断地阅读很多好的投资书籍，最近他读了而且推荐大家读的就是霍华德·马克斯的这本书。</p></li><li><p>我视其为信条，它在我的投资生涯中扮演着类似宗教信仰的角色。我信奉这些事情，它们是指引我保持正确轨道的路标。我所提供的信息，是我认为最为恒久的信息。我相信，它们对现在、对未来，都具有重要意义。</p></li><li><p><span class="under0"><strong>简化投资行为不是我的目标。事实上，我最想表达的是投资有多么复杂。试图简化投资的人带给受众的是极大的损害。我会照常对待收益、风险、过程。无论任何时候，我对特定资产类别和策略的讨论只是为了阐明我的观点。</strong></span></p></li><li><p>重要的是，理念源自持之以恒的警醒。你必须要知道世界上正在发生什么，也必须要知道这些事件将导致什么结果。只有这样，你才能在类似的情况再次出现时吸取教训。大多数投资者做不到这一点——它比一切都重要——因此，他们注定将屡次遭受经济繁荣与萧条周期之害。</p></li><li><p>如果你的阅读范围广泛，那么你可以向有着伟大思想的人学习——对我来说最重要的有：查理·埃利斯的《输球游戏》（《金融分析家杂志》， 1975 年 7 ~ 8 月刊）、约翰·肯尼斯·加尔布雷斯的《金融狂潮简史》（纽约：维京出版社， 1990），以及纳西姆·尼古拉斯·塔勒布的《随机漫步的傻瓜》[ 1]。他们都对我的思想产生了巨大影响。</p></li><li><p><span class="under0"><strong>凡事应力求简单，但不应过分简单。</strong></span></p></li><li><p>投资，就像经济一样，更像是一门艺术而非科学。这意味着它可能会有一些棘手。</p></li><li><p>其实，关键问题是你想实现什么样的目标。人人都能取得平均投资表现——只需投资一个每样都买一点儿的指数基金即可，这会带给你所谓的“市场收益”——仅与市场表现相当。但是成功的投资者想要的更多，他们希望战胜市场。</p></li><li><p><span class="under0"><strong>我认为这就是成功投资的定义：比市场及其他投资者做得更好。</strong></span></p></li><li><p><span class="under0"><strong>这里的潜台词是，你必须要有耐心，给自己足够的时间——你要的不是短期暴利，而是长期稳定的收益。</strong></span></p></li><li><p>层次思维”。准投资者们可以学习财会课程，广泛阅读相关书籍，幸运的话还能得到对投资有着深刻了解的人士的指导。但是，他们中只有一小部分人能够获得维持高于平均水平的结果所需的非凡洞察力、直觉、价值观念和心理意识。想要做到这一点，需要拥有第二层次思维。</p><p>  <span class="under0"><strong>第一层次思维说：“这是一家好公司，让我们买进股票吧。”第二层次思维说：“这是一家好公司，但是人人都认为它是一家好公司，因此它不是一家好公司。股票的估价和定价都过高，让我们卖出股票吧。”</strong></span></p><p>  第二层次思维深邃、复杂而迂回。<span class="under0"><strong>第二层次思维者要考虑许多东西： </strong></span></p><p>  •未来可能出现的结果会在什么范围之内？<br>  •我认为会出现什么样的结果？<br>  •我正确的概率有多大？<br>  •人们的共识是什么？<br>  •我的预期与人们的共识有多大差异？<br>  •资产的当前价格与大众所认为的未来价格以及我所认为的未来价格相符的程度如何？<br>  •价格中所反映的共识心理是过于乐观，还是过于悲观？<br>  •如果大众的看法是正确的，资产价格将会发生怎样的改变？如果我是正确的，资产价格又会怎样？</p></li><li><p>结果很简单：为了取得优异的投资结果，你必须对价值持有非常规性的并且必须是正确的看法。这并不容易。</p></li><li><p>因为你的表现是偏离常态的，所以你的预期——甚至是你的投资组合——都必须偏离常态，你必须比人们的共识更加正确。与众不同并且更好——这是对第二层次思维做出的相当不错的描述。</p></li><li><p>不过好消息是，第一层次思维者的广泛存在使得第二层次思维者的可得收益增加了。为了持之以恒地获得优异的投资回报，你必须成为第二层次思维者中的一员。</p></li><li><p>有效市场假说最重要的成果就是“你无法战胜市场”的结论。这一结论不仅被芝加哥学派的市场观点从逻辑上予以支撑，</p></li><li><p>而且通过对共同基金的表现的研究得到了巩固——业绩出类拔萃的基金寥寥无几。</p></li><li><p><span class="under0"><strong>我们时不时会经历一切顺利的时期，更高风险的投资看似是在兑现承诺，提供着更高的收益。这样的平和期使人们相信，为了获取更高的收益，他们唯一要做的就是进行高风险投资。但是，他们忽略了某种在繁荣期容易被忘却的东西：这不可能是对的，因为如果可以指望通过高风险投资来实现高收益的话，那些投资也就算不上是高风险了。</strong></span></p></li><li><p>以外汇为例。是什么决定了一种货币相对于另一种货币的变动呢？是未来增长率与通货膨胀率。对于任何一个个人来说，他对这些东西所知道的会不会系统性地多于其他人？可能不会。如果没有人比其他人知道得更多，那么就不会有人在货币交易中获得高于平均水平的风险调整后收益。</p></li><li><p><span class="under0"><strong>但是，证明市场价格永远正确是不可能的。事实上，如果你仔细想想刚刚列出的 4 个假设，就会发现其中有一点特别脆弱：客观性。人类不是冰冷的计算机器。相反，大多数人都会受贪婪、恐惧、妒忌及其他破坏客观性、导致重大失误的情绪的驱动。</strong></span></p></li><li><p>有一句关于扑克的谚语说得好：“每场游戏中都有一条鱼。如果你玩了 45 分钟还没弄清谁是鱼，那么就是你了。”毫无疑问，这句话在无效市场投资中同样适用。 </p></li><li><p>在有效与无效的大辩论中，我的结论是，没有一个市场是完全有效或无效的，它只是一个程度问题。我衷心感谢无效市场所提供的机会，同时我也尊重有效市场的理念，我坚信主流证券市场已经足够有效，以至于在其中寻找制胜投资基本上是浪费时间。</p></li><li><p>马克斯的观察所带来的一个必然结论是，投资者应该寻找未被做出完全有效定价的市场或资产，而不是去追逐完全无效的市场。</p></li><li><p>总而言之，无效性是杰出投资的必要条件。试图战胜一个相当有效的市场就像掷硬币一样：你能够期待的最好结果是 50%的胜算。</p></li><li><p>这一点非常重要，也解释了为什么专业投资者战胜市场那么困难。大多数专业投资者都迫不及待地想要提高业绩，他们会避免投资那些不受追捧的、近期并没有太大吸引力的证券。</p></li><li><p><span class="under0"><strong>投资若想取得切实的成功，对内在价值的准确估计是根本出发点。没有它，投资者任何取得持续投资成功的希望都仅仅是希望。</strong></span></p></li><li><p>乔尔·格林布拉特：沃伦·巴菲特说过，<strong> 最好的投资课程要教好两件事：如何估计投资的价值以及如何看待市场价格走势。</strong></p></li><li><p><span class="under0"><strong>以低于内在价值的价格买进，以更高的价格卖出。</strong></span>当然，在此之前，你最好对内在价值是什么有一个明确的认识。对我来说，对价值的准确估计是根本出发点。</p></li><li><p><span class="under0"><strong>随机漫步假说认为，既往股价走势对于预测未来股价没有任何帮助。</strong></span>换言之，价格变动是一个随机过程，与掷硬币相仿。众所周知，在掷硬币的时候，即使已经连续 10 次掷出正面朝上，下一次正面朝上的概率仍然是 50%。</p></li><li><p>对价值投资者来说，资产不是一个因为你认为它具有吸引力（或认为别人会发现它的吸引力）就进行短期投资的概念。它是一种有形实物，应具有可明确的内在价值，如果有以低于内在价值买进的可能，你会考虑这样去做。因此，聪明的投资必须建立在对内在价值的估计之上。估计内在价值时必须严谨，并以所有可用的信息为基础。</p></li><li><p>价值投资追求的是低价。价值投资者通常会考察收益、现金流、股利、硬资产及企业价值等财务指标，并强调在此基础上低价买进。<span class="under0"><strong>价值投资者的首要目标是确定公司的当前价值，并在价格足够低时买进公司证券。</strong></span></p></li><li><p>成长型投资介于枯燥乏味的价值投资和冲动刺激的动量投资之间。其目标是识别具有光明前景的企业。从定义上来看，它侧重于企业的潜力，而不是企业的当前属性。</p></li><li><p>两种主要投资流派之间的差异可以归结如下：<br>  •价值投资者相信当前价值高于当前价格，从而买进股票（即使它们的内在价值显示未来的增长有限）。<br>  •成长型投资者相信未来价值的迅速增长足以导致价格大幅上涨，从而买进股票（即使它们的当前价值低于当前价格）。因此，<span class="under0"><strong>在我看来，真正的选择似乎并不在价值和成长之间，而在当前价值和未来价值之间。成长型投资赌的是未来可能实现也可能无法实现的公司业绩，而价值投资主要建立在分析公司当前价值的基础之上。</strong></span></p></li><li><p>在价值投资和成长型投资之间没有明确的界限，二者均要求我们应对未来。价值投资者将企业的潜力视为增长，“以合理价格增长”的成长型投资则明确表达了对价值的敬意——只是一个程度问题。无论如何，我认为完全可以这样说：成长型投资关注未来，而价值投资强调当前，但不可避免地要面对未来。</p></li></ul><ul><li><p>与价值投资相比，成长型投资的重心是寻找制胜投资。然而，如果找不到制胜投资，为何还要忍受揣测未来所带来的不确定性呢？毫无疑问的是：预见未来比看清现在更加困难。因此，成长型投资者的平均成功率会更低，但是一旦成功，得到的回报有可能会更高。如果能够准确预测出哪家公司将推出最好的新药、最强大的计算机或最卖座的电影，那么由此所带来的收益是相当可观的。<span class="under0"><strong>总而言之，如果判断正确，成长型投资的上涨潜力更富戏剧性，而价值投资的上涨潜力更有持续性。我选择的是价值投资法。在我的书里，持续性比戏剧性更重要。</strong></span></p></li><li><p><span class="under0"><strong>首先，价值投资取决于对价值的准确估计。如果没有对价值的准确估计，那么对于投资者来说，任何取得持续成功的希望都仅仅是希望。</strong></span>如果没有对价值的准确估计，那么你可能会高价买进你以为的特价股。如果你的买价过高，那么只有在价值出乎意料地显著提高、市场强劲或辨别能力更差的买家（我们曾称之为“博傻”）出现时，你才能脱身。</p></li><li><p>不仅如此。<span class="under0"><strong>如果你已经选定价值投资法进行投资，并且已经计算出证券或资产的内在价值，接下来还有一件重要的事：坚定地持有。因为在投资领域里，正确并不等于正确性能够被立即证实。</strong></span></p></li><li><p>价值投资者所能期待的最好结果是知道资产的准确价值，并在价格较低时买进。但是今天这样做了，并不意味着明天你就能赚钱。对价值的坚定认知有助于你从容面对这种脱节。</p></li><li><p>不仅如此。<span class="under0"><strong>如果你已经选定价值投资法进行投资，并且已经计算出证券或资产的内在价值，接下来还有一件重要的事：坚定地持有。因为在投资领域里，正确并不等于正确性能够被立即证实。</strong></span></p></li><li><p>乔尔·格林布拉特：我总是告诉我的学生们：“如果你对股票价值的估计是准确的，我保证市场也会认可你的意见。”我从不告诉他们这个时限是几周还是几年。格雷厄姆说，长期来看，市场是一个“称重仪”，即使它在短期内常常表现得情绪化。以我对美国股市的了解，市场要恢复“正确”，通常来说两到三年的时间就足够了。<span class="under0"><strong>但如果你每天都看报纸，那日子可就难熬了。</strong></span></p></li><li><p><span class="under0"><strong>但是，不要寄希望于马上成功。事实上，你往往会发现自己买进的时机是在持续下跌的中途，很快你就会看到损失。正如一句最伟大的投资谚语告诉我们的，“过于超前与犯错是很难区分的”。</strong></span></p></li><li><p>乔尔·格林布拉特：除非你是真正的抄底（几乎是不可能的），否则在进行投资之后的某个时刻，你终将经历下跌。</p></li><li><p>我们在微观经济学入门课程中学过，需求曲线是向右下倾斜的；随着价格的上涨，需求数量下降。换言之，价格较高时，需求量较少，价格较低时，需求量较大。这就是商品打折时商店的营业额更高的原因。需求曲线在大多数情况下都起作用，但在投资领域里似乎远非<span class="under0"><strong>远非如此。在投资领域里，当自己持有的证券价格上涨时，许多人会更加喜爱它们，因为他们的决策得到了验证；而当证券价格下跌时，他们开始怀疑自己的决策是否正确，对它的喜爱也随之减少。这使得持有并继续以更低的价格买进股票（投资者称之为“向下摊平”）变得相当困难，特别是当有证据表明下跌幅度将会比较大的时候。如果价格在每股 60 美元的时候你喜欢它，那么当价格跌到每股 50 美元的时候，你应该会更喜欢它……价格跌到每股 40 美元、 30 美元的时候，你对它的喜爱应该会进一步加深。</strong></span></p></li><li><p>不懂利润、股利、价值或企业管理的投资者完全不具备在正确的时间做正确的事情的决断。<strong> 当周围的人都在炒股赚钱的时候，他们不可能懂得：股票价格已经过高，因此要抵制抵制进场的诱惑。</strong>市场自由落体的时候，他们也不可能有坚定地持有股票或以极低的价格买进股票的自信。</p></li><li><p>估价正确却不坚定地持有，用处不大。估价错误却坚定地持有，后果更糟。这句话表明恰到好处是多么困难。</p></li><li><p><span class="under0"><strong>给多数投资者（当然，其中大部分是业余投资者）一剂“真话”血清，然后问他：“你用的是什么投资方法？”答案必然是：“我在寻找能够上涨的东西。”但是，对利润的追求必须建立在更加有形的东西之上。在我看来，最佳选择就是基本面所反映出来的内在价值。对内在价值的准确估计是进行稳定、冷静、有利可图的投资的根本基础。当价值投资者买进定价过低的资产、不停地向下摊平并且分析正确的时候，就能获得最大收益。因此，在一个下跌的市场中获利有两个基本要素：你必须了解内在价值；同时你必须足够自信，坚定地持股并不断买进，即使价格已经跌到似乎在暗示你做错了的时候。哦，对了，还有第三个基本要素：你必须是正确的。</strong></span></p></li><li><p>对于价值投资者来说，必须以价格为根本出发点。<span class="under0"><strong>事实屡次证明，无论多好的资产，如果买进价格过高，都会变成失败的投资。同时，很少有资产会差到以足够低的价格买进都不能转化为成功投资的地步。</strong></span></p></li><li><p>克里斯托弗·戴维斯：不过，投资者应该警惕衰退的风险，它会令低价股转化为价值陷阱。</p></li><li><p><span class="under0"><strong>没有任何资产类别或投资具有与生俱来的高收益，只有在定价合适的时候它才具有吸引力。</strong></span></p></li><li><p><span class="under0"><strong>乔尔·格林布拉特：在做每一个投资决策时，个人投资者都需要思考“最重要”的一点。如果没有考虑价格，无论一项投资听起来是多么诱人，你都不可能知道它是否就是一项好的投资。</strong></span></p></li><li><p>还记得我在上一章提到过的“漂亮 50 投资”吗？在高峰时期，许多大公司的市盈率（股价与每股收益之间的比率）高达 80 ~ 90。（相比之下，战后股票的平均市盈率一般在 15 上下。）这些公司的追随者中似乎没有谁为估价过高而担忧。随后，在短短几年间，一切全都变了。 20 世纪 70 年代初，股市降温，在外部因素如石油禁运以及不断增长的通货膨胀的笼罩下，局势变得更加黯淡，漂亮 50 股票暴跌。 80 ~ 90 的市盈率在几年之间就跌到了 8 ~ 9，这意味着投资美国最好公司的投资者赔掉了他们 90%的资金。人们买的是大公司的股票不假，但他们买进的价格却是错误的。</p></li><li><p>橡树资本管理公司常说，“好的买进是成功卖出的一半”，意思是说，我们不花太多时间去考虑股票的卖出价格、卖出时机、卖出对象或卖出途径。如果你买得足够便宜，那么最终这些问题的答案是不言而喻的。</p></li><li><p>乔尔·格林布拉特：许多价值投资者都不擅长到底在何时应该卖出（很多人卖出过早）。不过，知道何时买进能够弥补因为卖出过早而导致的许多错误。</p></li><li><p>如果你对内在价值的估计是正确的，那么随着时间的推移，资产价格将会与资产价值趋于一致。</p></li><li><p><span class="under0"><strong>乔尔·格林布拉特：把这句话记在心里：当市场出现短期的波动时，最重要的事情之一，就是记得市场终会回归</strong></span></p></li><li><p><span class="under0"><strong>相信我，再没有比在崩盘期间从不顾价格必须卖出的人手中买进更好的事了。</strong></span></p></li><li><p>你不能以从强制卖家手中买进或把证券卖给强制买家为生；强制卖家和强制买家不是任何时候都有的，他们只在罕见的极端危机和泡沫时期才会出现。</p></li><li><p><span class="under0"><strong>既然从强制卖家手中买进是世界上最美妙的事，那么成为强制卖家就是世界上最悲惨的事。</strong></span>所以，把自己的事情安排好，保证自己能够在最艰难的时期坚持住（不卖出）是非常重要的。要做到这一点，既需要长期资本，又需要强大的心理素质。</p><p>  <span class="under0"><strong>对于个人投资者来说，这意味着如果你在市场上投入过多或重仓某一特定投资对象，而你不能忍受向下波动期间所带来的痛苦，那么你就可能会成为马克斯之前所提到的强制卖家。</strong></span></p></li><li><p>确定价值的关键是熟练的财务分析，而理解价格、价值关系及其前景的关键，则主要依赖对其他投资者的思维的洞察。投资者心理几乎可以导致证券在短期内出现任何定价，而无论其基本面如何。</p></li><li><p>乔尔·格林布拉特：还是那句话，正如巴菲特所说，最好的投资课会教人如何估价以及如何看待市场价格。认识到价格在短期内会严重偏离价值是关键，了解投资心理，并在出现偏离时从中获利是难点。</p></li><li><p>最重要的学科不是会计学或经济学，而是心理学。</p></li><li><p><span class="under0"><strong>投资是一场人气竞赛，在人气最旺的时候买进是最危险的。在那个时候，一切利好因素和观点都已经被计入价格中，而且再也不会有新的买家出现。</strong></span></p></li><li><p>最大的失败——1960 年的漂亮 50 股票， 1999 年的互联网股票或 2006 年的次贷工具——都有着某种共同之处：找不到缺点。有多种方式可以描述当时的情况：“完美定价”、“深受追捧”、“无懈可击”。但是，没有什么是完美的，事实证明缺点无处不在。当你为完美买单的时候，并没有得到你所预期的，相反，在真相大白的时候，你所付出的高价将会令你暴露于风险之下。这是真正的最危险的事情之一。</p></li><li><p><span class="under0"><strong>最安全、获利潜力最大的投资，是在没人喜欢的时候买进。假以时日，一旦证券受到欢迎，那么它的价格只可能向一个方向变化：上涨。</strong></span></p></li><li><p>因此，为了自保，你必须投入时间和精力去了解市场心理。</p></li><li><p>从买进证券的那一天起你就必须了解，基本面价值只是决定证券价格的因素之一，你还要设法让心理和技术为你所用。</p></li><li><p>霍华德·马克斯：<span class="under0"><strong>“投资中的人性之道”是至关重要的。它是这样一个领域：卓越的投资者必须保证自身的卓越，因为如果你像其他人一样，会对心理因素所带来的非理性繁荣做出反应，那么财务分析也不能够保证会带来卓越的表现。</strong></span>因此，我的第三个主题与控制情感和自我相关。实现这一点相当困难，因为在投资环境中，一切因素随时都会令投资者在错误的时间做出错误的抉择。<span class="under0"><strong>我们都是人，所以我们面临的挑战是——如何在相同的条件之下表现得比其他投资者要好。</strong></span></p></li><li><p>所有泡沫都是从重要的事实开始的：<br>  •郁金香美丽而罕见（在 17 世纪的荷兰）。<br>  •互联网将改变世界。<br>  •房地产能抵御通货膨胀，并且可以永久居住。</p><p>  几个聪明的投资者发现了（或预见到）这些事实，因此投资获利。其他人随后明白过来——或者只注意到人们在赚钱，于是他们跟风买进，抬高了资产的价格。但是，随着价格进一步上涨，投资者受到发横财的可能性的刺激，对价格是否公平想得越来越少。这是对我曾经描述过的现象的一种极端再现：某种东西价格上涨时，人们的喜爱程度本应下降，但在投资中，他们的喜爱程度往往会加深。</p></li><li><p>股票背后的利好可能是真的，但是，如果你买进的价格过高，仍然会损失。<br>  •利好以及似乎人人都享有的丰厚利润，最终会让那些起初抵制的人投降并买进。<br>  •当最后一个人坚持不住变成买家的时候，股票或市场就到“顶”了。到顶时间往往与基本面的发展无关。<br>  •“价格过高”和“下一步将下跌”完全是两个意思。证券价格可能会过高并且维持相当长的一段时间……甚至会进一步上涨。<br>  •无论如何，价值最终会发挥作用。</p></li><li><p>在泡沫时期，对市场势头的迷恋取代了价值和公平价格的观念，贪婪（加上在其他人似乎大发横财时旁观的痛苦）抵消了所有本应占据主导地位的智慧。总而言之，我相信从真实价值出发的投资方法是最可靠的。</p></li><li><p><span class="under0"><strong>•以低于价值的价格买进。在我看来，这才是投资的真谛——最可靠的赚钱方法。以低于内在价值的价格买进，然后等待资产价格向价值靠拢，这并不需要多么特殊的才能，只需市场参与者清醒过来面对现实即可。当市场运作正常的时候，价值就会强势拉升价格。</strong></span></p></li><li><p>正如凯恩斯指出的，“市场延续非理性状态的时间比你撑住没破产的时间要长”。<span class="under0"><strong>低于价值买进并非万无一失，但它是我们最好的机会。</strong></span></p></li><li><p>霍华德·马克斯：害怕看错的恐惧：即使判断是正确的，但最终使之实现所需要的时长对许多投资新手来说也是一个不小的打击。拥有对内在价值的坚定看法有一个最重要的作用——坚定信念：它支撑你坚守下去，直到市场认可你的意见并正确定价资产。</p></li><li><p>投资只关乎一件事：应对未来。没有人能够确切地预知未来，所以风险是不可避免的。因此，应对风险是投资中一个必不可少的（我认为是根本的）要素。找到有潜力上涨的投资并不难。如果你能找到足够多，那么你可能已经在朝着正确的方向前进了。<span class="under0"><strong>但是，如果不能正确地应对风险，那么你的成功是不可能长久的。第一步是理解风险。第二步是识别风险。最后的关键性一步，是控制风险。风险问题复杂而重要，我会拿出三章来对它进行全面的剖析。</strong></span></p></li><li><p><span class="under0"><strong>因此，除了确定自己是否能够容忍伴随投资而产生的绝对风险，投资者的第二项工作是确定投资收益是否与所承担的风险相称。显然，收益只是投资时需要考虑的一个方面，而风险评估则是必不可少的另一个方面。</strong></span></p></li><li><p>在考虑投资结果时，收益仅仅代表收益，评估所承担的风险是必需的。收益是通过安全的还是有风险的投资工具得到的？是通过固定收益证券还是股票得到的？是通过投资大型、成熟的企业得到的，还是通过投资小型、不稳定的企业得到的？是通过投资流动性股票和债券还是流动性欠佳的私募股权得到的？是利用杠杆还是没有利用杠杆得到的？是通过集中化投资组合还是多元化投资组合得到的？</p></li><li><p><span class="under0"><strong>尤其是在经济繁荣时期，你会听到太多的人在说：“高风险投资带来高收益。要想多赚钱，就去承担更高的风险吧。”然而，靠更高风险的投资来获得更高的收益是绝对不可能的。原因何在？很简单：如果更高风险的投资确实能够可靠地产生更高的收益，那么它就不是真的高风险了！</strong></span></p></li><li><p>正确的表述是：为了吸引资本，风险更高的投资必须提供更好的收益前景、更高的承诺收益或预期收益，但绝不表示这些更高的预期收益必须实现。</p></li><li><p>传统的风险–收益曲线图（图 5. 1）具有误导性，它虽然表现了风险与收益之间的正相关关系，却没有表现出其中所涉及到的不确定性。它对承担更高的风险便能赚更多钱的坚定暗示，已经给许多人造成了极大的痛苦。</p></li><li><p>我认为，人们拒绝投资的主要原因是他们担心亏本或收益过低，而不是波动性。在我看来，“我需要更多的上涨潜力，因为我怕赔钱”，比“我需要更多的上涨潜力，因为我怕价格会出现波动”要合理得多。是的，我确信“风险”就是——首要的是——损失的可能性。</p></li><li><p>但是，每一位不愿放弃优异表现、选择追求不同于指数投资目标的投资者，都会经历业绩欠佳的时候。事实上，因为许多最好的投资者强势坚持自己的方法（又因为没有任何方法是永远奏效的）所以最好的投资者也可能会出现业绩不佳的时候。特别是在狂热时期，训练有素的投资者是不愿冒跟风的风险的。（例如 1999 年的沃伦·巴菲特和朱利安·罗伯逊。在那一年，业绩落后是一种勇气的象征，因为它代表着对科技泡沫的拒绝。）</p></li><li><p>乔尔·格林布拉特： 2000 年以后，在投资业绩名列前矛的投资经理中，有 79%的投资经理至少有三年的时间排名处于后段。（来源：戴维斯投资顾问公司）大多数投资者会追逐热门基金，而不会跟随短期业绩不佳的投资经理。</p></li><li><p><span class="under0"><strong>首先，基本面弱未必导致损失风险。基本面弱的资产——业绩欠佳企业的股票，投机级债券或选址错误的建筑——如果买进的价格足够低，也能成为一项非常成功的投资。</strong></span></p></li><li><p>灾难有可能发生在任何没有花费时间和精力去理解自己投资组合的基本过程的人身上。</p></li><li><p><span class="under0"><strong>投资者倾向于将动人的题材和时髦的概念与高潜在收益联系在一起。他们还期望从近期表现不错的股票上得到高收益。这些热门投资可能暂时会实现人们的期望，但是毫无疑问，它们也蕴含着高风险。它们被人群的兴奋推高到我称之为“盲目跟风”的地步，它们提供了持续高收益的可能性，但同时也存在低收益或负收益的可能性。</strong></span></p></li><li><p><span class="under0"><strong>理论认为，高收益与高风险相关，因为前者为补偿后者而存在。但是，务实的价值投资者的感觉恰恰相反：他们相信，在以低于价值买进证券的时候，高收益、低风险是可以同时实现的。同样，价格过高则意味着低收益、高风险。</strong></span></p></li><li><p><span class="under0"><strong>总而言之，前瞻性研究表明，多数风险都具有主观性、隐蔽性和不可量化性。</strong></span></p></li><li><p>训练有素的投资者对于在特定环境中出现的风险是有自己的判断的。他们判断的主要依据是价值的稳定性和可靠性，以及价格与价值之间的关系。其他东西也会纳入他们的考虑范围，但其中的大部分可归结为以上两个因素。</p></li><li><p>风险意味着可能发生的事件多于确定发生的事件。”</p></li><li><p><span class="under0"><strong>我们必须全盘考虑，而不只是考虑最有可能实现的一种情况。在投资者忽略了极低概率事件的情况下，容易出现一些最重大的损失。</strong></span></p></li><li><p><span class="under0"><strong>布鲁斯曾经做过精彩的总结：“概率与结果之间存在巨大的差异。可能的事情没有发生（不可能的事情却发生了）向来如此。”这是你应该知道的关于投资风险最重要的事之一。</strong></span></p></li><li><p><span class="under0"><strong>乔尔·格林布拉特：在考虑投资组合时要牢记，极低概率事件会影响到你的大部分投资。</strong></span></p></li><li><p>但是，正态分布假设的是尾部事件极少发生，而金融事件的分布（由具有情感驱动极端行为倾向的人所决定）或许应被理解为具有“肥”尾。因此，当大规模抵押贷款违约发生时，本来被认为不可能发生在抵押贷款相关性金融工具上的事件开始频繁地发生。</p></li><li><p>迪姆森的话可以解释为：未来有多种可能性，但结果却只有一个。</p></li><li><p>收益本身（尤其是短期收益）不能说明投资决策的质量。评估收益时必须相对于实现收益所承担的风险。然而，风险是无法衡量的。当然，风险不可能以某一时刻“所有人”的话为基础来衡量。只有老练的、经验丰富的第二层次思维者才能判断出风险。</p></li><li><p><span class="under0"><strong>风险只存在于未来，而未来会怎样是不可能确定的……而当我们回顾过去时，是不存在不确定性的，但是这种确定性并不表示产生结果的过程是确定而可靠的。在过去的每种情况下，都存在发生许多事件的概率，最终只有一个事件发生的事实低估了实际存在变化的可能性。</strong></span></p></li><li><p>•预测倾向于围绕历史常态而聚集，仅容许微小的变化……<span class="under0"><strong>关键是，人们通常会预测未来与过去相似，而对潜在的变化估计不足。</strong></span></p></li><li><p>•我们常听说对“最坏情况”的预测，但是，结果往往显示预测的程度还不够坏。</p></li><li><p>或许“最坏情况”只意味着“我们过去见过的最坏情况”，但它并不代表未来事件不可能更糟。 2007 年的恶劣形势超出了许多人的最坏情况预测。</p></li><li><p>人们高估了自己判断风险的能力，以及对未曾见过的投资机制的理解能力。</p></li><li><p><span class="under0"><strong>最后，也是最重要的一点，大多数人将风险承担视为一种赚钱途径。承担更高的风险通常会产生更高的收益。市场必须设法证明实际情况似乎就是这样，否则人们就不会进行高风险投资。但是，市场不可能永远都以这样的方式运作，否则高风险投资的风险也就不复存在了。一旦风险承担不奏效，它就会完全不起作用，直到这时人们才会想起风险究竟是怎么回事。</strong></span></p></li><li><p>霍华德·马克斯：了解不确定性：投资需要我们对未来做出决策。通常，我们会假设未来与过去有相似之处。但并不意味着，结果的分布永远是相同的。小概率和极小概率事件也是有可能发生的，难以预测的结果会迅速地出现（并走向极端）。对不确定性的错误估计是使投资者陷入困境的一大原因。</p></li><li><p><span class="under0"><strong>杰出的投资需要创造收益和控制风险并重，而识别风险是控制风险的绝对前提。</strong></span></p></li><li><p>风险意味着即将发生的结果的不确定，以及不利结果发生时损失概率的不确定。接下来的重要步骤是描述风险识别的过程。</p></li><li><p><span class="under0"><strong>霍华德·马克斯：最危险的事：最大的风险并不是来自于低质量或高波动性，而是来自于买价过高。这并不是假想的风险，而是活生生的现实。</strong></span></p></li><li><p><span class="under0"><strong>买价过高既加大了风险又降低了收益。</strong></span></p></li><li><p>但是，在市场兴衰的某些时间点上，人们通常会忘记这一事实而承担过多的风险。<span class="under0"><strong>简而言之，在牛市中——通常是在牛市已经持续一段时间的时候——人们往往会说：“风险是我的朋友。承担的风险越多，收益就越大。给我更多的风险吧。”</strong></span></p></li><li><p>霍华德·马克斯：最危险的事：过高的价格源于投资者过于乐观的预期，投资者过于亢奋的情绪往往是由于缺乏风险规避的意识。懂得风险规避的投资者清楚亏损的隐患，并且会以合理的价格来补偿其所承担的亏损隐患。当投资者未能采取足够的风险规避措施时，他们就需要承担过高的价格。</p></li><li><p><span class="under0"><strong>普遍相信没有风险本身就是最大的风险，因为只有当投资者适当规避风险时，预期收益中才会包含风险溢价。希望将来的投资者能畏惧风险并要求风险溢价，而我们应继续警惕他们做不到这一点。</strong></span></p></li><li><p>最危险的事：“普遍相信没有风险则是最大的风险。”本段开头的这句话很有价值。它给出了一个极好的例子，强调了投资者的行为方式创造了他们所面临的风险。无忧无虑才是真正最危险的事。</p></li><li><p>《养老金与投资》杂志（ 2007 年 8 月 20 日）有一个恰当的比喻：“吉尔·弗瑞斯顿是举国公认的雪崩应对专家……<span class="under0"><strong>她知道这样一种道德风险：更好的安全装备可能吸引登山者承担更多的风险——实际上会令他们更不安全。”与赚钱机会类似，市场的风险水平源自参与者的行为，而不是证券、策略和机构。无论市场结构被设计成什么样子，只有在投资者行为审慎时，风险才会较低。</strong></span></p></li><li><p>总而言之，关于风险控制的神话很少有成真的。风险是不能被消除的，它只能被转移和分散。令这个世界看起来风险更低的进展通常是虚幻的，由此呈现出的美好景象往往有导致风险增高的倾向。这些都是我们在 2007 年得到的重要教训。</p></li><li><p><span class="under0"><strong>投资风险主要源自过高的价格，过高的价格往往源自过度乐观、怀疑不足以及风险规避不足。可能的基本因素包括安全投资的低预期收益、高风险投资近期的良好表现、强劲的资金流入以及贷款的易得性。关键在于理解到底是什么在影响这类事件的发生。</strong></span></p></li><li><p>投资者在过去的 4 年半里度过了无忧无虑的幸福时光，但这并不意味着会永远这样。按照惯例，<span class="under0"><strong>我会用沃伦·巴菲特的一句话收尾：“只有当潮水退去的时候，你才会发现谁在裸泳。”盲目乐观的人请注意：永远涨潮是不可能的。</strong></span></p></li><li><p><strong> 当投资者的行为改变市场时，风险就加大了。投资者哄抬资产价格，促使本应在未来出现的资产升值出现在当下，预期收益因此而降低。随着心理的强化，更加大胆而无畏的投资者不再要求充足的风险溢价。最终的讽刺性结果是，随着承担新增风险的人越来越多，承担新增风险的回报却不断缩水。</strong></p></li><li><p>最危险的事：我很赞同“风险的反常性”这个提法。当投资者感到风险高时，他们就会试图去降低风险。但是，当投资者认为风险低时，他们就会创造出危险的条件。市场是动态的而不是静止的，它的行为表现是反直觉的。</p></li><li><p><span class="under0"><strong>“任何价钱我都不会买进——所有人都知道风险太大了。”在生活中我听到过很多这样的话，而它已经为我提供过最好的投资机会……事实上，大众误解风险至少像他们误解收益一样频繁。认为某种东西过热而无法应对的共识几乎总是错的，事实通常是它的对立面。我坚信，最大的投资风险存在于最不容易被察觉的地方，反之亦然：<br>  •在所有人都相信某种东西有风险的时候，他们不愿购买的意愿通常会把价格降低到完全没有风险的地步。广泛的否定意见可以使风险最小化，因为价格里所有的乐观因素都被消除了。</strong></span></p></li><li><p>当人人都相信某种东西没有风险的时候，价格通常会被哄抬至蕴含巨大风险的地步。没有风险担忧，因此也就不提供或不要求风险承担的回报——“风险溢价”。这可能会使受人们推崇的最佳资产成为风险最高的资产。</p></li><li><p><span class="under0"><strong>存在这一矛盾的原因是大多数投资者认为风险与否的决定因素是质量而不是价格。但是，高质量资产也可能是有风险的，低质量资产也可能是安全的。所谓的质量，不过是为资产所付出的价格问题……因此，狂热的公众意见不仅是潜在的低收益的源泉，还是高风险的源泉。</strong></span></p></li><li><p>克里斯托弗·戴维斯：我同意——很多危险源于“质量”。首先，“高质量投资”有一种不正确的假设或暗示，并由此产生了另一种不正确的假设或暗示：进行“高质量投资”的风险更低。正如马克斯在这里一针见血地指出，“高质量”公司经常进行高价交易，以致成为糟糕的投资。<span class="under0"><strong>其次，“高质量”这个词带有一种倾向性，包含着后见之明的偏见或“成见效应”。通常，人们提到的“高质量”公司指的是过去表现良好的公司。未来往往大不相同。许多曾经被认为是“高质量”、“基业长青”的公司早已不复存在！因此，投资者应避免使用“质量”这个词。</strong></span></p></li><li><p>在我看来，杰出投资者之所以杰出，是因为他们拥有与创造收益的能力同样杰出的风险控制能力。</p></li><li><p><span class="under0"><strong>但是在我看来，杰出投资者是那些承担着与其赚到的收益不相称的低风险的人。他们或以低风险赚到中等收益，或以中等风险赚到高收益。承担高风险、赚到高收益不算什么——除非你能坚持很多年，在那种情况下，“高风险”要么并不是真的高风险，要么就是被管理得很好。</strong></span></p></li><li><p>无论风险控制取得怎样的成绩，在繁荣时期是永远也表现不出来的，因为风险是隐蔽的、不可见的。风险——发生损失的可能性——是观察不到的，能观察到的是损失，而损失通常只在风险与负面事件相碰撞时才会发生。</p></li><li><p><span class="under0"><strong>过去没有出现不利环境，不代表不可能出现不利环境，因此，过去没有出现不利环境不代表不需要风险控制，即使结果显示当时可以不必进行风险控制。</strong></span></p></li><li><p><span class="under0"><strong>重要的是要意识到，即使没有发生损失，风险也有可能存在。因此，没有损失并不一定意味着投资组合是安全的。风险控制可以在繁荣时期存在，但它是观察不到的，因为得不到验证，所以风险控制是得不到认可的。只有训练有素、经验丰富的观察家才有可能在繁荣期审视投资组合，并预测它是低风险性的还是高风险性的。</strong></span></p></li><li><p>总而言之：风险控制在繁荣期是观察不到的，但依然是必不可少的，因为由盛转衰是轻而易举的。</p></li><li><p>在这里，这位投资经理的附加价值不是通过在给定风险下获得更高的收益来实现的，而是通过在给定收益下承担更低的风险来实现的。他同样做得不错——甚至也许做得更好。</p></li><li><p>“做得好”的定义有一定的语境，取决于你怎样看待这两幅图。不过，我认为从根本上降低风险是投资取得巨大成功的基础，所以我认为这一概念应得到更多的重视。在牛市充分盈利，同时也要在熊市取得良好业绩，你觉得这种想法怎么样？在取得牛市收益的同时承担低于市场的风险……绝非易事。</p></li><li><p>现在，让我们回到尚未入侵的细菌或没有发生的地震上。优秀的建筑师能够避免建筑缺陷，而糟糕的建筑师会引入建筑缺陷。在没有地震的时候，你无法辨别其中的差异。同样，优秀的投资者获得的收益可能并不比别人高，但在实现同等收益的前提下承担了较低风险（或以相当低的风险实现了稍低于其他人的收益）。当然，在市场平稳或上涨时，我们无从得知投资组合的风险有多大。这就是沃伦·巴菲特所观察到的，除非潮水退去，否则我们无从分辨游泳者中谁穿着衣服，谁又在裸泳。</p></li><li><p><span class="under0"><strong>以较低风险实现与其他风险承担者相同的收益是一项杰出的成就，但在多数情况下，这种微妙而隐性的成就只有经过复杂的判断才能被体会到。</strong></span></p></li><li><p><span class="under0"><strong>在衰退期，风险控制的价值是通过损失减少来体现的，所以风险控制的成本——表现为放弃收益——有可能看起来过高。</strong></span></p></li><li><p>控制投资组合风险是一项非常重要而有价值的工作。</p></li><li><p><span class="under0"><strong>归根结底，投资者的工作是以盈利为目的并聪明地承担风险。</strong></span>能够出色地做到这一点，是最好的投资者与其他投资者之间的区别。</p></li><li><p>多年来我一直在说，高风险资产如果足够便宜，就能成为好的投资。关键在于知道何时会出现这样的结果。很简单：以营利为目的并聪明地承担风险，长期反复成功的事实就是最好的验证。</p></li><li><p><span class="under0"><strong>我要明确一下风险控制与风险规避之间的重要区别。风险控制是规避损失的最佳方法。反之，风险规避则很有可能会连同收益一起规避。</strong></span></p></li><li><p><span class="under0"><strong>我认为，牢记万物皆有周期是至关重要的。我敢肯定的东西不多，但以下这些话千真万确：周期永远胜在最后。任何东西都不可能朝同一个方向永远发展下去。树木不会长到天上。很少有东西会归零。坚持以今天的事件推测未来是对投资者的投资活动最大的危害。</strong></span></p></li><li><p>不过无论如何，我们有信心把握住的概念有两个：<br>  •法则一：多数事物都是周期性的。<br>  •法则二：<strong> 当别人忘记法则一时，某些最大的盈亏机会就会到来。</strong></p></li><li><p>经济会随消费者花费的多少而起落，会对经济因素或外源性事件（地缘政治事件或自然事件）做出情绪化的反应。企业会在周期上行时期待美好未来，从而扩充设备和存货；当经济转而向下时，一切都将变得不堪重负。资本提供者会在经济繁荣期过于慷慨，以低息贷款纵容信贷膨胀，当事态不妙时，他们又把缰绳收得太紧。投资者会在业绩好时高估经济，在遇到困难时低估经济。</p></li><li><p><span class="under0"><strong>无视周期并推算趋势是投资者所做的最危险的事情之一。人们表现得仿佛做得好的企业将永远好下去、业绩高的投资将永远高下去的样子，反之亦然。实际上，相反的行为可能更为正确。</strong></span></p></li><li><p>主要原因。认为缺乏风险规避就是泡沫的必然标志有些过于简单化，但并不为过。另一方面，投资者在市场崩溃的时候会恐惧过度。即使价格已经完全反映了悲观情绪、估价已经低得离谱，过度的风险规避也会导致他们仍然不敢买进。</p></li><li><p>在我的职业生涯初期，一位经验丰富的投资者告诉过我，牛市有三个阶段。在此与读者分享。</p><p>  •第一阶段，少数有远见的人开始相信一切会更好。<br>  •第二阶段，大多数投资者意识到进步的确已经发生。<br>  •第三阶段，人人断言一切永远会更好。</p><p>  霍华德·马克斯：最危险的事：当投资者相信情况只会越来越好的时候，就进入了最危险的阶段。这样的想法毫无意义，但大多数投资者会上当。这就是泡沫产生的原因——反之则会导致崩溃。</p></li><li><p>我总结出了它的对立面——熊市的三个阶段：<br>  •少数善于思考的投资者意识到，尽管形势一片大好，但不可能永远称心如意。<br>  •大多数投资者意识到势态的恶化。<br>  •人人相信形势只会更糟。</p></li><li><p><span class="under0"><strong>这意味着，无论是现在还是以后，市场总会创造机会。在机会较少的市场里，耐心很重要。价值机会终究会被正确地得以体现，通常不会超过一至两年。</strong></span></p></li><li><p><strong> 与贪婪相对应的是恐惧——我们必须考虑的第二个心理因素。</strong>在投资领域，这个词并不代表理性的、明智的风险规避。相反，恐惧就像贪婪一样，意味着过度。因此恐惧更像恐慌。恐惧是一种过度忧虑，妨碍了投资者采取本应采取的积极行动。</p></li><li><p><span class="under0"><strong>霍华德·马克斯：情绪与自负：许多投资的驱动因素是具有可比较性的。如果别人做得更好，高收益也不会令人满意，而如果别人做得更坏，低收益往往就能使人知足。这种比较的倾向是最有害的，强调相对收益而不是绝对收益体现了心理对投资过程的扭曲。</strong></span></p></li><li><p>善于思索的投资者会默默无闻地辛勤工作，在好年份里赚取稳定的收益，在坏年份里承担更低的损失。他们避开高风险行为，因为他们非常清楚自己的不足并经常自省。在我看来，这是创造长期财富的最佳准则——但是，在短期内不会带来太多的自我满足。谦卑、审慎和风险控制路线并不那么光鲜亮丽。当然，投资本不应与魅力搭边，但它往往是一种富有魅力的艺术。</p></li><li><p><span class="under0"><strong>随着定价过高的股票走势更好，或者定价过低的股票持续下跌，正确的做法变得更加简单：卖掉前者，买进后者。</strong></span></p></li><li><p><strong> 得到更多的渴望、<span class="under0">担心错过的恐惧、</span>与他人比较的倾向、群体的影响以及对胜利的期待——这些因素几乎是普遍存在的。因此，它们对大多数投资者和市场都有着深远的影响。结果就是错误——频繁的、普遍的、不断重复发生的错误。</strong></p></li><li><p>现在说科技、互联网和电信即将盛极而衰好比螳臂当车，但我必须告诉你的是，它们已经从巨大的繁荣中受益，应抱着怀疑的态度审视它们。</p></li><li><p>贪婪、兴奋、不理性、丧失怀疑以及忽视价值，令人们在科技泡沫中损失惨重。此外，它还使许多聪明过人、训练有素的价值投资者在泡沫破裂前看起来愚蠢不堪（当然，泡沫最终还是破裂了）。</p></li><li><p><span class="under0"><strong>避免在泡沫中赔钱的关键是，当贪婪和人为错误导致积极因素被高估、消极因素被忽视时，拒绝跟风。做到这一点并不容易，因此弃权的人并不多。同理，对于在暴跌中恐惧过度的投资者来说，关键是避免卖出——也许更恰当的做法是买进。（这一点提醒了我。需要指出的是，泡沫可以自行产生，不一定是崩溃的必然结果，但崩溃一定是泡沫的必然结果。）</strong></span></p></li><li><p><strong> 那么，投资者究竟要如何对待这些促使他们做出愚蠢投资的心理冲动呢？首先，认识它们，这是我们获得克服它们的勇气的第一步。其次，要认清现实。</strong>认为自己对本章中所描述的影响因素免疫的投资者会将自己置于危险境地。如果这些因素对别人的影响足够大到改变整个市场，凭什么它们不会影响你？如果一个牛市强大到可以令成年人无视过高的估价甚至承认永动机的可能性，凭什么它不会对你产生同样的影响？如果一个无限损失的故事恐怖到令别人廉价抛售，又有什么能阻止它不令你做同样的事情？</p></li><li><p>相信我，在别人都在买进、专家态度乐观、上涨理由充分、价格不断飙升、承担最高风险的人不断获得巨额收益的鼎盛期，抵制买进是很难的（卖出更难）。相反，在股市跌入谷底、持股或买进似乎会带来全盘损失的时候，抵制卖出也是很难的（买进更难）。</p></li><li><p>没有这一点，一个投资者便无以立足。内在意义的重要价值在于，它是可以抵挡心理因素对行为造成的影响的唯一方法。那些未能评估公司或安全水平的投资者不会拥有成功的商业投资或前景（除非是走运）。这听起来很简单，但是大多数的投资者都会欠缺。</p></li><li><p><span class="under0"><strong>当价格偏离价值时，坚持做该做的事。</strong></span></p></li><li><p><span class="under0"><strong>一定要记住，当事情看起来“好得不像是真的”时，它们通常不是真的。</strong></span></p></li><li><p><span class="under0"><strong>在别人沮丧地抛售时买进、在别人兴奋地买进时抛售都需要最大的勇气，但它能带来最大的收益。</strong></span></p></li><li><p>我只能用一个词来描述大多数投资者——趋势跟踪者，而杰出投资者恰恰相反。希望到目前为止我已经令你相信，卓越投资需要第二层次思维——一种不同于常人的更复杂、更具洞察力的思维方式。从定义上来看，大多数投资者不具备这种思维能力，因此成功的关键不可能是群体的判断。<span class="under0"><strong>某种程度上来说，趋势、群体共识是阻碍成功的因素，雷同的投资组合是我们需要避开的。由于市场的钟摆式摆动或市场的周期性，所以取得最终胜利的关键在于逆向投资。</strong></span></p></li><li><p>群体错误的逻辑性是明确的，甚至几乎是可以测算的：<br>  •市场会发生剧烈的摆动，从牛市到熊市，从估价过高到估价过低。<br>  •市场走势受群体（人群或大多数人）行为的驱动。</p><p>  <span class="under0"><strong>牛市出现于更多的人想成为买家而不是卖家，或买家比卖家更为活跃的时候。随着人们从卖家转变为买家，或买家活跃度的进一步提高、卖家活跃度的进一步降低，市场开始上涨（买家不占据主导地位，市场就不会上涨）。</strong></span></p></li><li><p>因此，投资成功的关键在于逆势而行：不从众。那些意识到他人错误的人可以通过逆向投资而获利丰厚。</p></li><li><p>“低买高卖”是一句古老的名言，但是被卷入市场周期中的投资者却常常反其道而行之。<span class="under0"><strong>正确的做法应该是逆向投资：在人们冷落时买入，在人们追捧时卖出。</strong></span>“千载难逢”的市场极端情况似乎每隔 10 年左右便会出现一次——这还不够频繁，以至于投资者很难以利用市场极端获利为业。但是，尝试这样去做应该是所有投资方法的重要组成部分。</p></li><li><p>巴菲特和马克斯有一个伟大的观点。<span class="under0"><strong>从长期看来，市场会自动走向正确。但是，在看到长期之前，你必须得在短期内幸免于难。</strong></span></p></li><li><p><span class="under0"><strong>逆向投资并不是一种让你永远稳赚不赔的方法。在大多数情况下，没有值得下注的过度市场。即使市场过度发展，记住，“估价过高”与“明天就会跌”是截然不同的。</strong></span></p></li><li><p>有“人人”都得出“大众是错误的”这一结论的时候。我的意思是，逆向投资本身会变得过于热门，从而有可能会被误以为是群体行为。</p></li><li><p><strong> 最后，仅仅做与大众相反的投资是不够的。考虑到刚刚提到的逆向投资的各种困难，你必须在推理和分析的基础上，辨别如何脱离群体思维才能获利。你必须保证自己在进行逆向投资的时候，不仅知道它们与大众的做法相反，还知道大众错在哪里。只有这样你才能坚持自己的观点，在立场貌似错误或损失远高于收益的时候，才有买进更多的可能。</strong></p></li><li><p>我发现投资最有趣的一件事是它的矛盾性：最显而易见、人人赞同的事，最终往往被证明是错误的。我不是说公认的投资智慧无效。现实更加简单、更加系统化：多数人并不了解产生巨大收益潜力的投资进程。显而易见的投资者共识几乎总是错的……投资背后群体意识的凝聚，往往会消弭其潜在的利润……比如，一项“人人”都认为很好的投资。在我看来，单从定义来讲，它就不可能是这样的。</p></li><li><p><span class="under0"><strong>如果人人都喜欢它，可能是因为它一直表现良好。多数人倾向于认为，迄今为止的优异表现能够预示未来的优异表现。事实上，迄今为止的优异表现往往是因为借用了未来的概念，因此它预示着较差的未来表现。</strong></span></p><p>  如果人人都喜欢它，那么很有可能价格已经高到受人追捧的水平，增值空间可能相对较小。（<strong> 当然，从“估价过高”到“估价更高”是有可能的，但我并不指望这种情况会发生。</strong>） </p><p>  如果人人都喜欢它，那么很有可能这一领域已经被彻底发掘过——资金流入已经过多——便宜货也所剩无几了。 </p><p>  如果人人都喜欢它，一旦群体心理改变并寻求离场，就会面临价格下跌的显著风险。</p></li><li><p>简而言之，杰出投资有两个基本要素：<br>  •看到别人没有看到或不重视的品质（并且没有反映在价格上）。<br>  •将这种品质转化为现实（或至少被市场接受）。</p></li><li><p><span class="under0"><strong>如果你相信别人都相信的故事，你就会和他们做同样的事。通常你会高买低卖。你会爱上无风险高收益的“银弹”神话。你会买进表现良好的股票，卖出表现不佳的股票。你会在崩溃期遭受损失，在恢复期错失机会。换句话说，你会成为一个循规蹈矩而不是标新立异的人，一个趋势追随者而不是逆向投资者。</strong></span></p></li><li><p>霍华德·马克斯：<span class="under0"><strong>害怕看错：不仅需要忍受孤独和不适的处境，而这却是值得庆幸的。通常，当处于钟摆式摆动的极点时，身为大流中的一员才应该需要担心。</strong></span></p></li><li><p>作为逆向投资者，我们的任务就是尽可能谨慎熟练地接住下落的刀子。这也是内在价值的概念如此重要的原因。</p></li><li><p>精心构建投资组合的过程，包括卖出不那么好的投资从而留出空间买进最好的投资，不碰最差的投资。这一过程需要的素材包括：第一，潜在投资的清单；第二，对它们的内在价值的估计；第三，对其价格相对于内在价值的感知；第四，对每种投资涉及到的风险及其对在建投资组合的影响的了解。</p></li><li><p>锡德这句简单的话里包含着两个重要信息。首先，投资的过程必须是缜密且经过严格训练的。其次，相对是必需的。不管价格低迷还是高涨，以及因此所带来的预期收益是高还是低，我们都必须从中找到最佳投资。<strong> 我们改变不了市场，若想参与其中，我们唯一的选择就是从现存的可能性中选择最好的。这就是相对决策。</strong></p></li><li><p><span class="under0"><strong>高质量资产可能划算，也可能不划算，同样，低质量资产也可能划算或者不划算。将客观优点误以为是投资机会的倾向，以及不能正确区分好资产与好交易之间区别的倾向，会令大多数投资者陷入困境。</strong></span></p></li><li><p>在第 10 章中，我以科技股热潮为例，论证了良好的基本观点被转化为高价泡沫的过程。它通常始于一项具有客观吸引力的资产。随着人们重视程度的提高，他们希望拥有这项资产的意愿不断加强，继而资本流入、价格上涨。人们将价格上涨视为这项投资的优点，从而买进更多。其他人开始听说有这样一项资产并加入买家行列，于是上涨势头形成一种不可阻挡的良性循环的表象。通常这是一场人气竞赛，受到人们追捧的资产就是制胜投资。</p></li><li><p>投资。如果这种情况持续的时间足够长、积聚的力量足够大，投资就会变成泡沫。泡沫为善于思考的投资者提供了许多卖出和卖空的机会。</p></li><li><p>便宜货的形成过程很大程度上与之相反。因此，为了找到便宜货，我们必须了解为什么资产会受到冷落。它不一定是客观分析的结果。事实上，多数便宜货的形成过程与分析无关，重要的是考虑它背后的心理因素，以及它的驱动因素：受欢迎程度的变化。</p></li><li><p><span class="under0"><strong>塞思·卡拉曼：一般说来，越不受欢迎或不被看好的，往往都是更好的交易。</strong></span></p></li><li><p><span class="under0"><strong>•它不断下跌的价格通常令第一层次思维者发问：“谁想要它呢？”（一个不断重复的现象是，大多数投资者会根据以往的业绩而不是更可靠的均值回归来预测未来趋势。第一层次思维者倾向于将过去的价格疲软视为负担，而不是资产更为廉价的标志。）<br>•结果，便宜货往往成为极不受欢迎的资产。资本远离或出逃，没有人想得出持有它的理由。</strong></span></p></li><li><p>我们的目标是寻找估价过低的资产。应该到哪里去找呢？<span class="under0"><strong>从具有下列特征的资产着手是个不错的选择：</strong></span><br>  •鲜为人知或人们一知半解的。<br>  •表面上看基本面有问题的。<br>  •有争议、不合时宜或令人恐慌的。<br>  •被认为不适于“正规”投资组合的。<br>  •不被欣赏、不受欢迎和不受追捧的。<br>  •收益不佳的追踪记录。<br>  •最近有亏损问题、没有资本增益的。</p></li><li><p><span class="under0"><strong>耐心等待机会——等待便宜货——往往是最好的策略。</strong></span></p></li><li><p><span class="under0"><strong>在这里我要提醒你：等待投资机会到来而不是追逐投资机会，你会做得更好。在卖家积极卖出的东西中挑选，而不是固守想要什么才买什么的观念，你的交易往往会更为划算。<br>机会主义者之所以买进某种东西，因为它们是便宜货。在价格不低时买进则没什么特别。</strong></span></p></li><li><p><span class="under0"><strong>识别市场环境并做出相应的行动决策是成功投资必不可少的。</strong></span>其他可能的行为包括：<strong> 在没有认清市场的情况下采取行动，在无视市场状况的情况下采取行动，相信我们可以在某种程度上改变市场。这些都是不可取的。结合我们所处的环境适当地投资才是明智之举。</strong></p></li><li><p>“投资是世上最棒的交易，因为你永远不必急着挥棒。你只需站在本垒板上，投手以 47 美元投给你通用汽车，以 39 美元投给你美国钢铁！没有人会被三振。在这里没有惩罚，只有机遇。你可以整日等待你喜欢的投球；当守场员恹恹欲睡时，你便可以快步上前一击命中。”</p></li><li><p>克里斯托弗·戴维斯：再次强调：高价会同时增加风险和降低收益。</p></li><li><p><span class="under0"><strong>买进的绝佳机会出现在资产持有者被迫卖出的时候，在经济危机中这样的人比比皆是。</strong></span></p></li><li><p>我已说过很多次，积极投资管理的真正目标是以低于价值的价格买进。有效市场假说认为我们做不到这一点。它的反对理由似乎很有道理：人们何必以特价卖出某种东西呢，特别是潜在卖家都明智而理性的时候。</p></li><li><p><span class="under0"><strong>在危机中关键要做到远离强制卖出的力量，并把自己定位为买家。为达到这一标准，投资者需要做到以下几点：坚信价值，少用或不用杠杆，拥有长期资本和顽强的意志力。在逆向投资态度和强大资产负债表的支撑下，耐心地等待机会，便能在灾难中收获惊人的收益。</strong></span></p></li><li><p>对细节关注得越多，越有可能获得知识优势。通过勤奋的工作和专业的技术，我们能比旁人知道更多关于个别公司和证券的信息，但想要在对于整个市场和经济的认知上做到这一点则很难。因此，我建议大家要努力做到“知可知”。</p></li><li><p>我不会试图去证明未来无法预知的观点。我们是无法证明否定句的，当然也包括这一结论。</p></li><li><p><span class="under0"><strong>谨慎地对待你自己的预测，至于别人的则要更加小心！</strong></span>我从这章中发现了这个重要的信息，并传授给学生们。大多数人在 20 多岁到 30 岁时对自己的能力过于自信，特别是在预测未来这一方面。</p></li><li><p>保罗·约翰逊：借此，马克斯展示了重要的投资困境。 </p><p>  •多数时候人们会根据既往来预测未来。<br>  •人们不一定是错的：未来的多数时候在很大程度上是既往的重演。<br>  •从这两点出发，可以得出“预测在大多数时间里是正确的”的结论：人们往往会根据既往经验做出通常准确的预测。<br>  •然而，根据既往经验做出的准确预测并不具备太大价值。正如预测者通常会假设未来和过去非常相似一样，市场也会这样做，从而根据既往价格延续性定价。因此，如果未来真的与过去相似，那么赚大钱是不可能的，即使是那些做出准确预测的人。<br>  •然而，未来每隔一段时间就会与过去大不相同。<br>  •此时的准确预测具有巨大价值。<br>  •此时也是预测最难准确的时候。<br>  •某些在关键时刻做出的预测能最终被证实是对的，表明准确地预测关键事件是有可能的，但同一个人持续做出准确预测是不太可能的。<br>  •总而言之，预测的价值很小。</p></li><li><p>坦白地说，我对预测和相信预测的人持保留意见。事实上，我已经想到要为这些人贴一个什么样的标签了。这些年来，我碰到的大部分投资者都是属于“我知道”学派的，很容易辨认。<br>  •他们认为，关于经济、利率、市场的未来趋势以及广受追捧的主流股票的知识，是投资成功必不可少的。<br>  •他们相信这些知识是可以掌握的。<br>  •他们相信自己是能够成功的。<br>  •他们知道许多人也在做同样的努力，但是他们认为人人都能同时成功，或者只有少数人能成功，而他们是其中之一。<br>  •他们很放心地根据自己对未来的看法进行投资。<br>  •他们乐于和别人分享自己的观点，尽管准确预测的价值本应重大到不可能有人愿意无偿赠送的地步。<br>  •作为预测者，他们很少回过头去严格评估自己的预测记录。<br>  哦，对了，还有一件事：最大的问题往往出现在投资者忘记概率与结果的区别的时候——也就是当他们忘记预测限制的时候：<br>  •当他们相信概率分布的形状可知（并且他们知道）的时候。<br>  •当他们假定最可能的结果就是必然结果的时候。<br>  •当他们假定预期结果能准确代表实际结果的时候。<br>  •也许最重要的是，当他们忽略罕见结果发生的可能性的时候。</p></li><li><p>投资者必须回答的一个关键问题是，他们认为未来是否可以预知。<span class="under0"><strong>认为可以掌握未来的投资者会采取武断行动：定向交易、集中仓位、杠杆持股、寄希望于未来的增长——换句话说，即行动的时候不把预测风险考虑在内。另一方面，那些认为不能掌握未来的投资者会采取截然不同的行动：多元化、对冲、极少或者不用杠杆、更强调当前价值而不是未来的增长、高度重视资本结构、通常为各种可能的结果做好准备。</strong></span></p></li><li><p><span class="under0"><strong>也许马克·吐温说得最好：“人类不是被一无所知的事所累，而是被深信不疑的事所累。”</strong></span></p></li><li><p>在投资领域里……周期最可靠。基本面、心理因素、价格与收益的涨跌，提供了犯错或者从别人的错误中获利的机会。这些都是已知的事实。我们不知道一个趋势会持续多久，不知道它何时反转，也不知道导致反转的因素以及反转的程度。但是我相信，趋势迟早都会终止。没有任何东西能够永远存在。</p></li><li><p><span class="under0"><strong>了解未来很困难，但是了解现在没有那么难。我们需要做的是“测量市场温度”。保持警觉和敏锐，我们就能够判断出其他人的行为，并据此判断我们应采取的行动。</strong></span></p></li><li><p>简而言之，我们必须力求了解我们身边所发生的事情的含义。当其他人盲目自信、积极买入时，我们应加倍小心；当其他人不知所措或恐慌性抛售时，我们应该更加积极。</p></li><li><p><span class="under0"><strong>所以看看四周，问问自己：投资者是乐观的还是悲观的？媒体名嘴认为该入市，还是该出市？新型投资产品是被大众欣然接受，还是避之唯恐不及？证券招股和基金上市被视为致富机会，还是潜在陷阱？信贷周期处于资本容易获得，还是难以获得的阶段？市盈率处于历史高位，还是低位？收益率差是收窄的，还是扩大的？这些都是至关重要但并不需要预测的东西。我们能够在现状观察的基础上得到出色的投资决策，而不必猜测未来。</strong></span></p></li><li><p>对善于思考的投资者来说，<span class="under0"><strong>世界上最吓人的几个字——过多的资金追逐过少的交易</strong></span>——恰如其分地形容出了市场状况。</p></li><li><p>很少有战略战术决策不受周围环境影响的领域。我们踩油门的力度取决于道路是空旷还是拥挤。高尔夫球手根据气流选择球杆。人们根据天气变化选择外套。投资行为难道不应受投资环境的影响？很多人根据他们对未来的预测努力调整自己的投资组合。<span class="under0"><strong>但同时大多数人必须承认，未来的能见度并不是很高。这就是为什么我强调要顺应当前现实及其影响，不要寄希望于明确的未来。</strong></span></p></li><li><p>每隔一段时间，就会有一个在不可能或不明朗的结果上下了高风险赌注的人，结果他看起来像一个天才。但我们应该认识到，他之所以能够成功，靠的是运气和勇气，而不是技能。</p></li><li><p>投资领域并不是一个可以预见未来、特定行为总能产生特定结果的有秩序有逻辑的地方。</p></li><li><p><span class="under0"><strong>随机性（或者运气）对结果起着巨大的作用，应区别对待随机事件与非随机事件带来的结果。因此，在评判投资结果是否具有可重复性时，我们必须考虑随机性对投资经理的表现的影响，必须考虑他们的业绩靠的是技能还是单纯的运气。</strong></span></p></li><li><p>短期来看，很多投资之所以成功，只是因为在对的时间做了对的事情。我一直在说，成功的关键在于进取精神、时机和技能，而某些在对的时间有足够进取精神的人不需要太多技能。</p></li><li><p>在市场的任一时间点，获利最多的交易者往往是最适合最新周期的人。这种情况很少发生在牙医或钢琴家身上——因为这是随机性的本质使然。<span class="under0"><strong>可以通过一个简单的方法领会这一点：在繁荣期，承担最高风险的人往往能够获得最高收益，但这并不意味着他们就是最好的投资者。</strong></span></p></li><li><p>决策的正确性无法通过结果来判断，然而人们就是这么做的。好决策指的是当时的最佳决策，而根据定义，此时的未来还是未知数。因此，正确的决策往往是不成功的，反之亦然。</p></li><li><p>在判断投资经理的能力时，大量的观测数据——多年数据——是必不可少</p></li></ul><ul><li><p>多数人承认未来充满不确定性，而他们认为至少过去是已知并且确定的。毕竟，过去已成历史，是绝对的、不可更改的。但是塔勒布指出，已发生事件只是可发生事件中的一小部分。因此，计划或者行动已经奏效的事实，并不一定证明其背后的决策是明智的。</p></li><li><p>也许最终导致决策成功的是一个完全不可能的、纯粹靠运气的事件。在这种情况下，决策——即使已被证实是成功的——也有可能是不明智的，决策的失误会被既往可能发生的诸多其他历史所证实。</p></li><li><p>我记得，自 1963 年进入沃顿商学院后，我最早学到的一件事是，决策的质量并不取决于结果。随后发生的事件导致决策成功或不成功，而这些事件往往出人意料。</p></li><li><p>长期来看，好的决策一定会带来投资收益。然而在短期内，当好的决策无法带来投资收益的时候，我们必须忍耐。</p></li><li><p><span class="under0"><strong>短期收益和短期损失可能都是假象，二者都不是真实的投资能力的必然指标。</strong></span></p></li><li><p><span class="under0"><strong>出奇好的收益往往是出奇坏的收益的另一面。某一年的好收益可能会夸大投资经理的能力，掩盖他所承担的风险。当坏年景紧跟在好年景后面出现时，就会出现令人吃惊的结果。投资者往往会忽视短期收益和短期损失可能都是假象的事实，忽视深度挖掘并理解造成短期收益和短期损失的原因的重要性。</strong></span></p></li><li><p>我们应将时间用在从可知的行业、企业和证券中发现价值上，而不应将决策建立在对更加不可知的宏观经济和大盘表现的猜测上。</p></li><li><p>考虑到我们不能确切地预知未来，我们必须通过坚定持股、分析性认识持股、在时机不佳时减少买入等途径来保持我们的价值优势。</p></li><li><p><span class="under0"><strong>因为大多数结果可能会对我们不利，所以我们必须进行防御性投资。在不利结果下确保生存比在有利结果下确保收益最大化更为重要。</strong></span></p></li><li><p><span class="under0"><strong>为了提高成功机会，我们必须在市场极端情况下采取与群体相反的行动：在市场低迷时积极进取，在市场繁荣时小心谨慎。</strong></span></p></li><li><p><span class="under0"><strong>考虑到结果的高度不确定性，我们必须以怀疑的眼光看待投资策略及其结果——无论好坏——直至它们通过大规模试验的验证。</strong></span></p></li><li><p>特：对于优秀的投资者而言，随着时间的推进，使得他们有了更多的机会去演练自己的技能，长线投资回归可能造成的破坏性概率也会有所缩减。</p></li><li><p>每当朋友们向我咨询投资建议时，我总是先设法了解他们对待风险与收益的态度。没有指定要求泛泛地咨询投资建议，就像问医生要好药却不告诉他你哪里不舒服一样。于是我问：“赚钱与避损，你更在乎哪一个？”答案总是一成不变：都在乎。问题是你不可能将精力同时放在获取收益和避免损失上。每一位投资者都必须在这两个目标中做出选择，通常要在两者之间进行合理的平衡。决策必须是谨慎而理智的。</p></li><li><p>查尔斯·艾利斯进一步将拉莫的观点发扬光大，把它应用到了投资上。他认为市场是有效的，交易成本是高昂的，并由此得出结论：在主流股票市场中主动得分对投资者未必有好处。相反，投资者应该尽量避免输球。我认为这是一个十分引人入胜的投资观点。</p></li><li><p><span class="under0"><strong>总而言之，即使经验丰富的投资者都可能打出失误球，击球过于主动更容易输掉比赛。因此，防守——重点在于避免错误——是每一场伟大的投资游戏的重要组成部分。</strong></span></p></li><li><p>足球教练在带队参赛时必须决定是以进攻为主（以多进球得分并相应地控制对手少得分为目的），以防守为主（不让对方得分，同时寻找射门机会），还是攻守平衡。教练知道在比赛中他们并没有太多攻防转换机会，他们必须摆出制胜阵容并坚持到底。这就是我对投资的看法。很少有人（如果有的话）能够顺应市场条件及时地改变策略。所以投资者应致力于一种方法——一种有望应对多种不同情况的方法。他们可能会抱着投资成功时多赚钱、投资失败时不赔钱的希望积极进取。他们可能会抱着形势好时不少赚、形势不好时少赔钱的希望，以防御为重。或者他们可能会平衡攻守，不再关注时机选择，而是选择出色的证券，在牛市和熊市中都赚钱。显然，橡树资本管理公司青睐的是防御型投资。在繁荣期，我们认为只要能跟上大盘表现就好（在市场最火的时候甚至可能还会落后一点儿）。但在投资庸手都能赚大钱的繁荣期，我怀疑很多投资经理会因为表现平平而被炒。</p></li><li><p>橡树资本管理公司关于投资组合的设计以在衰退期超越市场表现为目的，这才是我们认为最有必要的。很明显，如果我们能够在繁荣期跟上市场表现，并在衰退期超越市场表现，那么在整个市场周期中，我们就会以低于平均水平的波动取得高于平均水平的业绩，我们的客户也会在别人痛苦时享受快乐。</p></li><li><p>还要补充的一点是，攻守选择没有对错之分。条条大路通罗马，你的决策必须基于你的性格与学识、你对自己能力的信任程度、你所在的市场以及你为之工作的客户的特点。</p></li><li><p>投资中的进攻和防守是什么？进攻很好定义，它指的是为追求高额收益而采用积极进取策略并承担较高风险。<span class="under0"><strong>但什么是防守呢？防御型投资者关注的不是做对，而是避免做错。做对和避免做错之间有没有区别？表面上它们看起来很像，但深入来看，它们所需的思维模式有很大的不同，由此带来的投资策略也有很大的不同。防守可能听起来和避免不良结果差不多，但它没那么消极和无为。其实可以把防守视为一种追求更高收益的努力，只不过它是通过避害而不是趋利，是通过持续稳健的进步而不是偶尔的灵光乍现。</strong></span></p></li><li><p>防御型投资有两大要素。</p><ul><li><span class="under0"><strong>第一要素是排除投资组合中的致败因素，</strong></span>最好的实现方法是：广泛而尽职地调查、提高入选标准、要求低价和高错误边际（见本章后文），不要轻易下注在没有把握的持续繁荣、乐观预测和发展上。</li><li><span class="under0"><strong>第二要素是避开衰退期，特别要避免暴露在崩溃危机下。</strong></span>除了前面提到的要排除投资组合中的致败投资外，防守还需要投资组合多元化、限制总风险承担并以整体安全为重。集中化（多元化的反义词）和杠杆是进攻的表现。当它们起效时会扩大收益，反之会增加损失；积极进取策略会导致投资结果比高点更高或比低点更低。不过，如果过度使用积极进取策略，在形势恶化时它们可能会危害投资生存。相反，防守能够提高你渡过难关的可能性，你会有足够长的时间来享受聪明的投资带来的最终回报。</li></ul></li><li><p>•他们在自认为有制胜想法或对未来的正确看法时下注过大，投资组合过于集中而不是多元化。 •由于经常改变持股或者试图预测市场时机，他们承担了过高的交易成本。 •他们给投资组合的定位是在顺境中获取收益，而不是确保在误判或打出失误球后得以幸存。</p></li><li><p><span class="under0"><strong>相反，在橡树资本管理公司，我们坚定地认为“避免致败投资，制胜投资自然会来”。这是我们最初的也是永远的信条。我们追求安打率，而不是“本垒打”。我们知道其他人会因为巨大的胜利和辉煌的赛季成绩而占据头条，但是，我们希望自己能以令客户满意的持之以恒的良好表现坚持到最后。</strong></span></p></li><li><p>追求卓越表现的重点是敢于伟大……毫无疑问，投资者最重要、最基础的决策之一，是决定投资组合应承担多大的风险。应如何多元化、规避损失和确保不低于平均表现？为了追求更高的收益，你要做出什么程度的牺牲？</p></li><li><p>我从我喜欢的幸运饼干里学到了很多：谨慎很少出错，也写不出伟大的诗歌。它涉及到发人深省的两个方面：谨慎能帮助我们避免错误，但它也会阻止我们取得伟大的成就。就个人而言，我喜欢资金经理保持谨慎。我相信在许多情况下，避免损失和衰退比重复成功更容易，因此风险控制更有可能为长期优异表现打下坚实的基础。据我所知，最好的投资者具备以下特征：敬畏投资，要求物有所值和高错误边际，知所不知，知所不能。</p></li><li><p><span class="under0"><strong>防御型投资会令你错过热门并且越来越热门的东西，它会让你在一次次跑向本垒板的过程中无所事事。你可能比其他投资者打出更少的本垒打……但是，你被三振出局或双杀出局的可能性也会更少。防御型投资听起来很高深，不过我可以将它简化为：敬畏投资！担心损失的可能性。担心有自己不知道的东西。担心自己虽能做出高质量的决策，但仍会遭受厄运和突发事件的打击。敬畏投资能避免自大，令你保持警惕和大脑活跃；能令你坚持充足的安全边际，提高投资组合应对恶劣形势的能力。如果不犯错误，制胜投资自然会来。</strong></span></p></li><li><p>投资者几乎无须做对什么事，他只需能够避免犯重大错误。</p></li><li><p>当投资组合风险过高时，向下的波动会令你失去信心或低价抛售。当投资组合风险过低时，会令你在牛市中表现不佳，但从未有人因此而失败，这并不是最悲惨的命运。</p></li><li><p>在大多数时候未来确实与过去相似，因此这样的推断没有任何害处。但是在重要的转折时刻，当未来与过去不再相似的时候，推断会失效，你要么损失惨重，要么赚不到钱。</p></li><li><p><span class="under0"><strong>认定“一定”会发生的事却没有发生，会令你痛苦不堪。即使你正确地理解了基本概率分布，你也不能指望事情会按照预期的方向发展。成功的投资不应过分依赖聚集分布的正常结果，而是必须考虑到离群值的存在。</strong></span></p></li><li><p><span class="under0"><strong>投资者之所以投资，是希望投资能带来投资结果，他们的分析会集中在可能发生的情况上。但是，一定不要只盯着预期发生的事而排除其他可能性……不要过度承担风险和杠杆，否则不利结果会摧毁你自己。近期信贷危机中，崩溃发生的主要原因是事态没有按照预期发展。</strong></span></p></li><li><p>关于想象无能还有另一个重要方面。<span class="under0"><strong>人人都知道资产有预期收益和风险，并且可以被预测。但很少有人了解资产的相关性：一种资产会对另一种资产的变化做何反应，或这两种资产会对第三种变化做何反应。理解并预测相关性的影响——进而理解并预测多元化的局限——是风险控制和投资组合管理的主要任务，但很难实现。不能正确预测投资组合内的协同运动是投资失败的一个关键原因。</strong></span></p></li><li><p>投资者往往意识不到贯穿投资组合的共同线索。人人都知道，如果一家汽车制造商的股票下跌，共同因素将会导致所有的汽车股同时下跌。很少有人知道令所有美股（或所有发达国家股票，或全世界所有股票，或所有股票和债券等）下跌的共同因素是什么。</p></li><li><p>从很多方面来看，心理因素都是最令人感兴趣的导致投资错误的原因，它们可以极大地影响证券价格。当心理因素导致某些投资者持有极端观点并且无法被其他人的观点抵消时，就会导致价格过高或过低。这就是泡沫和崩溃的根源。投资者如何在心理因素的影响下做出错误的投资？ •屈从。 •不知不觉地加入已被他人的屈从扭曲的市场。</p></li><li><p>前面列出的三个错误中的第一个——屈从于不良影响——意味着贪婪并买进。如果你在赚钱欲望的驱使下，抱着资产将继续升值、策略将继续有效的侥幸，在价格过高时也不断买进，你就是在自寻烦恼。如果你以高于内在价值的价格买进——资产会从估价过高到估价超高，你必须得特别幸运才能获利而不亏损。当然，被推高的价格更容易导致后者而不是前者。</p></li><li><p>第二个错误，也就是我们所谓的失察错误。你可能没有被贪婪诱惑，举例来说，你的 401（ k）计划可能以投资指数基金的方式稳定而被动地投资于股市。然而，加入（即使是不知不觉地）到一个已经被他人狂热的购买行为推高的市场，将会对你造成严重影响。每一个不利影响和每一种“错误”市场，也都提供着获利而不是犯错的机会。因此，第三种形式的错误指的不是做错，而是没有做对。普通投资者能避免错误就算是万幸，而优秀投资者期待的却是从错误中获利。当贪婪导致股价过高时，大多数投资者希望不再买进甚至卖出。但是，优秀投资者可能会通过卖空而在价格下跌时获利。犯第三种形式的错误——例如，没有做空估价过高的股票——是另一种不同形式的错误，即“不作为”错误，不过可能也是大多数投资者愿意接受的错误。</p></li><li><p>避免错误的关键的第一步是保持警惕。贪婪与乐观相结合，屡屡导致人们追求低风险高收益的策略，高价购进热门股票，在价格已经走高时仍抱着增值期望继续持有股票。</p></li><li><p>市场就是课堂，每天在传授着各种经验教训。投资成功的关键在于观察和学习。</p></li><li><p>过多的可得资本导致资金流向错误。当资本缺乏并急需时，投资者面临的是如何分配才能最大程度利用资本的抉择，他们的决策做得耐心而严格。但是，当过多资金追逐过少的交易时，就会出现不值得的投资。 •当资金流向发生错误时，就会产生问题。当资本市场紧缩时，合格的借款人被拒之门外。但当资本过剩时，不合格借款人就能不劳而获地得到资本。违约、破产和亏损不可避免。 •资金供给过量时，投资者要通过接受更低的收益和更低的错误边际来争夺交易。当人们想买某种东西时，他们以竞争性标售的形式竞争，出价越来越高。<span class="under0"><strong>仔细思考你会发现，出价越高意味着金钱的回报越少。因此，投资者的出价可被视为投资者对收益要求和风险接受意愿的表述。</strong></span></p></li></ul><ul><li><p>这就是为什么我们总会按照盈利回报率（市盈率的对立面）而不是市盈率来思考，这样做能够轻松地与固定收益选择进行比较。</p></li><li><p>普遍忽视风险会产生巨大的风险。“不会出问题的。”“价格不高。”“总有人愿意出更高的价格。”“如果我不赶快行动，别人就会买下它。”这样的说法表明风险没有得到足够的重视。人们的想法是，因为自己在买进更好的股票或者在进行更加宽松的债务融资，所以收购交易可以维持越来越高的杠杆水平。这样的想法导致人们忽视了不良发展的风险以及高度杠杆化资本结构的固有危险。 •尽职调查不足导致投资损失。防止损失的最好办法是进行透彻而精辟的分析，并坚持巴菲特所谓的“错误边际”。但在市场繁荣期，人们担心的是错过投资而不是资金损失，只有老顽固才会抱着怀疑态度费时费力地进行分析。</p></li><li><p><span class="under0"><strong>在市场过热期，资金集中流向大多经不起时间考验的新型投资。情绪乐观的投资者们关注的是能够赚钱的机会，而不是可能会出现的问题。渴望取代谨慎，促使人们接受他们并不理解的新型投资产品。过后他们会惊讶自己当时在想什么。</strong></span></p></li><li><p>乔尔·格林布拉特：市场最终会使自己回归正常。在短期内，心理和技术因素使得等待长期效益十分痛苦。不过，这通常是绝佳机会的来源。</p></li><li><p><span class="under0"><strong>杠杆会放大收益，但不会增加价值。利用杠杆大力投资高承诺收益或高风险溢价的特价资产是很有意义的。但是，利用杠杆买进过多低收益或低风险价差的资产——换句话说，即已经被完全定价或过高定价的资产——可能是非常危险的。企图利用杠杆把低收益转化为高收益的尝试是毫无意义的。</strong></span></p></li><li><p>矫枉过正。当投资者心理极度乐观、市场“完美定价”时——建立在一切会永远好下去的臆测之上——就是资本损耗的前兆。因为投资者的预测过于乐观，不良事件时有发生，过高的价格仅在其自身重力下就有可能崩溃。上述 11 个教训大部分可被归纳为一点：对你周围的不合格资金的供需关系以及人们想花掉资金的迫切程度保持警惕。我们都知道资本过少时捉襟见肘的感觉：有价值的投资销路极差，整体经济发展缓慢。这种现象被称为信贷紧缩。但是，相反的情况也不容忽视。目前还没有正式术语来描述这种情况，也许可以用“过多的资金追逐过少的投资”来描述。</p></li><li><p>最危险的事：高度的信任与相应的较低的怀疑能在很大程度上推动价格上涨，然后每个人都认为上涨速度过快。通过贷款来购买往往会推动价格大幅上涨，而祸患也会随之发生，并带来痛苦。这些都属于最危险的事。</p></li><li><p>几乎没有人知道会出现怎样的后果，但可能会有即将失败的预感。尽管识别和避免具体错误并不容易，但这是一个很好的时机，令我们意识到有许多错误潜伏在暗处，进而持有防御性更强的仓位。做不到这一点也是一个巨大的错误。那么，投资者应怎么做呢？答案是： •留意他人的轻率举动。 •做好应对低迷的心理准备。 •卖出资产，或至少卖出风险更高的资产。 •减少杠杆。 •筹集现金（如果你为他人投资，那就把现金还给客户）。</p></li><li><p>•加强投资组合的防御性。</p></li><li><p>危机中充斥着潜在错误：首先屈服并认输，进而退缩并坐失良机。在没有损失的时候，人们往往将风险视为波动，并且相信自己能够容忍。如果真是这样，他们就会顺应价格下跌，在低点时做更多的投资，继而享受复苏，在未来出人头地。但是，如果容忍波动维持镇静的能力被高估了——通常如此——那么在市场处于最低点时，错误往往就会显露出来。信心和决断的丧失，导致投资者在市场底部抛售，将下行趋势转变为永久损失，并且难以充分参与到随后的复苏中。这样的错误是投资中最大的错误——顺周期行为最不利的一面——因为它是永久的，也因为它在很大程度上会影响投资组合。</p></li><li><p>乔尔·格林布拉特：投资者，了解你自己。你能在下跌时承受多少痛苦？这取决于你一开始进行特殊投资和投资分类时所选定的证券投资组合规模。</p></li><li><p>既然逆周期行为是避免近期危机全面影响的要素，那么顺周期行为就代表着潜在的最大错误。在市场繁荣期维持看涨仓位（或加仓）的投资者，为崩溃及随后的复苏准备得最不充分。</p></li><li><p>最后，重要的是要记住，除了作为（如买进）和不作为（如没有买进），还有错误并不明显的时候。当投资者心理平静、恐惧与贪婪平衡时，资产价格相对于价值可能是公允的。在这种情况下可能不需要采取紧急行动，知道这一点也很重要。不需要取巧的时候，自作聪明就会带来潜在的错误。</p></li><li><p><span class="under0"><strong>以下是橡树资本管理公司的业绩愿景：在市场繁荣期，达到平均表现即可。在繁荣期人人都能赚钱，为什么一定要在市场表现良好时战胜市场呢？我还没见过谁能给出令人信服的理由。不，在繁荣期达到平均表现就足够了。不过，有一个时期是我们认为有必要战胜市场的，那就是在衰退期。我们的客户不愿首当其冲面对市场损失，我们也不愿这样。</strong></span></p></li><li><p>因此，我们的目标是，在市场表现良好时与市场表现一致，在市场表现不好时超越市场表现。初看似乎过于稳健，但实际上这是一个相当宏大的目标。</p></li><li><p>我想指出，<span class="under0"><strong>没有哪一种投资行为会轻易成功，除非其收益目标在绝对和相对的风险之下是明确且合理的。每一种投资的结果应该以你试图实现的目标作为开始。关键问题在于，你的收益目标是什么，你能承受多大的风险，你暂时需要多少流动资金。</strong></span></p></li><li><p>我不认为普通的风险和资本市场的基本作用能够带来可观的收益。较高的收益是“反常的”，要想实现这一目标需要结合以下这些要求：<br>  •在极度低迷的市场环境中买进（希望能有一个良好的卖出环境）<br>  •杰出的投资技能 •强大的风险承受能力<br>  •强有力的杠杆，或者是 •好运气</p></li><li><p><span class="under0"><strong>我试着用一种逻辑化的方法来看待低谷。在下跌期间，有三个时机可以买进：下跌时、跌至谷底时、上涨时。我不认为我们会知道何时到达低谷，就算我们能够发现，这对于买进资产也并无太大的助益。如果我们等到低谷已过、价格开始回升的时候，不少人会因为价格上涨而买进，这使得持有者坚定了信心并且不会卖出。而资金补给不足则使得难以大量购买。这时候，买家便会发现为时已晚。</strong></span></p></li><li><p>这使得买进行为开始降温，而这正是我们所希望看到的。好消息是，如果在价格下跌时，我们选择买进，而别人却以“没有必要空手接落刀”为借口不敢行动。不过，当刀如雨下的时候，最好的交易往往在此时应运而生。</p></li><li><p><span class="under0"><strong>伏尔泰曾经说过一句至理名言：“完美是优秀的敌人。”这对于投资领域极为适用，只有当条件达到完美时，人们才会坚持投资——例如，只在低谷时买进——这会令你错失很多机会。在投资中坚持完美往往会一无所获，我们所能期待的最佳情况是尽可能地进行大量的明智投资，在最大程度上规避糟糕的投资。橡树资本管理公司是如何解决“应该在何时买入”这个问题的？我们会放弃追求完美，以及不会执着于确定何时到达低谷。更确切地说，如果我们认为出现了便宜货，我们就会买进。如果价格更加低廉，我们就会买得更多。要是我们投入了全部资本，我们理所应当会获益更多。</strong></span></p></li><li><p>大多数人会认为这段想象中的内心独白无可厚非。不过，这其中有一些问题，因为投资者没有质疑既定目标是否合理，以及如何才能实现既定目标。真相是，试图在既定环境中获得高额收益往往需要加大风险承担：例如，有着较大风险的股票或债券、高度集中的投资组合，或者增加杠杆的作用。</p></li><li><p>我鼓励你去考虑一下“足够好的收益”，认识到不值得费力去获取高收益以及没有必要去承担风险是很有意义的。</p></li><li><p>投资预期必须是合理的。背负无力承担的风险，任何投资都会让你身陷困境。在你接受所谓的天价收益——无风险、有着稳定且高于短期国债的“绝对收益”之前，你理应质疑它们能否实现，而不仅仅是为之倾倒。考虑一下：一个投资者如何运用自己的技能合理地使之成为现实，为什么你能够获得看似划算的潜在赢利机会？换言之，这些是否“好得不像是真的”？</p></li><li><p>你必须以可靠的事实和分析为基础，建立并坚持自己的价值观。只有这样，你才能知道买进和卖出的时机。只有拥有良好的价值感，你才能培养在资产价格高涨并且人人认为会永远上涨的时候获利的纪律，或在危机时甚至价格日益下跌时持仓，并以低于平均价格买进的勇气。当然，为达到在这些情况下获利的目的，你对价值的估计必须准确。</p></li><li><p><span class="under0"><strong>导致资产低于价值出售的原因是什么？买入机会存在的主要原因是对现实认识不足。高品质是显而易见的，发现便宜货则需要敏锐的洞察力。出于这个原因，投资者往往把客观优点误以为是投资机会。优秀的投资者却从未忘记，他们的目标是买得好，而不是买好的。</strong></span></p></li><li><p>除了提高获利潜力之外，以低于价值的价格买进还是限制风险的关键因素。买进成长型股票或参与“热门”动量市场都起不到这样的作用。</p></li><li><p>经济与市场周期上下波动。无论此刻它们朝向哪个方向运动，都会有大多数人相信它们会朝着这个方向永远走下去。这样的思想非常危险，因为它会扰乱市场，将价格推向极端，引发多数投资者难以承受的泡沫与恐慌。</p></li><li><p><span class="under0"><strong>永远不要低估心理影响的力量。贪婪、恐惧、终止怀疑、盲从、嫉妒、自负以及屈从都是人类本性，它们强迫行动的力量是强大的，尤其是在它们达到极致并且为群体共有的时候。群体会影响他人，善于思考的投资者也会察觉到它们的影响。任何人都不要奢望对它们免疫和绝缘。不过，虽然我们能感知到它们的存在，但是我们绝不能屈从；相反，我们必须识别并对抗它们。理性必须战胜情感。</strong></span></p></li><li><p>不过，即使逆向投资也不会永远带来收益。买进卖出的大好机会与极端价格相关，而就定义来看，极端价格是不会天天出现的。我们势必要在周期中的其他时候买进卖出，因为很少有人会满足于几年一次的操作。当局势对我们不利时，我们必须能够识别出来，并且采取更加谨慎的行动。</p></li><li><p><span class="under0"><strong>在价值坚挺、价格低于价值以及普遍消极心理的基础上买入，很有可能会取得最好的投资结果。然而，即使这样，在形势按照我们的预期发展之前，也可能会有很长一段时间对我们不利。“定价过低”绝不等同于“很快上涨”。这就是我第二句重要的格言：“过于超前与犯错没有区别。”在证明我们的正确性之前，我们需要足够的耐心与毅力长期坚持我们的立场。</strong></span></p></li><li><p>除了具备衡量价值的能力并且在定价适中时追求价值之外，成功的投资者还必须有正确应对风险的方法。他们必须突破学院派将风险等同于波动的定义，并且理解最重要的风险是永久损失的风险。他们必须认识到，提高风险承担不是投资成功的必胜手段，他们还必须认识到，高风险投资会导致更广的结果范围和更高的损失概率。他们必须了解每项投资的损失概率，并且只在回报极为可观时承担这样的风险。</p></li><li><p><span class="under0"><strong>大多数投资者认为多元化指的是持有许多不同的东西，很少有投资者认识到，只有投资组合中的持股能可靠地对特定环境发展产生不同的反映时，多元化才是有效的。</strong></span></p></li><li><p>橡树资本管理公司的信条“避免致败投资，制胜投资自然会来”多年来一直适用。<span class="under0"><strong>一个每项投资都不会产生重大损失的多元化投资组合，是投资成功的良好开端。</strong></span></p></li><li><p>错误边际是防御型投资的关键要素。尽管在未来按照预期发展时大多数投资都会成功，但是在未来不按预期发展时，错误边际能够保证结果的可接受性。投资者获得错误边际的方法有：强调当前有形而持久的价值，只在价格低于价值时买进，避免使用杠杆，多元化投资。强调这些因素会限制你在繁荣期的收益，但是在形势恶化时，它能最大限度地提高你全身而退的机会。我最喜欢的第三句投资格言是：“永远不要忘记一个 6 英尺高的人可能淹死在平均 5 英尺深的小河里。”错误边际能带给你持久力，帮你度过市场低迷期。</p></li><li><p><span class="under0"><strong>风险控制和错误边际必须时刻在你的投资组合中体现出来。但你必须记住，它们是“隐蔽资产”。市场多数时候处于繁荣期，但是只有在衰退期——潮水退却的时候——才能凸显防御的价值。因此，在繁荣期，防御型投资者必须知道，自己的收益（尽管可能不是最高）已经取得了适当的风险保障……即使事后证明这种风险规避是不必要的。</strong></span></p></li><li><p>投资成功的基本要求之一，也是最伟大的投资者的必备心理之一，是认识到我们无法预知宏观未来。很少有人（如果有的话）对未来经济、利率、市场总量有超越群体共识的看法。因此，投资者的时间最好用在获取“可知”的知识优势上：行业、公司、证券的相关信息。你对微观越关注，你越有可能比别人了解得更多。</p></li><li><p>无论是在衰退期限制损失的防御型投资者，还是在繁荣期争取收益的积极进取型投资者，都已经证明自己是有技术的。想要得到投资者真的是在提升价值的结论，我们必须考察他们在与自己投资风格不相符的环境下的表现。积极进取型投资者是否能在市场下跌时减少损失？保守型投资者能否在市场上涨时积极参与？这种不对称性就是真实技术的体现。投资者的制胜投资是否多过致败投资？制胜投资的收益是否大于致败投资的损失？繁荣期所带来的利益是否高于衰退期所带来的痛苦？长期结果是否好过单纯由投资者风格带来的结果？这些能力都是优秀投资者的标志。如果做不到这些，可能得到的收益就是市场收益与 β 系数的乘积。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>再谈移动端真机调试</title>
      <link href="/2019/09/07/retalk-mobile-debug/"/>
      <url>/2019/09/07/retalk-mobile-debug/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>以前写过一篇<a href="http://www.sail.name/2017/07/09/Mobile-debug/">移动端真机调试</a>的博客。最近在业务上，做了一个移动端的项目。对调试的手段又多了一种了解，本文做些记录。</p><hr><h3 id="调试方法"><a href="#调试方法" class="headerlink" title=" 调试方法 "></a><strong> 调试方法 </strong></h3><p>可以通过配置<code>webpack</code>的<code>devServer</code>的<code>host</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;</span><br><span class="line">  //...</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    host: &apos;0.0.0.0&apos;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>然后使你的电脑和移动设备在同一个网络下(wifi),通过ip:端口，就可以在手机上访问页面。</p><p>比如本地浏览器地址栏的开发地址为:<code>0.0.0.0:8000/test.html</code>，ip地址为<code>192.xxx.xx.x</code>,<br>现在在移动设备上通过<code>192.xxx.xx.x:8000/test.html</code>就可以访问了。</p><hr><h2 id="127-0-0-1、localhost、0-0-0-0"><a href="#127-0-0-1、localhost、0-0-0-0" class="headerlink" title=" 127.0.0.1、localhost、0.0.0.0 "></a><strong> 127.0.0.1、localhost、0.0.0.0 </strong></h2><p>这里引入了另一个问题了,为什么0.0.0.0可以进行调试,像localhost为什么就不可以了呢？</p><h3 id="IP地址"><a href="#IP地址" class="headerlink" title=" IP地址 "></a><strong> IP地址 </strong></h3><p>IP地址由两个部分组成，<code>net-id</code>和<code>host-id</code>，即网络号和主机号。 net-id:表示ip地址所在的网络号。 host-id：表示ip地址所在网络中的某个主机号码。</p><p><code>IP-address ::=  { &lt;Network-number&gt;, &lt;Host-number&gt; }</code></p><hr><h3 id="IP地址分类"><a href="#IP地址分类" class="headerlink" title=" IP地址分类 "></a><strong> IP地址分类 </strong></h3><p>IP地址一共分为5类，即A～E，它们分类的依据是其<code>net-id</code>所占的字节长度以及网络号前几位。</p><ul><li>A类地址:网络号占1个字节。网络号的第一位固定为0。</li><li>B类地址：网络号占2个字节。网络号的前两位固定为10。</li><li>C类地址：网络号占3个字节。网络号的前三位固定位110。</li><li>D类地址：前四位是1110，用于多播(multicast)，即一对多通信。</li><li>E类地址：前四位是1111，保留为以后使用。</li></ul><p>其中，ABC三类地址为单播地址（unicast),用于一对一通信，是最常用的。</p><hr><h3 id="特殊IP地址"><a href="#特殊IP地址" class="headerlink" title=" 特殊IP地址 "></a><strong> 特殊IP地址 </strong></h3><p>特殊IP地址就是用来做一些特殊的事情。RFC1700中定义了以下特殊IP地址。</p><ul><li>{0,0}:网络号和主机号都全部为0，表示“本网络上的本主机”，只能用作源地址。</li><li>{0，host-id}:本网络上的某台主机。只能用作源地址。</li><li>{-1,-1}：表示网络号和主机号的所有位上都是1（二进制），用于本网络上的广播，只能用作目的地址，发到该地址的数据包不能转发到源地址所在网络之外。</li><li>{net-id,-1}:直接广播到指定的网络上。只能用作目的地址。</li><li>{net-id,subnet-id,-1}:直接广播到指定网络的指定子网络上。只用作目的地址。</li><li>{net-id,-1,-1}:直接广播到指定网络的所有子网络上。只能用作目的地址。</li><li>{127，}:即网络号为127的任意ip地址。都是内部主机回环地址(loopback),永远都不能出现在主机外部的网络中。</li></ul><hr><h2 id="IPv4-与-IPv6"><a href="#IPv4-与-IPv6" class="headerlink" title=" IPv4 与 IPv6 "></a><strong> IPv4 与 IPv6 </strong></h2><p>这里还需要提高IPv4与IPv6的概念。像上面提到的<code>127.0.0.1</code>、<code>localhost</code>、<code>0.0.0.0</code>都是IPv4。<br>详细可以看这篇博客<a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_ibm_i_72/rzai2/rzai2compipv4ipv6.htm" target="_blank" rel="noopener">IPv4 与 IPv6 的比较</a>。</p><hr><p><code>127.0.0.1</code> 与 <code>0.0.0.0</code> 都是前面提到的A类地址(A类地址:网络号占1个字节。网络号的第一位固定为0),因为将127转为2进制是<br><code>01111111</code>。</p><h3 id="127-0-0-1"><a href="#127-0-0-1" class="headerlink" title=" 127.0.0.1 "></a><strong> 127.0.0.1 </strong></h3><p>127.0.0.1属于{127,}集合中的一个，而所有网络号为127的地址都被称之为回环地址。<br>回环地址：所有发往该类地址的数据包都应该被loop back。</p><p><strong> 用途: </strong> 回环测试,通过使用ping 127.0.0.1 测试某台机器上的网络设备，操作系统或者TCP/IP实现是否工作正常。<br><strong> DDos攻击防御: </strong> 网站收到DDos攻击之后，将域名A记录到127.0.0.1，即让攻击者自己攻击自己。<br>大部分Web容器测试的时候绑定的本机地址。</p><hr><h3 id="localhost"><a href="#localhost" class="headerlink" title=" localhost "></a><strong> localhost </strong></h3><p>相比<code>127.0.0.1</code>，<code>localhost</code>具有更多的意义。<code>localhost</code>是个域名，而不是一个ip地址。之所以我们经常把<code>localhost</code>与<code>127.0.0.1</code>认为是同一个是因为我们使用的大多数电脑上都讲<code>localhost</code>指向了<code>127.0.0.1</code>这个地址。<br>在<code>mac</code>系统中，<code>/ets/hosts</code>文件如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">##</span><br><span class="line"># Host Database</span><br><span class="line">#</span><br><span class="line"># localhost is used to configure the loopback interface</span><br><span class="line"># when the system is booting.  Do not change this entry.</span><br><span class="line">##</span><br><span class="line">127.0.0.1localhost</span><br><span class="line">255.255.255.255broadcasthost</span><br><span class="line">::1             localhost</span><br><span class="line"></span><br><span class="line">127.0.0.1 windows10.microdone.cn</span><br></pre></td></tr></table></figure></p><p>但是<code>localhost</code>的意义并不局限于<code>127.0.0.1</code>。<br><code>localhost</code>是一个域名，用于指代<code>this computer</code>或者<code>this host</code>,可以用它来获取运行在本机上的网络服务。<br>在大多数系统中，<code>localhost</code>被指向了<code>IPV4</code>的<code>127.0.0.1</code>和<code>IPV6</code>的<code>::1</code>。</p><hr><h3 id="0-0-0-0"><a href="#0-0-0-0" class="headerlink" title=" 0.0.0.0 "></a><strong> 0.0.0.0 </strong></h3><p><code>IPV4</code>中，<code>0.0.0.0</code>地址被用于表示一个无效的，未知的或者不可用的目标。</p><p>在服务器中，<code>0.0.0.0</code>指的是本机上的所有<code>IPV4</code>地址，如果一个主机有两个IP地址，<code>192.168.1.1</code> 和 <code>10.1.2.1</code>，并且该主机上的一个服务监听的地址是<code>0.0.0.0</code>,那么通过两个ip地址都能够访问该服务。(<strong> 这也是我们webpack像博客开头那样配置，手机能够访问的原因 </strong>)</p><p>在路由中，<code>0.0.0.0</code>表示的是默认路由，即当路由表中没有找到完全匹配的路由的时候所对应的路由。</p><p>用途总结:</p><ul><li>当一台主机还没有被分配一个IP地址的时候，用于表示主机本身。（DHCP分配IP地址的时候）</li><li>用作默认路由，表示”任意IPV4主机”。</li><li>用来表示目标机器不可用。</li><li>用作服务端，表示本机上的任意IPV4地址。</li></ul><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://juejin.im/post/5d258b6ae51d454f73356dcf" target="_blank" rel="noopener">127.0.0.1和0.0.0.0地址的区别</a></li><li><a href="https://www.ibm.com/support/knowledgecenter/zh/ssw_ibm_i_72/rzai2/rzai2compipv4ipv6.htm" target="_blank" rel="noopener">IPv4 与 IPv6 的比较</a></li><li><a href="https://gist.github.com/zxhfighter/b9f4b4ef328cd8b433b0e9dc2f4af26d" target="_blank" rel="noopener">127.0.0.1、localhost、0.0.0.0、本机IP地址</a></li><li><a href="https://webpack.js.org/configuration/dev-server/#devserverhost" target="_blank" rel="noopener">DevServer</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>五分钟跳转回登录页面</title>
      <link href="/2019/09/07/Return-to-the-login-page-in-five-minutes/"/>
      <url>/2019/09/07/Return-to-the-login-page-in-five-minutes/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近业务中有一个小需求是, 用户五分钟没有操作, 跳转回登录页面。</p><hr><p>代码实现如下: </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 页面最外层的dom节点</span></span><br><span class="line"><span class="keyword">let</span> income = <span class="keyword">this</span>.$refs.income; </span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> timer;</span><br><span class="line"><span class="comment">// 函数防抖</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">startTimer</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    clearTimeout(timer);</span><br><span class="line">    timer = setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="comment">// todo: 清空cookie 和 token</span></span><br><span class="line">        <span class="built_in">window</span>.location.href=<span class="string">"/login.html"</span>; </span><br><span class="line">    &#125;,  <span class="number">5</span> * <span class="number">60</span> * <span class="number">1000</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">income.onmousemove = income.onmousedown = income.onclick = income.ontouchstart = income.ontouchmove = income.ontouchend = startTimer;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 进入页面, 触发一下事件</span></span><br><span class="line">income.onclick();</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《小狗钱钱》</title>
      <link href="/2019/08/25/reading-notes-of-Puppy-money/"/>
      <url>/2019/08/25/reading-notes-of-Puppy-money/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>今天读了《小狗钱钱》,收获很大,本文做些记录。</p><hr><ul><li><p>这本书让我想起了我最喜爱的一句话：如果你想富有，请把自己变成一个小孩。因为小孩子的框框最少，他们诚实、快乐、乐于学习。</p></li><li><p>但是我必须承认，我起初有些担心，人们在读故事时，不是努力去挖掘故事情节之后隐藏的生活原则，而是试图模仿书中主人公获取成功的举动。<span class="under0"><strong>成功的故事很少有精彩的翻版，但是故事中包含的道理却可以帮助我们在遭遇困境时找到最佳的出路。</strong></span>同样，当我发现读者开始崇拜作者本人，而没有掌握书中叙述的古老真理时，我也有些不安。<span class="under0"><strong>个人的经历是很难效仿的，但最基本的真理却完全可以复制。</strong></span></p></li><li><p>但是我要提醒你注意：实际操作并不是一件简单的事。获取财富的法则虽然很容易理解，但是实际运用却并不容易，所以我们常常需要别人的帮助。</p></li><li><p>肤浅的危险过于复杂的叙述有偏离本质的危险，描述基本的事实时同样也存在一种危险。<span class="under0"><strong>我们常常会过于迅速地得出结论：“这我已经知道了。”似乎认识几个关键词就足够了。这种想法很可能是一个陷阱，因为当我们发现对要学的东西早已熟悉时，可能就不会继续学习下去。因为我们觉得自己已经知道了，所以就对这些信息不再感兴趣。</strong></span>在本书里，你不仅要学习一些新知识，而且还要学习实际运用这些知识的方法。</p></li><li><p>财务自由是今天每个人都可能实现的目标，当然这需要我们拥有追求自己真正想要的生活的勇气。正如一句名言所说：“并非困难使我们放弃，而是因为我们放弃，才显得如此困难。”</p></li><li><p>还有一点更为重要，那就是只有在你真的愿意的情况下，我才帮得了你。所以请你认真考虑一下。你们人类总是被自己的思想欺骗，所以我建议你，有些时候应该把自己的想法用笔记录下来。请你在明天之前想出 10个你想变得富有的原因，也就是你的 10个愿望，然后用笔写下来。</p></li><li><p><span class="under0"><strong>中国的智者老子说过：‘天下难事，必作于易；天下大事，必作于细。’</strong></span></p></li><li><p>钱钱又一次看出了我的想法，马上回答说：“大多数人并不清楚自己想要的是什么，他们只知道，自己想得到更多的东西。你可以把自己的生活想象成一家很大的邮购公司。如果你给一家邮购公司写信说‘请给我寄一些好东西来’，你肯定什么都得不到。<span class="under0"><strong>我们的愿望也是一样。我们必须确切地知道自己心里渴望的是什么才行。”</strong></span></p></li><li><p>钱钱立刻说：“好奇是好的，但是绝不能让好奇阻碍你做事。太多的人做事犹豫不决，就是因为他们觉得没有完全弄懂这件事。真正付诸实践要比纯粹的思考有用多了。”</p></li><li><p>“这就叫学习，”我立即听见了钱钱的回答，“学习就是认识新观念和新想法的过程。假如人们始终以同一种思维方式来考虑问题的话，那么始终只会得到同样的结果。因为我对你讲述的许多内容是你以前从未接触过的，所以我建议你，在你还没有做之前，不要轻易下结论。<span class="under0"><strong>没有想象力的人是很难成就大事的。我们对一件事投入的精力越多，成功的可能性也越大。可是大多数人把精力放在自己并不喜欢的事情上，而不去想象自己希望得到的东西。”</strong></span></p></li><li><p>可是钱钱一点儿也不放过我：“看看你的爸爸妈妈，他们拥有的钱比你零花钱的 10倍还要多得多，也许是你的 100倍。尽管如此，他们的情况也并不好。<span class="under0"><strong>钱的数目并不是决定性因素，更重要的是我们怎么来使用它。我们首先必须学会量入为出，只有这样，我们才有能力获得更多的钱。</strong></span></p></li><li><p><span class="under0"><strong>有一只海鸥曾经对我说过：‘在你展翅飞翔之前，你就必须相信自己能到达目的地。’你必须设想自己已经拥有了这些东西，这样你的一个小愿望才会变成一种强烈的渴望。你想象得越多，你的愿望就越强烈，那么你就会开始寻找机会来实现自己的梦想。吉娅，机会到处都是，但是只有在你寻找它的时候，你才能看见它。只有当你心中有了强烈的渴望，你才会去寻觅机会。而当你想象的时候，强烈的渴望就产生了。”</strong></span></p></li><li><p><span class="under0"><strong>“让我们痛心的阻力总是从我们最想不到的地方来的。”</strong></span></p></li><li><p>你是否能挣到钱，最关键的并不是你有没有好点子，也不是你有多聪明，而是你的自信程度。”</p></li><li><p>钱钱一脸严肃地直立起来，它是在向我表明，这是非常重要的内容：“你的自信程度决定了你是否相信自己的能力，是否相信你自己。假如你根本不相信你能做到的话，那么你就根本不会动手去做，而假如你不开始去做，那么你就什么也得不到。”</p></li><li><p>“那么我可以告诉你。你去准备一个本子，给它取名叫‘成功日记’，然后把所有做成功的事情记录进去。你最好每天都做这件事，每次都写至少 5条你的个人成果，任何小事都可以。开始的时候也许你觉得不太容易，可能会问自己，这件或那件事情是否真的可以算作成果。在这种情况下，你的回答应该是肯定的。过于自信比不够自信要好得多。”</p></li><li><p>的确如此。<span class="under0"><strong>其实从达瑞把精力集中在他知道、能做和拥有的东西上的那一天起，他的成功就已经拉开了序幕。这一决定使得一个孩子完全有能力挣到比成人更多的钱，因为成人经常把一生的时间都用来考虑他们不知道、不能做或没有的东西上。”</strong></span></p></li><li><p>马塞尔傲慢地大声笑道：“哪儿都可以挣到钱，你只要四处看看就能发现机会了。”我想，如果是达瑞也会这么说的。但我还是有一些不相信：“马塞尔，我的一些朋友也想挣钱，可是他们却什么机会都找不到，这是怎么回事呢？”“那是因为他们从来没有认真找过，也许他们的时间都花在玩洋娃娃上了。”马塞尔答道。我真的开始生气了，他要是再提什么洋娃娃的事，我就……但是他接着说：<span class="under0"><strong>“吉娅，你真的认真找过工作了吗？我是说，你有没有用一整个下午的时间来考虑如何挣到钱的问题呢？”</strong></span></p></li><li><p>我不得不承认，我考虑这个问题的时间加起来甚至还不到一个小时。其实每次想这件事，我总是很快就认定自己是不会有机会的。于是我告诉他没有。</p></li><li><p>“但是，我想提醒你两件重要的事情。”我听见马塞尔说，<span class="under0"><strong>“第一，无论在什么时候都不能把希望只寄托在一份工作上，它持续的时间不会像你设想的那么长，所以你要立即寻找另一份替代的工作。”</strong></span></p></li><li><p>“第二，你肯定会遇到一些困难，”马赛尔接着说，“这些困难是你现在还难以预料的。到那时候就能看出来，你到底是一个洋娃娃似的胆小鬼呢，还是一个像我一样能挣很多钱的人。情况顺利的时候，人人都能挣到钱。只有在逆境中，一切才能见分晓。”</p></li><li><p>钱钱严肃地看着我说：“我要告诉你 3件很重要的事情。<span class="under0"><strong>首先，在遇到困难的时候，仍然要坚持自己的想法。一切正常的时候，每个人都能做到这一点。只有当真正的困难出现时才能见分晓。只有少数人能坚定不移地贯彻自己的计划。那些非常成功的人，甚至有能力在他们最困难的时候作出最杰出的表现。”</strong></span></p></li><li><p>钱钱对我点了点头，说：<span class="under0"><strong>“困难总是在不断地出现。尽管如此，你每天还是要不间断地去做对你的未来意义重大的事情。你为此花费的时间不会超过 10分钟，但是就是这 10分钟会让一切变得不同。大多数人总是在现有的水平上停滞不前，就是因为他们没有拿出这 10分钟。他们总是期望情况能向有利于自己的方向转变，但是他们忽视了一点，那就是他们首先必须改变自己。”</strong></span></p><p>  “第二点，”钱钱接着往下说，“在一切进展非常顺利的情况下，你也应该做这些事情。”</p><p>  “很简单。当你决定做一件事情的时候，你必须在 72小时之内完成，否则你很可能永远不会再做了。”</p></li><li><p>第一，欠债的人应当毁掉所有的信用卡。”</p><p>  第二个忠告是，应当尽可能少地偿还贷款—也就是大人们说的分期付款。也许这个忠告听起来有点儿可笑，但你要知道，分期付款额越高，每个月剩下的生活费就越少。”</p><p>  “你当然应该这么做，”钱钱说，“但是他们首先必须学会量入为出，否则有了更多的钱只会给他们带来更大的麻烦，因为支出往往会和收入一同增长，除非我们学会合理分配我们的财产。这个问题我们以后再谈。”</p><p>  1.毁掉信用卡。 2.在许可范围内按最低的分期付款数目标准支付。问金先生是否可以帮助我的爸爸妈妈。</p><p>  点：“第三个忠告是针对消费贷款的。消费贷款是与住房无关的贷款。假如人们为了购置新的汽车、家具、电视机或其他用于生活的商品而贷款，就是消费贷款。这时候贷款的人应当遵守的一个原则，就是将不用于生活的那部分钱的一半存起来，另一半用于偿还贷款。”</p><p>  钱钱点头说：“这个主意真不错。此外，所有的消费贷款都是不明智的。聪明的做法是只把以前积攒起来的财富用于支出。”</p><p>  3.将扣除生活费后剩下的钱的一半存起来，剩下的一半用于支付消费贷款。最好根本不申请消费贷款。</p><p>  4.这真的有必要吗？</p></li><li><p>可是有的时候，疯狂的念头确实比普通的小目标更容易实现。当你定下大目标的时候，就意味着你必须付出比别人多得多的努力。”</p></li><li><p><span class="under0"><strong>“这不是我说的存钱的意思。”金先生反对道，“你要花钱，这是对的，因为钱的用处正在于此。但是如果你想变得富有，你同时还要存钱，这笔钱是你绝不会再花的。”</strong></span>“可是，假如我永远不能花这些钱，那我存它干什么呢？”我诧异地问。</p></li><li><p>“那么我要给你讲一讲这则小故事的寓意。”金先生慢悠悠地说，“鹅代表你的钱。如果你存钱，你就会得到利息。利息就相当于金蛋。”我不敢肯定自己是不是真的懂了。金先生接着说：“大多数人生来并没有‘鹅’。这就是说，他们的钱不足以让他们依靠利息来生活。”“可是要靠利息生活的话，这个人肯定得有很多很多的钱才行，是这样吗？”我不解地打断了金先生的话。“你需要的钱其实比你想象的要少得多。”金先生答道，“如果你有 2. 5万马克，能得到 12%的利息的话，那每年就有 3000马克。”“哇！”我兴奋地叫出了声，“那每个月就是 250马克。而我根本不需要动用我的 2. 5万马克。”“正是如此。”金先生对我的说法表示同意，他接着说，“那么 2. 5万马克就是你的‘鹅’，而你是不会‘杀’它的。”我很喜欢这个想法，但我还有一个疑问：“但是，假如我现在开始存钱的话，我到加利福尼亚去的愿望就得搁置很长一段时间了。”“你必须作出选择！”金先生点点头，“你可以马上拿出你的钱，用在任何一个地方—比如一旦你有了 3000马克，你可以马上飞往加利福尼亚—可是那样的话，你也就‘杀死’了你的‘鹅’；你也可以选择将一部分钱存起来，那样过了一段时间之后，仅靠每年的利息，你就可以飞往加利福尼亚了。”</p></li><li><p>“你根本不用放弃任何一个。两件事可以同时进行。”金先生微笑着说，“比如你挣了 10马克，那么你可以分配一下这笔钱，</p></li><li><p>把其中的大部分存入银行，然后把一部分放入你的梦想储蓄罐，剩下的当作零花钱。”</p></li><li><p>看起来，金先生真的是在忍受着剧烈的疼痛。我真钦佩他还能保持这么好的心情，耐心地给我讲解这一切。我问他为什么对自己的疼痛只字不提。<span class="under0"><strong>金先生答道：“越是把注意力放在疼痛上，我就越会觉得疼。谈论疼痛就像给植物施肥一样。所以我很多年以前就改掉了抱怨的习惯。”</strong></span></p></li><li><p>“比我想象的还要棒！”马塞尔大声说，“显而易见，假如我总是花光我的钱，那我就永远也得不到我的‘鹅’，所以我就总得为了赚钱而工作。而一旦我有了一只‘鹅’，我的钱就会自动为我工作了。”</p></li><li><p>我突然意识到，这主要不是因为我有了钱，而是因为我每天都过得很充实，因为我努力去了解一切新事物。我每天都会思考许多问题—我以前从没这样做过。</p></li><li><p>不过，马塞尔告诉了我一个重要的原则：“你干的活最多只值报酬的一半，另一半报酬源于你的想法和实施这个想法的勇气。”</p></li><li><p><span class="under0"><strong>“一个人挣钱的多少是和他的自信心联系在一起的。另外，他的精力究竟是集中在自己的能力范围之内，还是放到了他力所不能及的事情上，这也是很重要的一点。没有我的成功日记本，我就不会去思考自己适合在哪些方面赚钱。”</strong></span></p></li><li><p>“那你父母就跟许多人一样有错误的想法。<span class="under0"><strong>要想过更幸福、更满意的生活，人就得改变自身。这和钱无关，金钱本身既不会使人幸福，也不会带来不幸。金钱是中性的，既不好，也不坏。</strong></span></p></li><li><p>只有当钱属于某一个人的时候，它才会对这个人产生好的影响或者坏的影响。钱可以被用于好的用途，也可以被用于坏的用途。一个幸福的人有了钱会更幸福；而一个悲观忧虑的人，钱越多，烦恼就越多。”</p></li><li><p>老太太像是看穿了我的想法似的：“金钱能成为我们生活中非常强大的助推力。金钱可以在一定程度上提高我们的生活水平—生活的许多方面都是以钱为基础的。有了钱，我们就更容易实现我们的目标和梦想—当然，包括好的目标和梦想，也包括坏的目标和梦想。”我想自己可以安下心来了，因为我的目标是好的。此刻我才真正明白，为什么钱钱一开始就坚持要我首先确立自己的目标。现在我相信，金钱并不会使我的本性变坏。</p></li><li><p>以前，我首先想到的是为什么有些事情自己没做好，而现在，我把更多的注意力放在我能够做到的事情上。所以，我更多的是去寻找解决的办法，而不是寻找开脱的借口。</p></li><li><p>“其实你根本不需要我了。和钱有关的绝大多数课程，你在和别人的谈话中都已经学过了。这些人本身都很富有，是最好的老师。你现在只差一门重要的课程，就是怎样投资。其实这方面有很多人都愿意帮助你，我只需要给你一些指点，你自己一个人就可以做到。”</p></li><li><p>“最重要的是，你要确定你想要的是什么。”“这不难确定。”我顺口说道。“大多数人当然都会说没问题，可并非所有人都愿意做出必要的努力，因为他们不想付出代价。”</p></li><li><p>“那我必须做些什么呢？”我好奇地问。“就是你现在已经在做的这些事情。当你取得一些成功之后，不要停止写你的成功日记，这是很重要的。”我希望它能更详细地解释一下这一点。“这不像你现在想的那么简单。”我听见钱钱用恳切的口气接着说，<span class="under0"><strong>“成功会使人骄傲。如果你骄傲自大，你就会停止学习。不学习，人就不会再进步。”它停顿了一下，接着说：“当你写成功日记的时候，你会对自己，对世界，还有对成功的规律作更深入的思考，会越来越多地了解自己和自己的愿望，这样你才会有能力去理解别人。彻底了解自己和世界上的所有秘密，是我们无法完全实现的一种理想，但我们可以一步一步地慢慢接近这种理想。”</strong></span>“我很喜欢写成功日记！”我自语道。“很好。”钱钱的声音听起来很严肃，“可是还有一点，你不能在困难面前逃跑。困难、犯错误和丢面子引起的恐惧已经破坏了无数人的生活。”</p></li><li><p>钱钱仿佛在微笑，它说：“恐惧总是出现在我们设想事情会如何不顺的时候。我们对失败的可能性想得越多，就会越害怕。而当你看着自己的成功日记时，你就会注意到那些成功的事情，自然而然也就会想到应该怎样去做。”我不知道自己的理解是否正确。<span class="under0"><strong>钱钱把自己的解释又总结了一遍，说：“当你朝着积极的目标去思考的时候，就不会心生畏惧。”</strong></span></p></li><li><p>最后，我们决定采用莫尼卡的主意：“金钱魔法师”。我们一致认为，只要学会了我们的咒语，就可以从无到有地变出钱来。我们的咒语是： 1.确定自己希望获得财务上的成功。 2.自信，有想法，做自己喜欢做的事。 3.把钱分成日常开销、梦想目标和金鹅账户三部分。 4.进行明智的投资。 5.享受生活。</p></li><li><p>1.应该把钱投资在安全的地方。</p><p>  2.我的钱应该下很多“金蛋”。</p><p>  3.我们的投资应该简单明了。</p></li><li><p>“那就是说，我也可能亏损。”我用不甚满意的语气说。我一点儿也不喜欢这样。“是的，”陶穆太太同意我的说法，“但是只有当你出售股票的时候，你才会亏损。如果你保留着这些股份，将来可能会有人愿意付更多的钱来买进。”</p></li><li><p>他停顿了片刻，接着又说：“如果你没有做今天这件事情，你就永远不会知道，给自己一些压力之后，你能够做到些什么。<span class="under0"><strong>一个人觉得最引以为自豪的事情，往往是那些做起来最艰难的事情。这一点你千万不要忘记。”</strong></span></p></li><li><p>“要是所有的股票行情都下跌，该怎么办呢？”我担心地问。“那你就不要卖出。”陶穆太太向我解释，“你还记得上回我们谈起股票的时候说的话吗？在这种时候，只有当你把股票实际卖出的时候，才会有损失。”</p></li><li><p>挑选基金时的注意事项： 1.基金应该至少有 10年历史。假如它在这么长时间内一直有丰厚的利润，那我们可以认为，未来它也会运作良好。 2.应该选择大型的跨国股票基金。这种基金在世界各地购买股票，以此分散风险，所以十分安全。 3.对基金的走势图进行比较。我们应该观察在过去 10年间哪些基金的年终利润最好。</p></li><li><p>“有一个相当简单的公式，如果你们运用这个公式的话，可以不用去看那些又复杂又麻烦的表格。<span class="under0"><strong>它的名字叫 72公式。</strong></span>”老太太讲解说，“你们直接用 72除以你们投资的年利润百分比，得出的数字就是这笔钱翻一倍所要的年数。”“啊？”莫尼卡嘟哝了一声。 “72除以 12是多少？”陶穆太太问。 “6。”马塞尔飞快地算了出来。“对！这就是说，如果你们每年能得到 12%的利润， 6年以后你们的钱就会翻一倍。”马塞尔一边思考，一边说：“要想知道 15%的时候会怎么样，那我就必须用 72除以 15，等于 4. 8年。”“简单地说，如果你们投资的收益率是 15%，差不多 5年以后，钱就会翻一倍。”陶穆太太说道，“也就是说，如果将来我们也能得到 15%，那 5年以后我们的 2万马克就会涨到 4万马克， 10年以后就会是 8万， 15年后是 16万，而 20年后是 32万。”</p></li><li><p>“‘冬天’这个词已经说明了问题，这是一年四季中的一个季节。冬天过后，春天就来了，接着是夏天，每个夏天之后又跟着是秋天，然后又是冬天，年年如此。跟大自然的变化一样，交易所里也有四季更替，循环往复。”</p></li><li><p>“这当然有可能，”金先生耐心地向我解释说，“可是如果行情继续下跌怎么办呢？所以你最好不要投入太多的钱。而且如果行情真的继续下跌，那时要是你手头还有钱用来再一次买进的话，不是更好吗？”“但我们并不知道，行情是不是真的还会继续下跌。”“没错，我们是不知道。没有人能知道，所有试图预测未来走势的专家总是计算失误，意想不到的情况很多。<span class="under0"><strong>正因为如此，你应该始终储备一些现金。决不能把你全部的钱都投资在股票或者基金上面。”</strong></span></p></li><li><p>“我怎么知道通货膨胀率有多高，会吃掉我多少钱呢？”“目前是 3%左右。如果你现在想计算具体的数目，我可以告诉你一个相当简单的公式，就是 72公式。这个公式很实用，我们可以通过它计算出自己的钱翻一倍需要多少年，也可以用来帮助我们计算通货膨胀。它可以告诉我们，在一定通货膨胀率下，我们的钱在多长时间后会贬值一半。按 72除以 3%的通货膨胀率计算，得到 24，就是说 24年以后，你的钱只值现在的一半。”</p></li><li><p>我将信将疑地说：“银行的利率没有超过 3. 5%的吗？”“当然也有一些储蓄种类的利率比较高，可是你必须把钱放在银行里存很长一段时间。这种方式的坏处是，碰上再次买进的合适时机，你不能马上采取行动。”“那么，我该拿百分之几的钱投资日拆呢？”“这要根据你的具体情况而定。你还小， 20%就够了。”</p></li><li><p><span class="under0"><strong>马塞尔曾经想过卖出手里的基金，他说这叫提取利润。陶穆太太却问他准备怎样处置这笔钱，怎样让它继续增长。我们得出的结论是：再次选择同样的基金进行投资。于是马塞尔立即意识到现在卖出基金毫无意义。</strong></span></p></li><li><p>最重要的是，在他眼里，钱是一种再自然、再普通不过的东西。受他的影响，我渐渐也改变了对钱的态度。</p></li><li><p>“吉娅，我会不会说话根本没那么重要。”一个声音响了起来。我暗自欢呼，我刚才听到的，清清楚楚是钱钱的声音。钱钱继续说道：“重要的是，你能不能听到并且理解我说的话。就像你现在写的这本书，有一些人读过之后不会有任何改变，而另一些人读过之后开始聪明地理财，他们会拥有更幸福更富有的生活。”</p></li><li><p>这时，我想起了金先生对我说过的一句话：<span class="under0"><strong>不要为失去的东西而忧伤，而要对拥有它的时光心存感激。</strong></span>对我来说，这句话的意思是：从现在开始，我再也得不到钱钱的建议了，但我还是必须应对各种情况。但换个角度来看，这样也有好处。如果钱钱不再说话，它</p></li><li><p>我们应该保护弱者，不能歧视少数群体，不要对不如自己的人颐指气使，不要追逐凌驾于众人之上的权力。而且商业活动不仅与人有关，也与自然有关。它关系到各种生物和这个星球上正在遭受掠夺的急需保护的资源。从伦理学的角度来说，那些有社会责任感、有生态意识的企业家是不会被市场抛弃的，并且他们时刻处于市场的前沿。</p></li><li><p>我们推崇一种聪明的、简朴的生活方式。也就是说，宁愿购买一件一流产品，也不要不停地买许多的二流产品。而且，不要仅仅因为一件产品的外观不再时髦而新产品正在流行，就不断追逐新鲜的东西。生活质量不是由越来越多的高科技产品堆砌而成的，而体现在一些别的方面，比如悠闲地享受一下生活，增进邻里关系，表达感情或者从事艺术性和创造性的活动。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《容忍与自由》</title>
      <link href="/2019/08/24/reading-notes-of-Tolerance-and-freedom/"/>
      <url>/2019/08/24/reading-notes-of-Tolerance-and-freedom/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近读了胡适的《容忍与自由》,很久没有看过胡适的书了,本文做些记录。</p><hr><ul><li><p>我曾说过，我应该用容忍的态度来报答社会对我的容忍。我现在常常想，我们还得戒律自己：我们若想别人容忍谅解我们的见解，我们必须先养成能够容忍谅解别人的见解的度量。至少至少我们应该戒约自己决不可“以吾辈所主张者为绝对之是”。我们受过实验主义的训练的人，本来就不承认有“绝对之是”，更不可以“以吾辈所主张者为绝对之是”。</p></li><li><p><span class="under0"><strong>我回中国所见的怪现状，最普通的是“时间不值钱”。中国人吃了饭没有事做，不是打麻雀，便是打“扑克”。有的人走上茶馆，泡了一碗茶，便是一天了。有的人拿一只鸟儿到处逛逛，也是一天了。更可笑的是朋友去看朋友，一坐下便生了根了，再也不肯走。有事商议，或是有话谈论，倒也罢了。其实并没有可议的事，可说的话。</strong></span>我有一天在一位朋友处有事，忽然来了两位客，是 □ □（底本如此，下同）馆的人员。我的朋友走出去会客，我因为事没有完，便在他房里等他。我以为这两位客一定是来商议这 □ □馆中什么要事的。不料我听得他们开口道：“ □ □先生，今回是打津浦火车来的，还是坐轮船来的？”我的朋友说是坐轮船来的。这两位客接着便说轮船怎样不便，怎样迟缓。又从轮船上谈到铁路上，从铁路上又谈到现在中交两银行的钞洋跌价。因此又谈到梁任公的财政本领，又谈到梁士诒的行踪去迹……谈了一点多钟，没有谈上一句要紧的话。后来我等的没法了，只好叫听差去请我的朋友。那两位客还不知趣，不肯就走。我不得已，只好跑了，让我的朋友去领教他们的“二梁优劣论”罢！</p></li><li><p>社会所需要的是做事的人才，学堂所造成的是不会做事又不肯做事的人才，这种教育不是亡国的教育吗？</p></li><li><p>我以为这二十年来中国并不是完全没有进步，不过惰性太大，向前三步又退回两步，所以到如今还是这个样子。我这回回家寻出了一部叶德辉的《翼教丛编》[ 13]，读了一遍，才知道这二十年的中国实在已经有了许多大进步。不到二十年前，那些老先生们，如叶德辉、王益吾之流，出了死力去驳康有为，所以这书叫做《翼教丛编》。我们今日也痛骂康有为。但二十年前的中国，骂康有为太新；二十年后的中国，却骂康有为太旧。如今康有为没有皇帝可保了，很可以做一部《翼教续编》来骂陈独秀了。这两部“翼教”的书的不同之处，便是中国二十年来的进步了。<br><span class="under0"><strong>多研究些问题，少谈些“主义”！</strong></span></p></li><li><p>第二，空谈外来进口的“主义”，是没有什么用处的。一切主义都是某时某地的有心人，对于那时那地的社会需要的救济方法。我们不去实地研究我们现在的社会需要，单会高谈某某主义，好比医生单记得许多汤头歌诀，不去研究病人的症候，如何能有用呢？</p></li><li><p>我因为深觉得高谈主义的危险，所以我现在奉劝新舆论界的同志道：“请你们多提出一些问题，少谈一些纸上的主义。”更进一步说：“请你们多多研究这个问题如何解决，那个问题如何解决，不要高谈这种主义如何新奇，那种主义如何奥妙。”</p></li><li><p><span class="under0"><strong>为什么谈主义的人那么多，为什么研究问题的人那么少呢？这都由于一个懒字。懒的定义是避难就易。研究问题是极困难的事，高谈主义是极容易的事。</strong></span></p></li><li><p>凡是有价值的思想，都是从这个那个具体的问题下手的。先研究了问题的种种方面的种种的事实，看看究竟病在何处，这是思想的第一步工夫。然后根据一生经验学问，提出种种解决的方法，提出种种医病的丹方，这是思想的第二步工夫。然后用一生的经验学问，加上想象的能力，推想每一种假定的解决法，该有什么样的效果，推想这种效果，是否真能解决眼前这个困难问题。推想的结果，拣定一种假定的解决，认为我的主张，这是思想的第三步工夫。凡是有价值的主张，都是先经过这三步工夫来的。不如此，不算舆论家，只可算是抄书手。</p></li><li><p>“主义”的大危险，就是能使人心满意足，自以为寻着包医百病的“根本解决”，从此用不着费心力去研究这个那个具体问题的解决法了。</p></li><li><p>从前朱晦庵说得好，“教学者如扶醉人”，现在的中国人真算是大多数醉倒了。先生可怜他们，当下告奋勇，使一股大劲，把他从东边扶起。我怕是用力太猛，保不住又要跌向西边去，那不是和没有扶起一样吗？万一不幸，连性命都要送掉，那又向谁叫冤呢？</p></li><li><p><span class="under0"><strong>我们中国古代有一个无名诗人留下了两句最有害的诗：“我躬不阅，遑恤我后。”译成白话，这就是说：“我自己看不见了，何必顾虑后来的事呢？”这个意思是根本大错的。正因为我们自己有看不见的时候，所以我们必须在看得见的时候先给后来的事做点准备。人类所以比别的动物强，全靠这预计未来的能力。凡未雨绸缪，积谷防饥，都是预计未来的事。如果人人都不管将来的事，只图个今朝有酒今朝醉，那就是自己堕落下去和禽兽一样了。</strong></span></p></li><li><p><span class="under0"><strong>诸位，凡是自己说不出“为什么这样做”的事，都是没有意思的生活。反过来说，凡是自己说得出“为什么这样做”的事，都可以说是有意思的生活。生活的“为什么”，就是生活的意思。</strong></span></p></li><li><p>个人是社会上无数势力造成的。</p></li><li><p>改造社会须从改造这些造成社会、造成个人的种种势力做起。改造社会即是改造个人。</p></li><li><p><span class="under0"><strong>一、社会是种种势力造成的，改造社会须要改造社会的种种势力。这种改造一定是零碎的改造，一点一滴的改造，一尺一步的改造。无论你的志愿如何宏大，理想如何彻底，计划如何伟大，你总不能笼统地改造，你总不能不做这种“得寸进寸，得尺进尺”的工夫。所以我说：社会的改造是这种制度那种制度的改造，是这种思想那种思想的改造，是这个家庭那个家庭的改造，是这个学堂那个学堂的改造。</strong></span></p></li><li><p>社会的生命，无论是看纵剖面，是看横截面，都像一种有机的组织。<span class="under0"><strong>从纵剖面看来，社会的历史是不断的：前人影响后人，后人又影响更后人；没有我们的祖宗和那无数的古人，又哪里有今日的我和你？没有今日的我和你，又哪里有将来的后人？没有那无量数的个人，便没有历史，但是没有历史，那无数的个人也决不是那个样子的个人。总而言之，个人造成历史，历史造成个人。从横截面看来，社会的生活是交互影响的：个人造成社会，社会造成个人；社会的生活全靠个人分工合作的生活，但个人的生活，无论如何不同，都脱不了社会的影响；若没有那样这样的社会，决不会有这样那样的我和你；若没有无数的我和你，社会也决不是这个样子。莱布尼茨说得好：这个世界乃是一片大充实，其中一切物质都是接连着的。一个大充实里面有一点变，全部的物质都要受影响，影响的程度与物体距离的远近成正比例。世界也是如此。每一个人不但直接受他身边亲近的人的影响，并且间接又间接地受距离很远的人的影响。所以世间的交互影响，无论距离远近，都受得着的。所以世界上的人，每人受着全世界一切动作的影响。如果他有周知万物的智慧，他可以在每人的身上看出世间一切施为，无论过去未来都可看得出，在这一个现在里面便有无穷时间空间的影子。</strong></span></p></li><li><p><span class="under0"><strong>我这个现在的“小我”，对于那永远不朽的“大我”的无穷过去，须负重大的责任；对于那永远不朽的“大我”的无穷未来，也须负重大的责任。我须要时时想着，我应该如何努力利用现在的“小我”，方才可以不辜负了那“大我”的无穷过去，方才可以不遗害那“大我”的无穷未来？</strong></span></p></li><li><p>东方的哲人曾说：衣食足而后知荣辱，仓廪实而后知礼节。这不是什么舶来的“经济史观”，这是平恕的常识。人世的大悲剧是无数的人们终身做血汗的生活，而不能得着最低限度的人生幸福，不能避免冻与饿。人世的更大悲剧是人类的先知先觉者眼看无数人们的冻饿，不能设法增进他们的幸福，却把“乐天”“安命”“知足”“安贫”种种催眠药给他们吃，叫他们自己欺骗自己，安慰自己。西方古代有一则寓言说，狐狸想吃葡萄，葡萄太高了，它吃不着，只好说“我本不爱吃这酸葡萄！”狐狸吃不着甜葡萄，只好说葡萄是酸的；人们享不着物质上的快乐，只好说物质上的享受是不足羡慕的，而贫贱是可以骄人的。这样自欺自慰成了懒惰的风气，又不足为奇了。于是有狂病的人又进一步，索性回过头去，戕贼身体，断臂、绝食、焚身，以求那幻想的精神的安慰。从自欺自慰以至于自残自杀，人生观变成了人死观，都是从一条路上来的：这条路就是轻蔑人类的基本的欲望。朝这条路上走，逆天而拂性，必至于养成懒惰的社会，多数人不肯努力以求人生基本欲望的满足，也就不肯进一步以求心灵上与精神上的发展了。西洋近代文明的特色便是充分承认这个物质的享受的重要。西洋近代文明，依我的鄙见看来，是建筑在三个基本观念之上：第一，人生的目的是求幸福。第二，所以贫穷是一桩罪恶。</p></li><li><p>求知是人类天生的一种精神上的最大要求。</p></li><li><p>东方的懒惰圣人说，“吾生也有涯，而知也无涯，以有涯逐无涯，殆已。”所以他们要人静坐澄心，不思不虑，而物来顺应。这是自欺欺人的诳语，这是人类的夸大狂。<span class="under0"><strong>真理是深藏在事物之中的；你不去寻求探讨，它决不会露面。科学的文明教人训练我们的官能智慧，一点一滴地去寻求真理，一丝一毫不放过，一铢一两地积起来。这是求真理的惟一法门。自然是一个最狡猾的妖魔，只有敲打可以逼它吐露真情。不思不虑的懒人只好永远做愚昧的人，永远走不进真理之门。</strong></span></p></li><li><p>东方的懒人又说：“真理是无穷尽的，人的求知的欲望如何能满足呢？”诚然，真理是发现不完的。但科学绝不因此而退缩。<span class="under0"><strong>科学家明知真理无穷，知识无穷，但他们仍然有他们的满足：进一寸有一寸的愉快，进一尺有一尺的满足。</strong></span>二千多年前，一个希腊哲人思索一个难题，想不出道理来；有一天，他跳进浴盆去洗澡，水涨起来，他忽然明白了，他高兴极了，赤裸裸地跑出门去，在街上乱嚷道，“我寻着了！我寻着了！”这是科学家的满足。牛顿、巴斯德以至于爱迪生时时有这样的愉快[ 20]。一点一滴都是进步，一步一步都可以踌躇满志。这种心灵上的快乐是东方的懒圣人所梦想不到的。</p></li><li><p>从前人类受自然的支配，不能探讨自然界的秘密，没有能力抵抗自然的残酷，所以对于自然常怀着畏惧之心。拜物，拜畜生，怕鬼，敬神，“小心翼翼，昭事上帝”，都是因为人类不信任自己的能力，不能不依靠一种超自然的势力。现代的人便不同了。人的智力居然征服了自然界的无数质力，上可以飞行无碍，下可以潜行海底，远可以窥算星辰，近可以观察极微。这个两只手一个大脑的动物——人——已成了世界的主人翁，他不能不尊重自己了。</p></li><li><p>知足的东方人自安于简陋的生活，故不求物质享受的提高；自安于愚昧，自安于“不识不知”，故不注意真理的发现与技艺器械的发明；自安于现成的环境与命运，故不想征服自然，只求乐天安命，不想改革制度，只图安分守己，不想革命，只做顺民。</p></li><li><p><span class="under0"><strong>固然，真理是无穷的，物质上的享受是无穷的，新器械的发明是无穷的，社会制度的改善是无穷的。但格一物有一物的愉快，革新一器有一器的满足，改良一种制度有一种制度的满意。今日不能成功的，明日明年可以成功；前人失败的，后人可以继续助成。尽一分力便有一分的满意；无穷的进境上，步步都可以给努力的人充分的愉快。</strong></span>所以大诗人丁尼生借古英雄奥德修斯[ 22]的口气歌唱道：然而人的阅历就像一座穹门，从那里露出那不曾走过的世界。越走越远，永永望不到他的尽头。半路上不干了，多么沉闷呵！</p></li><li><p>我很高兴我们的青年在这种恶劣空气里还能保持他们对于国家民族前途的绝大信心。这种信心是一个民族生存的基础，我们当然是完全同情的。<span class="under0"><strong>可是我们要补充一点：这种信心本身要建筑在稳固的基础之上，不可站在散沙之上，如果信仰的根据不稳固，一朝根基动摇了，信仰也就完了。</strong></span></p></li><li><p>这种思想在实质上和那五千年古国精神文明的迷梦是同样的无稽的夸大。第一，他的原则“富于创造性的人，个性必强，接受性就较缓”，这个大前提就是完全无稽之谈，就是懒惰的中国士大夫捏造出来替自己遮丑的胡说。<span class="under0"><strong>事实上恰是相反的：凡富于创造性的人必敏于模仿，凡不善模仿的人绝不能创造。创造是一个最误人的名词，其实创造只是模仿到十足时的一点点新花样。古人说得最好：“太阳之下，没有新的东西。”一切所谓创造都从模仿出来。我们不要被新名词骗了。</strong></span>新名词的模仿就是旧名词的“学”字：“学之为言效也”是一句不磨的老话。例如学琴，必须先模仿琴师弹琴；学画必须先模仿画师作画；就是画自然界的景物，也是模仿。模仿熟了，就是学会了，工具用得熟了，方法练得细密了，有天才的人自然会“熟能生巧”，这一点功夫到时的奇巧新花样就叫做创造。凡不肯模仿，就是不肯学人的长处。不肯学如何能创造？伽利略听说荷兰有个磨镜匠人做成了一座望远镜，他就依他听说的造法，自己制造了一座望远镜。这就是模仿，也就是创造。从十七世纪初年到如今，望远镜和显微镜都年年有进步，可是这三百年的进步，步步是模仿，也步步是创造。<span class="under0"><strong>一切进步都是如此：没有一件创造不是先从模仿下手的。孔子说得好：三人行，必有我师焉；择其善者而从之，其不善者而改之。</strong></span></p></li><li><p>这就是一个圣人的模仿。<span class="under0"><strong>懒人不肯模仿，所以决不会创造。一个民族也和个人一样，最肯学人的时代就是那个民族最伟大的时代；等到他不肯学人的时候，他的盛世已过去了，他已走上衰老僵化的时期了，</strong></span>我们中国民族最伟大的时代，正是我们最肯模仿四邻的时代：从汉到唐宋，一切建筑、绘画、雕刻、音乐、宗教、思想、算学、天文、工艺，哪一件里没有模仿外国的重要成分？佛教和它带来的美术建筑，不用说了。</p></li><li><p>日本民族的长处全在他们肯一心一意地学别人的好处。他们学了中国的无数好处，但始终不曾学我们的小脚，八股文，鸦片烟。这不够“为中国取镜”吗？他们学别国的文化，无论在哪一方面，凡是学到家的，都能有创造的贡献。这是必然的道理。浅见的人都说日本的山水人物画是模仿中国的；其实日本画自有它的特点，在人物方面的成绩远胜过中国画，在山水方面也没有走上四王的笨路。在文学方面，他们也有很大的创造。近年已有人赏识日本的小诗了。</p></li><li><p><span class="under0"><strong>一个国家有五千年的历史，而没有一个四十年的大学，甚至于没有一个真正完备的大学，这是最大的耻辱。一个国家能养三百万不能捍卫国家的兵，而至今不肯计划任何区域的国民义务教育，</strong></span></p></li><li><p>历史的反省自然使我们明了今日的失败都因为过去的不努力，同时也可以使我们格外明了“种瓜得瓜，种豆得豆”的因果铁律。铲除过去的罪孽只是割断已往种下的果。我们要收新果，必须努力造新因。祖宗生在过去的时代，他们没有我们今日的新工具，也居然能给我们留下了不少的遗产。我们今日有了祖宗不曾梦见的种种新工具，当然应该有比祖宗高明千百倍的成绩，才对得起这个新鲜的世界。日本一个小岛国，那么贫瘠的土地，那么少的人民，只因为伊藤博文、大久保利通、西乡隆盛等几十个人的努力，只因为他们肯拼命地学人家，肯拼命地用这个世界的新工具，居然在半个世纪之内一跃而为世界三五大强国之一。这不够鼓舞我们的信心吗？</p></li><li><p><span class="under0"><strong>我们的前途在我们自己的手里。我们的信心应该望在我们的将来。我们的将来全靠我们下什么种，出多少力。“播了种一定会有收获，用了力决不至于白费”：这是翁文灏先生要我们有的信心。</strong></span></p></li><li><p>为什么要读书？有三点可以讲：第一，因为书是过去已经知道的智识学问和经验的一种记录，我们读书便是要接受这人类的遗产；第二，为要读书而读书，读了书便可以多读书；第三，读书可以帮助我们解决困难，应付环境，并可获得思想材料的来源。我一踏进青年会的大门，就看见许多关于读书的标语。为什么读书？大概诸位看了这些标语就都已知道了，现在我就把以上三点更详细地说一说。</p></li><li><p><span class="under0"><strong>第二点稍复杂，就是为读书而读书。读书不是那么容易的一件事情，不读书不能读书，要能读书才能多读书。好比戴了眼镜，小的可以放大，糊涂的可以看得清楚，远的可以变为近。读书也要戴眼镜。眼镜越好，读书的了解力也越大。</strong></span></p></li><li><p>请你们注意，他不说读书以致知，却说，先致知而后读书。读书固然可以扩充知识，但知识越扩充了，读书的能力也越大。这便是“为读书而读书”的意义。</p></li><li><p>总之，读书是为了要读书，多读书更可以读书。最大的毛病就在怕读书，怕读难书。越难读的书我们越要征服它们，把它们作为我们的奴隶或向导，我们才能够打倒难书，这才是我们的“读书乐”。若是我们有了基本的科学知识，那么，我们在读书时便能左右逢源。<span class="under0"><strong>我再说一遍，读书的目的在于读书，要读书越多才可以读书越多。</strong></span></p></li><li><p>读书好像用兵，养兵求其能用，否则即使坐拥十万二十万的大兵也没有用处，难道难道只好等他们“兵变”吗？</p></li><li><p><span class="under0"><strong>现在我自己也不知道学些什么，我刚才讲过现在的青年太倾向于现实了，不凭性之能近，力之所能去选课。譬如一位有作诗天才的人，不进中文系学作诗，而偏要去医学院学外科，那么文学院便失去了一个一流的诗人，而国内却添了一个三四流甚至五流的饭桶外科医生，这是国家的损失，也是你们自己的损失。</strong></span></p></li><li><p><span class="under0"><strong>社会上需要什么，不要管它，家里的爸爸、妈妈、哥哥、朋友等，要你做律师、做医生，你也不要管他们，不要听他们的话，只要跟着自己的兴趣走。</strong></span></p></li><li><p>只管我自己，别人不要管他。依着“性之所近，力之所能”学下去，其未来对国家的贡献也许比现在盲目所选的或被动选择的学科会大得多，将来前途也是无可限量的。下课了！下课了！谢谢各位。</p></li><li><p>第一是容易抛弃学生时代的求知识的欲望。</p></li><li><p><span class="under0"><strong>第二是容易抛弃学生时代的理想的人生的追求。少年人初次与冷酷的社会接触，容易感觉理想与事实相去太远，容易发生悲观和失望。多年怀抱的人生理想，改造的热诚，奋斗的勇气，到此时候，好像全不是那么一回事。渺小的个人在那强烈的社会炉火里，往往经不起长时期的烤炼就熔化了，一点高尚的理想不久就幻灭了。抱着改造社会的梦想而来，往往是弃甲曳兵而走，或者做了恶势力的俘虏。你在那俘虏牢狱里，回想那少年气壮时代的种种理想主义，好像都成了自误误人的迷梦！从此以后，你就甘心放弃理想人生的追求，甘心做现成社会的顺民了。</strong></span></p></li><li><p>第一个方子只有一句话：“总得时时寻一两个值得研究的问题！”问题是知识学问的老祖宗；古往今来一切知识的产生与积聚，都是因为要解答问题——要解答实用上的困难或理论上的疑难。</p></li><li><p>试想伽利略和牛顿有多少藏书？有多少仪器？他们不过是有问题而已。有了问题而后，他们自会造出仪器来解答他们的问题。没有问题的人们，关在图书馆里也不会用书，锁在试验室里也不会有什么发现。</p></li><li><p><span class="under0"><strong>一个人应该有他的职业，又应该有他的非职业的玩艺儿，可以叫做业余活动。凡一个人用他的闲暇来做的事业，都是他的业余活动。往往他的业余活动比他的职业还更重要，因为一个人的前程往往全靠他怎样用他的闲暇时间。他用他的闲暇来打麻将，他就成个赌徒；你用你的闲暇来做社会服务，你也许成个社会改革者；或者你用你的闲暇去研究历史，你也许成个史学家。你的闲暇往往定你的终身。</strong></span></p></li><li><p><span class="under0"><strong>古来成大学问的人，几乎没有一个不是善用他的闲暇时间的。特别在这个组织不健全的中国社会，职业不容易适合我们性情，我们要想生活不苦痛或不堕落，只有多方发展业余的兴趣，使我们的精神有所寄托，使我们的剩余精力有所施展。</strong></span>有了这种心爱的玩艺儿，你就做六个钟头的抹桌子工作也不会感觉烦闷了，因为你知道，抹了六点钟的桌子之后，你可以回家去做你的化学研究，或画完你的大幅山水，或写你的小说戏曲，或继续你的历史考据，或做你的社会改革事业。你有了这种称心如意的活动，生活就不枯寂了，精神也就不会烦闷了。</p></li><li><p><span class="under0"><strong>朋友们，在你最悲观最失望的时候，那正是你必须鼓起坚强的信心的时候。你要深信：天下没有白费的努力。成功不必在我，而功力必不唐捐。</strong></span></p></li><li><p><span class="under0"><strong>凡是做学问，做研究，真正的动机都是求某种问题某种困难的解决，所以动机是困难，而目的是解决困难。</strong></span></p></li><li><p>最后，我要简单说一句话：<span class="under0"><strong>要时时刻刻自己检讨自己，以养成做学问的良好习惯。</strong></span>台大的钱校长和许多研究自然科学、历史科学的人可以替我证明：科学方法论的归纳法、演绎法，教你如何如何归纳、如何演绎，并不是养成实验室的态度。实验室的态度，是天天在那里严格地自己检讨自己，创造证据来检讨自己；在某种环境之下，逼得你不能不养成某种好习惯。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>关于使用index作为key的问题</title>
      <link href="/2019/08/10/about-use-index-as-key/"/>
      <url>/2019/08/10/about-use-index-as-key/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>这两天和朋友小小的讨论了下关于index作为key的问题,虽然知道不建议使用index作为key，应该使用id。之前还没有仔细了解过,本文做些记录。</p><hr><h3 id="使用index作为key引起的性能问题"><a href="#使用index作为key引起的性能问题" class="headerlink" title=" 使用index作为key引起的性能问题 "></a><strong> 使用index作为key引起的性能问题 </strong></h3><p>在使用vue或者react开发一些前端应用的时候,在一些列表或者table场景下,有的时候会使用index来作为key</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">array.forEach(item, index =&gt; &#123;</span><br><span class="line">    key: index</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p>这种使用index作为key的方式其实是存在一些问题的,比如一个列表中的数据最初是[1, 2, 3, 4]</p><h4 id="使用index作为key"><a href="#使用index作为key" class="headerlink" title=" 使用index作为key "></a><strong> 使用index作为key </strong></h4><table><thead><tr><th>数据</th><th>key</th><th>index</th></tr></thead><tbody><tr><td>1</td><td>0</td><td>0</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>3</td><td>2</td><td>2</td></tr><tr><td>4</td><td>3</td><td>3</td></tr></tbody></table><p>数据打乱过后,比如[4, 3, 2, 1] </p><table><thead><tr><th>数据</th><th>key</th><th>index</th></tr></thead><tbody><tr><td>4</td><td>3</td><td>3</td></tr><tr><td>3</td><td>2</td><td>2</td></tr><tr><td>2</td><td>1</td><td>1</td></tr><tr><td>1</td><td>0</td><td>0</td></tr></tbody></table><p>这样元素和key的对应关系变了,就会导致重新渲染,对性能会造成一定的影响。</p><h4 id="使用id作为key"><a href="#使用id作为key" class="headerlink" title=" 使用id作为key "></a><strong> 使用id作为key </strong></h4><table><thead><tr><th>数据</th><th>key</th><th>id</th></tr></thead><tbody><tr><td>1</td><td>x01</td><td>x01</td></tr><tr><td>2</td><td>x99</td><td>x99</td></tr><tr><td>3</td><td>66x</td><td>66x</td></tr><tr><td>4</td><td>s768</td><td>s768</td></tr></tbody></table><p>数据顺序打乱过后 </p><table><thead><tr><th>数据</th><th>key</th><th>id</th></tr></thead><tbody><tr><td>4</td><td>s768</td><td>s768</td></tr><tr><td>3</td><td>66x</td><td>66x</td></tr><tr><td>2</td><td>x99</td><td>x99</td></tr><tr><td>1</td><td>x01</td><td>x01</td></tr></tbody></table><p>元素和key的对应关系是没有发生变化的, 不会重新渲染。</p><p>上面提到的还算是比较好的情况,只是影响性能上的问题。</p><hr><h3 id="使用index作为key引起的bug"><a href="#使用index作为key引起的bug" class="headerlink" title=" 使用index作为key引起的bug "></a><strong> 使用index作为key引起的bug </strong></h3><p>倘若进行一些删除或者增加操作时,甚至会导致bug。<br>比如以下的场景,这里我提供了codepen链接,可以体验下<a href="https://codepen.io/iamsail/pen/wVYgQr" target="_blank" rel="noopener">使用index作为key引起的bug</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">HelloWorld</span> <span class="keyword">extends</span> <span class="title">React</span>.<span class="title">Component</span> </span>&#123;</span><br><span class="line">  <span class="keyword">constructor</span>() &#123;</span><br><span class="line">    <span class="keyword">super</span>();</span><br><span class="line">     <span class="keyword">this</span>.state = &#123;</span><br><span class="line">       date: [<span class="number">1</span>,<span class="number">2</span>,<span class="number">4</span>,<span class="number">5</span>],</span><br><span class="line">       xxx: [&#123;</span><br><span class="line">         id: <span class="number">98</span>,</span><br><span class="line">         name: <span class="string">'apple'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         id: <span class="number">1997</span>,</span><br><span class="line">         name: <span class="string">'box'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         id: <span class="string">'fff'</span>,</span><br><span class="line">         name: <span class="string">'card'</span></span><br><span class="line">       &#125;, &#123;</span><br><span class="line">         id: <span class="number">4</span>,</span><br><span class="line">         name: <span class="string">'dog'</span></span><br><span class="line">       &#125;]</span><br><span class="line">     &#125;;</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  handleClick = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      xxx: <span class="keyword">this</span>.state.xxx.filter(<span class="function">(<span class="params">val, index</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="comment">// 需要return</span></span><br><span class="line">        <span class="keyword">return</span> val.name !== <span class="string">'box'</span></span><br><span class="line">      &#125;)</span><br><span class="line">    &#125;)</span><br><span class="line">  &#125;</span><br><span class="line">  </span><br><span class="line">  render () &#123;</span><br><span class="line">    <span class="keyword">return</span> (</span><br><span class="line">      &lt;div&gt;</span><br><span class="line">        &lt;select&gt;</span><br><span class="line">          &#123;<span class="keyword">this</span>.state.xxx.map(<span class="function">(<span class="params">item, index</span>) =&gt;</span> &#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="xml"><span class="tag">&lt;<span class="name">option</span> <span class="attr">value</span> =<span class="string">&#123;item.name&#125;</span> <span class="attr">key</span>=<span class="string">&#123;index&#125;</span>&gt;</span>&#123;item.name&#125;<span class="tag">&lt;/<span class="name">option</span>&gt;</span></span></span><br><span class="line">          &#125;)&#125;</span><br><span class="line">        &lt;<span class="regexp">/select&gt;</span></span><br><span class="line"><span class="regexp">        &lt;button  onClick=&#123;this.handleClick&#125;&gt;</span></span><br><span class="line"><span class="regexp">          点我</span></span><br><span class="line"><span class="regexp">        &lt;/</span>button&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">class App extends React.Component &#123;</span></span><br><span class="line"><span class="regexp">  render () &#123;</span></span><br><span class="line"><span class="regexp">    return (</span></span><br><span class="line"><span class="regexp">      &lt;div&gt;</span></span><br><span class="line"><span class="regexp">        &lt;HelloWorld /</span>&gt;</span><br><span class="line">      &lt;<span class="regexp">/div&gt;</span></span><br><span class="line"><span class="regexp">    )</span></span><br><span class="line"><span class="regexp">  &#125;</span></span><br><span class="line"><span class="regexp">&#125;</span></span><br><span class="line"><span class="regexp"></span></span><br><span class="line"><span class="regexp">ReactDOM.render(</span></span><br><span class="line"><span class="regexp">  &lt;App /</span>&gt;,</span><br><span class="line">  <span class="built_in">document</span>.getElementById(<span class="string">'app'</span>)</span><br><span class="line">)</span><br></pre></td></tr></table></figure><p>渲染出来如下图<br><img src="/img/react/about-use-index-as-key/1.jpeg" alt="1.jpeg"></p><p>首先选中第三项, 也就是选中<code>card</code>项, 接下来点击按钮会删除第二项,也就是<code>box</code>, 这个时候就变成最初的第四项<code>dog</code>被选中了。<br>通过表格来阐述下:</p><p><strong> 删除之前 </strong></p><table><thead><tr><th>key</th><th>id</th><th>index</th><th>name</th></tr></thead><tbody><tr><td>0</td><td>98</td><td>0</td><td>apple</td></tr><tr><td>1</td><td>1997</td><td>1</td><td>box</td></tr><tr><td>2</td><td>fff</td><td>2</td><td>card</td></tr><tr><td>3</td><td>4</td><td>3</td><td>dog</td></tr></tbody></table><p><strong> 删除之后 </strong></p><table><thead><tr><th>key</th><th>id</th><th>index</th><th>name</th></tr></thead><tbody><tr><td>0</td><td>98</td><td>0</td><td>apple</td></tr><tr><td>1</td><td>fff</td><td>1</td><td>card</td></tr><tr><td>2</td><td>4</td><td>2</td><td>dog</td></tr></tbody></table><p>使用的index作为key,因为最初选择的是<code>card</code>,key是2,删除过后,key为2的元素是<code>dog</code>。</p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title=" 解决方案 "></a><strong> 解决方案 </strong></h3><p>在前面我举了两个例子来说明index作为key存在的一些问题。所以我们应该避免使用index作为key。</p><p>1.倘若后端有返回id,可以使用id做为key<br>2.通过一个全局变量比如<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> counter = <span class="number">0</span>;</span><br><span class="line">++counter;</span><br></pre></td></tr></table></figure></p><p>将自增后的<code>counter</code></p><p>3.使用<code>shortid</code>,这个npm库,会通过算法生成id<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">const shortid = require(&apos;shortid&apos;);</span><br><span class="line">console.log(shortid.generate());</span><br><span class="line">// PPBqWA9</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://www.cnblogs.com/wonyun/p/6743988.html" target="_blank" rel="noopener">React之key详解</a></li><li><a href="https://segmentfault.com/a/1190000019961419" target="_blank" rel="noopener">vue中使用v-for时为什么不能用index作为key？</a></li><li><a href="https://www.npmjs.com/package/shortid" target="_blank" rel="noopener">shortid</a></li><li><a href="https://juejin.im/post/5aed94cbf265da0b934831d6" target="_blank" rel="noopener">在React中index作为key是反模式的</a></li><li><a href="http://carolunar.com/2018/08/05/why-should-not-we-use-indexes-for-keys-in-react-list/" target="_blank" rel="noopener">React列表增删时使用index当作key引发的问题及原因</a></li><li><a href="https://goshakkk.name/controlled-vs-uncontrolled-inputs-react/" target="_blank" rel="noopener">Controlled and uncontrolled form inputs in React don’t have to be complicated</a></li><li><a href="https://zh-hans.reactjs.org/docs/uncontrolled-components.html" target="_blank" rel="noopener">非受控组件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>开发chrome插件遇到的CSP问题</title>
      <link href="/2019/07/28/CSP-with-chrome-extensions/"/>
      <url>/2019/07/28/CSP-with-chrome-extensions/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近开发chrome插件遇到了一个问题。</p><p><img src="/img/chrome-extensions/CSP-with-chrome-extensions/1.png" alt="1.png"></p><p>我是使用react进行开发的,build过后,点击插件图标,显示了一个白色的方框,如上图所示。<br>最初毫无下手的头绪,直到后来发现,插件卡片处,出现了一个错误按钮,才发现有给出错误信息。<br><img src="/img/chrome-extensions/CSP-with-chrome-extensions/2.png" alt="2.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 错误信息</span><br><span class="line">Refused to execute inline script because it violates the following </span><br><span class="line">Content Security Policy directive: &quot;script-src &apos;self&apos; https://apis.google.com&quot;. </span><br><span class="line">Either the &apos;unsafe-inline&apos; keyword, a hash (&apos;sha256-5As4+3YpY62+l38PsxCEkjB1R4YtyktBtRScTJ3fyLU=&apos;), </span><br><span class="line">or a nonce (&apos;nonce-...&apos;) is required to enable inline execution.</span><br></pre></td></tr></table></figure><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title=" 解决方案 "></a><strong> 解决方案 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Hello Extensions&quot;,</span><br><span class="line">  &quot;description&quot; : &quot;Base Level Extension&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">  &quot;manifest_version&quot;: 2,</span><br><span class="line">  &quot;browser_action&quot;: &#123;</span><br><span class="line">    &quot;default_popup&quot;: &quot;index.html&quot;,</span><br><span class="line">    &quot;default_icon&quot;: &#123;</span><br><span class="line">      &quot;19&quot;: &quot;./hello_extensions.png&quot;,</span><br><span class="line">      &quot;38&quot;: &quot;./hello_extensions.png&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">    &quot;default_title&quot;: &quot;帅&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;icons&quot;: &#123;</span><br><span class="line">    &quot;16&quot;: &quot;./hello_extensions.png&quot;,</span><br><span class="line">    &quot;48&quot;: &quot;./hello_extensions.png&quot;,</span><br><span class="line">    &quot;128&quot;: &quot;./hello_extensions.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">  &quot;permissions&quot;: [</span><br><span class="line">    &quot;alarms&quot;, &quot;tabs&quot;, &quot;notifications&quot;, &quot;activeTab&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;background&quot;: &#123;</span><br><span class="line">    &quot;persistent&quot;: false,</span><br><span class="line">    &quot;scripts&quot;: [</span><br><span class="line">      &quot;background.js&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;commands&quot;: &#123;</span><br><span class="line">    &quot;_execute_browser_action&quot;: &#123;</span><br><span class="line">      &quot;suggested_key&quot;: &#123;</span><br><span class="line">          &quot;windows&quot;: &quot;Ctrl+Shift+Y&quot;,</span><br><span class="line">          &quot;mac&quot;: &quot;Command+Shift+L&quot;,</span><br><span class="line">          &quot;chromeos&quot;: &quot;Ctrl+Shift+U&quot;,</span><br><span class="line">          &quot;linux&quot;: &quot;Ctrl+Shift+J&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;description&quot;: &quot;Opens index.html&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;content_security_policy&quot;:&quot;script-src &apos;self&apos; https://apis.google.com; object-src &apos;self&apos;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>根据错误信息,我对<code>content_security_policy</code>增加了hash值(hash值来自错误信息)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;Hello Extensions&quot;,</span><br><span class="line">  &quot;description&quot; : &quot;Base Level Extension&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0&quot;,</span><br><span class="line">  &quot;manifest_version&quot;: 2,</span><br><span class="line">  &quot;browser_action&quot;: &#123;</span><br><span class="line">    &quot;default_popup&quot;: &quot;index.html&quot;,</span><br><span class="line">    &quot;default_icon&quot;: &#123;</span><br><span class="line">      &quot;19&quot;: &quot;./hello_extensions.png&quot;,</span><br><span class="line">      &quot;38&quot;: &quot;./hello_extensions.png&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">    &quot;default_title&quot;: &quot;帅&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;icons&quot;: &#123;</span><br><span class="line">    &quot;16&quot;: &quot;./hello_extensions.png&quot;,</span><br><span class="line">    &quot;48&quot;: &quot;./hello_extensions.png&quot;,</span><br><span class="line">    &quot;128&quot;: &quot;./hello_extensions.png&quot;</span><br><span class="line">&#125;,</span><br><span class="line">  &quot;permissions&quot;: [</span><br><span class="line">    &quot;alarms&quot;, &quot;tabs&quot;, &quot;notifications&quot;, &quot;activeTab&quot;</span><br><span class="line">  ],</span><br><span class="line">  &quot;background&quot;: &#123;</span><br><span class="line">    &quot;persistent&quot;: false,</span><br><span class="line">    &quot;scripts&quot;: [</span><br><span class="line">      &quot;background.js&quot;</span><br><span class="line">    ]</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;commands&quot;: &#123;</span><br><span class="line">    &quot;_execute_browser_action&quot;: &#123;</span><br><span class="line">      &quot;suggested_key&quot;: &#123;</span><br><span class="line">          &quot;windows&quot;: &quot;Ctrl+Shift+Y&quot;,</span><br><span class="line">          &quot;mac&quot;: &quot;Command+Shift+L&quot;,</span><br><span class="line">          &quot;chromeos&quot;: &quot;Ctrl+Shift+U&quot;,</span><br><span class="line">          &quot;linux&quot;: &quot;Ctrl+Shift+J&quot;</span><br><span class="line">      &#125;,</span><br><span class="line">      &quot;description&quot;: &quot;Opens index.html&quot;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;content_security_policy&quot;:&quot;script-src &apos;self&apos; &apos;sha256-5As4+3YpY62+l38PsxCEkjB1R4YtyktBtRScTJ3fyLU=&apos; https://apis.google.com; object-src &apos;self&apos;&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重新build即可,如下图</p><p><img src="/img/chrome-extensions/CSP-with-chrome-extensions/2.png" alt="3.png"></p><hr><h3 id="CSP"><a href="#CSP" class="headerlink" title=" CSP "></a><strong> CSP </strong></h3><p>CSP 定义 Content-Security-Policy HTTP 标头，其允许您创建信任的内容的来源白名单，并指示浏览器仅执行或渲染来自这些来源的资源，而不要盲目地信任服务器提供的所有内容。即使攻击者能够发现可从中注入脚本的漏洞，由于此脚本也不符合此白名单，因此，也不会执行该脚本。</p><p>假如我们信任 apis.google.com 传输有效代码，并且我们信任我们自己也能做到，因此，我们可以定义一个政策，该政策仅允许执行来自以下两个来源之一的脚本：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Content-Security-Policy: script-src &apos;self&apos; https://apis.google.com</span><br></pre></td></tr></table></figure></p><h3 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">One or more sources can be allowed for the script-src policy:</span><br><span class="line">Content-Security-Policy: script-src &lt;source&gt;;</span><br><span class="line">Content-Security-Policy: script-src &lt;source&gt; &lt;source&gt;;</span><br></pre></td></tr></table></figure><p><strong> 介绍常用的source取值 </strong></p><table><thead><tr><th style="text-align:left">source取值</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>&#39;self&#39;</code></td><td style="text-align:center">指从中提供受保护文档的来源，包括相同的URL方案和端口号。 您必须包含单引号。 某些浏览器专门从源指令中排除blob和文件系统。 需要允许这些内容类型的站点可以使用Data属性指定它们。</td></tr><tr><td style="text-align:left"><code>&#39;none&#39;</code></td><td style="text-align:center">指空集; 也就是说，没有URL匹配。 单引号是必需的。</td></tr><tr><td style="text-align:left"><code>&#39;&lt;hash-algorithm&gt;-&lt;base64-value&gt;&#39;</code></td><td style="text-align:center">脚本或样式的sha256，sha384或sha512哈希。 此源的使用包括由短划线分隔的两个部分：用于创建散列的加密算法和脚本或样式的base64编码散列。 生成哈希时，不要包含<code>&lt;script&gt;</code>或<code>&lt;style&gt;</code>标记，并注意大小写和空格很重要，包括前导或尾随空格。 有关示例，请参阅不安全的内联脚本。 在CSP 2.0中，这仅适用于内联脚本。 对于外部脚本，CSP 3.0允许使用script-src。</td></tr><tr><td style="text-align:left"><code>&#39;unsafe-inline&#39;</code></td><td style="text-align:center">允许使用内联资源，例如内联<code>&lt;script&gt;</code>元素，javascript：URL，内联事件处理程序和内联<code>&lt;style&gt;</code>元素。 您必须包含单引号。</td></tr><tr><td style="text-align:left"><code>&#39;unsafe-eval&#39;</code></td><td style="text-align:center">允许使用<code>eval（）</code>和类似方法从字符串创建代码。 您必须包含单引号。</td></tr></tbody></table><hr><p>CSP还有一些其他常用的资源指令</p><table><thead><tr><th style="text-align:left">资源指令</th><th style="text-align:center">含义</th></tr></thead><tbody><tr><td style="text-align:left"><code>base-uri</code></td><td style="text-align:center">用于限制可在页面的 <code>&lt;base&gt;</code> 元素中显示的网址</td></tr><tr><td style="text-align:left"><code>child-src</code></td><td style="text-align:center">用于列出适用于工作线程和嵌入的帧内容的网址。例如：child-src <a href="https://youtube.com" target="_blank" rel="noopener">https://youtube.com</a> 将启用来自 YouTube（而非其他来源）的嵌入视频。 使用此指令替代已弃用的 frame-src 指令。</td></tr><tr><td style="text-align:left"><code>connect-src</code></td><td style="text-align:center">用于限制可（通过 XHR、WebSockets 和 EventSource）连接的来源。</td></tr><tr><td style="text-align:left"><code>font-src</code></td><td style="text-align:center">用于指定可提供网页字体的来源。Google 的网页字体可通过 font-src <a href="https://themes.googleusercontent.com" target="_blank" rel="noopener">https://themes.googleusercontent.com</a> 启用。</td></tr><tr><td style="text-align:left"><code>object-src</code></td><td style="text-align:center">可对 Flash 和其他插件进行控制。</td></tr><tr><td style="text-align:left"><code>style-src</code></td><td style="text-align:center">script-src 版的样式表</td></tr><tr><td style="text-align:left"><code>img-src</code></td><td style="text-align:center">用于定义可从中加载图像的来源</td></tr></tbody></table><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><ul><li><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/Headers/Content-Security-Policy/script-src" target="_blank" rel="noopener">CSP: script-src</a></li><li><a href="https://developers.google.com/web/fundamentals/security/csp/?hl=zh-cn" target="_blank" rel="noopener">内容安全政策</a></li><li><a href="https://www.html5rocks.com/en/tutorials/security/content-security-policy" target="_blank" rel="noopener">An Introduction to Content Security Policy</a></li><li><a href="https://w3c.github.io/webappsec-csp/" target="_blank" rel="noopener">Content Security Policy Level 3</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> chrome-extensions </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《学习之道》</title>
      <link href="/2019/07/23/reading-notes-of-learning-way/"/>
      <url>/2019/07/23/reading-notes-of-learning-way/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近读了《学习之道》(作者 芭芭拉·奥克利(Barbara Oakley)), 本文做记录。</p><hr><ul><li><p>如果你认为自己天生不是学数理的那块料（或者暂时还这么认为），那这儿有个惊喜：你的大脑生来就配备了非凡的心算能力。我们每一次接球、每一次随节拍舞动、每一次开车绕过路面的坑，都是在做心算的过程。</p></li><li><p><strong> <span class="under0">所以说，努力工作时的放松也是一个重要环节，当然，更是令工作卓有成效的关键。</span> </strong></p></li><li><p>但学习本来就是从困惑中摸索问题答案的过程，能够描述出来问题就已经成功了一半。只要发现了困扰你的东西是什么，那么你就离解答出来不远了。</p></li><li><p>定式效应就是说因死盯着有瑕疵的方法不放，而在解决问题时陷入僵局。切换到发散模式可以帮助我们从中解脱出来。记住这一点，有时候你的思考得灵活点。想要解决问题，理解概念，你可能需要在不同的概念之间转换。最初的想法反而可能是误导。</p></li><li><p><strong> <span class="under0">如果读过书之后还是弄不清楚到底怎么回事，我会去谷歌搜索或者去看 YouTube视频。这不是说书本或教授讲得不透彻，而是有时对概念稍有不同的表达阐释，可以让你的思维换个角度看待问题，从而激发思维的火花。</span> </strong></p></li><li><p><strong> <span class="under0">犯错是不可避免的。所以要想解决掉论文，那就尽早动笔。除非你真的很享受自己所做的事，否则最好还是速战速决。还记得吗？即使是休息的时候，你的发散模式仍然在后台工作。放松的时候也在学习，这简直太划算了。一些人认为自己从未进入过发散模式，他们真是大错特错了。只要放轻松什么都不想，你的大脑就会进入一种自然的默认状态，那就是发散思维的一种形式。每个人都会这样。</span> </strong></p></li><li><p>登顶之路漫长艰辛，中途的大本营是必要的休息场所，你可以在那里停歇、反思、检查装备并确保路线无误。但别把暂时的休息当成最后的终点，换句话说，可别指望只靠发散模式，就能轻轻松松地如愿以偿。</p></li><li><p>自制力很强的人反而会更难关闭专注模式，好让发散模式进入工作状态。毕竟，他们的成功之道就在于，在别人都放弃的情况下仍坚持不懈。<strong> <span class="under0">如果你就是这种人，那么这儿还有另外一个技巧：重视倾听。把同伴、朋友或亲人的意见放在心上，他们会在你沮丧到临界值时有所察觉。。</span> </strong></p></li><li><p>求学要趁早，要勤快。</p></li><li><p>战胜恐惧。<strong> <span class="under0">在 Facebook总部演讲后，我收到了一张鼓舞人心的海报，上面写着：“如果你那时克服了恐惧，事情会是怎样的？”我每天都会看一遍这句话，希望自己能够无所畏惧。你在害怕什么？不要让恐惧阻止你前进！。</span> </strong></p></li><li><p><strong> <span class="under0">专注的练习和重复是创造记忆痕迹的过程。</span> </strong>无论是一记完美的高尔夫击球、主厨熟练翻动的煎蛋，还是百投百中的罚球，核心皆在于此。舞蹈也一样，从笨拙的单脚旋转到优雅的专业舞者，要经历漫长的努力。任何专业技能的培养都是积跬步以成千里的过程。你对自由旋转、足跟转、踢腿动作的琐碎记忆，最终会结合成更完整、更具创造力的肢体表达。</p></li></ul><ul><li><p>快速浏览章节，或去听一场条理清晰的演讲，都能让你获得宏观图景。它会指引你看到自己构建的组块在宏观图景中的位置。</p></li><li><p>试着回想学习材料，即提取练习（ retrieval practice），效果比单纯阅读材料好得多。</p></li><li><p>穿插学习法，解决混杂交错的各种问题，而非在同一个问题上过度学习</p></li><li><p>不管在教室还是哪里，学生应在每个学习或练习的单元时间内，把学习内容量尽量最大化，也就是应该让自己的学习时间得到超值的回报。怎样才能做到呢？<strong> <span class="under0">文献无一例外地回答：与其在同类技巧、概念上投入太长时间去学和练，不如把精力分配到更短的学习时间段上，以避免过度学习。这不是说长时间学习就一定是坏主意。只要学生不在同类技巧或概念上投入过多精力，那么学习时间长一点并没什么坏处。一旦理解了概念“ X”，学习重心就应该转移到别的概念上，过几天再来回顾概念“ X”。</span> </strong></p></li><li><p>首先要记住，陷入拖延很简单，但获得顽强的意志力可就难得多了。因为后者需要动用大量的神经资源。<strong> <span class="under0">可以说用意志力来对抗拖延，就像在空中喷洒廉价劣质的空气清新剂一样完全徒劳无功。</span> </strong></p></li></ul><ul><li><p>现实就是，我们拖延的，往往是让我们感到不安的事情。</p></li><li><p><strong> <span class="under0">值得注意的是，令人痛苦的就是预感本身。当“数学恐惧症”患者真正开始学数学的时候，痛苦就消失了。研究拖延症的专家丽塔·埃是这样解释的，“对一项任务的恐惧会比这项任务本身消耗更多的时间和能量。”</span> </strong></p></li><li><p><strong> <span class="under0">积习难改，人们很容易就会深深陷入拖延的陷阱。在它的暗示下，你任由自己沉沦于拖延的舒适反应。久而久之，已经习惯性拖延的你会身不由己地寻求那短暂而微小的愉悦感。而这种习惯性反应让你渐渐失去从前的自信，最后干脆不再指望能提高工作效率。</span> </strong></p></li><li><p>拖延就像在服用微量的毒药。一时看不出影响，但日积月累，危害极大。</p></li><li><p>奖励机制。习惯之所以得以发展和继续，是因为它能激励我们，让我们感到愉悦。拖延是一种很容易养成的习惯，因为它会如此迅速地奖励你，把你的注意力转移到更愉快的事情上去。但是好习惯也可以得到奖励。逃开拖延的魔爪，找到各种方式奖励自己学习数学和科学的好习惯会至关重要。</p></li><li><p><strong> <span class="under0">改变拖延的习惯，最重要的是要有“自己一定能行”的信念。你可能会发现，在工作进展中一旦遭遇压力，你就会很渴望退回到原先令你更舒适的习惯里去。但你对新系统效果的坚信不疑，能够助你渡过难关。巩固信念的方式之一就是发展一个新的朋友圈。要想培养“我能行”的信念，就要多和抱有这种信念的同学相处。与志同道合的朋友一起，共同建立一种鼓舞人心的氛围，这样就算你在一时的软弱中忘记了想要坚守的价值，朋友间上进的氛围也能够帮你不忘初心。</span> </strong></p></li><li><p><strong> <span class="under0">关注过程而非结果对避免拖延十分重要。</span> </strong>每天不断地在学习过程上花时间才是重中之重。要关注“番茄时间”，即时长 25分钟的工作时段，而不要专注于完成任务。可以注意到，本图中，物理学家兼冲浪者加勒特·利西（ Garret Lisi）也是如此，他只关注当下，而不是专注于完成这个冲浪动作。</p></li><li><p>一心多用就像不断地揠苗助长。不断地转移注意力，也就意味着你脑中的新观点、新概念没有机会生根发芽。做功课的时候一心多用会让你迅速疲劳。每一次微不足道的注意力转移都会消耗能量。虽然每次转移看起来并不碍事，但是次次累积的结果就让你事倍功半。你也别忘了，这样你会更容易出错，而且学以致用到其他情形的能力也更弱了。一心多用的一个典型反例就是，一般来看，我们发现在学习和听课期间一心多用的学生总会不断考出差成绩。</p></li><li><p>在让你感觉痛苦的事情上多努力一点，最终你得到的好处会很多。</p></li><li><p>世上这种从失败到成功的故事比比皆是。如果你曾经失败，你可能还没意识到这个失败对推动你成功会有多么重要。</p></li><li><p><strong> <span class="under0">你的分数不能说明你的一切，你能做到的远比这个分数好得多。分数反映的是时间管理和成功的概率。</span> </strong></p></li><li><p><strong> <span class="under0">人人都有失败的可能。你会失败，所以要控制你的失败。这就是家庭作业的用意——在这儿就让你把失败全部经历一遍。</span> </strong></p></li><li><p><strong> <span class="under0">有史以来最大的谎言就是“熟能生巧”（ practice makes perfect）。这是个假命题，因为熟练只能让你更好（ practice makes you better），完美谁也做不到。</span> </strong></p></li><li><p>练习就是让我们去经历失败。</p></li><li><p><strong> <span class="under0"> 多关注问题中最困扰你的那个部分。这种持续关注难点的做法，叫作“刻意练习”。尽管这样做有时让人疲惫，但它是高效学习的最重要方面之一。（它的替代或者补充做法，是去解答一个相似的问题，看看能不能轻而易举地拿下它。）</span> </strong></p></li><li><p>相比纯粹的重复阅读，回想才是学习过程中最好的刻意练习方式。</p></li><li><p>低段数玩家和大师级玩家的区别就在于，<strong> <span class="under0"> 大师级玩家会花更多的时间来找出自身弱点并克服不足。</span> </strong>他们坐在那儿下象棋，并不是纯粹为了好玩，但最后，结果喜人得出乎预期。</p></li><li><p>要记住，提取练习是最强效的学习方式之一。它的效果远超过简单地重读材料。</p></li><li><p>在你对理解内容进行重组的时候——为构建更坚固的知识基础，往往会发生这类“知识坍塌”。就语言学习者而言，他们偶尔会有类似的体验，正在学的外语会突然变得跟克林贡语一样晦涩难懂。要记住，掌握新知识是需要时间的。在理解过程中，你会经历一些时期，看似像理解力在发生倒退，而你会因此感到恼火。这是一个很自然的现象，它说明你的大脑正在推敲这些材料。摆脱暂时的困扰期之后，你就会发现自己的知识基础往前迈了一大步。</p></li><li><p>我们的记忆有个奇怪的特质，即主动重复比被动重复让人记忆更深刻。我是说，在以心记的方式学习的过程中（以此为例），等明白得差不多了，如果多花些时间和精力去回想，得到的效果比再看一遍书更好。通过前一种方法回忆字句，下次再遇到相同的内容很可能就有了答案；如果采用后一种方式，我们很可能需要重新翻一遍书。</p></li><li><p><strong> <span class="under0"> 研究表明，测试并不仅仅是衡量所学知识多少的手段。测试本身就是一种强效的学习经历。它可以改造你已有的知识体系或是为其添砖加瓦，同时可以显著地提高你记住学习材料的能力。</span> </strong></p></li><li><p>当你在搭建组块资料库的时候，要刻意关注那些最棘手的概念和解题环节。</p></li><li><p>偶尔也会遇到这种情况，尽管学得很努力，可命运却让你打出一手烂牌。 <strong> <span class="under0">但你要记得机遇的法则：如果准备充分、勤加练习并搭建思维方案库，你会发现幸运女神会更加眷顾你。换句话说，如果你不努力，那么必定会失败，但那些一直在不断努力争取的人定会体验更多的成功。</span> </strong></p></li><li><p>学生常常会用重读材料的方法自欺欺人，而不是通过回想来进行自我测试。你觉得怎样才能避免掉入这个常见的陷阱呢？</p></li><li><p>我会在每天的清晨，整个人状态最好的时候，做数学之类较难的科目。现在我依然在践行这个方法。我最棒的思维大突破，有好几次都发生在卫生间或洗澡的时候——只要我从关注主题上转移注意力，发散模式就会开始施展它的神奇魔力。</p></li><li><p><strong> <span class="under0">刚坐下投入工作前，有点负面小情绪是正常现象。如何应对这些情绪是才是关键。研究者发现，“快人”和“慢人”的不同就在于，“快人”毫不拖沓地把负面想法放在一边，对自己说，“别浪费时间了，现在就动手吧。只要你动手做事情，感觉就会好很多了”。</span> </strong></p></li><li><p>你或许会想，没错，可是你年轻气盛的学习时代早已不再，对于你来说，能早点下班倒是一件好事！然而我最钦佩的一位学习专家，卡尔·纽坡特（ Cal Newport），在学生时代一直把下午 5点作为停工时间。[ 10]他从麻省理工学院顺利毕业，并获得博士学位。<strong> <span class="under0">换句话说，也许一些人觉得这个方法不切实际，但对于高强度学术项目中的本科生和研究生，它有不小的效用。有些人在辛苦工作的同时，坚持为自己留出了有益身心的闲暇时光，久而久之，他们会比顽强不息夜以继日的大忙人做出更优秀的业绩。</span> </strong></p></li><li><p>也许你身兼二职，还有太多的课要上。但是不管生活多么辛苦，总要挤出点时间休息一下。重要的是，要将遥远的目标分解转化为每日任务，一点点攻破难题。你需要把大任务转化为每日清单上的小任务。不积跬步无以至千里嘛。</p></li><li><p>偶尔拖延一下是不可避免的。但要高效率学习数学、科学，你就必须成为习惯的主人。你必须把小恶魔置于掌控之下。行动日志是你的第二双眼睛，它会记录你的成效。最开始用任务清单，你会经常发现自己真是太有雄心壮志——布置给自己的任务根本完不成。但懂得变通的你，很快就学会了如何设定合理、可行的目标。</p></li><li><p><strong> <span class="under0">要记住，你使命的一部分就是要在合理的时间内完成每日任务，这样你的闲暇时光才不会笼罩着愧疚感。你养成的一系列新习惯会为你的生活增添乐趣。</span> </strong></p></li><li><p>“我年轻的时候，要是对一项知识没能即时理解，我会认为我没有这方面的理解能力，认为自己笨。”当然，这想法从根本上就错了。<strong> <span class="under0">现在我明白，做事趁早是多么重要，这样可以留出消化知识的时间。理解无压力了，才会让学习更有乐趣。</span> </strong></p></li><li><p><strong> <span class="under0">这样少见的创造性突破，通常是在经历了一番神经紧张的准备、竭尽全力的努力，甚至包括熬夜工作后才姗姗来迟。这与数学和科学标准的一天学习是大不相同的。它更像体育运动：每隔一阵子会有一天的比赛，你需要在重压之下全力以赴做到最好。但你肯定不是天天都在那种情况之下进行训练的。</span> </strong></p></li><li><p>在你效率特别高并且一直持续工作到深夜的日子里，你可以完成很多工作，但是随后几天，如果看看自己的计划日志，你就会发现，自己没有之前那么有效率了。习惯突击完成工作的人通常比那些合理安排时间、定时定量完成工作的人效率低很多。</p></li><li><p>突击完成工作的时间如果太长，会让你精疲力竭。</p></li><li><p>对于多数人来说，培养数学和科学相关的架构会很慢，因为在吸收这些学科的知识的时候，大脑会在专注模式与发散模式的思考中相互交替。尤其在谈到学习数学与科学时，老生常谈的借口“我在面临截止日期时做得最好”明显是大错特错。</p></li><li><p><strong> <span class="under0">能够控制拖延的习惯，就意味着承认那些带来短暂痛苦的事情最终会是有益的。克服想要拖延的冲动与其他最终有益的小应激源具有很多共同点。</span> </strong></p></li><li><p>我们都知道，看起来好的品质也可能会带来坏的后果。象棋中的“思维定式”就是个好例子，它是指局限于先前的认知而没能认识到更好的走法。集中的注意力一般是良性的，但也会让你不自主地陷入思维定式中，从而无法发现更好的答案。</p></li><li><p><strong> <span class="under0">拖延有益的一面就是让你在急于完成某事之前学会“驻足与反馈”，学会明智地等待。事情总是做不完的，区分事情的优先次序可以让你从宏观层面上做决定，而有时等待也可以让情况自行转变。</span> </strong></p></li><li><p><strong> <span class="under0">情绪会通过说“想做就做，肯定没错”来刺激你，但在很多事情上它会误导你。比如在选择职业的时候，“跟着感觉走”可能就像决定与你最喜欢的电影明星结婚一样。听起来不错，直到现实给你当头一棒。以下就是事实证据：在过去几十年里，盲目地跟随自己的激情，而非理性地分析职业选择是否明智的人，比起那些结合理性与激情选择工作的人，对自己的工作选择感到更不开心。</span> </strong></p></li><li><p>我们通常会对擅长的事情产生激情。与之相伴的错误想法则是，如果我们不擅长做某事，我们就不会具有对它的激情，也永远不会培养对它的激情。</p></li><li><p><strong> <span class="under0">如果你确实想让自己的记忆力和整体学习能力得到大幅提高，最好的办法之一就是进行体育锻炼。</span> </strong>最近几项动物和人类的实验发现，规律的锻炼可以让记忆力和学习能力得到实质性的提升。锻炼似乎有助于促进记忆力相关脑区中新神经元的形成。锻炼也会生成新的信号通路，而且，似乎不同类型的锻炼——跑步或散步和力量练习相比，在分子层面产生的效果会有略微不同。但有氧运动和阻力训练都会对学习和记忆发挥强大的效果。</p></li><li><p>太过专注会阻碍你发现真正要找的答案——就像用锤子钉一颗螺钉，因为你已经认定了那是一颗钉子。<strong> <span class="under0">当你卡在一个问题上，有时候最好的方法就是把它放下，转而解决其他问题，或者干脆小睡一会儿。</span> </strong></p></li><li><p>卡哈尔后来回忆说，他的老师在能力好坏的认识上，看起来可悲得离谱。在他的老师眼中，反应快被等同于智商高，记得住被等同于能力强，服从即品行端正。除了“一些缺点”，卡哈尔的成功也让我们看到，甚至今天的老师是怎样就轻易地低估了学生，学生又是如何低估他们自己的。</p></li><li><p>迁移是把所学的知识从一个知识背景应用到别处的能力。比如，或许你学了一门外语之后，发现学第二门外语就比学第一门外语要轻松了。那是因为当你学过第一门外语，你获得了基本的语言学习技巧，同时你也潜在地学会了相似的新单词和语法结构，它们便迁移到了你的第二门外语学习中。</p></li><li><p>拖延问题最严重的一个方面，就是不停打断自己注意力去查看手机短信、电子邮件或其他更新，这会干扰迁移的进行。时常中断手中工作不仅会让学生无法深入学习，也让他们无法将所学的那一点知识轻松迁移到别的问题上。<strong> <span class="under0">你可能认为，自己查看手机短信时，并没放下学习，但现实情况是，你的大脑因为没有足够的专注时间而无法形成固化神经组块，但这些组块才是将概念迁移到其他区域的核心。</span> </strong></p></li><li><p>比智力更重要的往往是毅力。<strong> <span class="under0">以自学为目标去接触学习材料，能让你以仅有的方式从入门走向精通。通常，不管你的老师多么优秀或课本多么经典，只有当你溜去看看同一领域的其他书籍或视频，才会发现单从老师或课本中学到的不过是冰山一角，事实上这门学科的维度多元而立体，仅这一角就联系着很多其他有趣而迷人的课题，你都可以选择了解。</span> </strong></p></li><li><p>你能做到的最重要事情之一，就是对自己的学业负责。在以老师为中心的学习方法中，老师被当成答案的掌握者，这会让学生不经意间对课堂学习产生无助感。令人惊讶的是，教师评估系统可能会加强这种无助感，因为这样的教学系统，会让你把自己的失败归咎于老师，认为其缺乏激励或指导能力。而以学生为中心的学习方法是，学生要克服困难互相学习，并引导自己来掌握学习材料，这方法有着极好的学习效果。</p></li><li><p>失败并没那么可怕。你要分析自己的问题所在，作为前车之鉴，让自己将来做得更好一些。<strong> <span class="under0">比起成功，失败是更好的老师，它会让你反思自己的学习方式。</span> </strong></p></li><li><p>某些“慢”学生之所以在数学和科学的学习中挣扎，是因为那些在别人眼里显而易见的概念，他们却难以理解。很不幸，这些学生有时会认为自己不够灵光。但事实上，他们更加慢条斯理的思考方式，能让他们注意到一些别人忽视掉的困惑细节。这就像徒步旅行者会注意到松树的香味，会发现树丛中小动物的踪迹，而那些驱车前行者只顾着以每小时 70千米的速度向前奔跑。但可悲的是，有些导师会觉得，一些普通学生提出的看似简单的问题是对他们的侮辱。他们不会承认这些问题的思考价值，反而可能会无礼打发提问者：“我是怎么跟大家讲的你就怎么做。”而这只会让提问的学生觉得自己笨，而且疑惑更深。（要记住，有些指导老师可能不知道你是否认真思考了材料，或认为你没有自主理解问题，这些情况在我行为叛逆的高中时期就出现过。）</p></li><li><p><strong> <span class="under0">你会发现，当你进入职场之后（也许你还没涉足），比起给予你真正的帮助，很多人会更有兴趣去肯定自己的观点，这会让他们显得精明强干。在这种情况下，以开放之心接受建设性建议和批评，和看似有建设性意义却饱含恶意的言论和批评，是有天壤之别的。不管是什么批评，只要你觉得自己很肯定（“我是对的”），那么很可能你就是正确的，或者（甚至更有可能的是，由于情绪的自欺欺人），你也许需要回过头，从更加客观的角度重新检查。</span> </strong></p></li><li><p><strong> <span class="under0">数学不好的人往往会落入“套公式”的陷阱，他们迫切地想要归纳书本和老师的做法，然后把问题直接套进公式就万事大吉。而会学习的人则会检查自己所做的一切，确保是行得通的。他们会思考方程的意义，它们从何而来。</span> </strong></p></li><li><p>和朋友一起学习能让你更容易看出自己哪里理解有偏差。朋友和队友都会成为有问必答的大容量发散模式，在你的大脑之外，为你弥补缺失或忽视的地方，而且就像我们之前说到过的，向朋友解释也有助于你建立起自己的理解。</p></li><li><p>合作的重要性不仅体现在解决问题上，在你想要职业规划时也大有裨益。队友一句简单的建议，比如上一门热情的教授开的课，或者应聘一个新的职位，都有可能扭转你的人生道路。社会学家马克·格兰诺维特的论文《弱连接理论》是社会学中最常被引用的一篇文章。其中提到，你的熟人数量，而非好友数量，保证了你能得知的最新信息以及工</p></li><li><p>和你一起学习的同学应当具有积极的批判性，至少偶尔要是这样。对团队中创造力的研究表明，那些气氛和缓不做批判的互动讨论，不如允许甚至渴求批评的讨论有效。如果你或你的同伴认为你的理解有误，最重要的是坦诚说出来，然后具体讨论何处有误，不要担忧这会伤害到对方的感情。</p></li><li><p>当然，你不会想平白地得罪别人，但过多担心批评而塑造出的“安全环境”，实际上会抹杀建设性和创造力，因为你会过多地注意人而不是事。<strong> <span class="under0">像费曼一样，你要了解，无论是你给别人的还是别人给你的批评，都是对事不对人的。这关系你要了解的事物本身。人们往往意识不到，竞争是一件好事，它可以激发最大的潜能，是激进的合作。</span> </strong></p></li><li><p><strong> <span class="under0">虽然前面已经提过，但还是有必要把下面这句话“大写加粗”重申一遍：考试本身就是一种效果非凡的学习经历。这意味着，你投入考试的一切努力有着举足轻重的意义，包括一些基础小测试，如测试自己能否回想起知识点，还有备考时对解题能力的测试。在学习内容相同的前提下，如果比较同样一个小时的学习或考试，你会发现用这一个小时来考试能学得更多，记得更牢。似乎考试有让人精神集中的美妙效果。</span> </strong></p></li><li><p>这个做法不是一般的好用。“由难入简”法会把首个最难题目装进你的大脑，然后转移注意力。靠这两步就能让发散模式开始运转了。如果首道难题进展不顺，那就跳到下一道简单的题目，把它做出来，或能做多少是多少，之后接着做另一道看起来很难的题目，并努力取得一点点进展。一旦感到陷入了困境或停滞不前，就再换一道简单些的题目去做。</p></li><li><p>伟大的艺术家、科学家、工程师还有像马格努斯·卡尔森这样的象棋大师，首先靠集中注意力利用他们大脑的自然节奏，努力在脑中思考问题，之后再将注意力转向别处。这种在专注和发散模式下交替思考的方法，能让思维的云朵更容易漂移到大脑的新领域。最终，这一片片云朵，经过再提炼、再蓬松，就能为你带回一部分有用的解题思路。</p></li><li><p><strong> <span class="under0">经常是临阵磨枪的死记硬背，让许多学习层次较低的学习者错以为他们已经搞懂了数学和科学知识。等到要开始学习更高层次的知识时，他们薄弱的理解就会轰然倒塌。但逐渐了解大脑真正的学习方式之后，我们不会再简单认为记忆背诵就是一件坏事。我们现在知道，对掌握数学和科学至关重要的一点，是要让透彻理解的组块成为自己根深蒂固且久经磨炼的一部分。我们也知道，正如在最后关头才开始赛前训练，运动员是无法养成肌肉一样。学生如果在学习数学和科学的过程中拖拖拉拉，他们也不能培养出固化的神经组块。</span> </strong></p></li><li><p><strong> <span class="under0">我们发现，有时要是把执着用错了地方，也就是只在同一个问题上没完没了地兜圈子，会让我们解决这道题目的能力受到限制。然而同时，纵览全局和持之以恒的品质，几乎在任何领域都是成功的关键。遇到悲观论调和人生坎坷在所难免，虽然它们让我们的目标和梦想显得遥不可及，但通过这种旷日持久的坚持不懈，能让我们度过这一时不顺。</span> </strong></p></li><li><p>但你现在知道了，把握被组块简化过的思想精髓才是王道。所以下面我要做最后的思想总结——它们是这本书中一些核心观点的组块精华，我提炼为 10个好的和 10个坏的学习法则。</p></li><li><p>10个好的学习法则<br>  1.运用回想。读完一页书，看向别处并回想主要观点。少做标记，没记住之前不要画重点，要先回忆。在去教室的路上或不同于先前学习空间的室内，试着回忆要点。回忆的能力，即能够得到自己心中的想法，是学好知识的关键标志之一。 </p><p>  2.自我测试。任何内容皆可测试。无论何时皆可测试。抽认卡片是你的良师益友。</p><p>  3.对问题进行组块。搭建组块的过程就是理解问题、练习解题方法的过程，有了组块才能在脑中瞬间闪现答案。解决一个问题之后，要将其重新排演一遍。确保在许久没接触这道题后，你还能解答出问题的每个步骤。把问题当成一首歌，在心里学着一遍一遍遍地唱，这样让信息合成为一个流畅的组块，任何时候都能任你提取使用。 </p><p>  4.间隔开重复动作。无论学哪门课，不要安排得太集中，要像运动员一样每天安排些练习量。你的大脑就像一块肌肉，它一次只能处理某学科上一定的练习量。</p><p>  5.在练习中交替使用不同解题技巧。做任何练习的期间不要只用一种解题技巧，否则一段时间过后，你只是在模仿自己之前解题的老路子。解题方法要混合使用在不同的题型上。这么做会让你同时知道如何以及何时用一个解题方法。（书本一般都不会以这样的方式编写，所以你需要靠自己去这么做。）每一门作业和考试之后，要回顾错题，确保理解自己的犯错原因，之后重新解答一遍。想要最高效地学习，就在抽认卡片的一面用手写（别用键盘打字）下问题，再在另一面写下答案。（用手书写比起打字时构建的神经结构更坚实。）如果你想把它上传到智能手机的应用软件里，你也许会把卡片拍下来。你可以用不同的题型随机测试自己。另一个测试自己的方法，是随机翻开书本挑一个问题，看看自己能不能在很久没碰这道题之后还能给出解答。</p><p>  6.注意休息。有一种常见现象，是学数学或科学时，你会难以解答或理解一些初次遇到的问题或概念。这就是为什么每天学一点，比集中在一天学会好很多。当你对一道数学或科学上的难题灰心丧气时，可以休息一下，这样你大脑的另一部分就能在后台接着工作。</p><p>  7.使用解释性的提问和简单类比。无论何时遇到难懂概念的困扰，都要自己想一想，怎样解释才能让 10岁小孩都明白这个概念？使用类比真的有用，比如电流就像水流。不要只想解释，要大声说出来或者写下来。凭着嘴上说手上写的功夫，你能把所学所学知识编译（将知识转换到神经记忆结构中）到更深的记忆中。 </p><p>  8.专注。关掉手机和电脑上所有会干扰你的提示音和闹铃，并在计时器上设定 25分钟。你要在 25分钟之内集中注意力，并尽可能勤奋工作。计时器的时间一到，给自己一个小小的、有趣的奖励。一天中安排几个这样的工作期间，能实实在在地推进你的学习进度。试着规定学习时间和地点，不要瞄电脑和手机，让学习变得自然而然。 </p><p>  9.困难的事情最先做。最清醒的时候，要去做一天中最困难的事情。 </p><p>  10.心理对照。想象过去的你，对比通过学习能够成就的那个自己。在你的工作区域贴一张图或几句话来提醒自己的梦想。如果觉得自己缺乏动力了，就看看它们。对你和你爱的人，这么做一定值得！ </p></li></ul><ul><li><p>10个坏的学习法则你要避免这些方法，因为它们会浪费你的时间，甚至还会让你以为自己真的在学习！ </p><p>  1.被动重复阅读。很被动地坐着看书，目光再次扫过书页上看过的内容。除非你能闭卷回忆要点，证明读过的材料进入了你的大脑，否则重复阅读就是浪费时间。 </p><p>  2.满眼尽是重点标记。在文中标记重点，会让大脑以为自己已经记住了学习内容，但实际上你只是手上动动（大脑记没记就不一定了）。在书上各处适当标记是不为过的，有时它会帮你突出重点。但是，如果把它当成辅助记忆的工具，就要确保自己标记下的内容也记在脑子里了。</p><p>  3.瞟一眼解题方法，就觉得胸有成竹。这是学生学习时所犯的最糟糕的一个错误。你要做到的，是不看答案也能一步步解决问题。 </p><p>  4.等到火烧眉毛才开始学习。你会在田径运动会开始前的最后一刻才开始猛练一番吗？你的大脑如同一块肌肉，它每次在一个科目上能够应付的练习量是有限的。 </p><p>  5.已经清楚解法，但仍反复解答同一题型。如果练习中你只是坐在那解决相似的问题，你实际并没有在备考，而这就像一场盛大的篮球赛来临之际，你却只做控球这一种练习。 </p><p>  6.与朋友一起把学习变成了闲聊。和朋友核对解题方法，拿自己知道的问题相互提问，这会让学习更有趣，同时暴露你的思维缺陷，并让你的学习更深入。但是，如果任务还没完成，共同学习却成了闲谈打趣，你可就在浪费时间了，这时就该换个学习小组了。 </p><p>  7.做题前忽视读课本。还不会游泳的时候你会轻易跳进泳池吗？教科书就是你的游泳教练，它会指引你通向答案。如果嫌麻烦而疏于读书，你不仅会犯错，还会浪费时间。在你开始读书之前，快速浏览一遍章节和板块内容，能让你对它有个大致的概念。 </p><p>  8.有疑问点，却不找导师或同学核对并解决。教授会习惯性地为那些充满困惑的学生指点迷津——这是我们教师的职责。让我们担心的是不来提问的学生。希望你别成为其中之一。 </p><p>  9.时常分心，却还以为自己能学得足够深入。每次受到即时短信或谈话的影响，你能在学习上投入的脑力都会变得更少。每一次被打断注意力，小小的神经都会被再次连根拔起，无法在脑中扎根生长。 </p><p>  10.睡眠不足。睡眠中，你的大脑会将解题技巧拼凑在一起，同时它也会对你睡前习得的任何内容进行反复练习。长时间的疲劳会让毒素在脑中堆积，毒素会破坏神经连接，让你无法用它们快速有效地思考。如果考前没睡好，就算之前做过怎样的努力也无济于事。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《九败一胜》</title>
      <link href="/2019/07/21/reading-notes-of-nine-defeats-and-one-victory/"/>
      <url>/2019/07/21/reading-notes-of-nine-defeats-and-one-victory/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>培训期间，看完了《九败一胜》。</p><hr><ul><li><p><strong> <span class="under0">过去的长期经验不是最重要的，快速学习能力是决定一个人发展现状以及未来前景的重要因素。</span> </strong></p></li><li><p>“大家都在往这个行业进入的时候，我们需要做得更好，如果我们不能做得更好，我们就处在一个非常危险的状态。甚至可以毫不夸张地说，美团网这家公司离破产永远只有 6个月时间。我这么说并不是危言耸听，也不是说美团网是个不靠谱的公司，大家不需要担忧这个事情，而是要拥抱这个事情。<strong> <span class="under0">如果你在另一个公司，它认为它可以高枕无忧的话，那么它离死不远。并不是美团网不靠谱，而是这个行业、这个时代、这个世界变化特别快。凡是没有危机意识的公司，不战战兢兢的公司，不管它现在看起来多么强大，都是非常危险的，而且它比那些虽然小，但是始终保持非常警惕状态的公司和人更危险。”</span> </strong></p></li><li><p>只有死者才能看到战争的终结</p></li><li><p>凡是能让用户以更低的成本获得更好的服务和产品的都是创业者的机会。</p></li><li><p>以身作则不是塑造公司价值观的最好办法，而是唯一标准。</p></li><li><p>先做出满足用户核心需求的功能，其他的可以在用户使用中快速迭代，改善。使用的人多了，应用就好用了。</p></li><li><p>王兴能够多次抓住互联网的潮流，除了跟王兴本人的思维方式有关，还与三个人一开始的分工方式——让他从烦琐细碎的技术活儿里解放出来——有关。</p></li><li><p><strong> <span class="under0">人如何有长远的眼光？你不天天观察外面的世界，只顾埋头干活儿，哪里来的眼光呢？</span> </strong></p></li><li><p>在此之前，他们一直觉得应该做出一款尽善尽美的产品，一推出来就是杀手级应用，人见人爱。事实上，没有必要做出杀手级应用，先做出满足用户核心需求的功能，其他的可以在用户使用中快速迭代、改善。使用的人多了，应用就好用了。</p></li><li><p>今天看来，这是顺其自然的决定，但在当时是不同寻常的。当时有一句话很流行，在互联网上你不知道跟你聊天的，是一个人还是一只狗。那时候，中国互联网用户还没养成在互联网上留下真实信息的习惯。</p></li><li><p><strong> <span class="under0">卖掉校内网：浪费机会远比错失机会更让人刻骨铭心</span> </strong></p></li><li><p>他身上有一种可贵的品质，是真的想做一些事，有长远的打算，不是短期行为。他给我提了几个目标，不知道他今天是否还会提起，他希望做的事有利于社会，有利于合作伙伴，有利于自己。王兴让我觉得，他是值得信赖的，是可以长期共事的人。这是这个团队一直能够坚持下来的原因。如果老板只是想赚一点儿钱就跑，那他的团队是不可能着眼长远的。</p></li><li><p>他们翻字典都快翻了一个礼拜，实在找不到好域名，好的都被注册了。杨俊想了一个主意，按照声母和韵母排列组合，写了一个程序，在服务器上跑，查域名注册，跑出来的都是双拼组合，挑了两个：饭否和在否。没有人注册的域名，每年只需要花 60元。</p></li><li><p>他不是天生智商就高人一等的，而是好学高人一等。就像挖坑一样，天才一铲子挖一尺，你一铲子挖一寸，坚持挖十天，别人来看坑的时候，也觉得你聪明，居然能挖出这么深的坑。王兴所表现出来的聪明是长期学习之后形成的结果。</p></li><li><p>王苗家从不打麻将，也不会大吃大喝，“家里有好的环境，大人勤勉做事，小孩也不会偷懒。”他喜欢书，买了很多书，也鼓励儿女博览群书。“儿女都是理科生，但人文素养都还可以，不像有的大学生，除了专业知识以外，文化知识少得可怜。我认识的很多有钱人，家里什么豪华家具、家电、车都有，就是没有书，很糟糕。”</p></li><li><p>这是 1995年的事。这一年通常被视作中国互联网商业元年。丁磊在宁波搭建了他自己的 BBS；马化腾在深圳创办了 PonySoft站台；马云在杭州开设海博电脑服务有限公司；张朝阳带着 ISI中国首席代表的头衔返回了中国。</p></li><li><p><strong> <span class="under0">“清华给我留下了很深的烙印，最主要还是校训‘自强不息，厚德载物’。清华对我最直接的影响，不是专业课，而是前辈做事的高度。有机会在这样的学校读书，会对自己有更高的要求。”</span> </strong></p></li><li><p>慕岩回忆， 1996年他和杨锦方在中关村打工，找了几家中关村的小软件公司，发现都是北京大学的文科生开的。他傻乎乎地问：“你们学哲学、历史的，怎么能开软件公司呢？”对方回答：“我们定下方向，找你们清华的程序员写写就完了。”这让他们深受刺激。回学校后，他们就写了创立“清华科技创业者协会”的申请。</p></li><li><p><strong> <span class="under0">如果一个产品没有把基本功打扎实，没有分清楚什么是核心需求，没有明白要满足用户的哪些需求，学那些文艺情怀，完全是误入歧途了。</span> </strong></p></li><li><p>王兴中学的时间喜欢玩游戏，例如刺杀希特勒、沙丘、魔堡 2、三国二代到五代，上大学之后就少玩儿游戏了。<strong> <span class="under0">他说：“赌博是浓缩在一个时间点里干这件事，你可以把生活看作终极的游戏，生活是更大的赌场，这样你就不需要玩儿这些了。”</span> </strong></p></li><li><p><strong> <span class="under0">王兴显得很平淡，他说这是过去的事情了，不去想它。杨锦方觉得王兴的心态很难得，想要做大事的人，最忌讳的就是躺在过去的事情上。“</span> </strong></p></li><li><p>初心不改，如果说王兴这些年有变化，那就是更务实了。原先想着改变世界，给社会带来更多价值，现在会想得更全面一点儿，要确保事情做成。这导致了他做事有足够的耐性，深思熟虑，追求完美，不为短期利益放弃原则。</p></li><li><p>王兴在内部分享的时候就告诉大家，团购帮商家宣传，节省下来的广告成本，一部分让利给消费者，一部分是商家的，剩下的就是我们的利益，这是赚钱的根本方式。</p></li><li><p>所以这个资金的流向是从消费者到美团网，美团网返一个美团券给消费者，然后消费者去商家消费，最后商家拿着美团券到美团网结账。</p></li><li><p>大家只知道第一名，阿蒙森团队是第一个到达南极点的团队。所以，差不多时间出发，早一点到和晚一点到，完成目标和没完成目标的区别，就是胜利跟失败的区别。但这个故事并没有这么简单，那是一个多么危险的环境，所以成功和失败的区别不光是说你先到了、晚到了，还有后面的故事，你不光要到南极点，你还要活着回去。</p></li><li><p><strong> <span class="under0">要做多么多么充足的准备，要给自己留下犯错的空间，或者对我们来讲是学习的空间、成长的空间。所以这是一个非常非常大的区别，资源是否足够，是否有空间。</span> </strong></p></li><li><p><strong> <span class="under0">在一个极限环境下面，你要做到最好，但是你要做到可持续的最好，你就不能太努力，一旦你出汗就非常非常糟糕。如果你太用力，一兴奋，出汗了，那么待会儿风一吹就结成冰了。所以任何时候，太激进其实很有可能会带来长期的负面影响。做到这点需要高度严守既定的纪律，在事情容易的时候，在环境顺利的时候，不要得意忘形，坚守纪律</span> </strong></p></li></ul><ul><li><p>我们团队很年轻，年轻有一个好处就是学习能力强，我们可以充分学习所有的东西，我们可以从阿里学习很多东西，但是最终我们一定要超过阿里。我们要向任何一个对手学习，任何一个同行学习，但我们最后目标应该是超越它们，这是整个公司的目标，也应该是每个人的目标，不管你在哪个岗位上，总有办法可以做得更好，学习新的东西，目标是超过它们。</p></li><li><p>过程中，在合适的情况下发生的事情。大家知道，我们的同行之前有不止一家做过不同的尝试，结果都不顺利，这是因为你不能把上市作为目标，而是应该有更坚实的目标，要服务好消费者，服务好商户，让整个企业能够健康持续地运转</p></li><li><p>不管所谓外界环境好坏，我们不依赖运气，我们要像成功的阿蒙森团队一样，像他们每天不管天气好坏坚持前进 30公里一样，我们要每天进步一点儿，只要我们能做到这一点，每天进步一点儿，每个人、每个部门、整个公司每天进步一点儿，就按照我们的计划执行，我相信到 2012年年底，到明年的今天我们再回顾的话，就会发现我们又前进了非常非常大的一步，哪怕我们每天看起来前进得很少。</p></li><li><p><strong> <span class="under0">只有这种方式，看起来不那么激动人心的方式，其实是最考验毅力的，也可能是最有产出的。一个简单的事情重复做，越做越好，越做越专业 </span> </strong></p></li><li><p>王兴参加会议，遇到万科总裁郁亮。郁亮说：小公司做起来关键是抓住了一个机会；中等公司的关键是有一批比较强的高管，大公司的关键是要有正确的流程和价值观。王兴以为然。</p></li><li><p><strong> <span class="under0">“对未来越有信心，对现在越有耐心。”</span> </strong></p></li><li><p><strong> <span class="under0">做生意恨不得把桌上的钱全部装在自己的口袋里，这个叫精明。真正高明的生意人，他会说，我赚一部分，留一部分给合作伙伴，留一部分给客户。</span> </strong></p></li><li><p>我不光觉得要感谢现在的 2700个同事，我觉得还要感谢现在可能已经离开我们，但是曾经为美团这个事情添砖加瓦的所有人。现在我们在全国 94个城市有 2700个同事，但我们曾经有更多，不管他们因为什么原因离开了美团，他们在这期间为这个事业添砖加瓦，做了事情，服务了消费者，服务了商家，我觉得也应该对他们表示感谢，没有他们曾经的努力，美团不会有今天。所以，我们要感谢所有的同事，在场的，不在场的，现在的以及曾经的同事，谢谢大家。</p></li></ul><ul><li><p>所以，这是目标，目标不管宏伟不宏伟，其实你只要去分解它，就可以理解它，而且我相信一个高的目标是会对每个人有激励作用的，这是过去三年给我最大的感受。当开始的时候，坦率地说，我认为自己很乐观，但是我没有想到消费者需求是如此旺盛，团购 O2O这个事情发展得如此迅速，而我们的团队是如此给力。所以，在这个时间点，我相信我们有理由骄傲，我们有理由自豪，但是我们更有理由要看到前面还有更长的路，更大的空间。</p></li><li><p>所以在这一点，我不光要感谢在场的同事，还包括那些曾经和我们共事但是已经离开的同事。</p></li><li><p><strong> <span class="under0">企业家精神最精到的描写是，企业家本质是对机会的追求，暂时无视自己现在控制多少资源。这是市场经济的本质，为什么资本主义是资本雇用劳动力，而不是劳动力雇用资本？创业者就是，你要干这件事，但你缺乏其他东西，你只要有能力，你就可以去寻求其他东西。回到校内，我们追求梦想，我们认为这是很大的事情，却没有控制足够的资源。光有企业家精神是不够的，你还得要沟通，容忍力。你活在这个世界上，不管是生活，还是做事，都不是你一个人做，你需要跟人沟通，不管是和同伴、同事、用户，还是客户，本质都是沟通问题。做校内网的时候，我需要资源，但我没有资源。当时我不懂，我没有资源不要紧，资源的流动性很强，如果天使投资人投了钱，他们可以找其他人来，资源就聚拢过来。</span> </strong></p></li><li><p><strong> <span class="under0">如果要革命，最好是自己革自己的命。</span> </strong>没有人知道革命的第一枪在哪里打响，这才是千亿、百亿规模的公司始终面临的危机。</p></li><li><p>顺势而为，是最舒服的创业。</p></li><li><p>干嘉伟加入美团网之后，带进来一个方法论：定策略、建资源、拿结果。要想得足够清楚，定下策略，然后去找人、钱、物来做这件事。</p></li><li><p><strong> <span class="under0"> 我这么说并不是危言耸听，也不是说美团是个不靠谱的公司，大家不需要担忧这个事情，而是要拥抱这个事情。如果你在另一个公司，它认为它可以高枕无忧的话，那么它离死不远。并不是美团不靠谱，而是这个行业、这个时代、这个世界变化特别快。凡是没有危机意识的公司，不战战兢兢的公司，不管它现在看起来多么强大，都是非常危险的，而且它比那些虽然小，但是始终保持非常警惕状态的公司和人更危险。</span> </strong></p></li><li><p><strong> <span class="under0"> 进入了一个正确的行业，这个选择可能比你其他很多努力都更重要。因为当你处在一个错误的行业、不高速增长的行业，你做的很多努力，都是被打折扣的事情。而你在一个高速成长的行业、公司里面，你愿意付出自己的努力，去推动公司成长，个人成长会和公司成长、行业成长叠加在一起，你就会有最快的成长。</span> </strong></p></li><li><p>我问王兴如何理解 CEO的职责。他回答：“ CEO没法让别人代劳的职责是，第一，设计公司整体愿景和所有战略，确保传达给所有利益相关方，不仅是管理层，包括所有员工，不光是公司内部人，包括股东、消费者、商户和合作伙伴。第二，招到并留住最优秀的人。第三，确保公司始终要有足够的资金，这和空气一样。其他事情都应该找最专业的、最好的人来做。”</p></li><li><p>CEO最重要的就是四个字：断事用人。 CEO要判断并告知，什么是最重要的，使命是什么，价值观是什么，再授权给人去做决定。若是下属迷惑、搞不清楚方向的问题，就由 CEO做判断，确定朝哪个方向走。 CEO用什么样的人，就能听到什么样的建议，靠谱的人就是靠谱的建议，这样 CEO就能解放出来，有更多的时间去关注更重要的事、未来的事。如果是不靠谱的人，那 CEO就得忙死了，要么他背着 CEO做很多不靠谱的决定，要么他整天来问这个该怎么办，那个该怎么办。</p></li><li><p>王兴自己说：“我觉得我从来不认为自己很倒霉，或者际遇很悲惨。我当时就觉得，那些跟我一起做事的人，我希望他们能够有更多的回报。”他依旧有他的理想，希望改变世界，但他现在也会考虑，还有重要使命是让员工过上体面的生活，他会理解和包容不同人的追求，兼顾理想和现实。</p></li><li><p><strong> <span class="under0"> 不管在原来的行业做得多么成功，如果不能拥抱变化，那就不行。拥抱变化，就必须学习成长，持续学习新的东西。行业在变化，如果我不学习，我们就赢不了这个变化，不能引领变化，最终我们就做不到最重要的一条，以客户为中心，因为别人会有比你更好的方式满足他。很有趣的是，很多人学习能力不强，学习动力不强。首先要确定他能不能适应这个工作的要求，然后我们会淘汰。这个听起来很残酷，但我觉得这是正确的事，阿里巴巴原来就是。今天的最高表现是明天的最低要求。</span> </strong></p></li></ul><ul><li><p>一家太舒服的公司，也可能意味着停滞，让很多优秀人才觉得没有机会，纷纷离开。</p></li><li><p>最好的状态是什么？是待在挑战圈和恐慌圈的边缘，既让你觉得这个事情好像不行，但又不至于崩溃掉。这样你受到的张力是最大的，你的成长是最快的。</p></li><li><p><strong> <span class="under0"> “我们没有办法知晓未来会发生什么威胁到我们的事，以预先避免。未来是不确定的，只能战战兢兢，如履薄冰。”王兴说。</span> </strong></p></li><li><p>今天最大的趋势是什么？其实还是互联网企业进入原来非互联网的领域，我觉得这看起来没有互联网企业之间的竞争那么激烈，但影响更深远。以前互联网企业的竞争，大家都在互联网圈子里讨论，现在都变成全民关注的社会新闻了。</p></li><li><p><strong> <span class="under0"> 大部分人望着高峰，但他一生从来不曾攀上过，只是听听别人的经验就已经很满足，而自己不愿意花费任何心血；第二种人依照前人的成功经验，成功登顶了；第三种人没有登顶的经验，但是他又怀疑前人登顶的经验，于是他决定自己探索出一条路来，最终也成功登顶了。第三种人于是明白了，登山没有一条唯一固定的道路，有多少人就有多少条路。”</span> </strong></p></li><li><p>我问王兴，创业十年你学到了什么？</p><p>  2014年 3月 1日晚，我清晰地记得，在咖啡馆昏黄的灯光下，因为感冒而精神不大好的王兴，一脸严肃：</p><p>  我学到，<strong> <span class="under0"> 人非常重要的状态是既非常自信又非常谦逊。</span> </strong></p><p>  创业的方向，你得找到一个有规模的市场，但是还不成熟的一个市场，有你的腾飞空间，你去搞别人已经搞得很好的东西，是何苦呢？整个节奏如何把握，何时选择做怎么样的东西，这也是重要的。特别是在市场比较盲目、比较浮躁的状态下，你得做正确的判断。这实际上是整个团购史的一个缩影。创业过程中不能太冒进，但也不能太保守，这是一个平衡的艺术。你太激进了，可能导致弓弦崩断，太保守呢，可能机会就错失了。还是要回到 CEO要干的事情，管方向、管人、管钱。 CEO必须清晰地明白公司的愿景和中心战略，充分传达给相关方面，这是方向的事；人的话，就是要能够招人、留人、培养人。钱的话，可能不需要直接去管，但要确保公司有足够的资金，不会因为资金的匮乏而无法推进某些计划。我觉得创业绝大部分人会失败，要做最坏的打算。不过，你创业不创业，不取决于这件事会不会失败，而是在于你对这个过程是否感兴趣，是否足够相信你的目标。就算失败了，如果你觉得这个旅程是值得的，你的努力是值得的，那你就干吧。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>mac系统空间清理</title>
      <link href="/2019/07/07/Mac-system-space-cleaning/"/>
      <url>/2019/07/07/Mac-system-space-cleaning/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>mac使用了一段时间过后,提示空间不够。在发现很大的磁盘空间都是被系统占用(关于通过本机-&gt;存储空间 进行查看)。<br>在网上查看了一些方案看解决这个问题,目前只找到了一个适用于我的方案，做下记录。</p><hr><h3 id="解决办法"><a href="#解决办法" class="headerlink" title=" 解决办法 "></a><strong> 解决办法 </strong></h3><p>我使用的辅助清理的软件是OmniDiskSweeper。</p><p>通过该软件分析到,根目录下的<code>.cleverfiles</code>的<code>hlink.ref</code>目录占用空间很大。<br>这个目录存放的是之前删除过的软件,最终都跑到这个目录下了。之所以是这样，是因为电脑上安装了<code>disk drill</code>,它会把这个删除的内容部分到前面提到的目录。所以直接去删除hlink.ref目录,还是会立刻恢复,是删除不掉的。</p><p>1.需要先取消<code>.cleverfiles</code>目录的隐藏属性，才可以删除<code>hlink.ref</code>目录。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">#取消隐藏文件夹：</span><br><span class="line">chflags nohidden /.cleverfiles</span><br><span class="line"></span><br><span class="line">#设置隐藏文件夹：</span><br><span class="line">chflags hidden /.cleverfiles</span><br></pre></td></tr></table></figure></p><p>2.再删除<code>hlink.ref</code>目录即可。<br>通过该方法,我清除了了20多GB的内容,但是还有很多空间被系统占用。日后找到解决的办法，再记录到本文。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/guansixu/p/6208295.html" target="_blank" rel="noopener">Mac 下修改文件或文件夹的隐藏状态</a><br><a href="https://bbs.feng.com/forum.php?mod=viewthread&amp;tid=8208801&amp;mobile=2" target="_blank" rel="noopener">请问大侠如何清理黄色部分</a></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小米8-&gt;Task :app:installDebug FAILED &amp;&amp; INSTALL_FAILED_USER_RESTRICTED:Install canceled by user</title>
      <link href="/2019/07/07/xiaomi8-%3E-Task-:app:installDebug-FAILED-Failure-and-INSTALL_FAILED_USER_RESTRICTED:-Install-canceled-by-user/"/>
      <url>/2019/07/07/xiaomi8-%3E-Task-:app:installDebug-FAILED-Failure-and-INSTALL_FAILED_USER_RESTRICTED:-Install-canceled-by-user/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在想把react-native跑在真机上进行开发的时候(模拟器是没有问题的),抛出了这个错:app:installDebug FAILED</p><p><img src="/img/react/INSTALL_FAILED_USER_RESTRICTED/1.jpg" alt="1.jpg"></p><p>我一开始搜索查询的关键词是<code>小米8 &gt; Task :app:installDebug FAILED</code></p><p>这样查找出来的结果,大多数是让关闭<code>启用MIUI优化</code>,还有一些其他的方案,也是没有效果的。</p><p>折腾了一两个小时过后,我换了一个query进行搜索,<code>小米8 Failure [INSTALL_FAILED_USER_RESTRICTED: Install canceled by user]</code>，立马解决</p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title=" 解决方案 "></a><strong> 解决方案 </strong></h3><p>小米手机：<br>1）去设置<br>2）点击更多设置<br>3）点击开发者选项<br>4）点击开启”USB安装（允许通过USB安装应用）”</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><strong> 总结 </strong></h3><p><span class="under0">学会换个搜索关键词,重新组织下问题描述。</span></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/qq_30552993/article/details/61414620" target="_blank" rel="noopener">16、安装APK错误 Failure [INSTALL_CANCELED_BY_USER]</a><br><a href="https://github.com/facebook/react-native/issues/2720" target="_blank" rel="noopener">[Android] Upload package to device fails</a><br><a href="https://stackoverflow.com/questions/37641670/adb-install-failure-install-canceled-by-user" target="_blank" rel="noopener">Adb install failure: INSTALL_CANCELED_BY_USER</a></p>]]></content>
      
      
      <categories>
          
          <category> react </category>
          
      </categories>
      
      
        <tags>
            
            <tag> react native </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《不吃鸡蛋的人》</title>
      <link href="/2019/05/04/reading-notes-of-no-eggs-for-him/"/>
      <url>/2019/05/04/reading-notes-of-no-eggs-for-him/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近读了《不吃鸡蛋的人》。</p><p>四月初在图书馆借的,因为自己还挺喜欢吃鸡蛋的。读下来发现还写得挺好的。作者钱佳楠是一个八零后。</p><p>我看文学类书籍大多时候都是看比较厉害的的作家(他们大多数年纪都比较大或者已经作古了),这样踩坑的几率会小很多,毕竟有的书质量是比较糟糕的。另外,在读的不错的书中,提到的作家或者书籍名我也会记录下来,这些也是我阅读的素材。</p><p>但是其实年轻人里面也会有不错的作品, 但是这类作品一般说来我是很难看到的。</p><p>念高中的时候,想着自己上了大学可以读很多书。但大学期间我并没有读太多的书，读了一些书，也没有做什么记录。还有五十天就要毕业了,用这些闲暇时光,读读书也很棒。不少时候会迷茫、焦虑, 也希望通过读书自救。</p><p><strong> <span class="under0">世界的一部分悲哀是：在真正能读懂书的年纪，很多人已经不读书了。</span> </strong></p><p><img src="/img/阅读笔记/reading-notes-of-no-eggs-for-him/1.jpg" alt="1.jpg"></p><hr><ul><li>那时他们终于柳暗花明，抬眼看到“上海火车站”五个红色的大字，他告诉周允，他母亲后来跟他说，<strong> <span class="under0">这个世界本来就有吃鸡蛋的人和不吃鸡蛋的人，吃不吃都没什么大不了，只是你不要喜欢吃但强忍着不吃，或者明明不喜欢吃而强迫自己吃，就可以了。</span> </strong></li></ul><ul><li><p>谈恋爱，在周允看来无非就是浪费时间的事情。周允告诉过叔昂，不要烦我，我不想浪费时间。<strong> <span class="under0">叔昂对周允说，时间一定会枉费，因为时间如流水，靠双手注定抓不住。</span> </strong></p><p>  她告诉他，现在这个阶段要好好念书，考个好大学才是真的，其他都是假的。</p><p>  他说，我跟你不一样，我不需要用读书来改变命运。我读书没这么功利。</p><p>  周允说，既然你知道和我们不一样，那就别烦我了。我的家人还要靠我读书来拯救他们。<strong> <span class="under0">叔昂却告诉她，读书只能拯救你自己，拯救不了其他人，如果你勉强读书，连你自己都拯救不了</span> </strong></p></li></ul><ul><li><strong> <span class="under0">吵架也是很多夫妻的相处之道，如果他们既没有爱，也没有架可吵，那才是真的悲哀。</span> </strong></li></ul><ul><li><p>叔昂是远远称不上好看的，单眼皮，眼睛小，眉毛是浓的，鼻子算是挺的吧，可是鼻头不够丰满，笑起来不露齿，但嘴巴喜欢歪向一边，<strong> <span class="under0">她画着他，时不时抬头看他，他也看着她，认真而庄重。她觉得他的看中应该有类似爱的东西在，因为他看得她浑身不自在，看得她意欲无限地靠近他，可她不确定，只好管住自己，将这份情愫暗暗揣在心底。</span> </strong>她用唇彩的小刷子在纸上涂鸦，抿着嘴。她没有画成夸张的漫画，而是画成了类似版画的简笔肖像，勾勒出五官的轮廓，拼起宗倒真的有几分传神，可就是不伦不类的果冻红，亮晶晶、甜腻膩的，画完后她笑着说“好难看”，叔昂说“拿来我看”，她就把本子从桌上滑过去，他接住，瞅他很满意，也不问她，一把撕下这一页纸，说是送给他了，他会好生收藏的。他还说她可以考虑往画画方面发展，虽然他没学过，可听别人说过，画画的技巧虽然重要，但更重要的是灵气，他说“我觉得你有’。</p><p>  他不知道，她平时真的有画画，可能是她除了学业之外唯一的爱好，中学时每一份美术作业她都是竭尽全力在做的，像是找到一个借口，可以花上四五个小时使其臻于完美，结果每次都接近满分，被课代表贴到教室的墙报上，引起很多人的赞叹，虽然她从未正儿八经学过。</p></li><li><p>高三那年，周允被母亲千盼万盼的名校华光提前录取，总算对她有了交代。<strong> <span class="under0">叔昂对周允说过，他觉得名校没意思，撺掇学生考名校只不过是高中的阴谋，学生成为高中攫取名利的工具，他说他才不要沦为工具呢。</span> </strong>可周允还是一再对他说，不管你怎么想，进个好学校总不会吃亏，去了好学校再做自己喜欢的也无妨。</p></li><li><p>周允恨这些说三道四的人，他们为什么偏要说这些话？倘使有一天小青青的爱逐渐变异为恨，都是因为她听了这些话，而这些说三道四的人却无须担责。</p></li><li><p>周允想过逃跑，尤其看着中学每一天都在鼓励新一拨年轻的学生要规划好三年的高中生涯，学业成绩和课外活动一样都不能落下，告诉学生上常春藤不是梦，甚至在高二的时候就请世界五百强的高管来为学生做职业规划的讲座，告诉他们如何才能保证名校毕业后去到五百强或咨询公司上班，她透不过气来，她想跑。</p><p>  她只有在午休时分才能走出校园。一跨出校门，她就有种终于冲破牢笼的感觉，看到了高高在上的蓝天和白云，看到了近旁趴着晒太阳的阿黑和阿黄，她艳羡它们，可它们似乎并不领情，仰头勉强地瞥她一眼，明白不是什么威胁，又闭上眼睛，让眼睛上层叠的皮毛耷拉下来。她最多是到附近的街心花园走走，那里有新建的健身步道，一半在阳光下，一半在阴影里，中午没什么人，只有零星的麻雀偶尔会飞到她的身前，也不喧闹，片刻的宁静对她而言是重要的，可只能走两圈，不然要误了工时、她的学校进出校门都是要打卡的。</p><p>  试过逃跑，在一个周二的清晨，周二周允全天没有课，可还要按时上班。那一天，周允把身份证塞进皮夹，带着皮夹里仅有的五百块钱乘上公交车，去往上海火车站。周允没有找到高中时叔昂带她走的小路，或许是火车站翻新过，道路拓宽过，周围盖起了很多高楼和星级酒店，她很快就看到上海火车站”五个红色的大字，看到拖着大包小包的迷惘的人群，操着各自的乡音，拖家带口，他们怀揣着各自的梦想，来到这里，望一眼“上海火车站”，知道终于到上海了。偶尔有几句话飘进她的耳朵，一个鼓励另一个要有信心，说这里是大城市，成功的机会多的是。</p><p>  一夜之间，所有中国人都罹患了“成功癌”。</p></li></ul><ul><li>“周允，我收到你寄来的邀请函了。”有一天，秦教授打给她，<strong> <span class="under0">“我想一定有很多人祝贺过你，那我就不祝贺了。我只是想说，从华光出来的成功人士已经够多了，多你一个不多，少你一个也不少，但画画有灵性的人，是不多的。所以，你要成功，还是要继续画出有灵性的画来，你自己选择。“</span> </strong></li></ul><ul><li><p>可她仍旧受不了学校的氛围，即便她跟学生的升学压力隔着一层，但那种氛围还是裹挟着她，掐着她的咽喉，捂着她的口鼻——他们不用学生考华光，而是要学生申请海外的名校，最好能申请上常春藤，这样明年招生就容易了，他们说。</p><p>  没什么意思，她想说。可学校里没有能听懂她话的人。他们说，他们这么年轻就可以有了这么高的起点，不是很好吗？即便现在只申请到前五十位的美国大学，读研究生申请常春藤的机会也比国内的大学毕业生高多了。</p><p>  <strong> <span class="under0">学校的庙果然太小，他们都只能看到人生的前四分之，对于人生的前四分之一而言，常春藤是完美的终点。可是他们没看到，人生长着呢！</span> </strong></p><p>  她很偶然地介入过一次和家长的谈话，因为这个调皮的孩子在她的雅思课上用iPad打游戏，被她没收了。这是个很多老师眼中的问题男孩，有家里父母的原因，父母亲是温州人，为了在广州做生意，生下他后无暇照顾，把他寄放在幼儿园老师家长达十五年，再接回来，父母与孩子之间自然隔着十多年的空白。</p><p>  这位父亲来了，西装笔挺，显示出很为儿子着急的样子，他说，我的儿子小时候很好的，他的幼儿园老师打电话告诉过我，他读小学时语数外都是九十几分！<strong> <span class="under0">她有时候在想，到了七老八十岁再逢人便提起自己常春藤的出身，就好比他父亲说的“我儿子小学成绩很好’那么可笑。</span> </strong></p><p>  <strong> <span class="under0">然而他们不懂，他们和她的母亲一样，把进名校看成是给人生买保险。</span> </strong></p><p>  <strong> <span class="under0">其实那些名校也是一样，他们也在买保险。每年的“丰收季’，学校都弥漫着一种诡异的狂欢气氛，不是大鸣大放的狂欢，学校的教学秩序有条不紊，可是她觉得每个人的表情都有些古怪，飘浮在空中的兴奋，像嗑过药的人，每个人，老师和学生，好像他们昨晚秘密赴过某个地下组织的盛宴，不告诉她。</span> </strong></p><p>  <strong> <span class="under0">她的同事们一直忙着总结被名校录取的规律：学业成绩和语言成绩都完美无缺，坚持数年且有的放矢的课外活动，不是每个最优秀的学生都能人读名校，但最终拿到录取名额的一定是最优秀的学生，一定是那些完美无缺的学生。她察觉到这里有一丝逻辑的颠倒，这些高校需要这些学生首先证明他们已经获得了成功，才给他们发放通行证，那么，这些高校的教育理念体现在哪里？教育不该是有教无类吗？如果他已经成功了，他接下来继续取得成功，与学校教育有何于系？</span> </strong></p><p>  <strong> <span class="under0">她想不明白，这些年令她迷惘的事情太多。作为老师的们何尝是希望中学入学的时候就只录取最优秀的学生，他们只是不能直说罢了，他们要的就是能自证未来可以被名校录取的学生。那么，老师的存在有何意义？她只能想是为了钱。</span> </strong></p></li></ul><ul><li><p>他说开地铁其实很压抑的，在黑黢黢的轨道里穿梭，看不到风景。他开的是一号线，幸好这条线路的两端都在路面之上，每次向南开到锦江乐园或向北开到汶水路都是他最欣慰的时刻，好像熬过了漫长的黑夜，终于迎来了清晨的第一缕光亮。</p><p>  你不知道，从地下钻出来的那个瞬间是每天最美好的一刻。他说，阿允，你真该看一看，那一刻简直在验证生命存在的意义。她能在他的眼睛里看到清晨的第一缕光亮。</p></li></ul><ul><li><p>幸好有雨，她可以尽情叫出来，不用担心隔壁住着他的外婆。他们都不是第一次，他们心照不宣，都没有过问对方第一次给了谁。虽然这不是他们的第一次，但确实是他们第一次在这个过程中不感到寂寞。她卸了妆，她知道她的脸庞摸起来不再光洁，她也不再完美，但她不羞愧，她知道他不会因此就不爱她。<strong> <span class="under0">她也终于明白这件事不是龌龊的，而是美好的，甚至富有圣洁的意味。她从脚心开始一点一点触摸他的身体，腿，腿腹，膝盖，阳具，她的手久久握住他的阳具，像握住一艘游轮的操纵杆，她握着，知道现在这根操纵杆属于自己，不禁低头亲吻了它，而后她抚摩他的腹部，平日的他看起来并没有特别的瘦，但是一旦躺下，腹部仍是平坦的，依稀可以摸出肋骨的形状来，她把食指按进他的肚脐里，按入他的前生，她摸他的胸膛，属于男人的结实的胸膛，他的喉结，突起的，像个浮标，他的络腮胡子，她禁不住说了句，哼，我最讨厌男人留胡子。</span> </strong></p><p>  他一听就疯狂地吻她，偏要用胡子蹭她的脸，蹭她的胸，毛扎扎的，但不至于引起疼痛，她梳理着他的络腮胡子，说，你的胡子我不讨厌。</p><p>  他抚摩她，他的手好大，一双长大了的男人的手，令人想起棒球接球手的手套，一下子就包笼住她的乳房，他轻柔地，像在追踪刚诞下不久的雏鸡，哎哟，终于抓到你了，雏鸡有一点细微的恐惧，抖着羽毛微微颤动。他也一点一点抚遍她的全身，伴着湿润的吻。而她也终于知道她不再是一具活尸，而是一个活生生的人，她终于知道王子的吻足以唤醒睡美人。</p><p>  正因为是他，她可以要他，她也可以要求他的爱，她可以光明正大，肆无忌惮，她可以说，吻我的耳朵，她也可以说，再来一次，我要。正因为是她，他也可以要她，他也可以要求她的爱，他也不必害臊，不必羞愧，他说，我要你帮我，用手，我要你在上面。</p><p>  他们疯狂地缠绵，不像两个人那样干，而像两只在水里扑腾交欢的海豚，像两条在草丛里交缠着站立起来的狂蟒，他们想要把十年的时光追回来。最后他们筋疲力尽，但他们不愿就这么轻易入睡，她说，她想看窗外的雨，她要他为她掀开窗帘。</p><p>  他说，你不怕被人看到？</p><p> <strong> <span class="under0"> 她不怕，她知道怕是抓不住爱的，所以她不怕。</span> </strong>他拉开窗帘，玻璃窗透着溶溶的光，化开来的光，摇晃着。她说，她向来在雨夜是睡不安稳的，因为她怕，没来由的怕，在她的家她感到恐惧，黑夜给她准备的是蟾蜍、黑犬和被火烧的女人，她永远记得恐惧的感觉。</p><p>  她说跟他在一起她不怕。</p><p>  他们紧紧相拥，一同望向窗外的雨夜，摇晃的城市，雨声喧哗，打在窗上，打在空调架上，打在地上，她说她从未觉得雨声这么动听，像一支渔光曲，她好像是住在海边摇橹的船家。</p><p>  他说，他们此刻就住在海边。</p><p>  她确实住在海边，她感到下体温暖而湿润，她对他说，她还想要。</p></li></ul><ul><li><strong> <span class="under0">我妈说，你别怪你爸，最起码你爸是在很用心地输钱。</span> </strong></li></ul><hr><h3 id="相关链接"><a href="#相关链接" class="headerlink" title=" 相关链接 "></a><strong> 相关链接 </strong></h3><ul><li><a href="http://weibo.com/qianjianan" target="_blank" rel="noopener">钱佳楠写小说</a></li><li><a href="https://site.douban.com/127223/" target="_blank" rel="noopener">钱佳楠的小站</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《刻意练习》</title>
      <link href="/2019/04/26/reading-notes-of-deliberate-management/"/>
      <url>/2019/04/26/reading-notes-of-deliberate-management/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近回学校主要的时间都花在了编程、练车、吉他、锻炼、看书上。近来看了《刻意练习》,书中的一些观念还挺有道理的,本文做些记录。<br><img src="/img/阅读笔记/reading-notes-of-deliberate-management/1.jpg" alt="1.jpg"></p><hr><h3 id="刻意练习"><a href="#刻意练习" class="headerlink" title=" 刻意练习 "></a><strong> 刻意练习 </strong></h3><ul><li><p>学习科学大量研究表明，成人的最佳学习方式并非独自练习，而是在情境中学习。</p></li><li><p>在许多领域，通往卓越的道路不是精确计算时间的结果，而是模糊与含糊不清的。没有简单的模型通向伟大。</p></li><li><p><strong> <span class="under0">但你很快便会发现，你依然有一些弱点，不论你多么经常地和朋友打球，这些弱点总是暴露出来。比如，也许每次用反手来接那种直奔你胸前、稍稍带点旋转的球时，你总是接不到。你知道这个弱点，而对手也注意到了这一点，每次都有意打出这种球，逼你失误。对此，你感到挫败不已。不管怎样，由于这并不会经常发生，而且你永远不知道对手什么时候打出这种球来，因此，你没有机会继续去改进，每次面对这种球，你总是以几乎一模一样的方式漏接这种球。</span> </strong></p></li><li><p>但是，现实并不是这样。研究表明，一般而言，一旦某个人的表现达到了“可接受”的水平，并且可以做到自动化，那么，再多“练习”几年，也不会有什么进步。<strong> <span class="under0">甚至说，在本行业干了 20年的医生、老师或司机，可能还稍稍比那些只干了 5年的人差一些，原因在于，如果没有刻意地去提高，这些自动化的能力会缓慢地退化。</span> </strong></p></li><li><p>有目的的练习具有几个特征，使得它与我们所说的“天真的练习”区分开来。<strong> <span class="under0">所谓“天真的练习”，基本上只是反复地做某件事情，并指望只靠那种反复，就能提高表现和水平。</span> </strong></p></li><li><p>他意识到了自己的弱点在哪里，便可以适当地转变他的关注焦点，并提出新的记忆方法来弥补那些弱点。</p></li><li><p>一般而言，不论你在努力做什么事情，都需要反馈来准确辨别你在哪些方面还有不足，以及怎么会存在这些不足。如果没有反馈（要么是你自己给自己提出的，要么是局外人给你提出的），你不可能搞清楚你在哪些方面还需提高</p></li><li><p>对于任何类型的练习，这是一条基本的真理：如果你从来不迫使自己走出舒适区，便永远无法进步。</p></li><li><p>通常情况下，这种解决方案并不是“试着做更难的事情”，而是“试着做不同的事情”。</p></li><li><p><strong> <span class="under0">这里有一条注意事项：尽管我们总能继续前进和不断进步，但要想做到，并不见得总是轻而易举。保持专注并继续努力，是很难做到的，而且通常没有趣味。</span> </strong></p></li><li><p>一般来讲，有意义的正面反馈是保持动机的关键要素之一。这种反馈可能是内部反馈，比如满足于看到你自己在某件事上的水平提高，也可能是由其他人提出的外部反馈，但它们对某个人是否能够在有目的的练习过程中坚持不懈地努力以提高自己的水平十分重要。</p></li><li><p>因此，我们在这里简单地总结有目的的练习：走出你的舒适区，但要以专注的方式制订明确的目标，为达到那些目标制订一个计划，并且想出监测你的进步的方法。哦，还要想办法保持你的动机。对想要提高自己的每个人来讲，这些是让你有一个卓越开端的秘诀——但依然只是开始。</p></li><li><p>这里有一条重要的经验：尽管我们通过专注的训练和走出舒适区，一般能在某种程度上提高自己做某件事的能力，但那并不是全部。刻苦努力还不够。逼迫自己超越极限，也不够。人们通常忽略了训练与练习中的其他一些同等重要的方面。学术界对一种特定的练习与训练方法进行了研究，该方法已被证明是提高人们在各个行业或领域中的能力的最强大和最有效的方式。这种方法就是“刻意练习”，我们会马上进行详尽描述。但首先让我们更加密切地观察，在这种令人称奇的改进背后，到底有着怎样的原因。</p></li><li><p>越来越多的证据表明，大脑的结构与运行都会为了应对各种不同的心理训练而改变，而且，很大程度上像你的肌肉和心血管系统响应体育锻炼那样。在诸如核磁共振成像（ magnetic resonance imaging， MRI）等脑部成像技术的方法帮助下，神经学家开始研究拥有特定技能的人们的大脑与不具备那些技能的人们的大脑，到底有什么区别，同时，他们开始探索各种练习可以产生哪些类型的改变。</p></li><li><p>其结果告诉我们，大脑的结构和功能并不是固定不变的。它们会根据你对它们的运用而改变。因此，通过清醒的、刻意的练习，以我们期望的方式来塑造大脑，包括你的大脑、我的大脑以及任何人的大脑，都是可能的。</p></li></ul><ul><li><p><strong> <span class="under0">人类的身体有一种偏爱稳定性的倾向。它保持稳定的内部温度，保持稳定的血压和心率，并使得血糖稳定、 PH值（即酸碱度水平）平衡。它使我们的体重日复一日地保持合理的一致。</span> </strong>当然，所有这些全都不是完全静态的。例如，如果进行锻炼，人们的心率会加快；如果暴饮暴食，人们的体重会增加；如果节食，人们的体重会下降。但是，这些变化通常是暂时的，而身体最终会回到它原来的模样。对于这种现象，技术上的术语是“体内平衡”（ homeostasis），它只是意味着一个系统（可以是各种类型的系统，但最常见的是一种活着的生物，或者是活着的生物的某些部位）以一种保持其自身稳定性的方式来行动的趋势。</p><p>  超出界限后，你的身体系统和细胞自身会处在异常状态下，含氧量和各种与能量相关的化合物含量都异常低，比如葡萄糖、二磷酸腺苷（ adenosine diphosphate， ADP）、三磷酸腺苷（ adenosine triphosphate， ATP），等等。各种细胞的新陈代谢不再像往常那样继续下去，因此，细胞中的生物化学反应，与正常状态下完全不同，产生的生物化学产品也和细胞通常产生的完全不同。细胞对这种状态的改变不满意，它们通过升高细胞 DNA中的一些不同的基因来响应。（ DNA中的大多数基因，在任何特定的时间都是不活动的，而细胞会“打开”和“关闭”各种</p><p>  <strong> <span class="under0">这解释了持续将自己推出舒适区的重要性：你要使身体的补偿变化不停地发生，但如果一下子推得太猛，使自己远远离开了舒适区，就有可能受伤，而且，事实上反而阻碍了你的提高。</span> </strong></p></li><li><p><strong> <span class="under0">另一方面，在过长的时间内过分地逼迫自己，可能导致倦怠和学习低效。大脑和身体一样，对于处在舒适区之外却离得并不太远的“甜蜜点”上的挑战，改变最为迅速。</span> </strong></p></li><li><p>音乐训练以各种不同方式改变了大脑的结构与运行，使人们的音乐演奏能力进一步增强。换句话讲，最有效的训练形式其实不只是帮助你学会某种乐器的那些训练，而且是更深入和更高级的训练，这些训练确实增强了你演奏乐器的能力。当你演奏音乐时，这些训练改变了你大脑中的部位，从某种程度上提升了你自己的音乐“天赋”。</p></li></ul><ul><li><p>尽管如此，在科学家已经研究的每一个行业或领域，结果都相同：长期的训练，使大脑中与那种特定技能相关的部位发生了改变。这些研究有的着眼于纯智力的技能，比如数学能力。</p></li><li><p>尽管由于技能不同，具体细节也各不相同，但总的规律不变：经常性的训练会使大脑中受到训练挑战的区域发生改变。大脑通过自身重新布线的方式来适应这些挑战，增强其执行那些挑战所需功能的能力。</p></li><li><p>第一个值得一提的细节是：训练对大脑的影响。可能随着年龄增长，在几个方面有所不同，最重要的方面是：年轻人的大脑，即儿童和青少年的大脑，比成年人的大脑更具适应能力，因此，</p></li><li><p>因此，年纪越小，训练产生的影响也越大。因为年轻人的大脑会以诸多不同方式来发育，因此，幼年时期进行的练习，实际上可以塑造后来的发育路线，从而造就更大的改变。这就是“折弯幼枝效应”。如果你将一根刚刚长出来的幼枝稍稍折弯一点点，那么到最后，那根树枝生长的位置，可能会发生重大改变；而如果你去折弯已经长成了的树枝，这种影响则小得多。</p></li><li><p>第二个值得一提的细节是，通过超长时间的训练来发展大脑中的某些部位，可能得付出一些代价。在许多案例中，那些已经超常发展了某项技能或能力的人，在另一些行业或领域则出现了退化。</p></li><li><p><strong> <span class="under0">最后，由训练引起的认知和生理变化需要继续保持。如果停止训练，它们便开始消失。</span> </strong></p></li><li><p><strong> <span class="under0">大部分人做不到这些事情，并不是因为他们不具备做这些事情的能力，而是因为他们满足于在舒适区中生活，从来没有尝试走出舒适区。他们生活在“足够好”的世界中。</span> </strong></p><p>  对于我们从事的所有心理活动，同样是这个道理，从写报告到驾驶汽车，从教课到经营组织，从卖房子到做大脑手术。我们在日常生活中已学到足够多的东西，但是，一旦我们抵达了那个界限，很少迫使自己超出“足够好”的范围。</p><p>   一般说来，“足够好”就是足够好。<strong> <span class="under0">但重要的是记住，选择总是存在。如果你希望变得更擅长某件事情，你就可以做到。</span> </strong></p></li><li><p>传统的学习方法与有目的的练习或者刻意练习的方法之间存在着一种关键的差别，那便是：传统方法并不是专门用于挑战体内平衡的。它假设，不论是有意的还是无意的，这种学习全都涉及发挥你的内在潜力，并且意味着你可以发展某一特定的技能或能力，而不用走出你的舒适区太远。从这种视角观察，只要你进行训练，便可以发展自己的潜力。事实上，训练也是你唯一能做的。</p></li></ul><ul><li>对于刻意练习，我们的目标不仅仅是发掘自己的潜能，而且要构筑它，以便从前不可能做到的事情变得可能做到。这要求挑战体内平衡，也就是走出你的舒适区，并迫使你的大脑或身体来适应。</li></ul><ul><li><strong> <span class="under0">在语言的记忆中，也存在一些十分类似的现象。如果你让某个人回忆一个句子，但句子中的词语全都打乱了顺序，要让他从第一个单词开始记住，比如“前面的、以至于、肚子、花生、他的、咕咕叫了、太香了、他、那个女人、在吃、起来、不由得、花生”，普通人只能记住这些单词中的前六个词。不过，如果你把这些词语组成一个完整的、表达清晰意义的句子，比如“他前面的那个女人在吃花生，花生太香了，以至于他的肚子不由得咕咕叫了起来”，那么，某些成年人会以完美的次序记住所有单词，而且，大多数人记得句子中的大部分内容。差别在哪里？第二种排序是带有含义的，使我们能够运用预先存在的“心理表征”来解释单词。在第二种排序中，单词并不是随机的，它们有意义，而那些意义可以辅助我们记忆。同样，国际象棋大师并没有培养令人不可思议的记忆力，来记住棋盘上单个的棋子；相反，他们的记忆是取决于背景的，也就是说，只针对那些在正常棋局中出现的棋子位置进行记忆。</span> </strong></li></ul><ul><li>第一，心理表征不只是对棋子位置的编码那么简单。它们使得国际象棋大师看到正在进行中的棋局时，马上便能感到哪一方占优势，棋局会朝哪个方向发展，以及下一步或更多步的招法是什么。这是因为表征除了记住棋子的位置以及它们之间的相互关系之外，还包括记住两位棋手在棋盘上各种优势与劣势，以及在那种局面下可能有效的招法。清晰地将大师与新手或中等水平棋手区分开来的因素是，大师第一次研究棋局时，便能想出精妙得多的招法。</li></ul><ul><li><strong> <span class="under0">心理表征是一种与我们大脑正在思考的某个物体、某个观点、某些信息或者其他任何事物相对应的心理结构，或具体或抽象。</span> </strong></li></ul><ul><li>大多数的刻意练习包括创建更加有效的心理表征，不论你在练习什么，都可以使用这些心理表征。</li></ul><ul><li>即使训练的技能主要是身体技能，创建适当的心理表征也是一个主要因素。</li></ul><ul><li>这解释了关于杰出表现的一个关键事实：如果只是培育普通的技能，便没有心理表征这回事。</li></ul><ul><li><strong> <span class="under0">我们提出了一个问题，这里可以回答很大一部分：在刻意练习之中，我们的大脑究竟是什么发生了变化？将杰出人物和我们其他人区分开来的主要因素是：他们经过年复一年的练习，已经改变了大脑中的神经回路，以创建高度专业化的心理表征，这些心理表征反过来使得令人难以置信的记忆、规律的识别、问题的解决等成为可能，也使得他们能够培养和发展各种高级的能力，以便在特定的专业领域中表现卓越。</span> </strong></li></ul><ul><li>这解释了为什么最成功的四分卫通常是那些在视频室里待得最久的球员。他们会通过观看视频，反复观察和分析自己队和对方队中的球员怎样踢球。最优秀的四分卫追踪观察球场上每个地方都在发生什么，比赛结束后，他们通常能够回忆起该场比赛的大多数细节，并且可以详尽描述双方队中许多球员的移动。更重要的是，有效的心理表征还使得四分卫能马上做出优秀的决策：是不是传球、向谁传球、什么时候传球，诸如此类。</li></ul><ul><li>而且，当有的单词可能被拼错了、错误使用了，或者遗漏了的时候，你能利用上下文关系来解释。现在，当你在阅读时，你做这些全都是下意识的，心理表征潜藏在平静的表面下运转，不被人注意，但却至关重要。</li></ul><ul><li><strong> <span class="under0">你对某个主题研究得越多，对该主题的心理表征也变得越细致，也越能更好地消化新的信息。因此，国际象棋高手可以看懂棋谱，那些对大多数人来说，是完全没有意义的数据，比如 1. e4e52. Nf3Nc63. Bb5a6……而且，高手还可以理解整盘棋。同样，职业音乐家可以看懂一首新曲子的乐谱，并且即使没有弹奏过它，也知道它会发出怎样的声音。如果你是一位已经熟悉刻意练习这个概念的读者，或者已经熟悉学习心理学的更广泛领域，</span> </strong></li></ul><ul><li><p>在解答这一谜题时，表面看起来，基本的步骤是辨别导致一只瞳孔比另一只瞳孔小的原因，但这实际上非常简明直接：要求医生在某种程度上了解那一症状，而且能够回忆起综合征。它被称为“霍纳氏综合征”，是由于眼睛背后的神经受损所致。这种损伤伤害了眼睛放大的能力，通常限制了那只眼睛的眼睑的运动，事实上，专科医生在仔细观察时，发现那只眼睛的眼睑并没有完全打开。</p><p>  成功诊断的关键并不只是拥有必要的医学知识，而是能够将这种知识组织起来，以便提出可能的诊断结果，并聚焦于最有可能的诊断结果。在对杰出人物的研究之中，出色地组织信息是反复出现的主题。</p></li><li><p><strong> <span class="under0">学生之间的差别，在很大程度上最有可能取决于他们能多敏锐地察觉自己所犯的错误，也就是说，他们对音乐作品的心理表征有多么有效。</span> </strong></p></li></ul><ul><li>在这些领域，还有一种良性循环在起主导作用，那便是：磨砺了技能，可以改善心理表征；而改变心理表征，也有助于磨砺技能。在这方面，有点类似于鸡和蛋的关系。以花样滑冰为例：如果你不去做两周半跳这个动作，便很难就这个动作给你带来什么感觉而创建清晰的心理表征；同样，如果你没有创建清晰的心理表征，便难以做好这个动作。这听起来有点儿自相矛盾，实则不然。你一步一步地尝试着做这个动作，在此过程中，也就积累了心理表征。</li></ul><ul><li>拉小提琴难，首先难在小提琴的指板没有任何琴格。吉他的指板上可以见到一些金属脊，它们将指板分为一些独立的音符，并且保证了只要吉他合调，每个弹出的音符都不至于太低或太高。而由于小提琴没有琴格，小提琴家必须把他的手指准确地放在指板适当的位置上，才能拉出期望的音符。只要偏离标记约 1. 59毫米的距离，音符要么就低了，要么就高了。如果手指离正确的位置太远了，结果将与期望的声音产生天壤之别。那还只是一个音符；每演奏一个音符，都需要手指以同样的精度在指板上移动。</li></ul><ul><li>在研究之中，我们最重要的一个发现是：学生们认为，对提高演奏水平重要的大多数因素，恰好也是需要付出艰辛劳动，而且并非那么有趣的因素；听音乐和睡觉是例外。从每一位顶尖的学生到未来很可能成为音乐教师的学生全都一致认为，提高水平很难，而且他们不喜欢为提高水平而付出艰辛的劳动。<strong> <span class="under0">简单地讲，没有哪个学生热爱练习，因此，也就没有哪个学生的动机比别人更强。这些学生之所以激情四射地进行密集练习，并全神贯注地投入到练习之中，是因为他们发现，这样的练习是提高他们演奏水平的不可或缺的因素。</span> </strong></li></ul><ul><li>水平的提高，通常与教学方法的发展齐头并进，如今，任何人想要在这些领域变成杰出人物，都需要导师的帮助。</li></ul><ul><li><p><strong> <span class="under0">简而言之，刻意练习具有以下特点：</span> </strong></p><p>  刻意练习发展的技能，是其他人已经想出怎样提高的技能，也是已经拥有一整套行之有效的训练方法的技能。训练的方案应当由导师或教练来设计和监管，他们既熟悉杰出人物的能力，也熟悉怎么样才能最好地提高那种能力。</p><p>   ◆<strong> <span class="under0">刻意练习发生在人们的舒适区之外，而且要求学生持续不断地尝试那些刚好超出他当前能力范围的事物。</span> </strong>因此，它需要人们付出近乎最大限度的努力。一般来讲，这并不令人心情愉快。 </p><p>   ◆<strong> <span class="under0">刻意练习包含得到良好定义的特定目标，</span> </strong>通常还包括目标表现的某些方面；它并非指向某些模糊的总体改进。一旦设定了总体目标，导师或教练将制订一个计划，以便实现一系列微小的改变，最后将这些改变累积起来，构成之前期望的更大的变化。改进目标表现的某些方面，使得从业者能够看到他的表现已经通过练习得到了提高。 </p><p>   ◆<strong> <span class="under0">刻意练习是有意而为的，</span> </strong>也就是说，它需要人们完全的关注和有意识的行动。简单地遵照导师或教练的指示去做，还不够。学生必须紧跟他的练习的特定目标，以便能做出适当的调整，控制练习。 </p><p>   ◆<strong> <span class="under0">刻意练习包含反馈，以及为应对那些反馈而进行调整的努力。</span> </strong>在练习过程的早期，大量的反馈来自导师或教练，他们将监测学生的进步、指出存在的问题，并且提供解决这些问题的方法。随着时间的推移，学生必须学会自己监测自己、自己发现错误，并做出相应调整。这种自我监测，需要高效的心理表征。 </p><p>   ◆<strong> <span class="under0">刻意练习既产生有效的心理表征，又依靠有效的心理表征。</span> </strong>提高水平与改进心理表征是相辅相成的，两者不可偏废；随着人们水平的提升，表征也变得更加详尽和有效，反过来使得人们可能实现更大程度的改进。心理表征使人们能监测在练习中和</p></li></ul><ul><li><p><strong> <span class="under0">尽可能地进行刻意练习，是在任何一项事业的追求中变得更加杰出的基本路线图。如果在你所处的行业或领域之中，刻意练习可以实行，那么，你应当采用刻意练习。如果不是，那就要尽最大的可能应用刻意练习的原则。在实践中，这往往归结为带有几个额外步骤的有目的的练习：首先辨别杰出人物，然后推测是什么使他们变得如此杰出，接着再提出训练方法，这些方法使你也能像他们那样表现卓越。</span> </strong></p></li><li><p>在你已经熟悉的行业或领域，比如你自己的工作，仔细思考杰出的表现具有哪些特点，并尝试采用一些方法来度量，即使在你度量时一定存在着某种程度的主观意识也无妨。然后，寻找你所在行业或领域中评分最高、你认为对杰出表现十分关键的人。要记住，理想的情况是找到客观的、可复制的测量指标，以便前后一致地从普通从业者之中挑选出最优异的从业者。如果这一理想的状况不可能实现，那么尽可能做到接近理想。</p><p><strong> <span class="under0">这里得到的经验是：一旦你已经辨认出杰出人物，那么，辨别出是什么使得这个人和其他人表现不同，那些差别就可以解释他的卓越成就。尽管人们做的许多事情也许和他们的杰出成就毫无关系，但至少可以从这个方面着手探索。</span> </strong></p></li></ul><ul><li><strong> <span class="under0">最后还要记住，不论什么时候，只要有可能，最佳的方法几乎总是找一位优秀的教练或导师。</span> </strong></li></ul><ul><li>在音乐表演或芭蕾舞之类的领域，接受这样的导师指导格外重要。在这些领域之中，人们往往要花 10多年的时间才能成为专家，而且练习是累积的，同时，成功掌握某项技能通常取决于过去有没有熟练地掌握其他技能。知识渊博的导师可以带着学生奠定扎实的基础，然后渐渐创造在那一领域中期望的技能。例如，在学习弹钢琴的过程中，学生必须从一开始就把手指放在正确的位置，因为尽管手指没有放在理想的位置，也可以弹出简单一点的曲目，但要演奏复杂一些的曲子，学生需要从一开始就养成正确的习惯。经验丰富的导师明白这一点；但如果换成学生自己，不论是哪个学生，也不论他有多么强烈的动机，几乎不可能凭借自己的力量琢磨透这一点。</li></ul><ul><li><strong> <span class="under0">有效的反馈不仅是指出你做某件事情对还是错。</span> </strong>例如，优秀的数学老师不只是关心学生对某道题目的解答，还会观察那个学生是怎样知道这种解答方法的，以此来了解学生正在运用什么样的心理表征。如果有必要，他将围绕如何更有效地思考和解答那道题而提出建议。</li></ul><ul><li>格拉德威尔的 1万小时法则，以一种强有力的、可记住的方式紧扣了这样一个基本事实：在许多需要人类付出艰辛努力的行业或领域之中，要想成为世界上出类拔萃的顶尖人物，必须经历多年的练习。这是件好事。</li></ul><ul><li>我的意思是，如果你想使用刻意练习的原则，可以想一些办法来辨认某个领域或行业中的杰出人物，然后训练其他那些表现不太出色的人，并且尽可能使后者也达到前者的水平。做到这一点，就有可能提升整个组织或整个专业的整体绩效水平。</li></ul><ul><li><strong> <span class="under0">第一种错误思想是我们的老朋友，即认为某人的能力通常受到基因特征的限制。这种思想常常表现为各种各样“我不能”或者“我不是”之类的表述：“我不是很有创造力的人。”“我不能管理好别人。”“我不擅长和数字打交道。”“我做不到比这更好。”但是，如我们已经了解的那样，在任何一个人们选择着重发展的行业或领域之中，人人都可以通过正确的训练来帮助自己大幅度地提高。我们可以塑造自己的潜力。</span> </strong></li></ul><ul><li><p><strong> <span class="under0">第二种错误思想认为，如果你足够长时间地做某件事情，一定会更擅长。</span> </strong>这种思想错在哪里，我们很清楚。以完全相同的方式一而再再而三地做某件事情，并不是提高绩效和表现的秘诀；它会使人们停下前进的脚步，并且缓慢地下滑。</p></li><li><p><strong> <span class="under0">第三种错误思想认为，要想提高，只需要努力。</span> </strong>如果足够刻苦，刻苦，你会更加优秀。如果你想成为一位更优秀的经理，加倍努力。如果你想销售更多的产品或服务，加倍努力。如果你想优化你的团队协作，加倍努力。但现实是，所有这些事情，即管理、销售和团队合作，全都是专业化的技能，除非你运用一些专门用于提升那些特定技能的练习方法，否则，即使加倍努力，也无法让你有更大的进步。</p></li></ul><ul><li>知识与技能之间的区别，正是发展专业技能的传统路径与刻意练习的方法之间的核心差别。一直以来，人们的关注焦点几乎总是知识。即使当最终的结果是能够做某件事（比如解答某种特定类型的数学题，或者写一篇优秀的文章），传统的方法也一直是先找出关于正确方法的信息，然后很大程度上让学生去运用那些知识。刻意练习则完全相反，它只聚焦于绩效和表现，以及怎样提高绩效和表现。</li></ul><ul><li>从刻意练习的角度看，问题显而易见：参加讲座、小型培训课以及类似的活动，并没有给医生们提供反馈，或者说反馈很少，因此，医生们几乎没有或者完全没有机会去尝试新的治疗和诊断方法、犯错、纠正错误，并逐渐发展新的技能。就如同业余网球球员试图通过读网球杂志上的文章并观看视频网站上的一些视频来提高球技，他们可能以为自己在学习新的东西，但这些做法不会对他们的网球水平有太大的帮助。此外，在医学继续教育中，有一些在线的交互式方法，但却很难模拟医生和护士在日常的临床实践中遇到的那些复杂病情。</li></ul><ul><li><strong> <span class="under0">在教育中一直更强调知识的作用而忽略技能的作用的行业或领域，不只是医学这一个。在许多其他的专业学院，比如法学院和商学院等，情况也差不多。一般来讲，专业学院着重关注知识而不是技能，因为教学生知识，然后为检验学生掌握知识的情况而设计一些测验，要比教学生技能容易得多。此外，人们一般认为，如果掌握了知识，也就能相对容易地熟练掌握技能。结果，当大学生进入职场时，通常发现自己需要大量的时间来提升工作中需要的技能。</span> </strong></li></ul><ul><li>一旦你已经辨别出了那些绩效经常比同行优秀的人们，下一步就是推测，在那种杰出表现的背后到底潜藏着什么。</li></ul><ul><li>刻意练习的主要目的之一是提出一系列有效的心理表征，它们可以引导你的表现，无论你是在练习空手道、弹一首钢琴奏鸣曲，还是做一台手术。自己练习时，你必须依靠自己的心理表征来监测自己的表现，并确定可能在哪些地方做得不对。尽管这并非不可能做到，但毕竟和找一位经验丰富的导师来观察你并向你提供反馈相比，单凭自己的力量来练习，不但艰难得多，而且效果差得多。在学习过程的早期尤其艰难，这个时候，你的心理表征依然是初步的、不准确的；一旦你为可靠的心理表征奠定了坚实基础，那么，你将在此基础上创建起你自己新的、更有效的表征。</li></ul><ul><li>有的人知道学习某些事情的最佳次序，理解并示范正确的方式来展示各种各样的技能，可以提供有效反馈，并且能够设计一些专门用来克服特定缺陷的练习活动，在这些人的指导之下，激情十足和孜孜不倦的学生能够更加迅速地取得进步。因此，为了你的成功，最重要的一件事情是找一位好导师，并向他请教。</li></ul><ul><li><strong> <span class="under0">特别重要的是查询意向中的导师在训练方面的情况。无论你每星期跟导师上多少堂课，主要还得靠你自己来训练，完成导师布置给你的练习。</span> </strong>你希望导师尽可能多地在上课期间指导你，不仅教你如何练习，而且告诉你应当注意哪些特定的方面、你犯了哪些错误、怎样识别卓越的表现。要记住：导师可以做的最重要的事情是帮你创建心理表征，以便你能监测和纠正你自己的表现。</li></ul><ul><li>丹尼斯后来的经验阐明了关于指导的最后一条经验：当你自己改变了时，可能需要更换导师。几年来，丹尼斯在他最初的高尔夫教练指导下提高了自己的球技，但到了一定程度，他的进步就停滞了。他已经吸收了教练教给他的一切，准备找一位水平更高的教练。如果你发现自己已经到了不再能快速进步，或者根本没有进步的地步，别害怕，去找一位新的导师。最重要的事情是不停地向前、向前。</li></ul><ul><li><p>这又回到了我们曾在第 1章讨论过的基本原则：<strong> <span class="under0">从事有目的的练习十分重要，不能只是漫无目的地重复同样的动作，而不制订提高与进步的清晰目标。</span> </strong></p></li><li><p>要记住：如果你在走神，或者你很放松，并且只为了好玩，你可能不会进步。</p></li></ul><ul><li>这是从任何类型的训练中最大限度获益的关键，从私人课程或是团体课程到单独的训练，甚至到比赛或竞争，不论你在做什么，专心地做。</li></ul><ul><li>我回想起二年级时的某个特定时刻。我的教练来到我面前对我说：“贾斯汀，你在做什么？”我当时正在击球，于是答道：“<br>  道：“我在为参加锦标赛练习球技。”他说：“不，你不是在练习。我一直在看着你，你只是在击球而已。你并没有准备进行例行的练习或者其他练习。”于是，我和教练进行了一番交谈，而且，和你说的一样，我们开始了一个练习日程，从那时候起，我才真正开始了练习。在练习中，我会有意识地朝着特定的目标迈进，而不只是简单地挥杆击球或推杆进球。学会以这种方式投入，即有意地提升和精进你的技能，是提高训练效果的最强大方式。</li></ul><ul><li>考芙林并不是一个单独的例子。研究人员丹尼尔·钱布里斯（ Daniel Chambliss）对一些奥林匹克游泳运动员进行过一项扩展研究，最后总结认为，在游泳项目上保持卓越，关键在于密切注意在泳池里的每一个细节，“每次都要把动作做正确，一次又一次不断地累积，直到每一个细节都能做到卓越，而且到成为你根深蒂固的习惯为止。”</li></ul><ul><li>这是最大限度改进你的练习的秘诀。即使在健美运动或长跑运动等体育项目中，绝大部分的训练由那些看似漫无目的的、重复的动作组成，用正确的方式来关注那些动作，会带来更大的进步。研究长跑运动员的研究人员发现，业余运动员往往幻想或者想着更加愉快的话题，以便让他们的思维从跑步训练的痛苦与紧张中转移出去，而杰出的长跑运动员则保持身体协调，以找到最理想的步调并做出调整，在整个比赛中保持最佳的步伐。在健美或举重项目中，如果你试图拿出最大力气来举起重物，你得在举起之前先做好准备，并且在举的过程中做到完全专注。在你的能力极限上进行的任何活动，都需要全神贯注和尽最大的努力。当然，在另外一些不太需要力量和耐力的领域或行业，比如智力活动、音乐表演、艺术创作等，如果你不专注，练习根本没有效果。</li></ul><ul><li><strong> <span class="under0">刚开始学会专注于练习的那些人，也无法做到几个小时持续专注。相反，他们需要把每次的练习时间缩得更短，并逐渐延长。</span> </strong></li></ul><ul><li><strong> <span class="under0">在这方面，我给佩尔·霍尔姆洛夫提出的建议，同样适合刚刚开始进行刻意练习的任何人：专注和投入至关重要，因此，制订明确的目标，把练习课程的时间缩得更短，是更加迅速地提升新的技能水平的最佳方式。在较短的时间内投入百分之百的努力来练习，比起在更长时间内只投入 70%的努力来练习，效果更好。一旦你发现自己再也无法有效地专注于练习了，那便停下来。一定要确保每天都保持足够的睡眠，以便能够最大限度地集中精力练习。</span> </strong></li></ul><ul><li>也就是说，不能一再做同一件事情，而且不为自己的进步制作逐步实现的计划且专注地实施。</li></ul><ul><li>有目的的练习，或者说刻意练习，其标志是你努力去做一些你无法做到的事情，去完成一些处在你的舒适区以外的任务，而且，你一而再再而三地练习，着重关注到底可以怎么做好它，在哪方面还有缺陷，以及你可以怎样进步。</li></ul><ul><li><strong> <span class="under0">请注意，这些学生并不只是一遍遍地做同一件事情：他们每次都关注了自己什么地方错了，并且进行纠正。</span> </strong>这是一种有目的的练习。毫无目的地一遍一遍地做同一件事情，并不是好办法；反复做一件事情，目的是找出你在哪些方面存在不足，并且聚焦于在那些方面取得进步，试着采用不同的方法来提高，直到你最终找到适合自己的方法。</li></ul><ul><li><strong> <span class="under0">为了在没有导师的时候有效地练习某种技能，牢牢记住以下三个 F，将是有帮助的。这三个 F，其实是以字母 F开头三个单词，即：专注（ focus）、反馈（ feedback）以及纠正（ fix it）。将技能分解成一些组成部分，以便反复地练习，并且有效地分析、确定你的不足之处，然后想出各种办法来解决它们。</span> </strong></li></ul><ul><li><p>在音乐界，莫扎特的父亲教他作曲，采用的方法是让他研究当时某些最杰出的作曲家，并复制他们的作品；在艺术界，长期以来，有抱负的艺术家通过复制大师们的绘画和雕像作品来提高自己的技能。</p><p>  通过研究大师的作品，努力从记忆中复制它，然后将复制品与原始作品进行对比，以发现其中的差别，并予以纠正。</p><p>  我们只有努力去复制杰出人物的成就，失败了就停下来思考为什么会失败，然后再去复制，一旦失败了，再次停下来思考原因，如此一而再再而三地尝试，才能创建有效的心理表征。</p></li><li><p>约书亚遇到的停滞阶段，在每一种练习中都很常见。当你首先开始学习某些新东西时，发现自己进步神速，或者至少是稳步前进，这十分正常，当那样的进步停滞下来时，你自然会以为自己遇到了某种无情的限制。因此，你停步不前，最后就让自己停滞在那一水平。这是几乎任何一个领域或行业中的人们不再进步的主要原因。</p><p>  <strong> <span class="under0">要越过这种停滞阶段，最好的办法是以新的方式挑战你的大脑或身体。</span> </strong>例如，健美运动员会改变他们训练的类型，增加或减少他们举重的力量或反复练习的次数，并且每周变换一下训练日程。实际上，他们大多数人会主动地变换训练模式，使自己不至于一开始就陷入停滞。各种类型的交叉训练，也是基于这一相同的原则——在不同类型的训练之间切换，以便可以持续不断地以不同方式挑战自己。</p></li><li><p>任何一项相当复杂的技能，都涉及一系列的组成部分，你可能更擅长其中的某些，不太擅长另一些。因此，当你发现自己再难以有所提高时，可能只是那项技能中的一两个组成部分在妨碍你，而不是所有的组成部分都在绊住你。</p></li><li><p>保持动机也许是每个投入到有目的训练或者刻意练习中的人最终要面对的最大问题。</p></li><li><p><strong> <span class="under0">有目的的练习是一项艰巨的任务。它难以坚持下去，即使你仍然在坚持练习，比如，你还是经常去健身房，或者你每个星期依然花很多时间练习弹吉他，但你难以保持专注和努力，因此，到最后你不再能推动自己前进，而且不再进步。问题是，你可以做些什么来改变呢？</span> </strong></p></li></ul><ul><li><p>几乎没有科学证据证明，这世间存在一种可在任何情形中运用的一般的“意志力”。</p></li><li><p>提高水平与减轻体重之间，存在某种有意思的共同之处。要让那些体重超重的人启动一个节食减肥计划不是太难，而且，他们通常可以通过节食来减轻一些体重。但到最后，他们几乎全都发现，自己的进展停滞了下来，而大多数人的体重甚至还会缓慢地反弹，重新恢复到刚开始节食时的体重。那些长期坚持下来因而成功减肥的人，成功地重新设计了他们的生活，养成了新的生活习惯，并且使自己坚持那些持续减轻体重的行为，尽管一路走来，有各种各样的诱惑可能危及他们的成功。对于那些长期保持有目的训练或刻意练习的人们，有一件事情与之相似。他们通常培养了各种习惯，帮助自己继续前行。<strong> <span class="under0">我觉得，所有希望提高在某一行业或领域中的技能水平的人，应当每天花 1个小时或更多的时间，专心练习那些需要全神贯注投入才能做好的事情。这是一条经验法则。</span> </strong></p></li></ul><ul><li>保持这种推行此类体制运行下去的动机，包括两个组成部分：继续前行的理由和停下脚步的理由。你不再做自己当初想做的事情，是因为停下脚步的理由最终战胜了继续前行的理由。因此，你要保持动机，要么强化继续前行的理由，要么弱化停下脚步的理由。成功地保持动机，通常包括这两个方面。</li></ul><ul><li><p><strong> <span class="under0">在柏林的小提琴学生中，最杰出的和优异的学生，平均每周比优秀的学生大约多睡了 5个小时，最主要是午休时多睡了一些时间。</span> </strong></p><p>  参与我们研究的所有学生，无论是优秀的、优异的还是最杰出的，每周花在休闲活动上的时间大致相当，但是，最杰出的学生比其他学生能够更准确地估计他们参加休闲活动的时间，这表明，他们会尽更大的努力去规划时间。良好的规划，可以帮助你避免受到许多占用你大量时间的事情的干扰，以便把更多的时间留给练习。</p></li><li><p>杰出人物往往做两件有益的事情，它们看起来似乎都与动机无关。第一件是一般的身体保养：保证充足的睡眠并保持健康。</p></li><li><p>刻意练习中另一个重要的动机因素是相信自己可以成功。</p></li><li><p>如果你不再相信自己可以实现某个目标，要么是因为你的水平已经倒退了，要么是因为你陷入了停滞阶段，此时，千万不要半途而废。和你自己达成一个协议，你将尽自己的努力回归到之前的状态或者跨越停滞阶段，然后你再放弃。到那个时候，也许你不会放弃了。</p></li><li><p><strong> <span class="under0">将漫长的旅程分解成一系列可控的目标，并且每次只关注它们中的一个，甚至可以在每次达到一个目标时，给自己小小的奖励。</span> </strong></p></li><li><p>一般来讲，培养天才的过程，始于童年时代或青少年时代的早期，需要 10年或更长时间，才能达到杰出人物的水平。但那还不是终点。杰出人物的标志之一是，即使他们成为自己所在行业或领域中的世界最佳，依然要努力提升练习技巧，并不断改进。正是当他们抵达了行业或领域的前沿时，我们将会发现那些勇敢的开拓者已经超越了其他任何人，并且向我们表明了什么是可能的。</p></li><li><p>杰出人物通过年复一年的刻意练习，在漫长而艰苦的过程中一步一步改进，终于练就了他们杰出的能力。没有捷径可走。</p></li><li><p>从长远来看，占上风的是那些练习更勤奋的人，而不是那些一开始在智商或者其他才华方面稍有优势的人。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux screen命令管理远程会话</title>
      <link href="/2019/04/17/linux-screen/"/>
      <url>/2019/04/17/linux-screen/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近在服务器跑模型(本地跑不动了),跑一次大概要20小时+。<strong> 所以需要保证ssh连接linux服务器中断后，让命令继续在服务器运行。</strong>以前我只知道nohup,这次了解到了screen命令,本文做下记录。</p><hr><h3 id="元凶：SIGHUP-信号"><a href="#元凶：SIGHUP-信号" class="headerlink" title=" 元凶：SIGHUP 信号 "></a><strong> 元凶：SIGHUP 信号 </strong></h3><p>在Linux/Unix中，有这样几个概念：</p><ul><li>进程组（process group）：一个或多个进程的集合，每一个进程组有唯一一个进程组ID，即进程组长进程的ID。</li><li>会话期（session）：一个或多个进程组的集合，有唯一一个会话期首进程（session leader）。会话期ID为首进程的ID。</li><li>会话期可以有一个单独的控制终端（controlling terminal）。与控制终端连接的会话期首进程叫做控制进程（controlling process）。当前与终端交互的进程称为前台进程组。其余进程组称为后台进程组。</li></ul><p>根据POSIX.1定义：</p><ul><li>挂断信号（SIGHUP）默认的动作是终止程序。</li><li>当终端接口检测到网络连接断开，将挂断信号发送给控制进程（会话期首进程）。</li><li>如果会话期首进程终止，则该信号发送到该会话期前台进程组。</li><li>一个进程退出导致一个孤儿进程组中产生时，如果任意一个孤儿进程组进程处于STOP状态，发送SIGHUP和SIGCONT信号到该进程组中所有进程。<br>因此当网络断开或终端窗口关闭后，控制进程收到SIGHUP信号退出，会导致该会话期内其他进程退出。</li></ul><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title=" 解决方案 "></a><strong> 解决方案 </strong></h3><p><strong><span class="under0"> 如果我们可以忽略SIGHUP信号，关掉窗口应该就不会影响程序的运行了。</span></strong></p><h4 id="一、nohup"><a href="#一、nohup" class="headerlink" title=" 一、nohup "></a><strong> 一、nohup </strong></h4><p>nohup命令可以达到这个目的，如果程序的标准输出/标准错误是终端，nohup默认将其重定向到nohup.out文件。值得注意的是nohup命令只是使得程序忽略SIGHUP信号，还需要使用标记&amp;把它放在后台运行。<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nohup <span class="built_in">command</span> &gt; myout.file 2&gt;&amp;1 &amp;</span><br></pre></td></tr></table></figure></p><hr><h4 id="二、screen"><a href="#二、screen" class="headerlink" title=" 二、screen "></a><strong> 二、screen </strong></h4><p>Screen是一款由GNU计划开发的用于命令行终端切换的自由软件。用户可以通过该软件同时连接多个本地或远程的命令行会话，并在其间自由切换。GNU Screen可以看作是窗口管理器的命令行界面版本。它提供了统一的管理多个会话的界面和相应的功能。</p><h5 id="会话恢复"><a href="#会话恢复" class="headerlink" title=" 会话恢复 "></a><strong> 会话恢复 </strong></h5><p>只要Screen本身没有终止，在其内部运行的会话都可以恢复。这一点对于远程登录的用户特别有用——即使网络连接中断，用户也不会失去对已经打开的命令行会话的控制。只要再次登录到主机上执行screen -r就可以恢复会话的运行。同样在暂时离开的时候，也可以执行分离命令detach，在保证里面的程序正常运行的情况下让Screen挂起（切换到后台）。这一点和图形界面下的VNC很相似。</p><h5 id="多窗口"><a href="#多窗口" class="headerlink" title=" 多窗口 "></a><strong> 多窗口 </strong></h5><p>在Screen环境下，所有的会话都独立的运行，并拥有各自的编号、输入、输出和窗口缓存。用户可以通过快捷键在不同的窗口下切换，并可以自由的重定向各个窗口的输入和输出。Screen实现了基本的文本操作，如复制粘贴等；还提供了类似滚动条的功能，可以查看窗口状况的历史记录。窗口还可以被分区和命名，还可以监视后台窗口的活动。 会话共享 Screen可以让一个或多个用户从不同终端多次登录一个会话，并共享会话的所有特性（比如可以看到完全相同的输出）。它同时提供了窗口访问权限的机制，可以对窗口进行密码保护。</p><hr><h4 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"># screen [-AmRvx -ls -wipe][-d &lt;作业名称&gt;][-h &lt;行数&gt;][-r &lt;作业名称&gt;][-s ][-S &lt;作业名称&gt;]</span><br></pre></td></tr></table></figure><h4 id="选项"><a href="#选项" class="headerlink" title=" 选项 "></a><strong> 选项 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">-A 　将所有的视窗都调整为目前终端机的大小。</span><br><span class="line">-d &lt;作业名称&gt; 　将指定的screen作业离线。</span><br><span class="line">-h &lt;行数&gt; 　指定视窗的缓冲区行数。</span><br><span class="line">-m 　即使目前已在作业中的screen作业，仍强制建立新的screen作业。</span><br><span class="line">-r &lt;作业名称&gt; 　恢复离线的screen作业。</span><br><span class="line">-R 　先试图恢复离线的作业。若找不到离线的作业，即建立新的screen作业。</span><br><span class="line">-s 　指定建立新视窗时，所要执行的shell。</span><br><span class="line">-S &lt;作业名称&gt; 　指定screen作业的名称。</span><br><span class="line">-v 　显示版本信息。</span><br><span class="line">-x 　恢复之前离线的screen作业。</span><br><span class="line">-ls或--list 　显示目前所有的screen作业。</span><br><span class="line">-wipe 　检查目前所有的screen作业，并删除已经无法使用的screen作业。</span><br></pre></td></tr></table></figure><h4 id="常用screen参数"><a href="#常用screen参数" class="headerlink" title=" 常用screen参数 "></a><strong> 常用screen参数 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">screen -S yourname -&gt; 新建一个叫yourname的session</span><br><span class="line">screen -ls -&gt; 列出当前所有的session</span><br><span class="line">screen -r yourname -&gt; 回到yourname这个session</span><br><span class="line">screen -d yourname -&gt; 远程detach某个session</span><br><span class="line">screen -d -r yourname -&gt; 结束当前session并回到yourname这个session</span><br></pre></td></tr></table></figure><p>在每个screen session 下，所有命令都以 ctrl+a(C-a) 开始。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">C-a ? -&gt; 显示所有键绑定信息</span><br><span class="line">C-a c -&gt; 创建一个新的运行shell的窗口并切换到该窗口</span><br><span class="line">C-a n -&gt; Next，切换到下一个 window </span><br><span class="line">C-a p -&gt; Previous，切换到前一个 window </span><br><span class="line">C-a 0..9 -&gt; 切换到第 0..9 个 window</span><br><span class="line">Ctrl+a [Space] -&gt; 由视窗0循序切换到视窗9</span><br><span class="line">C-a C-a -&gt; 在两个最近使用的 window 间切换 </span><br><span class="line">C-a x -&gt; 锁住当前的 window，需用用户密码解锁</span><br><span class="line">C-a d -&gt; detach，暂时离开当前session，将目前的 screen session (可能含有多个 windows) 丢到后台执行，并会回到还没进 screen 时的状态，此时在 screen session 里，每个 window 内运行的 process (无论是前台/后台)都在继续执行，即使 logout 也不影响。 </span><br><span class="line">C-a z -&gt; 把当前session放到后台执行，用 shell 的 fg 命令则可回去。</span><br><span class="line">C-a w -&gt; 显示所有窗口列表</span><br><span class="line">C-a t -&gt; time，显示当前时间，和系统的 load </span><br><span class="line">C-a k -&gt; kill window，强行关闭当前的 window</span><br><span class="line">C-a [ -&gt; 进入 copy mode，在 copy mode 下可以回滚、搜索、复制就像用使用 vi 一样</span><br><span class="line">    C-b Backward，PageUp </span><br><span class="line">    C-f Forward，PageDown </span><br><span class="line">    H(大写) High，将光标移至左上角 </span><br><span class="line">    L Low，将光标移至左下角 </span><br><span class="line">    0 移到行首 </span><br><span class="line">    $ 行末 </span><br><span class="line">    w forward one word，以字为单位往前移 </span><br><span class="line">    b backward one word，以字为单位往后移 </span><br><span class="line">    Space 第一次按为标记区起点，第二次按为终点 </span><br><span class="line">    Esc 结束 copy mode </span><br><span class="line">C-a ] -&gt; paste，把刚刚在 copy mode 选定的内容贴上</span><br></pre></td></tr></table></figure></p><h4 id="安装screen"><a href="#安装screen" class="headerlink" title=" 安装screen "></a><strong> 安装screen </strong></h4><p>流行的Linux发行版（例如Red Hat Enterprise Linux）通常会自带screen实用程序，如果没有的话，可以从GNU screen的官方网站下载。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">[root@TS-DEV ~]# yum install screen</span><br><span class="line">[root@TS-DEV ~]# rpm -qa|grep screen</span><br><span class="line">screen-4.0.3-4.el5</span><br><span class="line">[root@TS-DEV ~]#</span><br></pre></td></tr></table></figure><p>创建一个新的窗口</p><p>安装完成后，直接敲命令screen就可以启动它。但是这样启动的screen会话没有名字，实践上推荐为每个screen会话取一个名字，方便分辨：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen -S david</span><br></pre></td></tr></table></figure></p><p>screen启动后，会创建第一个窗口，也就是窗口No. 0，并在其中打开一个系统默认的shell，一般都会是bash。所以你敲入命令screen之后，会立刻又返回到命令提示符，仿佛什么也没有发生似的，其实你已经进入Screen的世界了。当然，也可以在screen命令之后加入你喜欢的参数，使之直接打开你指定的程序，例如：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[root@TS-DEV ~]# screen vi david.txt</span><br></pre></td></tr></table></figure></p><p><div style="height:12px"></div></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://www.ibm.com/developerworks/cn/linux/l-cn-screen/index.html" target="_blank" rel="noopener">linux 技巧：使用 screen 管理你的远程会话</a><br><a href="https://www.cnblogs.com/xinzaibing/archive/2012/04/08/2437431.html" target="_blank" rel="noopener">【原创】linux下Screen的用法 - 心在冰 - 博客园</a><br><a href="https://huanghailiang.github.io/2017/09/08/ssh%E8%BF%9E%E6%8E%A5%E6%9C%8D%E5%8A%A1%E5%99%A8%E4%B8%AD%E6%96%AD%EF%BC%8C%E5%A6%82%E4%BD%95%E8%AE%A9%E5%91%BD%E4%BB%A4%E7%BB%A7%E7%BB%AD%E5%9C%A8%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%89%A7%E8%A1%8C/" target="_blank" rel="noopener">ssh连接服务器中断，如何让命令继续在服务器执行 | Darren</a><br><a href="https://www.cnblogs.com/mchina/archive/2013/01/30/2880680.html" target="_blank" rel="noopener">linux screen 命令详解 - David_Tang - 博客园</a><br><a href="https://www.zhihu.com/question/20709809" target="_blank" rel="noopener">Linux ssh状态下如何后台运行程序？ - 知乎</a><br><a href="http://www.sail.name/2018/04/06/linux-output-redirection/">linux输出重定向 | Sail</a><br><a href="http://man.linuxde.net/nohup" target="_blank" rel="noopener">nohup命令_Linux nohup 命令用法详解：将程序以忽略挂起信号的方式运行起来</a><br><a href="http://man.linuxde.net/screen" target="_blank" rel="noopener">screen命令_Linux screen 命令用法详解：用于命令行终端切换</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>macOS pyenv管理多个版本的python</title>
      <link href="/2019/04/17/manage-multi-python-version-macos/"/>
      <url>/2019/04/17/manage-multi-python-version-macos/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是在macOS,使用<code>pyenv</code>管理多个版本的<code>python</code>的记录</p><hr><p><span class="under0"> <strong> Pyenv只会管理通过Pyenv安装的Python版本，你自己在Python官网上下载的直接安装的Pyenv并不能被管理！！！同样除了系统自带的python包外,其他直接安装的python包是识别不出来的,即使使用的brew安装的也识别不出来. </strong></span></p><hr><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h3><h4 id="安装homebrew"><a href="#安装homebrew" class="headerlink" title=" 安装homebrew "></a><strong> 安装homebrew </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ /usr/bin/ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;</span><br><span class="line">$ brew -v</span><br></pre></td></tr></table></figure><h4 id="安装pyenv"><a href="#安装pyenv" class="headerlink" title=" 安装pyenv "></a><strong> 安装pyenv </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ brew update</span><br><span class="line">$ brew install pyenv</span><br><span class="line">$ pyenv -v</span><br></pre></td></tr></table></figure><div style="height:12px"></div><hr><h4 id="修改配置"><a href="#修改配置" class="headerlink" title=" 修改配置 "></a><strong> 修改配置 </strong></h4><p>在profile文件里面添加一句,编辑<code>.bash_profile</code>(bash)或者<code>.zshrc</code>(zsh),如果shell是bash,则编辑<code>.bash_profile</code>。是zsh,则编<code>.zshrc</code>。<br>若不存在<code>.bash_profile</code>，则输入如下命令，创建文件<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">touch .bash_profile</span><br></pre></td></tr></table></figure></p><p>添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eval &quot;$(pyenv init -)&quot;</span><br></pre></td></tr></table></figure></p><p>刷新之前配置的文件.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">source .bash_profile</span><br><span class="line"># or</span><br><span class="line">source .zshrc</span><br></pre></td></tr></table></figure></p><div style="height:12px"></div><hr><h3 id="使用"><a href="#使用" class="headerlink" title=" 使用 "></a><strong> 使用 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"># 查看pyenv支持哪些Python版本</span><br><span class="line">pyenv install --list</span><br><span class="line"></span><br><span class="line"># 查看当前使用的python版本</span><br><span class="line">pyenv version</span><br><span class="line"></span><br><span class="line"># 安装一个python版本如3.5.6</span><br><span class="line">pyenv install 3.5.6</span><br><span class="line"></span><br><span class="line"># 安装完成之后需要对数据库进行更新：</span><br><span class="line">pyenv rehash</span><br><span class="line"></span><br><span class="line"># 卸载一个python版本如3.5.6</span><br><span class="line">pyenv uninstall  3.5.6</span><br><span class="line"></span><br><span class="line"># 设置全局python版本如3.5.6</span><br><span class="line">pyenv global 3.5.6</span><br><span class="line">//很多人不推荐这么做,说是mac操作系统的文件也会调用原生的2.7的python版本</span><br><span class="line">//这种说法感觉有点:恐惧来自未知的感觉.持保留意见</span><br><span class="line"></span><br><span class="line"># 设置目录级python版本如3.5.6</span><br><span class="line">pyenv local 3.5.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># 为当前shell会话设置python版本如3.5.6</span><br><span class="line">pyenv shell 3.5.6</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">pyenv常用的命令说明：</span><br><span class="line"></span><br><span class="line">使用方式: pyenv &lt;命令&gt; [&lt;参数&gt;]</span><br><span class="line"></span><br><span class="line">命令:</span><br><span class="line">  commands    查看所有命令</span><br><span class="line">  local       设置或显示本地的Python版本</span><br><span class="line">  global      设置或显示全局Python版本</span><br><span class="line">  shell       设置或显示shell指定的Python版本</span><br><span class="line">  install     安装指定Python版本</span><br><span class="line">  uninstall   卸载指定Python版本)</span><br><span class="line">  version     显示当前的Python版本及其本地路径</span><br><span class="line">  versions    查看所有已经安装的版本</span><br><span class="line">  which       显示安装路径</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://juejin.im/post/5b42cbb15188251abf413ee6" target="_blank" rel="noopener">macOS 安装和管理多个Python版本 - 掘金</a><br><a href="https://juejin.im/post/5c389b4b6fb9a049e2323a8a" target="_blank" rel="noopener">mac下利用pyenv管理多个版本的python - 掘金</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JavaScript中分号引起的bug</title>
      <link href="/2019/04/14/a-bug-caused-by-semicolon-in-javascript/"/>
      <url>/2019/04/14/a-bug-caused-by-semicolon-in-javascript/</url>
      
        <content type="html"><![CDATA[<h3 id="Prafece"><a href="#Prafece" class="headerlink" title=" Prafece "></a><strong> Prafece </strong></h3><p>前阵子写代码遇到一个诡异的错误,排查了很久才定位到是分号的问题,本文做下记录</p><hr><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 可以正常工作</span></span><br><span class="line">  showProjectTaskModal(projectTaskData) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      projectTaskData: projectTaskData</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    <span class="keyword">if</span> (<span class="keyword">this</span>.ifShowZhanKai()) &#123;</span><br><span class="line">      <span class="keyword">this</span>.showZhanKai()</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">   <span class="comment">// 可以正常工作</span></span><br><span class="line">  showProjectTaskModal(projectTaskData) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      projectTaskData: projectTaskData</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    (<span class="keyword">this</span>.ifShowZhanKai()) ?</span><br><span class="line">      <span class="keyword">this</span>.showZhanKai() :</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">  <span class="comment">// 不可以正常工作</span></span><br><span class="line">  showProjectTaskModal(projectTaskData) &#123;</span><br><span class="line">    <span class="keyword">this</span>.setState(&#123;</span><br><span class="line">      projectTaskData: projectTaskData</span><br><span class="line">    &#125;)</span><br><span class="line"></span><br><span class="line">  </span><br><span class="line">    (<span class="keyword">this</span>.ifShowZhanKai()) ?</span><br><span class="line">      <span class="keyword">this</span>.showZhanKai() :</span><br><span class="line">      <span class="literal">null</span></span><br><span class="line">    </span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>上面的<code>showProjectTaskModal</code>函数,前两个可以正常工作,第三个却会抛错。问题在于<code>this.setState</code>后面有没有根分号。</p><p><strong><span class="under0"> 至于说 “很难总结什么时候加不加”，其实真的很简单。真正会导致上下行解析出问题的 token 有 5 个：括号，方括号，正则开头的斜杠，加号，减号。我还从没见过实际代码中用正则、加号、减号作为行首的情况，所以总结下来就是一句话：一行开头是括号或者方括号的时候加上分号就可以了，其他时候全部不需要。——尤雨溪</span></strong></p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://www.zhihu.com/question/20298345" target="_blank" rel="noopener">JavaScript 语句后应该加分号么？ - 知乎</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>正则表达式判断非空</title>
      <link href="/2019/04/14/Judging-Nonempty-by-Regular-Expressions/"/>
      <url>/2019/04/14/Judging-Nonempty-by-Regular-Expressions/</url>
      
        <content type="html"><![CDATA[<p>用来判断 textarea 是否全为空（不可全为空格和换行，允许字符前面和后面为空）<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/^[\s\S]*.*[^\s][\s\S]*$/</span><br></pre></td></tr></table></figure></p><p><img src="/img/正则表达式/Judging-Nonempty-by-Regular-Expressions/1.png" alt="1.png"></p><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://blog.csdn.net/qq_31808899/article/details/77966273" target="_blank" rel="noopener">正则表达式 —判断非空 - 鱿太人cccccciel___ - CSDN博客</a></p>]]></content>
      
      
      <categories>
          
          <category> 正则表达式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>配置process.env判断代码运行环境</title>
      <link href="/2019/04/13/configure-process-env-to-judge-environment/"/>
      <url>/2019/04/13/configure-process-env-to-judge-environment/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在开发一个项目的时候，会涉及到许多环境,比如dev、test、stage、product等,不同的环境需要加载不同的配置,因为后端接口的域名是不同的。</p><hr><h3 id="process-env"><a href="#process-env" class="headerlink" title=" process.env "></a><strong> process.env </strong></h3><p>我们可以通过<code>process.env</code>来配置<code>NODE_ENV</code>来区分开发环境。</p><p><code>process</code>对象是一个全局变量，它提供有关当前<code>Node.js</code>进程的信息并对其进行控制。 作为一个全局变量，它始终可供<code>Node.js</code>应用程序使用，无需使用<code>require()</code>。<code>process.env</code>属性返回包含用户环境的对象。</p><p>在<code>package.json</code>中进行配置<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node ./bin/www"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"NODE_ENV=development pm2 --no-daemon start ./bin/www --watch "</span>,</span><br><span class="line">    <span class="string">"stage"</span>: <span class="string">"NODE_ENV=stage pm2 --no-daemon start ./bin/www --watch "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>如果是windows环境,执行<code>npm install cross-env</code><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 因为mac和windows设置命令环境变量的命令不一致, 所以用cross-env来做兼容</span></span><br><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"node ./bin/www"</span>,</span><br><span class="line">    <span class="string">"dev"</span>: <span class="string">"cross-env NODE_ENV=development pm2 --no-daemon start ./bin/www --watch "</span>,</span><br><span class="line">    <span class="string">"stage"</span>: <span class="string">"cross-env NODE_ENV=stage pm2 --no-daemon start ./bin/www --watch "</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在代码中,我们就可以通过<code>process.env.NODE_ENV</code>来判断环境</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> host = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">"development"</span>) &#123;</span><br><span class="line">    <span class="comment">// pass</span></span><br><span class="line">&#125; <span class="keyword">else</span> <span class="keyword">if</span> (process.env.NODE_ENV === <span class="string">"stage"</span>) &#123;</span><br><span class="line">    <span class="comment">// pass</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="vue-cli创建的项目"><a href="#vue-cli创建的项目" class="headerlink" title=" vue-cli创建的项目 "></a><strong> vue-cli创建的项目 </strong></h3><p>如果我们是<a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F%E5%92%8C%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">vue-cli脚手架来创建的项目</a>:</p><p>模式是 Vue CLI 项目中一个重要的概念。默认情况下，一个 Vue CLI 项目有三个模式：</p><ul><li><code>development</code> 模式用于 <code>vue-cli-service serve</code></li><li><code>production</code> 模式用于 <code>vue-cli-service build 和 vue-cli-service test:e2e</code></li><li>test 模式用于 vue-cli-service test:unit<br>注意模式不同于 NODE_ENV，一个模式可以包含多个环境变量。也就是说，每个模式都会将 NODE_ENV 的值设置为模式的名称——比如在 development 模式下 NODE_ENV 的值会被设置为 “development”。</li></ul><p><strong> 你可以通过为 .env 文件增加后缀来设置某个模式下特有的环境变量。比如，如果你在项目根目录创建一个名为 .env.development 的文件，那么在这个文件里声明过的变量就只会在 development 模式下被载入。</strong></p><p>你可以通过传递 –mode 选项参数为命令行覆写默认的模式。例如，如果你想要在构建命令中使用开发环境变量，请在你的 package.json 脚本中加入：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&quot;dev-build&quot;: &quot;vue-cli-service build --mode development&quot;,</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://nodejs.cn/api/process.html#process_process_env" target="_blank" rel="noopener">process | Node.js API 文档</a><br><a href="https://segmentfault.com/a/1190000011683741" target="_blank" rel="noopener">Node环境变量 process.env 的那些事儿 - JS那些事儿 - SegmentFault 思否</a><br><a href="https://cli.vuejs.org/zh/guide/mode-and-env.html#%E6%A8%A1%E5%BC%8F" target="_blank" rel="noopener">环境变量和模式 | Vue CLI</a><br><a href="https://segmentfault.com/a/1190000016194069" target="_blank" rel="noopener">业务代码如何判断生产/开发环境 - 我不懂前端 - SegmentFault 思否</a><br><a href="https://segmentfault.com/a/1190000009952845" target="_blank" rel="noopener">React系列—Webpack环境搭建（二）不同环境不同配置 - 朱哥的全栈历险记 - SegmentFault 思否</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Invalid Host header</title>
      <link href="/2019/04/13/Invalid-Host-header-in-webpack/"/>
      <url>/2019/04/13/Invalid-Host-header-in-webpack/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近在部署一个前端用vue开发的项目的时候,访问的时候页面出现了如下错误<code>&#39;Invalid Host header&#39;</code></p><hr><p><strong><span class="under0"> 这是因为新版的webpack-dev-server出于安全考虑，默认检查hostname，如果hostname不是配置内的，将中断访问。</span></strong></p><p>如果有webpack配置文件，那么在<code>package.json</code>的脚本里添加参数即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"webpack-dev-server --disableHostCheck=true"</span></span><br></pre></td></tr></table></figure><p>如果是通过vue-cli来创建的项目,在根目录下创建文件<code>vue.config.js</code>, 然后填入如下内容</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">module</span>.exports = &#123;</span><br><span class="line">    devServer: &#123;</span><br><span class="line">        host: <span class="string">'0.0.0.0'</span>,</span><br><span class="line">        hot: <span class="literal">true</span>,</span><br><span class="line">        disableHostCheck: <span class="literal">true</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://www.jianshu.com/p/111806476add" target="_blank" rel="noopener">关于webpack ‘Invalid Host header’ 错误 - 简书</a><br><a href="https://www.trojansun.com/solve-vue-cli-invalid-host-header.html" target="_blank" rel="noopener">解决vue-cli脚手架访问出现“Invalid Host header” | 浅殇博客</a><br><a href="https://cli.vuejs.org/zh/config/#%E5%85%A8%E5%B1%80-cli-%E9%85%8D%E7%BD%AE" target="_blank" rel="noopener">配置参考 | Vue CLI</a></p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>读《情人》</title>
      <link href="/2019/04/05/reading-notes-of-lover/"/>
      <url>/2019/04/05/reading-notes-of-lover/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近把《情人》读完了，之前有读过两次，因为某些原因都半途而废。</p><p>这几年虽然把很多的时间放在了编程上，但还是读了一些书。不过有所记录的却寥寥无几。这本书我是在kindle app上看完的，在家用ipad看，户外就用手机。mac上的kindle软件极其难用，许多从亚马逊购买的电子书推送过去看不了,被迫放弃。</p><p>kindle app是我目前发现的比较不错的看电子书的方式:<br>　　一则是、各个终端设备之间进度同步比较及时。<br>　　二则是、亚马逊上面有很多电子书资源,kindleunlimited等活动价格也十分优惠。<br>　　　　　　且支持自己通过电子邮件将文件发送到kindle上。<br>　　三则是、功能全面、好用,包括但不限于做笔记、批注，笔记导出等。</p><hr><h3 id="情人"><a href="#情人" class="headerlink" title=" 情人 "></a><strong> 情人 </strong></h3><ul><li><p><strong> <span class="under0">我已经老了，有一天，在一处公共场所的大厅里，有一个男人向我走来。他主动介绍自己，他对我说：“我认识你，永远记得你。那时候，你还很年轻，人人都说你美，现在，我是特地来告诉你，对我来说，我觉得现在你比年轻的时候更美，那时你是年轻女人，与你那时的面貌相比，我更爱你现在备受摧残的面容。” </span> </strong></p><p>  这个形象，我是时常想到的，这个形象，只有我一个人能看到，这个形象，我却从来不曾说起。它就在那里，在无声无息之中，永远使人为之惊叹。在所有的形象之中，只有它让我感到自悦自喜，只有在它那里，我才认识自己，感到心醉神迷。</p><p>  <strong> <span class="under0">太晚了，太晚了，在我这一生中，这未免来得太早，也过于匆匆。才十八岁，就已经是太迟了。在十八岁和二十五岁之间，我原来的面貌早已不知去向。我在十八岁的时候就变老了。我不知道是不是所有的人都这样，我从来不曾问过什么人。好像有谁对我讲过时间转瞬即逝，在一生最年轻的岁月、最可赞叹的年华，在这样的时候，那时间来去匆匆，有时会突然让你感到震惊。 </span> </strong>衰老的过程是冷酷无情的。我眼看着衰老在我颜面上步步紧逼，一点点侵蚀，我的面容各有关部位也发生了变化，两眼变得越来越大，目光变得凄切无神，嘴变得更加固定僵化，额上刻满了深深的裂痕。我倒并没有被这一切吓倒，相反，我注意看那衰老如何在我的颜面上肆虐践踏，就好像我很有兴趣读一本书一样。我没有搞错，我知道；我知道衰老有一天也会减缓下来，按它通常的步伐徐徐前进。在我十七岁回到法国时认识我的人，两年后在我十九岁又见到我，一定会大为惊奇。这样的面貌，虽然已经成了新的模样，但我毕竟还是把它保持下来了。它毕竟曾经是我的面貌。它已经变老了，肯定是老了，不过，比起它本来应该变成的样子，相对来说，毕竟也没有变得老到那种地步。我的面容已经被深深的干枯的皱纹撕得四分五裂，皮肤也支离破碎了。它不像某些娟秀纤细的容颜那样，从此便告毁去，它原有的轮廓依然存在，不过，实质已经被摧毁了。我的容貌是被摧毁了。</p></li><li><p>有些时候，这种绝望的心情连绵不断，有些时候，随着黑夜到来，这绝望心情方才消失。</p></li><li><p>女人美不美，不在衣装服饰，不在美容修饰，不因为施用的香脂价钱贵不贵，穿戴珍奇宝物、高价的首饰之类。</p></li><li><p>在我写的关于我的童年的书里，什么避开不讲，什么是我讲了的，一下我也说不清，我相信对于我们母亲的爱一定是讲过的，但对她的恨，以及家里人彼此之间的爱讲过没有我就不知道了。不过，在这讲述这共同的关于毁灭和死亡的故事里，不论是在什么情况下，不论是在爱或是在恨的情况下，都是一样的，总之，就是关于这一家人的故事，其中也有恨，这恨可怕极了，对这恨，我不懂，至今我也不能理解，这恨就隐藏在我的血肉深处，就像刚刚出世只有一天的婴儿那样盲目。恨之所在，就是沉默据以开始的门槛。只有沉默可以从中通过，对我这一生来说，这是绵绵久远的苦役。我至今依然如故，面对这么多受苦受难的孩子，我始终保持着同样的神秘的距离。我自以为我在写作，但事实上我从来就不曾写过，我以为在爱，但我从来也不曾爱过，我什么也没有做，不过是站在那紧闭的门前等待罢了。</p></li><li><p>后来，有一天，他们都不见了，不来了。现在，母亲和两个哥哥，都已不在人世。<strong> <span class="under0">即使回首往事，也嫌迟了。现在，我对他们已经无所爱。我根本不知道我是不是爱过他们。我已经离开他们。在我头脑里，她的皮肤的气味，早已没有、不存在了，在我的眼里，她眼睛的颜色也早已无影无踪。那声音，我也记不得了，有时，我还能想起傍晚那种带有倦意的温煦。那笑声，是再也听不到了，笑声，哭声，都听不到了。完了，完了，都忘了，都记不起来了。所以，我现在写她是这么容易，写得这么长，可以一直写下去，她已经变成文从字顺的流畅文字了。</span> </strong></p></li><li><p><strong> <span class="under0">说是重逢，也未免来得太迟。只要看上一眼，就可以了然。重逢已经没有任何意义了。</span> </strong></p></li><li><p>肌肤有一种五色缤纷的温馨。肉体。那身体是痩痩的，绵软无力，没有肌肉，或许他有病初愈，正在调养中，他没有唇髭，缺乏男性的刚劲，只有生殖器是强有力的，人很柔弱，看来经受不起那种使人痛苦的折辱。她没有看他的脸，她没有看他。她不去看他。她触摩他。她抚弄那柔软的生殖器，抚摩那柔软的皮肤，摩挲那黄金一样的色彩，不曾认知的新奇。他呻吟着，他在哭泣。他沉浸在一种糟透了的爱情之中。</p></li><li><p>城里的喧闹声很重，记得那就像一部电影音响放得过大，震耳欲聋。我清楚地记得，房间里光线很暗，我们都没有说话，房间四周被城市那种持续不断的噪音包围着，城市如同一列火车，这个房间就像是在火车上。窗上都没有嵌玻璃，只有窗帘和百叶窗。在窗帘上可以看到外面太阳下人行道上走过的错综人影。过往行人熙熙攘攘。人影规则地被百叶窗横条木划成一条条的。木拖鞋声一下下敲得你头痛，声音刺耳，中国话说起来像是在吼叫，总让我想到沙漠上说的语言，一种难以想象的奇异的语言。</p></li><li><p>城市的声音近在咫尺，是这样近，在百叶窗木条上的摩擦声都听得清。声音听起来就仿佛是他们从房间里穿行过去似的。我在这声音、声音流动之中爱抚着他的肉体。大海汇集成为无限，远远退去，又急急卷回，如此往复不已。</p></li><li><p>我说，我只梦见我的母亲，从来梦不到圣诞树，永远只有梦到她，我说，她是让贫穷给活剥了的母亲，或者她是这样一个女人，在一生各个时期，永远对着沙漠，对着沙漠说话，对着沙漠倾诉，她永远都在辛辛苦苦寻食糊口，为了活命，她就是那个不停地述说自己遭遇的玛丽·勒格朗·德·鲁拜，不停地诉说着她的无辜，她的节俭，她的希望。</p></li><li><p>人行道上，人群杂沓，十分拥挤，人流或急或缓向四面八方涌去，有几股人流推挤出几条通道，就像无家可归的野狗那样肮脏可厌，像乞丐那样盲目又无理性，这里是一群中国人，在当今那繁荣兴旺的景象中我又看到了他们，他们走路的方式从容不迫，在人声嘈杂中，孤身自立，可以说，既不幸福，也不悲戚，更无好奇之心，向前走去又像是没有往前走，没有向前去的意念，不过是不往那边走而从这里过就是了，他们既是单一孤立的，处在人群之中对他们说又从来不是孤立的，他们身在众人之间又永远是孑然自处。</p></li><li><p><strong> <span class="under0">从来不讲什么你好，晚安，拜年。从来不说一声谢谢。从来不说话。从来不感到需要说话。就那么呆在那里，离人远远的，一句话不说。这个家庭就是一块顽石，凝结得又厚又硬，不可接近。我们没有一天不你杀我杀的，天天都在杀人。我们不仅互不通话，而且彼此谁也不看谁。你被看，就不能回看。看，就是一种好奇的行动，表示对什么感到兴趣，在注意什么，只要一看，那就表明你低了头了。被看的人根本就不值得去看。看永远是污辱人的。</span> </strong>交谈这个字眼是被禁止的。我认为这个字在这里正表示屈辱和骄横。任何一种共同关系，不论是家庭关系还是别的什么，对于我们这一家人来说，都是可憎的，污蔑性的。我们在一起相处因为在原则上非活过这一生并为之深感耻辱不可。我们共同的历史实质上就是这样的，也就是这个虔诚的人物——这个被社会谋害致死的——我们的母亲的三个孩子的共同历史的内涵。我们正是站在社会一边将我们的母亲推向绝境。正因为人们这样对待我们的母亲，她又是这么好， 这么一心信任人， 所以我们憎恨生活，也憎恨我们自己。</p></li><li><p>整个房屋散发出香气，带有暴风雨过后潮湿土地那种好闻的香味，这香味闻起来让人觉得神飞意扬，特别是和别的气味混合在一起，肥皂的香气，纯洁、良善的气息，洗干净的衣物的气息，洁白的气息，我们的母亲的气息，我们母亲那种无限天真的气息——混上这样一些气息，更叫人欣喜欲狂。</p></li><li><p><strong> <span class="under0">战争我亲眼看见过，那色调和我童年的色调是一样的。</span> </strong>我把战时同我大哥的统治混淆不清。这无疑因为我的小哥哥死于战时：是人的心坚持不住，退让了，像我说过的那样。</p></li><li><p><strong> <span class="under0">那种美雅，我依然记得，现在要我忘记看来是太晚了，那种完美依然还在，丝毫无损，理想人物的完美是什么也不能损害的，环境，时代，严寒，饥饿，德国的败北，克里米亚真相——都无损于她的美。所有这些历史事件尽管是那么可怕，而她却超越于历史之上，永远在那条街上匆匆走过。那一对眼睛也是清澈明亮的。</span> </strong></p></li><li><p>她美，美即出于这种偶然。她身上穿的衣装都是欧洲老式样的服饰，以及织锦缎的旧衣，成了老古董的套头连衣裙，旧幔子做的衣服，旧衬裙，旧衣片儿，成了破衣烂衫的旧时高级时装，蛀满破洞的旧狐皮，陈年古旧的水獭皮，<strong> <span class="under0">她的美就是这样，破破烂烂、瑟瑟发抖、凄凄切切的，而且流落异乡、飘零不定,什么都不合体,不相称,不论什么对她都嫌太大,但是很美,她是那样飘逸，那样纤弱，无枝可依，但是很美。</span> </strong>自头顶至身躯，她生成就是这样，无论是什么只要和她一接触，就永远成为这种美的组成部分。</p></li><li><p>巴尔扎克</p></li><li><p>万物之中上帝拿出来最美的东西，就是海伦·拉戈奈尔的身体，上体附有双乳仿佛分离在体外，它们的姿形意态与身材高度既相对应又调和一致，这种平衡是不可比拟的。胸前双乳外部浑圆，这种流向手掌的外形奇异极了，没有比它更神奇的了。</p></li><li><p>他死在他的故事结局之前。在他还活着的时候事情已成定局，他死得未免太迟了，</p></li><li><p>黄昏在一年之中都是在同一时刻降临。黄昏持续的时间十分短暂，几乎是不容情的。在雨季，几个星期看不到蓝天，天空浓雾弥漫，甚至月光也难以透过。相反，在旱季，天空裸露在外，一览无遗，真是十分露骨。就是没有月光的夜晚，天空也是明亮的。于是各种阴影仿佛都被描画在地上、水上、路上、墙上。</p></li><li><p><strong> <span class="under0">白昼的景象我已记不清了。日光使各种色彩变得暗淡朦胧，五颜六色被捣得粉碎。夜晚，有一些夜晚，我还记得，没有忘记。那种蓝色比天穹还要深邃邈远，蓝色被掩在一切厚度后面，笼罩在世界的深处。我看天空，那就是从蓝色中横向穿射出来的一条纯一的光带，一种超出色彩之外的冷冷的熔化状态。有几次，在永隆，我母亲感到愁闷，叫人套上两轮轻便马车，乘车到郊外去观赏旱季之夜。我有幸遇到这样的机会，看到这样的夜色，还有这样一位母亲。光从天上飞流而下，化作透明的瀑布，沉潜于无声与静止之墓。空气是蓝的，可以掬于手指间。天空就是这种光的亮度持续的闪耀。夜照耀着一切，照亮了大河两岸的原野一直到一望无际的尽头。每一夜都是独特的，每一夜都可以叫作夜的延绵的时间。夜的声音就是乡野犬吠发出的声音。犬向着不可知的神秘长吠。它们从一个个村庄此呼彼应，这样的呼应一直持续到夜的空间与时间从整体上消失。</span> </strong></p></li><li><p>我大概在八岁的时候，曾经听到她那尖厉的笑声，还有她的快乐的呼叫，肯定是在拿我取乐。回想起来，心中就是关于这样一种恐惧的记忆。说这种恐惧已超出我的理解、超出我的力量，这样说也还不够。如果可以进一步说，那是关于人的存在整体这种确定性的记忆，也就是说，那个女人如用手触及我，即使是轻轻一触，我就会陷入比死还要严重的境地，我就要陷于疯狂。我跑到邻近的花园，跑到一座房子那里，刚刚跑上台阶，就在房门入口那里倒下了。过后有许多天，我还不能把遇到的这件事说明白。</p></li><li><p>在开口再和我说话之前，她等了很长时间，后来她说，满怀爱意地说：你以为事情过去了？在殖民地你根本不能结婚，知道不知道？我耸耸肩，笑了。我说：我愿意的时候，管它什么地方，我都可以结婚。母亲表示不同意。不行。她说：在这里搞得满城风雨，在这里，就办不到。<strong> <span class="under0">她望着我，她还讲了一些令人难忘的事情：他们喜欢你？我回答说：是这样，反正他们喜欢我。她说：正是这样，他们喜欢你，就因为你是你。</span> </strong></p></li><li><p>拍出的照片大家都想看，但彼此之间谁也不看谁，只是看照片，各自分别去看，大家都不说话，不加评论，大家都看照片，大家在照片上互相看来看去。全家在一起合拍的照片要看，一个一个分别拍的也看。在很久之前拍的照片上，大家都还年幼，互相看来看去，在新近拍的照片上，大家也是你看我我看你互相看。即使在那个时候，我们之间就已经大不相同，有了很大的差别。这些照片每一次看过，就要整理好存放在衣橱里和衣物放在一起。我母亲让人给我们拍照，目的是为了看看我们，看看是不是成长正常。她同所有的母亲一样，我们也像别的孩子那样，总是长时间去看那些照片。</p></li><li><p>恰恰在这种属于种族的荒诞的大智大勇之中，我发现有一种深邃的动人的美。</p></li><li><p><strong> <span class="under0">面貌经过橡皮涂改，一律变得年轻了。人们所期求的原也是这样。这种相像——这样的谨慎——对他们在家族中走过来的经历的回忆想必相互适应，既证实了他所具有的特质，也成了他确实存在的明证。他们愈是彼此相像，他们归属于家族各不同辈份这一点也愈加不容置疑。</span> </strong>何况所有男人头上都有相同的头巾，所有女人都梳着一样的发髻，同样直直长长的发式，男人女人一律都穿同样的竖领长衫。他们都是一样的神态，我在他们所有的人中间看到的就是这种神态。</p></li><li><p><strong> <span class="under0">他注目看着她。他闭上眼也依然还在看她。他呼吸着她的面容。他呼吸着眼前的一个孩子，他两眼闭着呼吸着她的呼吸，吸取她身上发出的热气。这身体的界限渐渐越来越分辨不清了，这身体和别的人体不同，它不是限定的，它没有止境，它还在这个房间里不断扩大，它没有固定的形态，时时都在形成之中，也不仅仅在他所见的地点存在，同时也存在于别的地方，它展现在目力所及之外，向着运动，向着死延伸而去，它是柔韧多变的，它在欢乐中启动，整体随之而去，就像是一个大人，到了成年，没有恶念，但具有一种令人恐惧的智能。</span> </strong></p></li></ul><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://segmentfault.com/q/1010000000125730" target="_blank" rel="noopener">markdown段落中如何产生缩进？ - SegmentFault 思否</a><br><a href="https://www.jianshu.com/p/d0ffea021315" target="_blank" rel="noopener">在Mac OS X下输入全角空格 - 简书</a><br><a href="https://www.liuchuo.net/archives/4724" target="_blank" rel="noopener">kindle iOS版 app 通过邮件导出笔记 “未设置电子邮箱账户” – 柳婼 の  blog</a></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MIME 类型</title>
      <link href="/2019/04/05/MIME-types/"/>
      <url>/2019/04/05/MIME-types/</url>
      
        <content type="html"><![CDATA[<p><code>&lt;input&gt;</code> type 类型为 file 的 input 元素使得用户可以选择一个或多个元素以提交表单的方式上传到服务器上，或者通过 Javascript 的 File API 对文件进行操作 .</p><p>如果你不希望用户上传任何类型的文件, 你可以使用<code>input</code>的<code>accept</code>属性.accept 属性接受一个逗号分隔的<code>MIME</code>类型字符串, 如:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">accept=&quot;image/png&quot; or accept=&quot;.png&quot; — 只接受 png 图片.</span><br><span class="line">accept=&quot;image/png, image/jpeg&quot; or accept=&quot;.png, .jpg, .jpeg&quot; — PNG/JPEG 文件.</span><br><span class="line">accept=&quot;image/*&quot; — 接受任何图片文件类型</span><br><span class="line">accept=&quot;.doc,.docx,.xml,application/msword,application/vnd.openxmlformats-officedocument.wordprocessingml.document&quot; — 接受任何 MS Doc 文件类型.</span><br></pre></td></tr></table></figure><p><strong> accept 属性并不会验证选中文件的类型. 他只是为开发这提供了一种引导用户做出期望行为的方式而已, 用户还是有办法绕过浏览器的限制.<span class="under0">因此, 在服务器端进行文件类型验证是必不可少的.</span> </strong></p><hr><h3 id="MIME-类型"><a href="#MIME-类型" class="headerlink" title=" MIME 类型 "></a><strong> MIME 类型 </strong></h3><p>多用途Internet邮件扩展（MIME）类型 是一种标准化的方式来表示文档的性质和格式。 浏览器通常使用MIME类型（而不是文件扩展名）来确定如何处理文档；因此服务器设置正确以将正确的MIME类型附加到响应对象的头部是非常重要的。</p><h4 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h4><p><code>type/subtype</code></p><p>MIME的组成结构非常简单；由类型与子类型两个字符串中间用’/‘分隔而组成。不允许空格存在。type 表示可以被分多个子类的独立类别。subtype 表示细分后的每个类型。<strong> MIME类型对大小写不敏感，但是传统写法都是小写。</strong></p><p>以下是一些常用的MIME类型和后缀的对应，完整的请戳<a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">Media Types</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">后缀名       MIME名称</span><br><span class="line"></span><br><span class="line">*.3gpp    audio/3gpp, video/3gpp</span><br><span class="line">*.ac3     audio/ac3</span><br><span class="line">*.asf     allpication/vnd.ms-asf</span><br><span class="line">*.au      audio/basic</span><br><span class="line">*.css     text/css</span><br><span class="line">*.csv     text/csv</span><br><span class="line">*.doc     application/msword    </span><br><span class="line">*.docx    application/vnd.openxmlformats-officedocument.wordprocessingml.document</span><br><span class="line">*.dot     application/msword    </span><br><span class="line">*.dtd     application/xml-dtd    </span><br><span class="line">*.dwg     image/vnd.dwg    </span><br><span class="line">*.dxf     image/vnd.dxf</span><br><span class="line">*.gif     image/gif    </span><br><span class="line">*.htm     text/html    </span><br><span class="line">*.html    text/html    </span><br><span class="line">*.jp2     image/jp2    </span><br><span class="line">*.jpe     image/jpeg</span><br><span class="line">*.jpeg    image/jpeg</span><br><span class="line">*.jpg     image/jpeg    </span><br><span class="line">*.js      text/javascript, application/javascript    </span><br><span class="line">*.json    application/json    </span><br><span class="line">*.mp2     audio/mpeg, video/mpeg    </span><br><span class="line">*.mp3     audio/mpeg    </span><br><span class="line">*.mp4     audio/mp4, video/mp4    </span><br><span class="line">*.mpeg    video/mpeg    </span><br><span class="line">*.mpg     video/mpeg    </span><br><span class="line">*.mpp     application/vnd.ms-project    </span><br><span class="line">*.ogg     application/ogg, audio/ogg    </span><br><span class="line">*.pdf     application/pdf    </span><br><span class="line">*.png     image/png    </span><br><span class="line">*.pot     application/vnd.ms-powerpoint    </span><br><span class="line">*.pps     application/vnd.ms-powerpoint    </span><br><span class="line">*.ppt     application/vnd.ms-powerpoint    </span><br><span class="line">*.pptx    application/vnd.openxmlformats-officedocument.presentationml.presentation</span><br><span class="line">*.rtf     application/rtf, text/rtf    </span><br><span class="line">*.svf     image/vnd.svf    </span><br><span class="line">*.tif     image/tiff    </span><br><span class="line">*.tiff    image/tiff    </span><br><span class="line">*.txt     text/plain    </span><br><span class="line">*.wdb     application/vnd.ms-works    </span><br><span class="line">*.wps     application/vnd.ms-works    </span><br><span class="line">*.xhtml   application/xhtml+xml    </span><br><span class="line">*.xlc     application/vnd.ms-excel    </span><br><span class="line">*.xlm     application/vnd.ms-excel    </span><br><span class="line">*.xlt     application/vnd.ms-excel    </span><br><span class="line">*.xlw     application/vnd.ms-excel    </span><br><span class="line">*.xml     text/xml, application/xml    </span><br><span class="line">*.zip     aplication/zip    </span><br><span class="line">*.xls     application/vnd.ms-excel    </span><br><span class="line">*.xlsx    application/vnd.openxmlformats-officedocument.spreadsheetml.sheet</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Basics_of_HTTP/MIME_types" target="_blank" rel="noopener">MIME 类型 - HTTP | MDN</a><br><a href="https://www.haorooms.com/post/input_file_leixing" target="_blank" rel="noopener">HTML5的 input:file上传类型控制</a><br><a href="https://blog.csdn.net/zhezhebie/article/details/80513499" target="_blank" rel="noopener">常用文件的mime和mimetype的对应关系 - 阳水平的博客 - CSDN博客</a><br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTML/Element/Input/file" target="_blank" rel="noopener"><code>&lt;input type=&quot;file&quot;&gt;</code> - HTML（超文本标记语言） | MDN</a><br><a href="https://www.iana.org/assignments/media-types/media-types.xhtml" target="_blank" rel="noopener">Media Types</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>美团点评实习总结</title>
      <link href="/2019/04/03/MTDP-internship/"/>
      <url>/2019/04/03/MTDP-internship/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>之前秋招签了美团,所以18年12月5号到19年3月29号在成都美团进行了实习,熟悉了下组内的工作。本文做些记录。</p><hr><p>因为之前有在<a href="http://www.sail.name/2018/10/28/Baidu-internship/">百度实习</a>过，所以也算是老司机了。</p><p><strong><span class="under0"> 这次实习收获很大,主要在于收获了我的女朋友。</span></strong> </p><p>这让我不禁感慨，当初决定回成都工作，是一个明智的决定。至于其他技术、生活上的一些收获，相比之下，就不值一提了～</p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>超伸</title>
      <link href="/2019/01/21/hyperextension/"/>
      <url>/2019/01/21/hyperextension/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>今晚在健身房练固定器械的时候，教练指出了我一些动作上的问题， 并告诉我手超伸。关于超伸这个事情，小时候就发现了，但直到今天才知道这个概念。</p><hr><h3 id="定义"><a href="#定义" class="headerlink" title=" 定义 "></a><strong> 定义 </strong></h3><p><strong> 所谓超伸，就是关节的角度超过180度。</strong> 人的关节都会有一个活动的范围，<strong> 这两个关节最大的伸展角度是180度，也就是上臂和小臂成一条直线，大腿和小腿成一条直线.超过了这个角度就变成了超伸。</strong> 超伸主要是指肘关节和膝关节的超伸，人体膝关节和肘关节的正常伸缩幅度就是180度， 超伸就是说你的关节超过了原本应该有的最大伸展角度。</p><hr><p>印象中，小的时候，就有家长说我的手臂可以伸得比较弯，大概如这两张图所示</p><p><img src="/img/健身/hyperextension/1.jpeg" alt="1.jpeg"><br><img src="/img/健身/hyperextension/2.jpeg" alt="2.jpeg"></p><p>但是对于这个究竟是怎么回事，这么多年来，我也没有了解过。教练说可能是小时候，一些动作，拿重物什么导致的。我在网上查看了下: <strong> 之所以会发生超伸的问题，原因一就是先天性和病理性的超伸，但更多的是因为后天缺乏运动，肌肉无力，再加上不正确的站姿，比如骨盆前移导致重心前移，人的体重长期压迫着膝关节也容易导致超伸。</strong></p><p><span class="under0">除了少数先天和病理的原因外，绝大部分超伸可以说是因为不良的体态和锻炼太少、肌肉力量不足造成的。</span></p><hr><h3 id="危害"><a href="#危害" class="headerlink" title=" 危害 "></a><strong> 危害 </strong></h3><p><strong> 超伸本身没问题，但是超伸再承重那就很危险了。</strong>比如膝关节超伸。我们都知道力和反作用力，当你的双脚蹬地的时候，地面会上传一个反作用力，让整个人是一个向上的状态，这样的协助有助于让膝关节和踝关节减轻压力，但是能很好地向上传力需要一个良好的通路，可是膝关节的超伸，无疑是将这条路堵死了，上身传递下来的压力没办法释放到地面，地面上传的力也无法直达头顶，反而都在膝关节这里淤住了，于是膝关节会经常性的疼痛，容易在做剧烈运动的时候扭伤和拉伤。</p><p>比如在做一些负重练习的时候，小重量可能还好，但是如果大重量练习的话，就容易对关节造成损伤。</p><hr><h3 id="纠正或改善"><a href="#纠正或改善" class="headerlink" title=" 纠正或改善 "></a><strong> 纠正或改善 </strong></h3><p>对于轻度超伸，<span class="under0">最重要的是形成避免超伸的意识，在日常生活和健身时保持正确的体态习惯和动作习惯。</span></p><h4 id="改善肘关节超伸"><a href="#改善肘关节超伸" class="headerlink" title=" 改善肘关节超伸 "></a><strong> 改善肘关节超伸 </strong></h4><p>改善肘关节的习惯性超伸，最重要的就是要加强上臂肌肉的力量（主要是肱二头肌和肱三头肌）。</p><h4 id="改善膝关节超伸"><a href="#改善膝关节超伸" class="headerlink" title=" 改善膝关节超伸 "></a><strong> 改善膝关节超伸 </strong></h4><p>改善膝盖超伸稍微复杂一点，但因为有不少拉伸和放松的部分，做起来会比较舒服：<br>￼<br>1、花几块钱买个网球踩在脚底，滚一滚，找到痛点按压几十秒，放松足底筋膜，改善重心前移的问题。<br>2、通过臀桥和健身球加强大腿后侧肌肉的力量，强化腘绳肌、臀大肌和股四头肌。<br>3、拉伸紧张的小腿后侧和大腿前侧肌肉，提高它们的灵活性。</p><hr><p>有意思的是, 超伸这个问题，这么多年我才真正的了解。还是要多接触一些东西～多学习</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zhuanlan.zhihu.com/p/20867446" target="_blank" rel="noopener">你以为的「伸直」也许是「超伸」 - 知乎</a><br><a href="http://www.5ifit.com/news/25418.html" target="_blank" rel="noopener">别把超伸想的太可怕！_健网</a><br><a href="https://zhuanlan.zhihu.com/p/21710675" target="_blank" rel="noopener">如何科学矫正膝超伸？ - 知乎</a><br><a href="https://www.meipian.cn/dj2bguz" target="_blank" rel="noopener">什么是超伸 - 美篇</a></p>]]></content>
      
      
      <categories>
          
          <category> 健身 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2018 年度总结</title>
      <link href="/2018/12/31/2018-summary/"/>
      <url>/2018/12/31/2018-summary/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>2018年总的说来,过得有些疲惫。时间很快,有的时候自己会被打得措手不及, 一晃就到年底了。</p><hr><h3 id="博客"><a href="#博客" class="headerlink" title=" 博客 "></a><strong> 博客 </strong></h3><p>先说说博客吧。</p><p>这两年写了两百多篇博客。在第一篇博客<a href="http://localhost:4000/2016/12/01/first/" target="_blank" rel="noopener">叶尖滴落的星球</a>,我当时是这样写为什么要写博客的:<strong> <span class="under0">不过我还是得写博客，因为这个行动本身是对我有意义的。一是，可以让我跳出舒适区，我很懒。二是, 写博可以将行动与反思结合起来。一味的行动是不够的，一味的反思也是不够的。三是, 有助于我对自己所学进行更好的梳理。有时候为了讲清一个技术点，可能需要查阅很多文档资料, 才能理解得更深刻。</span></strong></p><p>其实没想到会写这么久, 当时也才刚加入工作室两个多月。中途有想过，还要不要继续写博客，因为这件事情还是蛮耗费时间的。</p><p>今年上半年还在百度实习, 因为自己负责了一个新项目, 周末还需要学习学校的功课, 那阵子博客几乎没怎么更新。导致有朋友问我怎么不写博客了。也偶尔收到一些同学反馈,说 看了博客有收获。</p><p>在过去的日子, 博客是我主要记录学习内容的地方。因为老了, 记忆力已经大不如从前。有的问题当时解决了, 没做记录, 下次遇到又折腾了半天。明年还会继续学习。</p><hr><h3 id="工作-amp-amp-生活-amp-amp-学习"><a href="#工作-amp-amp-生活-amp-amp-学习" class="headerlink" title=" 工作 &amp;&amp; 生活 &amp;&amp; 学习 "></a><strong> 工作 &amp;&amp; 生活 &amp;&amp; 学习 </strong></h3><p>因为某些原因,今年我换了份工作,也换了个城市。从北京百度到成都美团。<br><img src="/img/杂文/2018-summary/1.jpeg" alt="1.jpeg"></p><p>五月结束了实习, 就回到了学校。<strong> 实习期间是有回过几次学校的, 虽然只在学校待几天, 但是走在校园里, 整个人都很惬意轻松。<span class="under0">这是我走在西二旗所感受不到的(笑)。</span></strong>  工作的时候,我更多的被业务推动, 因为业务的需要去补充、学习自己的技术。不像之前在学校的时候, 有大把时间挥霍, 研究感兴趣的技术。毋庸置疑, 技术是需要去帮助业务更好的发展, 但是当仅限于当前的业务去学习的时候, 似乎走得慢了一些。</p><p>实习的时候, 虽然累了一点, 不过还是能学了不少东西。比较幸运的是,我和果普是一同从学校去帝都实习的。因为百度和滴滴离得很近,所以我们租了一套房。<strong><span class="under0">后来工作室大二的远爷(西二旗第一)寒假也来搜狐实习了,我们三个就住在了一起。 远爷最初是安全学院的, 但是远爷在初三就开始写代码了,后来很轻松的转到了妓院。远爷是我们三个当中, 唯一一个能独自撸完前后端、Android以及IOS的。加之安全学院出身, 所以还擅长渗透和逆向。那时候比特币还在高位, 远爷周末还会宅在家挖矿。 </span> 在全方位了解到远爷的技术实力后, 我感受到了程序员的中年危机, 虽然那时我才20岁。每天早上, 我们从融泽嘉园走到西二旗地铁站, 这一段路也是我们的商业胡吹之路。今年我吹逼的进步远大于在技术上的进步。</strong></p><p>寒假结束没多久远爷就回学校了, 四月果普也从滴滴跳槽去了头条。五月我还没确定是否要回成都, 就离开百度回学校了。</p><p>实习期间我才真切的意识到整块整块的学习时间是很宝贵的。比较遗憾的是, 实习结束在学校的日子, 我对于时间的分配并没有做得很好。</p><p>12月初, 开始了在美团的工作。二十多天下来, 参与了三个项目,可以说是很刺激了。在成都工作和在北京工作相比, 目前最大的感受是在成都能更好的生活。日子久一些或许会有更多的想法。</p><p>一年下来, 技术上虽然有一点小进步, 但是感觉自己越来越菜。工作过后, 意识到技术之外还有很多能力也很重要, 所以目前就是全方位的菜。</p><p>今年还做了一些事情, 比如锻炼减肥。实习结束过后,减了20多斤。有的人因为疾病从我身边永远离去,还是好好爱惜身体吧。</p><hr><h3 id="音乐"><a href="#音乐" class="headerlink" title=" 音乐 "></a><strong> 音乐 </strong></h3><p>今年Jay依旧没有出新专辑。</p><p><img src="/img/杂文/2018-summary/1.jpg" alt="1.jpg"></p><p>2017年我在开发的应用上尝试着和音乐做了一些结合。明年会做一些这方面的工作, 有更多的尝试。</p><hr><h3 id="新年"><a href="#新年" class="headerlink" title=" 新年 "></a><strong> 新年 </strong></h3><p>时间过得真的很快。今年因为各种原因, 我比往年更多的感觉到了疲惫。</p><p>有时候会想起, 大一、大二写代码的日子, 那时候虽然技术菜, 但是想得更少了些。</p><hr><p>昨晚龚锐姐姐给我发了《不能说的秘密》音乐剧。</p><p><span class="under0"><strong> 虽然发生了很多事, 今年就写到这里, 其余全部是秘密。</strong></span></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《我编程，我快乐》</title>
      <link href="/2018/12/22/reading-notes-of-the-passionate-programmer/"/>
      <url>/2018/12/22/reading-notes-of-the-passionate-programmer/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近读了《我编程，我快乐》，里面有一些观点给我了不少启发，特别是一些职业规划的方面的内容。</p><p>不由得想到了《重构》这本书。第一次读《重构》，是在三年前，那时候我大一。虽然早已听闻这本书的大名，但是受限于自己只有少得可怜的编码经验，读了小几十页不到，觉得太过晦涩，就读不下去了。年初在百度实习期间，因为提交代码需要被同事review，开始有意识的思考怎么改进自己的代码，再次阅读了《重构》。这次阅读，让我后悔不已，一本好书被我错过了三年。说这一点，是考虑到或许因为我已经有了一些工作经历，所以读《我编程，我快乐》有很多共鸣、收获。</p><p>阅读的过程中，有的地方忘记做了记录。但我以后很可能也不会补充上了，所以就将记录了的部分，放在本文。</p><p><img src="/img/read/reading-notes-of-the-passionate-programmer/1.png" alt="《我编程，我快乐》图片"></p><hr><h3 id="记录"><a href="#记录" class="headerlink" title=" 记录 "></a><strong> 记录 </strong></h3><ul><li><p><strong> <span class="under0">如果生活的大部分时间都被工作占据着，那么热爱工作就是热爱生活。</span> </strong>比起那些枯燥的简单任务，充满挑战、有驱动力、有回报的工作更能让你有动力在清晨从温暖的被窝里爬起来。工作做得好意味着你在充分发挥着才能。相反，如果工作做得不好，就证明你大部分时间都只能在懊悔，懊悔自己碌碌无为。</p></li><li><p>我们最终的目标是追求快乐。一旦满足生存的基本需求，人们就会转而去追求快乐。然而，我们的行动往往与此目标相悖。这是因为人们往往纠缠于做某事的方法，而忘记了最终的目的。</p></li><li><p>或许我不会快乐。但可以肯定的是，当我们以追求快乐为核心目标，并且以此作为首要的推动手段时，那在追求目标的过程中，就会更正确地做出每一步的选择。更高的薪水或许是值得追求的，或许能带给你快乐。<strong> <span class="under0">但是如果你把目光放远一些，你就会发现自己为了追求更高的薪水，或许就会失去了快乐。这听起来有些荒谬，但是我经历过，你也一样可能会经历</span> </strong></p></li><li><p>很多人总是忽略自己的计划，一味地跟随别人的计划。为了有别于他人，你应该停下来仔细审视自己的职业。不要去跟在别人的计划后面跑，你应该按着自己的计划发展。</p></li><li><p>所以我认识到人们会取得很大的进步或者退步，仅仅是因为与他们合作的人不同了。与一个团队合作的时间长了，会对自身的能力产生持久的影响</p></li><li><p>作乐手的时候，我养成了寻找最好的乐手与之一起演奏的习惯。进入IT这行后，这种习惯自然而然地延续了下来。我下意识地去寻找最棒的IT人士，并与他们一起工作。显然，真理是禁得起考验的。</p><p><strong> <span class="under0"> 做编程团队里最差的程序员和做乐队里最差的乐手产生的效果是一样的。你会发现自己变得出奇地睿智。你写的东西，和你的谈吐都会变得越来越有智慧。你编写的程序和设计会越来越高雅优美。你会越来越有创造力，难题也迎刃而解。</span> </strong></p></li><li><p>一名良师最首要也是最重要的任务就是做一个榜样。<strong> <span class="under0">直到亲眼见识到某人突破你所熟悉的极限时，你才知道什么才是一切皆有可能。</span> </strong>榜样的作用就是定义何为“好”。作为一名棋手，战胜家里人可能会让你感觉不错，但是如果你和一名参加大赛的选手较量，你就会知道原来下棋是一项如此深奥的游戏;当你和一名大师下棋时，你又会得到另一个启示。如果你只是一直和你家里人下棋并且战胜他们，你可能会觉得自己是个高手;没有榜样，就没有动力进步。</p></li><li><p>最后，就像在爵士乐这个行业里一样，你不仅建立了对你良师的依赖和责任，反过来也一样。当我帮助某人时，我就是在这个人的成功上投资。在他的职业道路上，我向我认为对的方向轻轻地推了他一把;如果这个人沿着这条路走取得了成功，那这也是我的成功。</p></li><li><p>这种师徒关系的形式不重要。不需要特别清楚地要求某人成为自己的老师(当然你要这么做也不是坏事)。事实上，你的导师可能并不知道他在扮演着这个角色。重要的是你要有可以信赖钦佩的人，他可以帮助你做出职业导向，帮助你磨练技术。</p></li><li><p><strong> <span class="under0">当你以一种批判的视角去看这些程序的时候，你就会开始培养自己的品味，就像你对音乐、艺术和文学的品味一样。不同的风格和技巧可能会使你觉得好笑、惊讶、气愤，或者像我所希望的，让你觉得有挑战。如果你是真的在认真学习它们，在设计范例碰到问题的时候，你会更具创造力。就像在艺术这行，你学习别人的习惯时，就会发展出自己独特的风格。</span> </strong></p></li><li><p>记住你是在为谁工作。你不仅要按工作的要求来调整自己，还应该使工作与你自己的需求一致。如果你还可以做到日事日毕，那么你的工作就会朝着好的方向发展了。</p></li><li><p><strong> <span class="under0"> 根据帕金森定律:“工作会自动膨胀 到占满所有可用的时间。”可悲的是，即使你不想这样，你还是会掉入陷阱，如果这些工作是你根本就不想做的，这种情况则会更明显。</span> </strong></p></li><li><p>你把所有的时间都花费在想要得到某种东西上，可是欲望同满足是对立的。</p></li><li><p>但如果你总是头脑不清醒，做白日梦，那就会错失这些成功的喜悦。 你会一直在等待那个巨大的成功，却无视每天工作中的那些小成功，但其实正是这些小成功赋予你工作的价值。</p></li><li><p>你可以把这个问题变得更具体一些， 就是问自己你又新增加了多少价值?可以问问你的上司，如何最好地把它量化。有 想把它量化的想法就是好的。你怎么做才能帮助公司节省开支?如何提高整个团队的工作效率? 考虑一下使用你们软件的终端客户。一旦你开始考虑这些问题，你会非常惊讶地发现你可以找到很多的机会。现在，就开始行动吧。把这个数字记在脑海里:2倍的薪水。 在达到这个目标前，千万不要放弃。</p></li><li><p>我说这些不是要给你泄气。我们都需要觉得自己做出了某些有意义的贡献。但是我们太沉迷于做自己，却忘了身边有很多人和自己一样。公司里的每个人都不自觉地沉迷于自我，大家也只是从自己这扇窗户来审视自己的工作。这样想:如果你明天离开公司，对公司造成的影响(平均来讲)与其他同事离开没什么区别，或者还不及他们离开的影响大。</p></li><li><p><strong> <span class="under0"> 我从这名信息主管那却得到了这样一条建议——永远不要高枕无忧，他一遍又一遍地重复这句话。</span> </strong>他说自己每天早上起来都会提醒自己要清楚地知道说不定哪天自己就被公司解雇了。他会说，可能就是今天。</p></li><li><p>谦逊不仅仅是我们需要发扬的一种美德。谦逊能让你更加清楚地审视自己的行为。</p></li><li><p>当你得到很多肯定的时候，你就会很少质疑自己的决定。</p></li><li><p>人一旦傲慢，就会产生盲点。越认为自己无可取代，就越有可能被别人取代(你在公司存在的意义也就越小)。</p></li><li><p><strong> <span class="under0">尽管我们都希望自己有某种特殊的天赋，但是基本上没有一名软件开发师是无与伦比、盖世无双、无可替代的。</span> </strong></p></li><li><p>最讽刺的是，项目工作其实就是维护。只要项目团队写下来第一行编码， 每个新增加的功能都是被嫁接在现有的代码基础之上。当然，比起维护工作， 编写代码涉及的改动相对少，但是基本内容都是一样的，都是在已有代码的基础上增加新功能、修复错误。如果是一名已经完全掌握维护工作、并且致力于把维护工作做得更好的工程师，谁又能比他把这项工作完成得又快又好呢?</p></li><li><p>大多数的项目都是一项长期工作。人们不可能按冲刺的速度跑完整个马拉松。 增加工作时间，尽管在短期内大大增加工作成果，但是从长远来看，如果你为了多完成些工作每周加班加点工作80个小时，你可能会因此犯下大错误，但是修复这个错误的时间可能比加班的时间还要长得多。</p></li><li><p>你可以用看待金钱的方式来看待时间。当我还是个青年的时候，挣到的钱还没我现在浪费的多呢，但我还是非常开心。现在的我比小时候有钱得多， 花钱也就不再那么精打细算。但那时候，我也可以生存，有地方住、有车开，有东西吃。我现在也有这些东西，也没有过着奢侈的生活。很明显，当没有钱的时候，我的钱花得更加高效，最终结果都是一样的。</p></li><li><p><strong> <span class="under0">上午十点半，你会想反正别人下班回家之后我还得再加班几个小时，那不如现在就看一会儿最新的技术新闻吧。</span> </strong></p></li><li><p><strong> <span class="under0">当工作时间非常充裕的时候，工作的时间价值就会降低。如果有70个小时，那对你来说，每个小时的价值远比不上你只有40小时的情况。</span> </strong></p></li><li><p>8小时燃烧激情是一种让你提早进入仓促应考的状态，而不用喝着含有高咖啡因的可乐不眠不休。</p></li><li><p>作为脑力工作者，即使我们不坐在电脑前或是办公室里，也可以工作。 在和你的伴侣去吃饭的路上，或者你看电影的时候，都可以工作。你和工作如影随形。</p></li><li><p>好好规划你的工作时间。减少工作时间，你的收获会更多。当你离开工作一段时间后，才会更喜欢工作</p></li><li><p>如果你做的软件没有定期向你抱怨，你就不知道危险的故障隐藏在哪里。</p></li><li><p>带着防御性措施进行编程是很重要的</p><p>  以下规则适用于解决技术、沟通或者项目管理中出现的错误<br>  1.发现问题后第一时间提出，不要企图隐瞒错误。<br>  2.接受批评。就算你可以找到一只替罪羊，也别动这个念头。即使这 不完全是你的问题，你也要承当责任然后继续工作。我们的目标是在最短的时间内解决 这个问题。<br>  3.提供解决方法。<br>  4.寻求帮助。</p></li><li><p>说“是”是个上瘾却具有毁灭性的习惯。这是个坏习惯，却伪装成好习惯。</p></li><li><p>人们没有意识到说“是”并不总是正确的答案，“不”也不一定就是错误的答案。而我们都知道的确是这样的。毕竟，没人想得到错误的承诺。</p></li><li><p>经常说“是”的人，要么就是天才，要么就是在说谎。后者通常占多数</p></li><li><p>在适当地时候说“我不知道”也是很好的。“我不知道” 并不代表我不可靠。</p></li><li><p><strong> <span class="under0">但是现在回头看这些灾难，没有一个对我和我的职业发展产生长期并且明显的影响。所以，尽管在这些看上去是灾难的情况下我非常地惶恐、沮丧或者苦恼，但它们都不是真正的灾难。</span> </strong></p></li><li><p>我不得不承认在困难的时候不要惊慌这句话说起来比真正去做要简单得多。</p></li><li><p>我们惊慌是因为丧失了判断力。出现问题的时候，要想不完全关注问题本身是很难的。</p></li><li><p>从不做出承诺最容易导致一事无成。</p></li><li><p><strong> <span class="under0">一天或者一周的计划可以看成是战场上的短期战斗计划，让 30 天、60 天和 90 天的计划关注你想要实现的战略性目标上。</span> </strong></p></li><li><p><strong> <span class="under0">我刚开始编程的时候，大部分时间都花在失败上了:编写操作系统、文件系统、虚拟计算机、重新实现网络通信协议、解释程序和运行时编译程序的编译器。</span> </strong>这其中的大部分都没能正确运行，就算是能运行的，工作状况也不怎么样。当然，就算忽略技术层面的可行性，大多数工作从一开始就注定了要失败。我不知道仅有 1%的成功机率的新操作系统占有多大的比例，但是1%的成功率确实很小。</p><p>  对我来说，做这些项目的编程才是最享受的。这些问题才是软件工程中最基本的问题。这些工作都是围绕如何在空间、速度、可靠性和复杂性之间寻找折中点，无需解决软件升级过渡或修补API的漏洞问题。</p><p>  就像我通常做的，可能你沉浸在这些问题中，潜心钻研了几个月，却始终找不到解决方法。</p></li></ul><ul><li><p>抄写的功效是很容易就能被看出来的。抄写可以建立肌肉记忆。通过抄写你可以感觉原文的微妙之处和它的结构——如果只是粗略的的浏览，是无法发现这些细节的。</p></li><li><p>如果领导压根就不知道团队成员能够胜任什么工作，那他又怎么能开展工作呢?</p></li><li><p>就算你的产品非常优秀，史无前例，但是如果你不宣传它，那就没人会去购买。</p></li><li><p>不要认为这个公司雇佣了你，管理者就一定知道你的存在。而且，就算你上司知道你的名字，他对你的能力也是一无所知。</p></li><li><p>既然说公司(或者整个行业，职场或者任何地方)对你的评价是主观的，那就意味着对你做出的评价总是基于别人对你的感觉。你升职加薪的可能，甚至是公司决定是否再继续雇用你的决定因素完全取决于别人对你 的感觉。</p></li><li><p>当你明确地了解其他人判断你的因素后，你就会更加明确如何可以让他们满意。</p></li><li><p>你越早明白这个道理，并且能够控制别人对你的感觉，那你就能越快回到正轨上。</p></li><li><p>开始记录开发日记。每天写一点，记录你做了什么工作，解释你的 设计决定，检查棘手的技术和专业决策。时不时地回头阅读之前的日记，评论它们。通过你对之前日记的喜好，来调整你的新记录。</p></li><li><p><strong> <span class="under0">但是 Jack Welch 还是会转身问这名员工:“最近在做什么工 作?”然后会接着问:“这项工作的意义是什么?”(这才是真正刺痛员工的问题)。</span> </strong></p></li><li><p>这些人去上班，完成分配的任务，然后下班回家。他们留下的除了一连串的代码、文档和邮件，没有什么持久的影响</p></li><li><p>把目光放得更远一些。不要把自己局限在某一特定公司中的程序员—— 毕竟，你不太可能永远在一个公司里工作——因此，要把自己当做是某一个行业的人员。</p></li><li><p>你可能是最聪明的或者最快的，但是只具有某种特质是不够的，必须要做点什么。</p></li><li><p>仅仅做人群中最好的是不够的。要成为人们谈论的焦点</p></li><li><p>根据我的个人经验，我认为我们这些凡人和那些我们所仰慕的人之间最大的障碍就是我们自己的恐惧。与那些聪明、人际关系好、能教你东西或可以帮助你找到工作的人结识，是取得进步的最好的方法，但是我们却没有胆量尝试与他们结识。</p></li><li><p><strong> <span class="under0">但是，这行中也有一个令人沮丧的现实——我们辛辛苦苦学到的技术知识比一辆新的雪佛兰轿车贬值得速度还要快。今天热门的技术到明天就有可能成为过时的垃圾了。</span> </strong></p></li><li><p>你的事业越是成功，你就越有可能习惯企业的现有模式，这就会使你变得极度脆弱，抵挡不住提出新观点的人——即使是一个非常愚蠢的观点，都有可能使你成功的企业模式看上去非常陈旧，就像是你穿了一件又旧又破的外衣出现在迪斯科舞厅里。选择技术也是一样。</p></li><li><p><strong> <span class="under0">像J2EE这样的潮流看似永远不会过时，但是任何浪潮都是要不就消失，要不最终被后浪推到沙滩上</span> </strong></p></li><li><p>我的意思是，你掌握的知识越是主流，过时的危险也就越大。</p></li><li><p><strong> <span class="under0">必须要认识到，即使你现在处于当今潮流的尖端，也极有可能已经在下一个潮流之后了。</span> </strong></p></li><li><p>如果你的工作是编程，别把自己当成一名程序员。继续工作，但是不要满足于你的工作。永远不要把自己的身份定位于程序员，或者设计师， 或者测试员。其实，把自己与现在的工作过于紧密地联系起来已经不安全了(也从未安全过)。</p></li><li><p>有理想是好事，但不要对遥远的未来抱有太大的希望。如果你想要射中移动的物体，就不能瞄准这个物体本身，应该瞄准这个物体要移动到的位置。这个过程的路线不是一条直线，最好的情况是一条弧线，但大多数情况下它是一条曲线。</p></li><li><p>你的职业生涯也是一样的，最重要的部分不是晋升或者加薪，而是向这些发展方向努力工作的过程。或者，更重要的是，是你抛开这一切忘我工作的过程。</p></li><li><p>不要总是不停地问:“我们完成了吗?完成了吗?”重要的是你穿越这条道路的过程，而不是这条路的终点。</p></li><li><p><strong> <span class="under0"> 洗碟子是一项单调的工作，没人愿意做。软件开发师每天也要经历类似单调沉闷的工作，例如时间追踪和费用报告。下次再从事类似工作的时候， 不要焦急地想要赶快做完它，尝试在工作中关注任务本身。</span> </strong></p></li><li><p>更加可能发生的是，如果你对当前的技能非常满足，当下一个热门技术来临的时候，你可能会无视它的出现</p></li><li><p>O’Reilly and Associates 公司的 Tim O’Reilly曾说，要留意那些技术达人。技术达人是指那些总是站在技术最前端的人，至少在他们感兴趣的领域中他们总是走在尖端。</p></li><li><p><strong> <span class="under0"> 但是，突然有一天你的工作(或者你所在的行业)不再适应你了。刚开始会有点不舒服，但是这其实已经是关键时刻了，你要不就赶快做出行动， 要不就换个行业。</span> </strong></p></li><li><p><strong> <span class="under0"> Pirisig 讲述这个故事是为了阐述一个概念，他称之为价值僵固。当你过于坚信某事的价值时，就会无法客观地来评判它，这即是价值僵固。猴子过于看重米的价值，所以它们无法看清放弃米就能得到自由。猴子这样做看起来非常地傻，但是我们每个人都有自己的“米”。</span> </strong></p></li><li><p><strong> <span class="under0"> 树立远大的目标，但是要在实现目标的道路上，根据情况不断进行更正</span> </strong></p></li><li><p>正是因为问题的复杂性，在重大的问题面前，我们很容易就失去了动力， 转而去关注那些容易衡量和解决的问题。这就是为什么我们经常延误了问题的解决时间，而这种拖延又导致了我们的内疚，这让我们感觉糟透了，结果 就是再继续拖延。</p></li><li><p>当我们逐渐地做出这些改变后，问题就迎刃而解了。重构一套解决方案 占用的不过是你喝杯咖啡或者和同事闲聊新闻的时间。一个小小的改变都会 起到推动的作用。一旦你做出了这些改变，你就会清楚地看到不同。</p></li><li><p><strong> <span class="under0"> 对于努力实现那些远大又有难度的目标，非常重要的一点就是不要总想着每天都要离最终目标近一些，而是应该想每天要比前一天做得更好。</span> </strong></p></li><li><p>如果你可以隐藏在平庸的盾牌之后，就会丧失变得卓越的动力。即 使是像我们这样的人，也无法抵挡 YouTube 或者我们最爱的网络漫画的诱惑力。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在centos7安装python3.x</title>
      <link href="/2018/12/22/install-python3x-at-centos7x/"/>
      <url>/2018/12/22/install-python3x-at-centos7x/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是在centos7.1安装python3.x的记录。踩了不少坑，记录下。心酸,docker化势在必行！！！！！！</p><hr><h3 id="安装python3-x"><a href="#安装python3-x" class="headerlink" title=" 安装python3.x "></a><strong> 安装python3.x </strong></h3><p><strong> 先安装安装几个必须的包，以方便后续的操作 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># wget 用于下载源码包</span></span><br><span class="line"><span class="comment"># gcc 和 make 用于编译</span></span><br><span class="line">yum -y install wget gcc make  zlib-devel readline-devel  bzip2-devel ncurses-devel sqlite-devel gdbm-devel xz-devel</span><br></pre></td></tr></table></figure></p><div style="height:12px"></div><p><strong> 上<a href="https://www.python.org/" target="_blank" rel="noopener">Python的官网</a> 下载源码包 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span><br></pre></td></tr></table></figure></p><div style="height:12px"></div><p><strong> 解包，解压缩 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">xz -d Python-3.6.1.tar.xz</span><br><span class="line">tar -xvf Python-3.6.1.tar</span><br></pre></td></tr></table></figure></p><div style="height:12px"></div><p><strong> 编译 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cd</span> Python-3.6.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3.6 --<span class="built_in">enable</span>-optimizations</span><br></pre></td></tr></table></figure></p><p>先解释下上面的参数，<code>--prefix</code>是预期安装目录，<code>--enable-optimizations</code>是优化选项（LTO，PGO 等）加上这个 flag 编译后，性能有 10% 左右的优化，但是这会明显的增加编译时间。不过关于 LTO 和 PGO 其实不在今天文章的讨论范围内，感兴趣的可以看看 GCC 中 LTO 的具体实现(<a href="https://gcc.gnu.org/onlinedocs/gccint/LTO-Overview.html" target="_blank" rel="noopener">GNU Compiler Collection (GCC) Internals: LTO Overview</a>)。</p><div style="height:12px"></div><p><strong> 接下来 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">make &amp;&amp; make install</span><br></pre></td></tr></table></figure></p><div style="height:12px"></div><p><strong> 编译安装完成后，执行 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">➜  /usr/<span class="built_in">local</span>/python3.6/bin/python3 --version</span><br><span class="line">Python 3.6.1</span><br></pre></td></tr></table></figure></p><p>Python 3 也就安装成功了。</p><div style="height:12px"></div><p><strong> 为了避免每次都输入一大串路径，加个链接 </strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">➜ ln -s /usr/<span class="built_in">local</span>/python3.6/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure></p><hr><p>以上的命令整理为如下的shell</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line"><span class="comment"># author: TaoBeier</span></span><br><span class="line"></span><br><span class="line">yum -y install wget gcc make  zlib-devel readline-devel  bzip2-devel ncurses-devel sqlite-devel gdbm-devel xz-devel tk-devel openssl-devel</span><br><span class="line">wget https://www.python.org/ftp/python/3.6.1/Python-3.6.1.tar.xz</span><br><span class="line">xz -d Python-3.6.1.tar.xz</span><br><span class="line">tar -xvf Python-3.6.1.tar</span><br><span class="line"><span class="built_in">cd</span> Python-3.6.1</span><br><span class="line">./configure --prefix=/usr/<span class="built_in">local</span>/python3.6 --<span class="built_in">enable</span>-optimizations</span><br><span class="line">make</span><br><span class="line">make install</span><br><span class="line">ln -s /usr/<span class="built_in">local</span>/python3.6/bin/python3 /usr/bin/python3</span><br></pre></td></tr></table></figure><hr><h3 id="安装pip3-x"><a href="#安装pip3-x" class="headerlink" title=" 安装pip3.x  "></a><strong> 安装pip3.x  </strong></h3><h4 id="安装pip2-x"><a href="#安装pip2-x" class="headerlink" title=" 安装pip2.x "></a><strong> 安装pip2.x </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 首先安装 epel 扩展源</span></span><br><span class="line">$ sudo yum -y install epel-release</span><br><span class="line"></span><br><span class="line"><span class="comment"># 安装 python-pip</span></span><br><span class="line">$ sudo yum -y install python-pip</span><br><span class="line"></span><br><span class="line"><span class="comment"># 清除 cache</span></span><br><span class="line">$ sudo yum clean all</span><br><span class="line">通过这种方式貌似只能安装 pip2，想要安装 Python 3 的 pip，可以通过以下的源代码安装方式。</span><br></pre></td></tr></table></figure><h4 id="源码安装pip3-x"><a href="#源码安装pip3-x" class="headerlink" title=" 源码安装pip3.x "></a><strong> 源码安装pip3.x </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 下载源代码</span></span><br><span class="line">$ wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</span><br><span class="line"></span><br><span class="line">$ tar -zvxf 9.0.1.tar.gz</span><br><span class="line"></span><br><span class="line">$ <span class="built_in">cd</span> pip-9.0.1</span><br><span class="line"></span><br><span class="line"><span class="comment"># 使用 Python 3 安装</span></span><br><span class="line">$ python3 setup.py install</span><br></pre></td></tr></table></figure><h4 id="创建链接"><a href="#创建链接" class="headerlink" title=" 创建链接 "></a><strong> 创建链接 </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo ln -s /usr/<span class="built_in">local</span>/python3.6/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure><h4 id="升级-pip"><a href="#升级-pip" class="headerlink" title=" 升级 pip "></a><strong> 升级 pip </strong></h4><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ pip install --upgrade pip</span><br></pre></td></tr></table></figure><p>以上的命令整理为如下的shell<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash</span><br><span class="line"># author: Sail</span><br><span class="line"></span><br><span class="line">yum -y install epel-release python-pip</span><br><span class="line">yum clean all</span><br><span class="line"></span><br><span class="line">wget --no-check-certificate https://github.com/pypa/pip/archive/9.0.1.tar.gz</span><br><span class="line">tar -zvxf 9.0.1.tar.gz</span><br><span class="line">cd pip-9.0.1</span><br><span class="line">python3 setup.py install</span><br><span class="line">ln -s /usr/local/python3.6/bin/pip /usr/bin/pip3</span><br></pre></td></tr></table></figure></p><p><div style="height:12px"></div></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://segmentfault.com/a/1190000009922582" target="_blank" rel="noopener">在 CentOS 7 上安装并配置 Python 3.6 环境</a><br><a href="https://ehlxr.me/2017/01/07/CentOS-7-%E5%AE%89%E8%A3%85-Python3%E3%80%81pip3/" target="_blank" rel="noopener">CentOS 7 安装Python3、pip3</a><br><a href="https://blog.csdn.net/jeryjeryjery/article/details/77880227" target="_blank" rel="noopener">python3中pip3安装出错，找不到SSL</a><br><a href="https://www.jianshu.com/p/5fbbe1435db2" target="_blank" rel="noopener">no acceptable C compiler found in $PATH</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 环境搭建 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>mac-ssh配置</title>
      <link href="/2018/12/16/ssh-config-of-mac/"/>
      <url>/2018/12/16/ssh-config-of-mac/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在windows下面连接服务器有xshell，SecureCRT这些很好的软件可以用。Mac下面没有xshell,其他的一些客户端软件也懒得尝试，所以直接用终端进行管理了。以前在linux下，也是用终端直接ssh，当然遇到了一些问题，比如<code>ssh空闲一段时间自动断开的问题</code>。这次解决了一些痛点，做一下记录。</p><hr><h3 id="痛点解决"><a href="#痛点解决" class="headerlink" title=" 痛点解决 "></a><strong> 痛点解决 </strong></h3><h4 id="1-登录繁琐"><a href="#1-登录繁琐" class="headerlink" title=" 1.登录繁琐 "></a><strong> 1.登录繁琐 </strong></h4><p>ssh登录服务器的命令如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ssh username@ip地址</span><br><span class="line"></span><br><span class="line"># 然后输入密码</span><br></pre></td></tr></table></figure></p><p>这样的话，每次登录我们需要记住(或者粘贴复制)用户名和密码以及ip地址，是一个不小的负担。如果管理了多台服务器就更累了。</p><p>可以通过修改配置文件<code>/etc/ssh/ssh_config</code>来解决这个问题</p><p>增加如下几行配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Host tx  # tx是short_name，快捷键别名，节省输入时间。</span><br><span class="line">hostname 111.111.11.111  # ip地址</span><br><span class="line">    user root # 用户名</span><br></pre></td></tr></table></figure></p><p>增加后，配置文件相关部分如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">SendEnv LANG LC_*</span><br><span class="line">Host tx</span><br><span class="line">hostname 123.207.83.243</span><br><span class="line">        user root</span><br></pre></td></tr></table></figure></p><p>此时连接服务器，执行<code>ssh tx</code>,再输入密码即可。</p><hr><p>接下来配置文件<code>/etc/ssh/ssh_config</code>再增加如下几行配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># 克隆会话功能 这样每连上一个服务器都会自动在~/.ssh/下创建一个socket文件，下次用相同用户名、端口、主机名进行连接就会自动复用</span><br><span class="line">ControlMaster auto</span><br><span class="line">ControlPath ~/.ssh/%h-%p-%r</span><br><span class="line">ControlPersist yes</span><br></pre></td></tr></table></figure><p>此时配置文件为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">SendEnv LANG LC_*</span><br><span class="line">ControlMaster auto</span><br><span class="line">        ControlPath ~/.ssh/%h-%p-%r</span><br><span class="line">        ControlPersist yes</span><br><span class="line">        Compression yes</span><br><span class="line"></span><br><span class="line">Host tx</span><br><span class="line">hostname 123.207.83.243</span><br><span class="line">        user root</span><br></pre></td></tr></table></figure><p>解释如下</p><p><strong> <span class="under0"> 多条链接共享 </span></strong></p><p>如果你需要在多个窗口中打开到同一个服务器的连接，而不想每次都输入用户名，密码，或是等待连接建立，那么你可以配置SSH的连接共享选项，在本地打开你的SSH配置文件，通常它们位于~/.ssh/config，然后添加下面2行(ControlMaster配合ControlPath一起使用), 很多人或许已经是这样配置的。</p><p><strong> <span class="under0">  这里解释下<code>~/.ssh/config</code>是针对当前用户的配置，仅对一个用户有效。<code>/etc/ssh/ssh_config</code>是对本机所有用户。根据自己情况选择对应的配置文件修改。我修改的是<code>/etc/ssh/ssh_config</code>，对所有用户有效。</span></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ControlMaster auto</span><br><span class="line">ControlPath ~/.ssh/%h-%p-%r</span><br></pre></td></tr></table></figure><p><strong> <span class="under0"> 长连接 </span></strong><br>如果你发现自己每条需要连接同一个服务器无数次，那么长连接选项就是为你准备的。这样后面再连接的时候就还是不用输入密码。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlPersist yes</span><br></pre></td></tr></table></figure><p>打开之后即使关闭了所有的已连接ssh连接，一段时间内也能无需密码重新连接。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ControlPersist 4h</span><br></pre></td></tr></table></figure><p>每次通过SSH与服务器建立连接之后，这条连接将被保持4个小时，即使在你退出服务器之后这条连接依然可以重用，因此，在你下一次(4小时之内)登录服务器时，你会发现连接以闪电般的速度建立完成，这个选项对于通过scp拷贝多个文件提速尤其明显，因为你不在需要为每个文件做单独的认证了。</p><p><code>Compression</code>为压缩选项，打开之后加快数据传输速度。</p><hr><h4 id="2-证书管理密码"><a href="#2-证书管理密码" class="headerlink" title=" 2.证书管理密码 "></a><strong> 2.证书管理密码 </strong></h4><p>这里参考了<a href="https://segmentfault.com/a/1190000000585526" target="_blank" rel="noopener">如何优雅地连接ssh</a>。做下搬运工</p><p><strong> 使用证书来管理连接至少有如下两个好处 </strong></p><p>1.安全，目前生成证书的方式不管是RSA还是DSA无论从位数上还是加密方式上都比自己生成的密码安全许多。<br>2.方便，有了证书以后你就不用再记忆密码了，系统会自动使用证书跟服务器接驳，这一过程不需要人工干预</p><p>使用证书连接ssh也非常简单，首先你得生成一个证书，在shell中输入如下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C joyqi -f my-key-file</span><br><span class="line"></span><br><span class="line"># -t定义的是加密方式，一般有rsa和dsa两种</span><br><span class="line"># -C定义的是注释，一般也可以不写</span><br><span class="line"># -f定义了输出的证书文件名，不需要写后缀，因为生成的证书包含了公钥和私钥两个文件，它会自动帮你加文件名。</span><br></pre></td></tr></table></figure></p><p>我们执行后可以看到如下结果<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">$ ssh-keygen -t rsa -C joyqi -f my-key-file</span><br><span class="line">Generating public/private rsa key pair.</span><br><span class="line">Enter passphrase (empty for no passphrase): </span><br><span class="line">Enter same passphrase again: </span><br><span class="line">Your identification has been saved in my-key-file.</span><br><span class="line">Your public key has been saved in my-key-file.pub.</span><br><span class="line">The key fingerprint is:</span><br><span class="line">57:75:20:37:e2:53:29:ef:86:09:8e:1b:47:2b:6f:88 joyqi</span><br><span class="line">The key&apos;s randomart image is:</span><br><span class="line">+--[ RSA 2048]----+</span><br><span class="line">|            o *o.|</span><br><span class="line">|           ..*.o |</span><br><span class="line">|            +o   |</span><br><span class="line">|          o. ..  |</span><br><span class="line">|        S+.o +   |</span><br><span class="line">|        +.+ o o  |</span><br><span class="line">|       . B   .   |</span><br><span class="line">|      E o o      |</span><br><span class="line">|         .       |</span><br><span class="line">+-----------------+</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ ls</span><br><span class="line">my-key-file     my-key-file.pub</span><br></pre></td></tr></table></figure><p>可以在上面的命令执行完成，我们已经得到两个文件<code>my-key-file</code>和<code>my-key-file.pub</code>。前者就是你的私钥，是由你自己个人保存的，后者是公钥，你需要把它上传到任何你想用这个私钥来登录的服务器上。</p><p>ok，现在你需要把公钥文件上传到服务器上，一般我建议用scp命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">scp my-key-file.pub loginname@yourdomain.com:.</span><br></pre></td></tr></table></figure><p>把<code>loginname</code>和<code>yourdomain.com</code>分别替换为你的登录名和服务器地址。上传完后我们需要告诉服务器，以后处理<code>loginname</code>的登录时用公钥来验证，现在最后一次用ssh密码登录你的服务器，并执行如下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat my-key-file.pub &gt;&gt; ~/.ssh/authorized_keys</span><br></pre></td></tr></table></figure><p>在后面我们都用<code>loginname</code>来特指你自己的登录名，用<code>yourdomain.com</code>来特指你的服务器地址，请自行脑补</p><p>其中<code>my-key-file.pub</code>是我们刚刚上传的公钥文件名。现在我们还要告诉本机，连接<code>yourdomain.com</code>的时候使用<code>my-key-file</code>这个私钥来登录</p><p>退出ssh连接，回到本地。将刚才生成的<code>my-key-file</code>文件拷贝到<code>~/.ssh</code>目录下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cp my-key-file ~/.ssh/</span><br></pre></td></tr></table></figure><p>然后编辑<code>~/.ssh/config</code>文件，如果没有，就创建一个，在其中写入如下配置内容</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">Host yourdomain.com</span><br><span class="line">     IdentityFile ~/.ssh/my-key-file</span><br></pre></td></tr></table></figure><p>很简单吧，一看就懂，根据你的需要自行修改。<strong> <span class="under0"> 最后还有一步，别忘了将本地缓存的公钥文件删掉，因为那是你以前没有上传公钥时，缓存的服务器默认公钥，现在你用了自己生成的公钥就得把这个老的记录删掉 </span></strong></p><p>打开<code>~/.ssh/known_hosts</code>文件，找到包含<code>yourdomain.com</code>的那一行，将它删掉，然后保存退出</p><p>现在，你就可以正常登录服务器了，输入<code>ssh loginname@yourdomain.com</code>，第一次登录会出现</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">The authenticity of host &apos;yourdomain.com (xxx.xxx.xxx.xxx)&apos; can&apos;t be established.</span><br><span class="line">RSA key fingerprint is xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx:xx.</span><br><span class="line">Are you sure you want to continue connecting (yes/no)?</span><br></pre></td></tr></table></figure><p>这是因为你刚才把公钥删掉了，系统在连接本地没有缓存公钥的服务器时会询问下你，输入yes即可，然后你没输入密码就登入了服务器。</p><p>此时配置文件<code>/etc/ssh/ssh_config</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">SendEnv LANG LC_*</span><br><span class="line">ControlMaster auto</span><br><span class="line">    ControlPath ~/.ssh/%h-%p-%r</span><br><span class="line">    ControlPersist yes</span><br><span class="line">        Compression yes</span><br><span class="line">Host tx</span><br><span class="line">hostname 123.207.83.243</span><br><span class="line">        user root</span><br><span class="line">IdentityFile ~/.ssh/my-key-file</span><br></pre></td></tr></table></figure></p><hr><h4 id="3-保持ssh不自动断开"><a href="#3-保持ssh不自动断开" class="headerlink" title=" 3.保持ssh不自动断开 "></a><strong> 3.保持ssh不自动断开 </strong></h4><p><strong> ssh空闲一段时间会自动断开，这样可以节省资源。</strong>但是如果让其不自动断开呢，网上的一些文章写得比较模糊不清，把我的方案整理如下：</p><p>在客户端中的<code>/etc/ssh/ssh_config</code>中去掉注释（如果注释没有，就添加这两句话）并改成这样:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">ServerAliveInterval 60  </span><br><span class="line">ServerAliveCountMax 60</span><br></pre></td></tr></table></figure></p><p><code>ServerAliveInterval 60</code> 表示每60秒发送一次给服务器，服务器就不会断开了。<br><code>ServerAliveCountMax 60</code> 表示服务器的请求60次没有响应，就自动断开。<br>这样就可以维持一个小时。</p><p>通过修改服务器的配置也可以,但是不太现实,保持长时间连接,耗资源。就不做介绍。</p><p>此时配置文件<code>/etc/ssh/ssh_config</code>如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">Host *</span><br><span class="line">SendEnv LANG LC_*</span><br><span class="line">ControlMaster auto</span><br><span class="line">    ControlPath ~/.ssh/%h-%p-%r</span><br><span class="line">    ControlPersist yes</span><br><span class="line">        Compression yes</span><br><span class="line">        ServerAliveInterval 60</span><br><span class="line">ServerAliveCountMax 60</span><br><span class="line">Host tx</span><br><span class="line">hostname 111.111.11.111</span><br><span class="line">        user root</span><br><span class="line">IdentityFile ~/.ssh/my-key-file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    # 如果有多台服务器，继续在该文件添加配置即可</span><br><span class="line"></span><br><span class="line">Host do</span><br><span class="line">hostname 222.222.22.222</span><br><span class="line">user root</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.zhihu.com/question/20541129" target="_blank" rel="noopener">Mac OS X 平台有哪些好用的 SSH 客户端？</a><br><a href="http://shinancao.github.io/2016/12/18/Programming-Git-1/" target="_blank" rel="noopener">同一个Mac，配置多个SSH Key</a><br><a href="https://segmentfault.com/a/1190000000585526" target="_blank" rel="noopener">如何优雅地连接ssh</a><br><a href="https://blog.csdn.net/henryhu712/article/details/84290715" target="_blank" rel="noopener">命令行如何 copy 文件内容到剪切板（clipboard）？</a><br><a href="https://www.cnblogs.com/windyet/articles/7733905.html" target="_blank" rel="noopener">解决mac下ssh空闲一段时间自动断开的问题</a><br><a href="https://www.jianshu.com/p/1c626298028a" target="_blank" rel="noopener">mac 保持SSH连接</a><br><a href="https://blog.phpgao.com/keep_connect_ssh.html" target="_blank" rel="noopener">保持ssh不自动断开</a><br><a href="https://appo.oschina.io/2017/05/28/ControlPersist-for-ssh/" target="_blank" rel="noopener">ControlPersist自动登录</a><br><a href="https://www.hi-linux.com/posts/39001.html" target="_blank" rel="noopener">利用 ControlPersist 特性自动登陆 SSH 服务器</a></p>]]></content>
      
      
      <categories>
          
          <category> Mac </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>生成和安装python项目依赖</title>
      <link href="/2018/12/15/generate-and-install-dependent-file-of-python-project/"/>
      <url>/2018/12/15/generate-and-install-dependent-file-of-python-project/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近连续遇到项目依赖的问题。今天跑以前的一个旧项目，拉到本地，才意识到python的模块没有写依赖。</p><hr><h3 id="依赖管理"><a href="#依赖管理" class="headerlink" title=" 依赖管理 "></a><strong> 依赖管理 </strong></h3><h4 id="生成依赖文件"><a href="#生成依赖文件" class="headerlink" title=" 生成依赖文件 "></a><strong> 生成依赖文件 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pip3 freeze [options]</span><br><span class="line"></span><br><span class="line">Description:</span><br><span class="line">  Output installed packages in requirements format.</span><br><span class="line"></span><br><span class="line">  packages are listed in a case-insensitive sorted order.</span><br></pre></td></tr></table></figure><p>本地开发的项目安装好各种库过后，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pip freeze &gt; requirements.txt</span><br></pre></td></tr></table></figure><p>即可生成项目依赖文件<code>requirements.txt</code></p><hr><h4 id="使用依赖文件"><a href="#使用依赖文件" class="headerlink" title=" 使用依赖文件 "></a><strong> 使用依赖文件 </strong></h4><p>在项目目录，执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">pip install -r requirements.txt</span><br><span class="line"></span><br><span class="line"># -r, --requirement &lt;file&gt;    Install from the given requirements file. This option can be used multiple times.</span><br></pre></td></tr></table></figure><p>即会安装所需的依赖。</p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git分支设置upstream</title>
      <link href="/2018/12/15/Set-upstream-in-git/"/>
      <url>/2018/12/15/Set-upstream-in-git/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>如果本地的分支没有和远程的分支进行关联,在<code>git pull/fetch</code>的时候，会抛出大致如下的错误信息</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">There is no tracking information for the current branch.</span><br><span class="line">Please specify which branch you want to merge with.</span><br><span class="line">See git-pull(1) for details.</span><br><span class="line"></span><br><span class="line">git pull &lt;remote&gt; &lt;branch&gt;</span><br><span class="line"></span><br><span class="line">If you wish to set tracking information for this branch you can do so with:</span><br><span class="line"></span><br><span class="line">git branch --set-upstream-to=origin/&lt;branch&gt; release</span><br></pre></td></tr></table></figure><p><strong> 建立本地分支与远程分支的映射关系（或者为跟踪关系track）。这样使用<code>git pull</code>或者<code>git push</code>时就不必每次都要指定从远程的哪个分支拉取合并和推送到远程的哪个分支了。</strong></p><hr><h4 id="查看本地分支与远程分支的映射关系"><a href="#查看本地分支与远程分支的映射关系" class="headerlink" title=" 查看本地分支与远程分支的映射关系 "></a><strong> 查看本地分支与远程分支的映射关系 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git branch -vv</span><br></pre></td></tr></table></figure><hr><h3 id="upstream的设置"><a href="#upstream的设置" class="headerlink" title=" upstream的设置 "></a><strong> upstream的设置 </strong></h3><h4 id="基本设置"><a href="#基本设置" class="headerlink" title=" 基本设置 "></a><strong> 基本设置 </strong></h4><p>执行如下命令即可将远程分支与本地分支关联</p><p><code>git branch --set-upstream-to=origin/remote_branch  your_branch</code><br><code>origin/remote_branch</code>是你本地分支对应的远程分支；<code>your_branch</code>是你当前的本地分支。</p><p>把当前分支的upstream为origin远程仓库的dev分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">git branch --set-upstream-to=origin/dev</span><br><span class="line">or</span><br><span class="line">git branch -u origin/dev</span><br></pre></td></tr></table></figure></p><hr><h4 id="在推送的同时，同时设置upstream"><a href="#在推送的同时，同时设置upstream" class="headerlink" title=" 在推送的同时，同时设置upstream "></a><strong> 在推送的同时，同时设置upstream </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin master</span><br></pre></td></tr></table></figure><p>推送master分支到远程origin仓库master分支，并且建立本地分支master的upstream为origin/master</p><hr><h4 id="不切换分支直接设置其他分支的upstream"><a href="#不切换分支直接设置其他分支的upstream" class="headerlink" title=" 不切换分支直接设置其他分支的upstream "></a><strong> 不切换分支直接设置其他分支的upstream </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git br -u origin/br01-remote br01</span><br></pre></td></tr></table></figure><p>设置本地分支br01的upstream为origin/br01-remote</p><p>或push的时候直接设置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push -u origin br03:br03</span><br></pre></td></tr></table></figure></p><hr><h4 id="撤销本地分支与远程分支的映射关系"><a href="#撤销本地分支与远程分支的映射关系" class="headerlink" title=" 撤销本地分支与远程分支的映射关系 "></a><strong> 撤销本地分支与远程分支的映射关系 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 取消当前分支的upstream</span><br><span class="line">git branch --unset-upstream</span><br><span class="line"></span><br><span class="line"># 取消其他分支的upstream</span><br><span class="line">git branch --unset-upstream [分支名]</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zlargon.gitbooks.io/git-tutorial/content/remote/upstream.html" target="_blank" rel="noopener">設定 Upstream</a><br><a href="https://blog.csdn.net/tterminator/article/details/78108550" target="_blank" rel="noopener">Git branch upstream</a><br><a href="https://higoge.github.io/2015/07/06/git-remote03/" target="_blank" rel="noopener">Git远程03：分支的upstream</a><br><a href="https://blog.csdn.net/z1137730824/article/details/78254564" target="_blank" rel="noopener">git branch –set-upstream 本地关联远程分支</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Shell统计文件数量</title>
      <link href="/2018/12/09/count-file-num-by-shell/"/>
      <url>/2018/12/09/count-file-num-by-shell/</url>
      
        <content type="html"><![CDATA[<h3 id="通过shell统计文件数目"><a href="#通过shell统计文件数目" class="headerlink" title=" 通过shell统计文件数目 "></a><strong> 通过shell统计文件数目 </strong></h3><p>统计某文件夹下文件的个数<br><code>ls -l |grep &quot;^-&quot;|wc -l</code></p><p>统计某文件夹下目录的个数<br><code>ls -l |grep &quot;^ｄ&quot;|wc -l</code></p><p>统计文件夹下文件的个数，包括子文件夹里的<br><code>ls -lR|grep &quot;^-&quot;|wc -l</code></p><hr><h3 id="文件类型"><a href="#文件类型" class="headerlink" title=" 文件类型 "></a><strong> 文件类型 </strong></h3><p>Linux中文件类型只有以下这几种：<br>1.-，普通文件。<br>2.d，目录文件，d是directory的简写。<br>3.l，软连接文件，亦称符号链接文件，s是soft或者symbolic的简写。<br>4.b，块文件，是设备文件的一种（还有另一种），b是block的简写。<br>5.c，字符文件，也是设备文件的一种（这就是第二种），c是character的文件。 </p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.sina.com.cn/s/blog_464f6dba01012vwv.html" target="_blank" rel="noopener">Linux统计某文件夹下文件、文件夹的个数</a><br><a href="https://my.oschina.net/michaelyuanyuan/blog/109147" target="_blank" rel="noopener">Linux系统中普通文件和目录文件的区别</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>美团点评面经(秋招)</title>
      <link href="/2018/11/07/the-interview-of-MTDP/"/>
      <url>/2018/11/07/the-interview-of-MTDP/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>秋招最后签了美团点评(成都)。因为某些原因,选择了离家近的地方工作。</p><p>有两个特别想拿的offer,一个是美团点评(成都),另一个是AlloyTeam。AlloyTeam在拿了美团offer的第二天面挂了,不然又要纠结一波。</p><hr><h4 id="电话一面-50分钟"><a href="#电话一面-50分钟" class="headerlink" title=" 电话一面　50分钟 "></a><strong> 电话一面　50分钟 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">自我介绍</span><br><span class="line">介绍了实习项目</span><br><span class="line">问了一些问题,比如表单多个检测条件的检测,有哪些检测的库(如何设计库),项目中提到的难点,进一步问了下</span><br><span class="line">智能对话系统的项目</span><br><span class="line">一个vue组件,打包生成html,的过程</span><br><span class="line">计算机网络,发送一个ajax请求的过程</span><br><span class="line">vue diff原理</span><br><span class="line">问了对node的了解</span><br><span class="line">后端api设计　restful 和 graphQ</span><br></pre></td></tr></table></figure><hr><p>二、三、四面是现场面,一个下午面完的,接近三个小时。</p><h4 id="二面"><a href="#二面" class="headerlink" title=" 二面 "></a><strong> 二面 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">自我介绍</span><br><span class="line">聊实习项目</span><br><span class="line">手写函数防抖</span><br><span class="line">面试官针对难点,问了几个问题</span><br><span class="line">    a.如果几十万条数据,怎么做优化。我之前是用的数据切片,还有分时函数的思想做优化的,</span><br><span class="line">　       这里他说可以把定位和滑动分开来做,其实我不太明白</span><br><span class="line">    b.动画优化的表格,如果不用css怎么优化</span><br><span class="line">问了他一些问题</span><br><span class="line">其他问题我都记不得了</span><br></pre></td></tr></table></figure><p>这一面就是leader面了,负责组里的前端和后端</p><hr><h4 id="hr面"><a href="#hr面" class="headerlink" title=" hr面 "></a><strong> hr面 </strong></h4><p>问了一堆问题,这是唯一一次hr被问到了技术的</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">实习项目,追问了好几个问题,有没有肉鸡,IP要不要过滤,以及项目的产出</span><br><span class="line">后端这边从前端拿到10000条数据,入库后是9999条,入库前有缓存,怎么分析定位问题</span><br><span class="line"></span><br><span class="line">大学做过最疯狂的事</span><br><span class="line">有没有女朋友</span><br><span class="line">大学里的朋友</span><br><span class="line">最欣赏室友哪点</span><br><span class="line">兴趣爱好</span><br><span class="line">第几次来成都了</span><br><span class="line">问了好多,就不写了2333</span><br></pre></td></tr></table></figure><hr><h4 id="总监面"><a href="#总监面" class="headerlink" title=" 总监面 "></a><strong> 总监面 </strong></h4><p>总监面感觉面得最凉,一个web问题没问。面完大概20分钟,电话通知过了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">自我介绍</span><br><span class="line">手写二叉排序树查中间节点</span><br><span class="line">聊了下我们工作室,以及我怎么教新同学的</span><br><span class="line">手写了一个剑指offer原题</span><br><span class="line">智能对话系统项目的tf-idf算法</span><br><span class="line">idf是如何计算的</span><br><span class="line">项目中的余弦相似定理怎么做的</span><br><span class="line">项目模型里面的参数是怎么调的</span><br><span class="line">最近半年印象比较深刻的书</span><br><span class="line">还要一些问题记不清了</span><br></pre></td></tr></table></figure><hr><p><strong> 过去一年发生了太多事,有时候难免有些丧气,甚至心灰意冷,所以想家更多了些。稻香听得很频繁,但愿绝望和无奈远走高飞。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度实习总结</title>
      <link href="/2018/10/28/Baidu-internship/"/>
      <url>/2018/10/28/Baidu-internship/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>前几天,有同学通过微信问我Anti怎么样,拿到了校招offer,想了解相关情况。</p><p><strong> 离开Anti也快半年了,5月23因为个人的一些原因结束了在百度的实习。当时回到学校休息了一天就开始学习、忙于做新项目,没来得及总结。因为即将开始新的工作,把这段实习经历(也是我的第一份工作)总结在这里。 </strong></p><p>发现自己之前在博客有写过一篇百度实习面经(笑),贴在这里<a href="http://www.sail.name/2017/11/28/the-interview-of-Baidu/">百度面经(大三上)</a></p><hr><p>在公司写代码和之前在学校写代码区别蛮大的,大致说两点。</p><p>在实习之前,写的代码是没有遵循什么编码规范的,我在度厂的 <strong> 第一件事情就是学习内部各种语言的编码规范 </strong>;在学校编码也没有做过Code Review,整个实习期间我的每一次提交代码都需要经过同事(大多数时候是我的导师)的Review,通过过后才能入库。<span class="under0"><strong> 最悲惨的一次,代码被导师打回来重写了十多次才通过入库。 </strong></span>经过导师长期的”折磨”,现在我也能够自己Review自己的代码了。</p><hr><p>实习期间,对我影响最大的就是我的导师。这种影响更多的是技术之外的影响。我的导师年轻又牛逼,JS、PHP、C++、Python、Shell全都能hold住。<span class="under0"><strong>不过我觉得他更牛逼的在于他刚毕业就结婚了,所以我入职的第一周是其他RD在带我,他回家参加婚礼了23333。</strong></span></p><p>我比较菜,实习期间写了不少bug。</p><p><img src="/img/代码人生/Baidu-internship/1.jpeg" alt="bug"></p><p>有的时候解决不掉,会向导师求助。有些问题比较棘手,导师也会花上一两个小时。但一直以来,他都是很耐心的给我讲解,梳理思路,哪怕他很忙。他对我的帮助不止于此,最后选择离开百度的时候,也有一丝不舍。</p><p>常常有学弟学妹向我问一些问题,我也会提醒自己耐心一些,讲得更加细致。虽然我还做得不够好。</p><hr><p>此外是在做项目上的一些问题。从前我做项目是没有写过项目设计文档和项目排期文档的。<strong><span class="under0"> 项目设计有助于理清思路,而项目排期可以使整个项目更可控。</span></strong></p><p>在百度每周是需要写周报的。在工作室后端组,之前组里每周值班的时候,大家会依次说下这周做了些什么,下周要做什么,以及要分享的内容。这算是另一种形式的周报了。组里有些同学觉得这个环节没有必要。其实复盘还是蛮有必要的,当然不必拘泥于形式。</p><hr><p>半年下来,除了导师,也接触了不少工程师,有的同学真的很厉害。在度厂,也看到了以前在社区所听闻的一些大佬。<strong> 大佬并非遥不可及,通过自己的不断学习,也会越来越强。</strong></p><p>实习除了工作上的事情,还有生活和学校里的事情,常常要在北京和徐州之间往返。<strong><span class="under0">这期间偶尔短暂的回到学校,漫步在校园里,很是惬意:学校真的是学习的圣地,虽然有课业的压力,但仍然有大块大块可供支配的时间,在这里,很多琐碎的事情是不需要操心的。　</span></strong></p><hr><p>整个实习期间,其实可以做得更好,不过生活是不可以倒带的。以后会更好。</p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hello world</title>
      <link href="/2018/10/11/Siya/"/>
      <url>/2018/10/11/Siya/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p><strong><span class="under0"> 待更新,仅供参考 </span></strong></p><p><strong><span class="under0">要自己在网上(百度谷歌牛客网 多看些面经 ,看看那些被问到的问题)</span></strong>,比如平时你用python开发,但是可能面试问的一些东西,是你平时没考虑的东西,如果面试前看过准备过,被问到就会从容很多。</p><p>此外就是你简历上所写的项目经历和技能点,可能面试官会对你的项目感兴趣,所以会问你一些简历上的项目的问题,自己可以提前准备下,<strong> <span class="under0">在项目中遇到了哪些问题,难点,这些问题你是怎么解决的,等这些问题。</span> 不要觉得自己的项目比较简单,项目是需要你自己用语言去包装和润色的,适当的吹一吹,只要别吹太过了2333 </strong></p><p>一般面试开始,面试会让你先自我介绍一下,所以有必要提前准备一个自我介绍(主要介绍你的个人基本信息,情况,技术栈,平时怎么学习技术啥的,或者你平时的兴趣爱好),主要还是看你自己了</p><p>如果面试官问你什么时候能来实习,反正<strong> 就说能很快到岗就对了,随时可以回国。 </strong><br>如果面试官问你能实习多久,你<strong> 就说自己能实习挺长时间的,自己时间比较充裕,比如半年(反正实习期间,你不想实习了,随时可以跑路) </strong></p><p>面试结束的时候,面试官一般会问题有什么想问他的吗？所以可以提前准备两三个问题,当时没有想问的也可以不问</p><p>帮你准备一两个套路问题,以免你没有想问的问题避免尴尬:<br>你们这边主要的业务是什么？如果我能来实习,我会做一些什么工作呢？</p><p>然后可能会问你平时看什么书,怎么学习技术的,逛哪些社区,最近看了哪些技术书。提前准备下哈,可以适当搜索编一下</p><p>最后的话,可以适当的表达出自己想去实习的较为强烈的意愿。</p><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000" target="_blank" rel="noopener">Python教程</a><br><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014320037274136d31bd9979d648cd822375394e29a871000" target="_blank" rel="noopener">网络编程</a><br><a href="http://javascript.ruanyifeng.com/" target="_blank" rel="noopener">JavaScript 标准参考教程（alpha）</a><br><a href="https://developer.mozilla.org/zh-CN/docs/learn/HTML/Introduction_to_HTML" target="_blank" rel="noopener">HTML 概述</a><br><a href="http://www.w3school.com.cn/html/html_getstarted.asp" target="_blank" rel="noopener">HTML 入门</a></p><hr><h3 id="sublime"><a href="#sublime" class="headerlink" title=" sublime "></a><strong> sublime </strong></h3><p><a href="https://zhuanlan.zhihu.com/p/31804184" target="_blank" rel="noopener">Sublime Text3 for Mac安装指南</a><br><a href="https://chaishiwei.com/blog/892.html" target="_blank" rel="noopener">Sublime Text 3 for Mac 安装和插件配置说明</a><br><a href="http://www.css88.com/archives/5858" target="_blank" rel="noopener">Sublime Text 3最好的功能、插件和设置</a><br><a href="https://www.zhihu.com/question/24736400" target="_blank" rel="noopener">sublime text 3 插件推荐？</a><br><a href="https://www.jianshu.com/p/6185dc5eb507" target="_blank" rel="noopener">Sublime Text 快捷键（MAC环境）</a><br><a href="https://www.zhihu.com/question/39190896" target="_blank" rel="noopener">MAC版本的Sublime Text有哪些常用的快捷键？</a><br><a href="https://blog.csdn.net/hpuhjl/article/details/54910774" target="_blank" rel="noopener">Mac下Sublime Text3配置Python开发环境</a><br><a href="https://www.cnblogs.com/zhanglinfeng/p/7359102.html" target="_blank" rel="noopener">Mac Sublime Text 3 配置Python环境及安装插件</a><br><a href="https://docle.github.io/2017/11/11/Compile-and-run-the-Java-program-in-Sublime-Text-3/" target="_blank" rel="noopener">Mac下在Sublime Text 3中编译运行java程序</a><br><a href="https://www.oschina.net/news/71008/8-sublime-text-3-plugins" target="_blank" rel="noopener">开发者最常用的 8 款 Sublime text 3 插件</a></p><p>如果你不想一个个插件装,想一次性到位,推荐还是使用IDE。sublime本质还是一个编辑器,比记事本美观一些,但是因为具有丰富的插件资源,可以打造得像IDE一样强大。</p><p>我目前基本是使用的JetBrains的全家桶和vim,写php就用PhpStorm,写Python就用Pycharm,写Cpp就用Clion,写JAVA就用IDEA…</p><p><a href="https://www.jetbrains.com/" target="_blank" rel="noopener">jetbrains官网</a><br><a href="https://www.jetbrains.com/zh/student/" target="_blank" rel="noopener">JetBrains Toolbox 专业开发工具 学生免费授权计划</a></p><p>至于你说的库的自动补全,像jetbrains里面也是有丰富的插件/库资源的,安装相应的库,就可以自动补全的。sublime社区也有丰富的资源,只要搜一下相应的库自动补全一般就有了～</p><p>当上手一个开发工具的时候,我一般会查一下相应的快捷键,插件使用什么的,推荐你也可以这样,哈哈哈哈～</p><hr><h3 id="工具"><a href="#工具" class="headerlink" title=" 工具 "></a><strong> 工具 </strong></h3><p><a href="https://tinypng.com/" target="_blank" rel="noopener">压缩图片</a></p><hr><h3 id="题-仅供参考"><a href="#题-仅供参考" class="headerlink" title=" 题(仅供参考) "></a><strong> 题(仅供参考) </strong></h3><p><a href="https://juejin.im/post/5b6bc1d16fb9a04f9c43edc3" target="_blank" rel="noopener">2018年最常见的Python面试题&amp;答案（上篇）</a><br>python的面试经验我没有,所以也不清楚会问些什么,需要你自己去搜索。</p><hr><h4 id="算法"><a href="#算法" class="headerlink" title=" 算法 "></a><strong> 算法 </strong></h4><p>《剑指offer》,时间不够,来不及看完的话,推荐优先看这几题,相对高频容易被问道:<br>面试题30:最小的k个数(167页)<br>面试题16:反转链表(112页)<br>面试题31:连续子数组的最大和(171页)<br>面试题37:两个链表的第一个公共结点(193页)</p><p><a href="https://legacy.gitbook.com/book/wizardforcel/the-art-of-programming-by-july/details" target="_blank" rel="noopener">《编程之法：面试和算法心得》</a>(这个上面有些题目和剑指offer这本书上面的题目是重复的)<br><a href="http://bbs.codeaha.com/thread-4419-1-1.html" target="_blank" rel="noopener">【啊哈！算法】算法3：最常用的排序——快速排序</a>(排序算法会的越多越好,<span class="under0"><strong> 如果没有时间看各种排序算法,快排必会 </strong></span>)</p><hr><h4 id="计算机网络"><a href="#计算机网络" class="headerlink" title=" 计算机网络 "></a><strong> 计算机网络 </strong></h4><p>加粗或者加红的是我觉得被问道几率相对大些的,可以优先看。</p><blockquote><p><strong><span class="under0">  计算机网络的七层模型，五层模型 </span></strong><br><a href="https://blog.csdn.net/wx19950101/article/details/77120473" target="_blank" rel="noopener">计算机网络七层模型和五层模型</a><br><a href="https://blog.csdn.net/qq_26927285/article/details/54426657" target="_blank" rel="noopener">计算机网络五层（七层）协议</a></p></blockquote><blockquote><p>TCP UDP区别  为什么tcp是可靠传输<br><a href="https://blog.csdn.net/Li_Ning_/article/details/52117463" target="_blank" rel="noopener">TCP和UDP的最完整的区别</a><br><a href="http://blog.51cto.com/feinibuke/340272" target="_blank" rel="noopener">TCP和UDP之间的区别</a><br><strong> <a href="https://blog.csdn.net/qq_18425655/article/details/51955674" target="_blank" rel="noopener">面试题：TCP协议与UDP协议的区别</a> </strong></p></blockquote><blockquote><p>http头里有什么  http协议 http状态码<br><strong> <a href="https://www.cnblogs.com/starof/p/5035119.html" target="_blank" rel="noopener">HTTP常见状态码 200 301 302 404 500</a> </strong><br><a href="https://godbasin.github.io/2017/05/20/front-end-notes-7-init-http/" target="_blank" rel="noopener">前端阶段性总结之「理解HTTP协议」</a><br><a href="https://juejin.im/entry/57ff5c5b0bd1d00058e5b2aa" target="_blank" rel="noopener">关于 HTTP 协议，一篇就够了</a><br><a href="https://sunshinevvv.coding.me/blog/2017/01/26/%E5%9B%BE%E8%A7%A3HTTP-%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/" target="_blank" rel="noopener">《图解HTTP》读书笔记</a><br><a href="https://blog.csdn.net/kfanning/article/details/6062118" target="_blank" rel="noopener">HTTP请求头详解</a><br><a href="https://blog.csdn.net/hj7jay/article/details/72518027" target="_blank" rel="noopener">服务器常见错误代码500、501、502、503、504、505</a><br><a href="https://segmentfault.com/a/1190000010269520" target="_blank" rel="noopener">服务器500，501，502，503，504，505</a></p></blockquote><blockquote><p>为什么dns要快，要用udp<br><a href="http://benbenxiongyuan.iteye.com/blog/1088085" target="_blank" rel="noopener">DNS使用的是TCP协议还是UDP协议</a><br><a href="https://www.cnblogs.com/549294286/p/5172435.html" target="_blank" rel="noopener">DNS分别在什么情况下使用UDP和TCP</a></p></blockquote><blockquote><p>http https区别 https具体解决了哪些问题？举个栗子？<br><a href="https://juejin.im/entry/58d7635e5c497d0057fae036" target="_blank" rel="noopener">详细解析 HTTP 与 HTTPS 的区别</a><br><a href="https://www.zhihu.com/question/19577317" target="_blank" rel="noopener">http 和 https 有何区别？如何灵活使用？</a></p></blockquote><blockquote><p><strong><span class="under0"> GET和POST请求的区别 </span></strong><br><a href="https://www.cnblogs.com/hyddd/archive/2009/03/31/1426026.html" target="_blank" rel="noopener">浅谈HTTP中Get与Post的区别</a><br><a href="https://www.zhihu.com/question/28586791" target="_blank" rel="noopener">get和post区别？</a><br><a href="https://sunshinevvv.coding.me/blog/2017/02/09/HttpGETv.s.POST/" target="_blank" rel="noopener">HTTP协议中GET和POST方法的区别</a><br><a href="https://blog.csdn.net/zjkC050818/article/details/78799386" target="_blank" rel="noopener">HTTP幂等性及GET、POST、PUT、DELETE的区别</a><br><a href="https://www.zhihu.com/question/53882349" target="_blank" rel="noopener">DNS正向解析分为递归和迭代。 通常是用递归，还是迭代呢？</a><br><a href="http://www.zyy1217.com/2017/03/02/HTTP%E4%B8%ADGET%E4%B8%8EPOST%E7%9A%84%E5%8C%BA%E5%88%AB/" target="_blank" rel="noopener">HTTP中GET与POST的区别</a><br><a href="https://itbilu.com/other/relate/EkwKysXIl.html" target="_blank" rel="noopener">HTTP请求方法：GET、HEAD、POST、PUT、DELETE、CONNECT、OPTIONS、TRACE</a><br><a href="https://www.cnblogs.com/weidagang2046/archive/2011/06/04/idempotence.html" target="_blank" rel="noopener">Programming.log - a place to keep my thoughts on programming</a></p></blockquote><blockquote><p>三次握手,四次挥手<br><strong> <a href="https://mp.weixin.qq.com/s/7eY3XIhLXeCMqBYIQh6WwA" target="_blank" rel="noopener">从输入url到页面展示到底发生了什么</a> </strong><br><a href="https://mp.weixin.qq.com/s/7eY3XIhLXeCMqBYIQh6WwA" target="_blank" rel="noopener">DNS原理总结及其解析过程详解（递归查询+迭代查询）</a><br><a href="http://www.zyy1217.com/2017/03/01/%E4%BB%8E%E7%82%B9%E5%87%BB%E5%88%B0%E5%91%88%E7%8E%B0%20%E2%80%94%20%E8%AF%A6%E8%A7%A3%E4%B8%80%E6%AC%A1HTTP%E8%AF%B7%E6%B1%82/" target="_blank" rel="noopener">从点击到呈现 — 详解一次HTTP请求</a><br><strong> <a href="http://www.zyy1217.com/2017/04/16/TCP-IP%E5%8D%8F%E8%AE%AE%E4%B8%89%E6%AC%A1%E6%8F%A1%E6%89%8B%E4%B8%8E%E5%9B%9B%E6%AC%A1%E6%8F%A1%E6%89%8B%E6%B5%81%E7%A8%8B%E8%A7%A3%E6%9E%90/" target="_blank" rel="noopener">TCP/IP协议三次握手与四次握手流程解析</a> </strong></p></blockquote><blockquote><p>http1.0 http1.1 http2.0<br><a href="https://juejin.im/entry/5981c5df518825359a2b9476" target="_blank" rel="noopener">HTTP1.0、HTTP1.1 和 HTTP2.0 的区别</a><br><a href="https://www.zhihu.com/question/34074946" target="_blank" rel="noopener">HTTP/2.0 相比1.0有哪些重大改进？</a><br><a href="https://segmentfault.com/a/1190000008686770" target="_blank" rel="noopener">HTTP1.0 、HTTP 1.1 、HTTP 2.0的区别摘要</a></p></blockquote><blockquote><p>https的原理<br><a href="https://blog.csdn.net/clh604/article/details/22179907" target="_blank" rel="noopener">https原理：证书传递、验证和数据加密、解密过程解析</a><br><a href="https://www.cnblogs.com/ttltry-air/archive/2012/08/20/2647898.html" target="_blank" rel="noopener">HTTPS的工作原理</a><br><a href="https://segmentfault.com/a/1190000004461428" target="_blank" rel="noopener">白话解释 对称加密算法 VS 非对称加密算法</a><br><a href="https://segmentfault.com/a/1190000012466003" target="_blank" rel="noopener">白话解释 电子签名，电子证书，根证书，HTTPS，PKI 到底是什么</a><br><a href="https://segmentfault.com/a/1190000004467714" target="_blank" rel="noopener">白话解释 OSI模型，TLS/SSL 及 HTTPS</a><br><a href="https://www.zhihu.com/question/23202402" target="_blank" rel="noopener">HTTP是一个无状态的协议。这句话里的无状态是什么意思？</a><br><a href="http://m.newsmth.net/article/NetPRG/34850" target="_blank" rel="noopener">主题:请问https是有状态协议还是无状态协议啊</a></p></blockquote><hr><h4 id="操作系统"><a href="#操作系统" class="headerlink" title=" 操作系统 "></a><strong> 操作系统 </strong></h4><p><a href="https://blog.csdn.net/mxsgoden/article/details/8821936" target="_blank" rel="noopener">腾讯面试题04.进程和线程的区别？</a> </p><hr><h4 id="linux"><a href="#linux" class="headerlink" title=" linux "></a><strong> linux </strong></h4><p><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全(命令查询工具)</a><br><a href="https://blog.csdn.net/shmilychan/article/details/52611872" target="_blank" rel="noopener">Linux常用命令详解（一）</a><br><a href="https://blog.csdn.net/ljianhui/article/details/11100625" target="_blank" rel="noopener">初窥Linux 之 我最常用的20条命令</a><br><a href="http://man.linuxde.net/top" target="_blank" rel="noopener">top命令</a></p><p>git常用命令可能会被问道:之前有总结部分在这个链接里面,有时间可以看看:<br><a href="https://github.com/cumtflyingstudio/BE-Summer-Camp-2018" target="_blank" rel="noopener">翔工作室2018夏天后端组培训</a></p><hr><h4 id="JavaScript"><a href="#JavaScript" class="headerlink" title=" JavaScript "></a><strong> JavaScript </strong></h4><p>雅雅你好像没有JS经验,所以发了本电子书给你,《JavaScript高级程序设计》。时间比较短,比较重要的几章是如下几章:</p><p><strong> 第3,4,5,6,7,10,13,21这几章。可以优先看这几章。</strong></p><p>JavaScript主要由三部分是组成,分别是<a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin" target="_blank" rel="noopener">ECMAScript</a>,<a href="http://www.w3school.com.cn/htmldom/dom_intro.asp" target="_blank" rel="noopener">DOM</a>,BOM三部分组成。ECMAScript是JavaScript的语言标准,DOM和BOM分别是和页面和浏览器窗体交互的一些API。所以学习的时候会将更多的精力放在ECMAScript标准的学习上。</p><p>ECMAScript学习可以分两部分来学习,分别是ECMAScript5和ECMAScript6+(6,7,8),这些数字代表版本标准。之前很长的时间里都是5,所以书《JavaScript高级程序设计》讲的就是5。ECMAScript6+(6,7,8)的学习资源在这里,<a href="http://es6.ruanyifeng.com/" target="_blank" rel="noopener">戳链接</a>.一般都是先学习5,再看6,6其实也就是加了一些API而已,没时间可以先只看5.</p><p>JS里面的<strong> 闭包,原型链,原型链继承实现,垃圾回收机制</strong>比较容易被问道,在上面说的那些章节里面有对应的内容讲解,相关的面试题你也可以搜索。</p><p>下面这些题目就仅供参考了,面试的随机性还是挺大的,每个面试官的喜好都不同,有的喜欢聊算法,有的喜欢聊计算机专业课,有的喜欢聊项目经历。</p><blockquote><p><strong><span class="under0"> 主要有浏览器缓存 </span></strong><br><strong><span class="under0"><a href="https://www.cnblogs.com/lyzg/p/5125934.html" target="_blank" rel="noopener">浏览器缓存知识小结及应用</a> </span></strong><br><a href="http://www.zyy1217.com/2017/05/13/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%AB%AF%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/" target="_blank" rel="noopener">九种浏览器端缓存机制概览</a><br><a href="http://www.zyy1217.com/2017/05/14/HTTP%E7%BC%93%E5%AD%98%E8%AF%A6%E8%A7%A3/" target="_blank" rel="noopener">《HTTP权威指南》之缓存详解</a></p></blockquote><blockquote><p>变量提升函数提升学习下<br><a href="https://www.cnblogs.com/liuhe688/p/5891273.html" target="_blank" rel="noopener">JavaScript系列文章：变量提升和函数提升</a><br><a href="https://dancon.gitbooks.io/git-books/content/js/essay/function_hoisting.html" target="_blank" rel="noopener">函数声明提升</a><br><a href="https://github.com/Wscats/Good-text-Share/issues/73" target="_blank" rel="noopener">关于Javascript的函数声明和函数表达式 </a></p></blockquote><blockquote><p><a href="https://blog.csdn.net/u013194113/article/details/52027275" target="_blank" rel="noopener">DOM的默认事件、事件模型、事件委托、阻止默认事件、冒泡事件的方式等。</a></p></blockquote><blockquote><p><a href="https://segmentfault.com/a/1190000011098241" target="_blank" rel="noopener">简述JavaScript的垃圾回收机制</a></p></blockquote><blockquote><p><a href="https://felxy.github.io/blog/2017/06/01/DFS-BFS/" target="_blank" rel="noopener">深度优先与广度优先方法对DOM树的遍历</a><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> DFS = <span class="function"><span class="keyword">function</span>(<span class="params">node</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (!node) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">let</span> deep = <span class="built_in">arguments</span>[<span class="number">1</span>] || <span class="number">1</span></span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;node.nodeName&#125;</span>.<span class="subst">$&#123;node.classList&#125;</span>  <span class="subst">$&#123;deep&#125;</span>`</span>)</span><br><span class="line">    <span class="keyword">if</span> (!node.children.length) &#123;</span><br><span class="line">        <span class="keyword">return</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">Array</span>.from(node.children).forEach(<span class="function">(<span class="params">item</span>) =&gt;</span> DFS(item, deep + <span class="number">1</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> BFS = <span class="function">(<span class="params">root</span>) =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!root) &#123; <span class="keyword">return</span> &#125;</span><br><span class="line">    <span class="keyword">let</span> queue = [&#123;</span><br><span class="line">        item: root,</span><br><span class="line">        depth: <span class="number">1</span></span><br><span class="line">    &#125;]</span><br><span class="line">    <span class="keyword">while</span> (queue.length) &#123;</span><br><span class="line">        <span class="keyword">let</span> node = queue.shift()</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;node.item.nodeName&#125;</span>.<span class="subst">$&#123;node.item.classList&#125;</span>  <span class="subst">$&#123;node.depth&#125;</span>`</span>)</span><br><span class="line">        <span class="keyword">if</span> (!node.item.children.length) &#123;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">Array</span>.from(node.item.children).forEach(<span class="function">(<span class="params">item, index, arr</span>) =&gt;</span> &#123;</span><br><span class="line">            queue.push(&#123;</span><br><span class="line">                item: item,</span><br><span class="line">                depth: node.depth + <span class="number">1</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><blockquote><p>事件代理/事件代理<br>1.每个函数都是对象,都会占用内存,内存中的对象越多,性能就越差<br>2.必须事先指定所有事件处理程序而导致的dom访问次数,会延迟整个页面的交互就绪时间<br>3.document对象很快就可以访问到,无需要等待DOMContentLoaded或load事件.只要可单击的元素呈现在页面,就可以立即具备适当的功能<br>4.需要跟踪的事件处理程序越少,移除它们就越容易<br>click,mousedown,mouseup,keydown,keyup,keypress<br><a href="https://qiutc.me/post/event-delegation.html" target="_blank" rel="noopener">JavaScript 事件委托详解</a><br><a href="https://zhuanlan.zhihu.com/p/26536815?refer=qiutc" target="_blank" rel="noopener">JavaScript 事件委托详解</a><br><a href="https://juejin.im/entry/57ea329e67f3560057ad41a6" target="_blank" rel="noopener">JS 中的事件绑定、事件监听、事件委托是什么？</a><br><a href="https://www.diguage.com/archives/71.html" target="_blank" rel="noopener">实例分析JavaScript中的事件委托和事件绑定</a><br><a href="http://caibaojian.com/javascript-stoppropagation-preventdefault.html" target="_blank" rel="noopener">JavaScript停止冒泡和阻止浏览器默认行为</a><br><a href="https://blog.csdn.net/u012324101/article/details/78222935" target="_blank" rel="noopener">JS 传播事件、取消事件默认行为、阻止事件传播</a></p></blockquote><blockquote><p>cookie和session区别<br><a href="https://www.zhihu.com/question/19786827" target="_blank" rel="noopener">COOKIE和SESSION有什么区别？</a><br><a href="https://juejin.im/entry/5766c29d6be3ff006a31b84e" target="_blank" rel="noopener">Cookie 与 Session 的区别</a></p></blockquote><blockquote><p>如何判断js数据类型<br><a href="https://segmentfault.com/q/1010000000464600" target="_blank" rel="noopener">如何正确判断js数据类型</a><br><a href="https://segmentfault.com/a/1190000005174193" target="_blank" rel="noopener">javascript判断数据类型</a><br>Object.prototype.toString()<br><a href="https://www.cnblogs.com/onepixel/p/5126046.html" target="_blank" rel="noopener">判断JS数据类型的四种方法</a></p></blockquote><blockquote><p>cors和jsonp<br><a href="https://isudox.com/2016/09/24/cross-site-jsonp-and-cors/" target="_blank" rel="noopener">跨域请求之 JSONP 和 CORS</a><br><a href="https://blog.csdn.net/qq_33562825/article/details/60780480" target="_blank" rel="noopener">cors跨域（以及和jsonp的区别）</a></p></blockquote><blockquote><p>prototype 属性和<strong>proto</strong>属性<br><a href="https://www.zhihu.com/question/34183746" target="_blank" rel="noopener">js中<strong>proto</strong>和prototype的区别和关系</a><br><a href="https://github.com/creeperyang/blog/issues/9" target="_blank" rel="noopener">从<strong>proto</strong>和prototype来深入理解JS对象和原型链</a><br>1.对象有属性<strong>proto</strong>,指向该对象的构造函数的原型对象。<br>2.方法除了有属性<strong>proto</strong>,还有属性prototype，prototype指向该方法的原型对象。</p></blockquote><blockquote><p>前端安全csrf,xss<br><a href="https://www.imooc.com/article/18069" target="_blank" rel="noopener">XSS 和 CSRF 攻击的一些非常规防御方法</a><br>事实上现代浏览器为我们带来了一个全新的安全策略，叫作内容安全策略，Content Security Policy，简称CSP。CSP的思路跟转义不一样，它的着手点是，如果一段代码变成了程序，我们是否应该运行它。或者更准确一点说，它实际上是定义页面上哪一些内容是可被信任的，哪一些内容是不被信任的。<br><a href="https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Headers/Content-Security-Policy__by_cnvoid" target="_blank" rel="noopener">Content-Security-Policy</a><br><a href="http://www.cnblogs.com/hyddd/archive/2009/04/09/1432744.html" target="_blank" rel="noopener">浅谈CSRF攻击方式</a><br><a href="https://www.ibm.com/developerworks/cn/web/1102_niugang_csrf/index.html" target="_blank" rel="noopener">CSRF 攻击的应对之道</a><br><a href="https://segmentfault.com/a/1190000008505616" target="_blank" rel="noopener">程序猿必读-防范CSRF跨站请求伪造</a><br><a href="https://blog.csdn.net/ghsau/article/details/17027893" target="_blank" rel="noopener">XSS攻击及防御</a><br><a href="http://www.cnblogs.com/TankXiao/archive/2012/03/21/2337194.html#urlencode" target="_blank" rel="noopener">web安全测试之XSS</a><br><a href="http://www.cnblogs.com/ziyunfei/p/5637945.html" target="_blank" rel="noopener">SameSite Cookie，防止 CSRF 攻击</a><br><a href="https://www.anquanke.com/post/id/83773" target="_blank" rel="noopener">再见，CSRF：讲解set-cookie中的SameSite属性</a></p></blockquote>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>使用serve部署静态资源在特定的端口</title>
      <link href="/2018/10/05/deploy-static-resources-at-specified-port-by-serve/"/>
      <url>/2018/10/05/deploy-static-resources-at-specified-port-by-serve/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对使用<a href="https://github.com/zeit/serve" target="_blank" rel="noopener">GitHub - zeit/serve</a>部署静态资源的记录。</p><hr><p>vue官方文档里推荐的静态资源部署工具是<a href="https://github.com/zeit/serve" target="_blank" rel="noopener">GitHub - zeit/serve</a>。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">npm install -g serve</span><br><span class="line"># -s 参数的意思是将其架设在 Single-Page Application 模式下</span><br><span class="line"># 这个模式会处理即将提到的路由问题</span><br><span class="line">serve -s dist</span><br></pre></td></tr></table></figure><p>会返回</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">┌───────────────────────────────────────────────┐</span><br><span class="line">  │                                               │</span><br><span class="line">  │   Serving!                                    │</span><br><span class="line">  │                                               │</span><br><span class="line">  │   - Local:            http:<span class="comment">//localhost:5000   │</span></span><br><span class="line">  │   - On Your Network:  http:<span class="comment">//127.0.1.1:5000   │</span></span><br><span class="line">  │                                               │</span><br><span class="line">  │   Copied local address to clipboard!          │</span><br><span class="line">  │                                               │</span><br><span class="line">  └───────────────────────────────────────────────┘</span><br></pre></td></tr></table></figure><p>serve默认的端口是5000,如果想指定在特定的端口,执行以下命令即可</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">serve -s dist --listen <span class="number">4999</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://cli.vuejs.org/zh/guide/deployment.html#%E9%80%9A%E7%94%A8%E6%8C%87%E5%8D%97" target="_blank" rel="noopener">部署 | Vue CLI 3</a><br><a href="https://github.com/zeit/serve/pull/384" target="_blank" rel="noopener">Re-added <code>--single</code> and made <code>--listen</code> support ports by leo · Pull Request #384 · zeit/serve · GitHub</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu安装chromedriver</title>
      <link href="/2018/10/04/install-chromedriver-in-ubuntu/"/>
      <url>/2018/10/04/install-chromedriver-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对Ubuntu安装chromedriver的记录</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h3><p>chromedriver有很多版本和浏览器版本需要一一对应，否则无法使用</p><table><thead><tr><th style="text-align:center">chromedriver版本</th><th style="text-align:center">支持的Chrome版本</th></tr></thead><tbody><tr><td style="text-align:center">v2.40</td><td style="text-align:center">v66-68</td></tr><tr><td style="text-align:center">v2.39</td><td style="text-align:center">v66-68</td></tr><tr><td style="text-align:center">v2.38</td><td style="text-align:center">v65-67</td></tr><tr><td style="text-align:center">v2.37</td><td style="text-align:center">v64-66</td></tr><tr><td style="text-align:center">v2.36</td><td style="text-align:center">v63-65</td></tr><tr><td style="text-align:center">v2.35</td><td style="text-align:center">v62-64</td></tr><tr><td style="text-align:center">v2.34</td><td style="text-align:center">v61-63</td></tr><tr><td style="text-align:center">v2.33</td><td style="text-align:center">v60-62</td></tr><tr><td style="text-align:center">v2.32</td><td style="text-align:center">v59-61</td></tr><tr><td style="text-align:center">v2.31</td><td style="text-align:center">v58-60</td></tr></tbody></table><p>选择与浏览器版本匹配的chromedriver下载,<a href="http://chromedriver.storage.googleapis.com/index.html" target="_blank" rel="noopener">chromedriver下载地址</a></p><p>然后执行以下命令:<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">#解压，加上执行权限，移动到/usr/bin/文件夹下。(复制则将mv改为cp)</span><br><span class="line">unzip chromedriver_linux64.zip</span><br><span class="line">chmod +x chromedriver</span><br><span class="line">sudo mv chromedriver /usr/bin/</span><br></pre></td></tr></table></figure></p><hr><h3 id="测试代码"><a href="#测试代码" class="headerlink" title=" 测试代码 "></a><strong> 测试代码 </strong></h3><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!usr/bin/python</span></span><br><span class="line"># -*- coding:utf-8 -*-</span><br><span class="line"><span class="keyword">from</span> selenium <span class="keyword">import</span> webdriver</span><br><span class="line"></span><br><span class="line">browser = webdriver.Chrome()</span><br><span class="line">browser.get(<span class="string">'http://www.baidu.com/'</span>)</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://juejin.im/post/5b607624e51d4576b8286f02" target="_blank" rel="noopener">Python 爬虫相关环境 - 掘金</a><br><a href="https://blog.csdn.net/qq_23926575/article/details/77268924" target="_blank" rel="noopener">ubuntu下安装selenium以及chromedriver、geckodriver和phantomjs等驱动 - 明月清風 - CSDN博客</a><br><a href="https://blog.csdn.net/pangtouyu_qy/article/details/80282795" target="_blank" rel="noopener">[Linux] Ubuntu安装ChromeDriver - YasinQiu的博客 - CSDN博客</a><br><a href="https://www.cnblogs.com/jinxiao-pu/p/6677782.html" target="_blank" rel="noopener">python爬虫积累（一）——–selenium+python+PhantomJS的使用 - 今孝 - 博客园</a><br><a href="https://cuiqingcai.com/2577.html" target="_blank" rel="noopener">Python爬虫利器四之PhantomJS的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>BeautifulSoup4 UserWarning</title>
      <link href="/2018/09/23/BeautifulSoup4-UserWarning/"/>
      <url>/2018/09/23/BeautifulSoup4-UserWarning/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>写爬虫的时候遇到了这样一个警告</p><p>代码如下:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'Downloading:'</span>,url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = urlopen(url)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Download error:'</span>,e)</span><br><span class="line">        html = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">html = download(<span class="string">'https://www.sail.name/'</span>)</span><br><span class="line">bsObj = BeautifulSoup(html.read())</span><br><span class="line">print(bsObj)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">UserWarning: No parser was explicitly specified, so I&apos;m using the best available HTML parser for this system (&quot;lxml&quot;). This usually isn&apos;t a problem, but if you run this code on another system, or in a different virtual environment, it may use a different parser and behave differently.</span><br><span class="line"></span><br><span class="line">The code that caused this warning is on line 16 of the file one.py. To get rid of this warning, change code that looks like this:</span><br><span class="line"></span><br><span class="line"> BeautifulSoup(YOUR_MARKUP&#125;)</span><br><span class="line"></span><br><span class="line">to this:</span><br><span class="line"></span><br><span class="line"> BeautifulSoup(YOUR_MARKUP, &quot;lxml&quot;)</span><br><span class="line"></span><br><span class="line">  markup_type=markup_type))</span><br></pre></td></tr></table></figure><p>根据提示信息,是因为没有指定解析器</p><p>以下是主要的解析器,以及它们的优缺点:</p><table><thead><tr><th style="text-align:center">解析器</th><th style="text-align:center">使用方法</th><th style="text-align:center">优势</th><th style="text-align:center">劣势</th></tr></thead><tbody><tr><td style="text-align:center">Python标准库</td><td style="text-align:center"><code>BeautifulSoup(markup, &quot;html.parser&quot;)</code></td><td style="text-align:center"><code>1.Python的内置标准库 2.执行速度适中 3.文档容错能力强</code></td><td style="text-align:center">Python 2.7.3 or 3.2.2)前 的版本中文档容错能力差</td></tr><tr><td style="text-align:center"><code>lxml HTML</code> 解析器</td><td style="text-align:center"><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td><td style="text-align:center"><code>1.速度快 2.文档容错能力强</code></td><td style="text-align:center">需要安装C语言库</td></tr><tr><td style="text-align:center"><code>lxml XML</code> 解析器</td><td style="text-align:center"><code>BeautifulSoup(markup, &quot;lxml&quot;)</code></td><td style="text-align:center"><code>1.速度快 2.文档容错能力强</code></td><td style="text-align:center">需要安装C语言库</td></tr><tr><td style="text-align:center">html5lib</td><td style="text-align:center"><code>BeautifulSoup(markup, &quot;html5lib&quot;)</code></td><td style="text-align:center"><code>1.最好的容错性 2.以浏览器的方式解析文档 3.生成HTML5格式的文档</code></td><td style="text-align:center">1.速度慢 2.不依赖外部扩展</td></tr></tbody></table><p><img src="/img/爬虫/BeautifulSoup4-UserWarning/1.png" alt="1.png"></p><p><strong><span class="under0"> 推荐使用lxml作为解析器,因为效率更高. 在Python2.7.3之前的版本和Python3中3.2.2之前的版本,必须安装lxml或html5lib, 因为那些Python版本的标准库中内置的HTML解析方法不够稳定. </span></strong></p><p>增加解析器即可:</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">from</span> urllib.request <span class="keyword">import</span> urlopen</span><br><span class="line"><span class="keyword">from</span> urllib.error <span class="keyword">import</span> HTTPError</span><br><span class="line"><span class="keyword">from</span> bs4 <span class="keyword">import</span> BeautifulSoup</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">download</span><span class="params">(url)</span>:</span></span><br><span class="line">    print(<span class="string">'Downloading:'</span>,url)</span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        html = urlopen(url)</span><br><span class="line">    <span class="keyword">except</span> HTTPError <span class="keyword">as</span> e:</span><br><span class="line">        print(<span class="string">'Download error:'</span>,e)</span><br><span class="line">        html = <span class="literal">None</span></span><br><span class="line">    <span class="keyword">return</span> html</span><br><span class="line"></span><br><span class="line">html = download(<span class="string">'https://www.sail.name/'</span>,<span class="string">"lxml"</span>)</span><br><span class="line">bsObj = BeautifulSoup(html.read())</span><br><span class="line">print(bsObj)</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.crummy.com/software/BeautifulSoup/bs4/doc/index.zh.html" target="_blank" rel="noopener">Beautiful Soup 4.2.0 文档</a><br><a href="https://blog.csdn.net/ace_fei/article/details/50466584" target="_blank" rel="noopener">BeautifulSoup4 UserWarning</a><br><a href="https://www.jianshu.com/p/2df05f279331" target="_blank" rel="noopener">Markdown插入表格语法</a><br><a href="https://www.kancloud.cn/thinkphp/github-tips/37887" target="_blank" rel="noopener">表情符</a><br><a href="https://github.com/muwenzi/Program-Blog/issues/71" target="_blank" rel="noopener">用emoji表情提交代码指南</a><br><a href="https://www.h5jun.com/post/gitmoji.html" target="_blank" rel="noopener">程序员提交代码的 emoji 指南——原来表情文字不能乱用</a><br><a href="https://www.wenjunjiang.win/2016/11/22/gitmoji%E7%9A%84%E4%BD%BF%E7%94%A8/" target="_blank" rel="noopener">gitmoji的使用</a></p>]]></content>
      
      
      <categories>
          
          <category> 爬虫 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>我是老司机</title>
      <link href="/2018/09/22/I-am-an-old-driver/"/>
      <url>/2018/09/22/I-am-an-old-driver/</url>
      
        <content type="html"><![CDATA[<h3 id="Praface"><a href="#Praface" class="headerlink" title=" Praface "></a><strong> Praface </strong></h3><p>最近忙里偷闲在考驾照,本文做些记录。早起真的很累(比上课上班累多了)!</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.zhihu.com/question/24518251" target="_blank" rel="noopener">如何顺利一次性通过驾考科目二考试</a><br><a href="http://www.jkydt.com/news/7dig9k.htm" target="_blank" rel="noopener">科目二考试流程+注意事项详解，考前必备！-驾考一点通</a></p><hr><p><a href="http://www.jkydt.com/xx/4ea4b2.htm" target="_blank" rel="noopener">考取驾照一次通过有窍门-驾考一点通</a><br><a href="https://www.zhihu.com/question/33413173" target="_blank" rel="noopener">考驾照是一种什么样的体验？</a><br><a href="https://baike.baidu.com/item/%E5%80%92%E6%A1%A9/7646349?fromtitle=%E6%A1%A9%E8%80%83&amp;fromid=7558259" target="_blank" rel="noopener">倒桩</a><br><a href="http://www.jkydt.com/xx/20a373.htm" target="_blank" rel="noopener">关于新手的先离后刹-驾考一点通</a><br><a href="http://auto.sohu.com/20071024/n252821728.shtml" target="_blank" rel="noopener">先离后刹 走里道 这些坏毛病你有吗？</a><br><a href="https://www.jianshu.com/p/6378291e6892" target="_blank" rel="noopener">为什么刹车要“先刹后离”?</a><br><a href="https://baike.baidu.com/item/%E7%A6%BB%E5%90%88%E5%99%A8%E8%B8%8F%E6%9D%BF" target="_blank" rel="noopener">离合器踏板</a></p><hr><h3 id="科二"><a href="#科二" class="headerlink" title=" 科二 "></a><strong> 科二 </strong></h3><h4 id="右-倒车入库"><a href="#右-倒车入库" class="headerlink" title=" (右)倒车入库 "></a><strong> (右)倒车入库 </strong></h4><p>1.挂挡,肩过白线,打弯,向右一又四分之一<br>2.平视前方,车身回正,肩到/对正白线,停<br>3.换倒挡<br>4.左后视镜(左后视镜和车身连接处望过去,把此处记作a)快要压线(根据座椅的调整,实际的位置是有些偏差的,我调整好后是,刚压线,如果有偏头,在线的前方一些)[这里找准点很重要,车上望过去可能是很微小的距离,但实际距离可能很大],向右打一圈半<br>5.然后看右后视镜,右前把手到这个角的直线距离30公分(这里全靠感觉了23333),然后回半圈(向左)<br>6.右后视镜看到车身平行,迅速回正(向左回一圈),再看左后视镜<br>7.然后还是从a处看过去,在车上看到压线即可以停车了</p><hr><h4 id="侧方停车"><a href="#侧方停车" class="headerlink" title=" 侧方停车 "></a><strong> 侧方停车 </strong></h4><p>入:<br>1.石头刚消失,向右一圈又四分之一<br>2.左镜看到前门把手到线,回正<br>3.左后胎快压线,向左一圈半</p><p>出:<br>1.第一个车盖左前轴压线,打方向盘,回正<br>2.第二次看雨刷器凸起的位置压线,打一圈,然后再回正</p><hr><h4 id="上下坡"><a href="#上下坡" class="headerlink" title=" 上下坡 "></a><strong> 上下坡 </strong></h4><p>点火必须在空挡<br>一开始挂的一档<br>对到那根标记线需要停<br>离合要缓慢的放,不要猛放<br>两脚要踩到底,手刹拉起来放下去。先慢放左脚,<span class="under0"> <strong> 放到车振动(仪表盘指针掉半格) </strong> </span>,左脚固定住(不要动),再慢放右脚,直到车向前,右脚迅速放完,然后停车(两脚踩到底),停车离合要踩死。然后挂空挡,滑下去</p><hr><h3 id="原理"><a href="#原理" class="headerlink" title=" 原理 "></a><strong> 原理 </strong></h3><p><a href="http://www.ttyongche.com/detail?id=107" target="_blank" rel="noopener">怎样正确使用离合器？</a><br><a href="https://www.youtube.com/watch?v=J9SzjotYaL0" target="_blank" rel="noopener">离合器是如何工作的-video 待看</a></p><hr><h3 id="问题记录与分析"><a href="#问题记录与分析" class="headerlink" title=" 问题记录与分析 "></a><strong> 问题记录与分析 </strong></h3><blockquote><p>问:为什么会熄火?<br>答:离合器和油门在汽车起步时配合不好，就会使发动机熄火或汽车起步时颤抖</p></blockquote><blockquote><p>问:科二练车时,空挡调到一档后,教练让慢慢松开离合,但是彻底松开离合好像车速会太快,我一般脚都是踩在离合上的(半联动?),但是看网上的一些文章说  在开车时除了汽车起步、换挡和低速刹车需要踩下离合器踏板外，其他时间都不要没事踩离合，或把脚放在离合器踏板上。？？<br>答:网上这个文章说的是针对科三,上路的</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>shell脚本中cd切换目录失败</title>
      <link href="/2018/09/20/the-problem-of-change-dir-in-shell/"/>
      <url>/2018/09/20/the-problem-of-change-dir-in-shell/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对shell脚本中cd命令切换目录失败的相关记录</p><hr><h3 id="重现"><a href="#重现" class="headerlink" title=" 重现 "></a><strong> 重现 </strong></h3><p><code>test1</code>脚本如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">jump_dir=<span class="regexp">/home/</span>sail</span><br><span class="line"><span class="keyword">if</span> [ -d $jump_dir ]</span><br><span class="line">then </span><br><span class="line">echo <span class="string">"the $jump_dir directory exist"</span></span><br><span class="line">cd $jump_dir </span><br><span class="line">ls</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">   echo <span class="string">"the $jump_dir directory does not exist"</span></span><br><span class="line">fi</span><br></pre></td></tr></table></figure><p>执行<code>./test1</code>,终端打印出了<code>$jump_dir</code>目录下的内容,但是最终还是在当前目录,没有跳转到<code>$jump_dir</code>目录。</p><p>之所以会出现这样的结果,是因为在终端执行<code>./test1</code>(直接运行脚本)会产生一个子shell，并在子shell中逐个执行脚本中的指令，在子shell中已经切换了目录了，但是子shell一旦执行完，马上退出，子shell中的变量和操作全部都收回。回到终端根本就看不到这个过程的变化。子shell从父shell中继承了环境变量，但是执行后不会改变父shell的环境变量；可以这样理解：在子shell中的操作和环境变量不会影响父进程，在执行完shell后又回到了父进程。</p><p>这里再通过两个脚本验证下</p><p><code>test2</code>脚本如下,该脚本在<code>/home/sail/hacker/code/shell/demo</code>目录:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">jump_dir=<span class="regexp">/home/</span>sail</span><br><span class="line">pwd</span><br><span class="line">cd $jump_dir</span><br><span class="line">pwd</span><br></pre></td></tr></table></figure><p>执行<code>./test2</code>,执行结果为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">/home/sail/hacker/code/shell/demo</span><br><span class="line">/home/sail</span><br></pre></td></tr></table></figure><p>以上结果可以说明的确是有切换过目录的</p><p><code>test3</code>脚本如下:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">history</span><br><span class="line">cd /home/sail</span><br><span class="line">sleep <span class="number">1</span></span><br><span class="line">pwd</span><br></pre></td></tr></table></figure><p>执行<code>./test3</code>,执行结果为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/home/sail</span><br></pre></td></tr></table></figure><p><code>history</code>没有内容打印出来,说明开了一个子进程,没有历史命令。</p><hr><h3 id="source命令"><a href="#source命令" class="headerlink" title=" source命令 "></a><strong> source命令 </strong></h3><p>如果我们期望可以在shell脚本中cd切换目录,可以使用如下方式<br><code>source shell-filename</code> or <code>. ./shell-filename</code><br><strong> <code>source</code>命令又称为点命令，作用：在当前shell环境下读取并执行脚本中的命令，通常用于重新执行刚修改过的初始化文件，使之立即生效，而不必注销并登录 </strong></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/liuchunming033/article/details/71089381" target="_blank" rel="noopener">将Vim编辑器打造成Bash Shell脚本IDE</a><br><a href="https://blog.csdn.net/firefoxbug/article/details/7317279" target="_blank" rel="noopener">Shell脚本中cd命令使用</a><br><a href="https://blog.csdn.net/SoaringLee_fighting/article/details/78989918" target="_blank" rel="noopener">【Shell】关于shell脚本中执行cd命令无效的分析</a><br><a href="http://man.linuxde.net/pushd" target="_blank" rel="noopener">pushd命令</a><br><a href="http://www.361way.com/pushd/1118.html" target="_blank" rel="noopener">方便的目录切换——dirs、pushd、popd命令</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>策略模式</title>
      <link href="/2018/09/11/Strategy-Pattern/"/>
      <url>/2018/09/11/Strategy-Pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>策略模式指的是定义一系列的算法,把它们一个个封装起来。将不变的部分和变化的部分隔开是每个设计模式的主题,策略模式也不例外,策略模式的目的就是将算法的使用与算法的实现分离开来。</p><p>一个基于策略模式的程序至少由两部分组成。第一个部分是一组策略类,策略类封装了具体的算法,并负责具体的计算过程。第二个部分是环境类Context,Context接受客户的请求,随后把请求委托给某一个策略类。要做到这点,说明Context中要维持对某个策略对象的引用</p><hr><h3 id="策略模式实现"><a href="#策略模式实现" class="headerlink" title=" 策略模式实现 "></a><strong> 策略模式实现 </strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> strategies = &#123;</span><br><span class="line">    <span class="string">"S"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">4</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"A"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">3</span>;</span><br><span class="line">    &#125;,</span><br><span class="line">    <span class="string">"B"</span>: <span class="function"><span class="keyword">function</span> (<span class="params">salary</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> salary * <span class="number">2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> calculateBonus = <span class="function"><span class="keyword">function</span> (<span class="params">level, salary</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> strategies[level](salary);</span><br><span class="line">&#125;;</span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'S'</span>, <span class="number">2000</span>));</span><br><span class="line"><span class="built_in">console</span>.log(calculateBonus(<span class="string">'A'</span>, <span class="number">1000</span>));</span><br></pre></td></tr></table></figure><hr><h3 id="使用策略模式实现缓动动画"><a href="#使用策略模式实现缓动动画" class="headerlink" title=" 使用策略模式实现缓动动画 "></a><strong> 使用策略模式实现缓动动画 </strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> tween = &#123;</span><br><span class="line">    <span class="comment">// 这4个参数的含义分别是动画已消耗的时间,小球原始位置,小球目标位置,动画持续的总时间</span></span><br><span class="line">    <span class="comment">// 返回的值则是动画元素应该处在的当前位置</span></span><br><span class="line">    linear: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c*t/d + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    easeIn: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c * (t /= d) * t + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    strongEaseIn: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c * (t /= d) * t * t * t * t + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    strongEaseOut: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t * t * t + <span class="number">1</span>) + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    sineaseIn: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c * (t /= d) * t * t + b;</span><br><span class="line">    &#125;,</span><br><span class="line">    sineaseOut: <span class="function"><span class="keyword">function</span> (<span class="params">t, b, c, d</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> c * ((t = t / d - <span class="number">1</span>) * t * t + <span class="number">1</span>) + b;</span><br><span class="line">    &#125;,</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Animate = <span class="function"><span class="keyword">function</span> (<span class="params">dom</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dom = dom;     <span class="comment">// 进行运动的dom结点</span></span><br><span class="line">    <span class="keyword">this</span>.startTime = <span class="number">0</span>; <span class="comment">// 动画开始的时间</span></span><br><span class="line">    <span class="keyword">this</span>.startPos = <span class="number">0</span>;  <span class="comment">// dom的初始位置</span></span><br><span class="line">    <span class="keyword">this</span>.endPos = <span class="number">0</span>;    <span class="comment">// dom的目标位置</span></span><br><span class="line">    <span class="keyword">this</span>.propertyName = <span class="literal">null</span>; <span class="comment">// dom节点需要被改变的css属性名</span></span><br><span class="line">    <span class="keyword">this</span>.easing = <span class="literal">null</span>;       <span class="comment">// 缓动算法</span></span><br><span class="line">    <span class="keyword">this</span>.duration = <span class="literal">null</span>;     <span class="comment">// 动画持续时间</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Animate.prototype.start = <span class="function"><span class="keyword">function</span> (<span class="params">propertyName, endPos, duration, easing</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.startTime = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 动画启动时间</span></span><br><span class="line">    <span class="keyword">this</span>.startPos = <span class="keyword">this</span>.dom.getBoundingClientRect()[propertyName]; <span class="comment">// dom结点初始位置</span></span><br><span class="line">    <span class="keyword">this</span>.propertyName = propertyName; <span class="comment">// dom节点需要被改变的CSS属性名</span></span><br><span class="line">    <span class="keyword">this</span>.endPos = endPos; <span class="comment">// dom节点目标位置</span></span><br><span class="line">    <span class="keyword">this</span>.duration = duration; <span class="comment">// 动画持续事件</span></span><br><span class="line">    <span class="keyword">this</span>.easing = tween[easing]; <span class="comment">// 缓动算法</span></span><br><span class="line">    <span class="keyword">var</span> self = <span class="keyword">this</span>;</span><br><span class="line">    <span class="keyword">var</span> timeId = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  <span class="comment">// 启动定时器,开始执行动画</span></span><br><span class="line">        <span class="keyword">if</span> (self.step() === <span class="literal">false</span>) &#123;        <span class="comment">// 如果动画已结束,则清楚定时器</span></span><br><span class="line">            clearInterval(timeId);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;, <span class="number">19</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Animate.prototype.step = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> t = +<span class="keyword">new</span> <span class="built_in">Date</span>; <span class="comment">// 取得当前时间</span></span><br><span class="line">    <span class="comment">// 如果当前时间大于动画开始时间加上动画持续时间之和,说明动画已经结束了,此时要修正小球位置</span></span><br><span class="line">    <span class="keyword">if</span> (t &gt;= <span class="keyword">this</span>.startTime + <span class="keyword">this</span>.duration) &#123;</span><br><span class="line">        <span class="keyword">this</span>.update(<span class="keyword">this</span>.endPos);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// pos为小球当前位置</span></span><br><span class="line">    <span class="keyword">var</span> pos = <span class="keyword">this</span>.easing(t - <span class="keyword">this</span>.startTime, <span class="keyword">this</span>.startPos, <span class="keyword">this</span>.endPos - <span class="keyword">this</span>.startPos, <span class="keyword">this</span>.duration);</span><br><span class="line">    <span class="keyword">this</span>.update(pos); <span class="comment">// 更新小球的CSS属性</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Animate.prototype.update = <span class="function"><span class="keyword">function</span> (<span class="params">pos</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.dom.style[<span class="keyword">this</span>.propertyName] = pos + <span class="string">'px'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">var</span> div = <span class="built_in">document</span>.getElementById(<span class="string">'div'</span>);</span><br><span class="line"><span class="keyword">var</span> animate = <span class="keyword">new</span> Animate(div);</span><br><span class="line"><span class="comment">// animate.start('top', 1500, 500, 'strongEaseIn');</span></span><br><span class="line">animate.start(<span class="string">'top'</span>, <span class="number">1500</span>, <span class="number">500</span>, <span class="string">'linear'</span>);</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p>《JavaScript设计模式与开发实践》</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Appimage</title>
      <link href="/2018/09/11/Appimage/"/>
      <url>/2018/09/11/Appimage/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>今天百度推送的一篇文章引起了我注意,链接在这儿-&gt;<a href="https://mbd.baidu.com/newspage/data/landingshare?pageType=1&amp;isBdboxFrom=1&amp;context=%7B%22nid%22%3A%22news_8953066122384893175%22%2C%22sourceFrom%22%3A%22bjh%22%7D" target="_blank" rel="noopener">Ubuntu安装QQ，tim,网易云等软件教程！</a>。</p><p>很多软件都是没有linux版本的,因为linux用户少,不会给公司带来多大的收益。不过也有一些不错的软件,比如网易云音乐和搜狗输入法是有官方提供linux版本的。</p><hr><h3 id="AppImage"><a href="#AppImage" class="headerlink" title=" AppImage "></a><strong> AppImage </strong></h3><p>在这篇推送中了解到一个东西叫做<a href="https://appimage.org/" target="_blank" rel="noopener">AppImage</a>。<strong> 太酷了,大佬们也太强了吧,遇到问题就撸代码把问题解决了。</strong></p><p><strong><span class="under0"> 一个AppImage应用即是一个可下载的Linux文件，其中包含一个应用程序和应用程序运行需要的所有内容（例如，库，图标，字体，转换层等），而这些内容并不一定已经存在于每个目标系统之中。</span></strong></p><p>今天是我第一次了解到它,先写篇博客放在这儿,后面我深入了解后,再写文章记录分享。</p><hr><h3 id="如何安装AppImage应用"><a href="#如何安装AppImage应用" class="headerlink" title=" 如何安装AppImage应用 "></a><strong> 如何安装AppImage应用 </strong></h3><p>下载相应软件的AppImage程序后,右键-&gt;属性-&gt;权限-&gt;勾选<code>允许作为程序执行文件</code>,然后双击程序即可使用了。</p><p><img src="/img/linux/Appimage/1.png" alt="1.png"><br><img src="/img/linux/Appimage/2.png" alt="2.png"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://appimage.org/" target="_blank" rel="noopener">appimage</a><br><a href="https://github.com/AppImage/AppImageKit" target="_blank" rel="noopener">AppImage/AppImageKit</a><br><a href="https://doc.appimage.cn/docs/wiki/" target="_blank" rel="noopener">AppImage中文文档</a><br><a href="https://appimage.github.io/apps/" target="_blank" rel="noopener">AppImageHub</a><br><a href="https://www.jianshu.com/p/8bb051a2eb62" target="_blank" rel="noopener">Appimage</a><br><a href="https://the0demiurge.blogspot.com/2017/10/20171016tm2013.html" target="_blank" rel="noopener">2018年1月31日：Linux上国产第三方软件指南</a><br><a href="http://xn--zq2aw6m.xyz/#/article/598403683e4bc40848718dfe" target="_blank" rel="noopener">CocoMusic</a><br><a href="https://mbd.baidu.com/newspage/data/landingshare?pageType=1&amp;isBdboxFrom=1&amp;context=%7B%22nid%22%3A%22news_8953066122384893175%22%2C%22sourceFrom%22%3A%22bjh%22%7D" target="_blank" rel="noopener">Ubuntu安装QQ，tim,网易云等软件教程！</a><br><a href="https://lala.im/3059.html" target="_blank" rel="noopener">Ubuntu16.04系统美化、常用软件安装等，长期更新</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Appimage </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在教师节</title>
      <link href="/2018/09/10/write-in-Teachers-Day/"/>
      <url>/2018/09/10/write-in-Teachers-Day/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p><a href="http://www.zreading.cn/archives/6574.html" target="_blank" rel="noopener">一个人没有遇到过优秀的老师，或许不值得难过；但遇到过优秀的老师，一定是人生的幸事。</a></p><hr><p>今天是18年的9月10日—教师节。这也是我学生时代的最后一个学年,明年就毕业了。</p><p>早上睁眼就给益达和胡大大发了节日快乐,还有张艳群老师。益达和胡大大是我的高中老师,张老师则是我的大学班主任。自幼儿园起,教过我的老师已经有很多很多位,因为这样那样的原因,大部分都没有了联系,很多老师自毕业后再也没又见过。有些遗憾。</p><hr><p>我无意一一写出我可爱的老师们,因为文笔太烂了。虽然我只是老师教导众多学生中的一个,但老师们的教导对我却是十分重要的。不单是知识上的,更多的还有生活上的一些道理又或者是经验。他们讲课的风采始终留在我的心里。</p><p>上学的时候,有不少的时候,是在吐槽老师的。现在想来,也是蛮好笑。被老师批评教导的次数也不少,但不管怎么说,他们都是希望自己的学生可以更好。</p><p>广义上,还有很多人虽然没有给我上过课,但也教会了我不少东西,也算是老师,哈哈哈。</p><p>此外,也给葛欣老师发了祝福。大学期间,她一共给我上了两门课,其中是一门是高级程序设计,讲的C++。这也我接触的第一门语言,还清晰的记得老师第一堂课说,优秀的程序员写代码要写注释。</p><p><strong><span class="under0"> “能教你们的有限,以后的无限靠你们的努力!”,她说。</span></strong></p><hr><p>凌晨看到<a href="https://github.com/siyali" target="_blank" rel="noopener">雅雅</a>在空间发的毕业了的说说,时间过得真是很快啊。</p><p><strong> 最近这两天想的东西比较多,也有一点颓,生活难免是否起起伏伏的,一平如水确实也太乏味了。但从统计学来说,还是符合正太分布的。<span class="under0">最近这些日子,我对正态分布有了更感性的认识。不止如此,很多道理,其实在曾经的语文课本,那些诗词,古文里面已经告诉我们了。 </span></strong></p><p>后面应该会写更多的文章,不管是技术的还是非技术的～</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>高阶函数之分时函数</title>
      <link href="/2018/09/04/Time-sharing-functions-of-higher-order-functions/"/>
      <url>/2018/09/04/Time-sharing-functions-of-higher-order-functions/</url>
      
        <content type="html"><![CDATA[<h3 id="高阶函数"><a href="#高阶函数" class="headerlink" title=" 高阶函数 "></a><strong> 高阶函数 </strong></h3><p>高阶函数是指至少满足下列条件之一的函数:</p><p>1.函数可以作为参数被传递<br>2.函数可以作为返回值输入</p><hr><h3 id="分时函数"><a href="#分时函数" class="headerlink" title=" 分时函数 "></a><strong> 分时函数 </strong></h3><p>应用场景:WebQQ的好友列表,列表中通常有成百上千个好友,如果一个好友用一个节点来表示,当我们在页面中渲染这个列表的时候,可能要一次性往页面中创建成百上千个节点。</p><p>在短时间内往页面大量添加DOM节点会让浏览器卡顿甚至卡死,代码如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> ary = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    ary.push(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderFriendList = <span class="function"><span class="keyword">function</span> (<span class="params">data</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, l = data.length; i &lt; l; i++) &#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        div.innerHTML = i;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">    &#125;  </span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">renderFriendList(ary)</span><br></pre></td></tr></table></figure><p>分时函数<code>timeChunk</code>,让创建节点的工作分批进行</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> timeChunk = <span class="function"><span class="keyword">function</span> (<span class="params">ary, fn, count</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> obj,</span><br><span class="line">        t;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> len = ary.length;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> start = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="built_in">Math</span>.min(count || <span class="number">1</span>, ary.length); i++) &#123;</span><br><span class="line">            <span class="keyword">var</span> obj = ary.shift();</span><br><span class="line">            fn(obj);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        t = setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (ary.length === <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">return</span> clearInterval(t);</span><br><span class="line">            &#125;</span><br><span class="line">            start();</span><br><span class="line">        &#125;, <span class="number">200</span>);</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> ary = [];</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">1</span>; i &lt;= <span class="number">1000</span>; i++) &#123;</span><br><span class="line">    ary.push(i);</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> renderFriendList = timeChunk(ary, <span class="function"><span class="keyword">function</span> (<span class="params">n</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">    div.innerHTML = n;</span><br><span class="line">    <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">&#125;, <span class="number">8</span>);</span><br><span class="line"></span><br><span class="line">renderFriendList();</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p>《JavaScript设计模式与开发实践》</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>最后一个暑假</title>
      <link href="/2018/09/02/The-last-summer-vocation/"/>
      <url>/2018/09/02/The-last-summer-vocation/</url>
      
        <content type="html"><![CDATA[<p>password: bukeyikan</p><h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>今天是暑假的最后一天,也是学生时代的最后一个暑假。这个假期是比较短暂的,只有约摸45天。</p><hr><h3 id="暑假"><a href="#暑假" class="headerlink" title=" 暑假 "></a><strong> 暑假 </strong></h3><p>七月剩下的几天日子,主要是用来<a href="https://github.com/cumtflyingstudio/BE-Summer-Camp-2018" target="_blank" rel="noopener">后端组的培训</a>了。本来培训应该是大二的学弟做的,但是他们有事,也是临时通知我的。</p><p>八月主要就是学习和面试。学习主要是看书,写代码,看Coursera,还有思考。面试的话,因为自己的策略以及其他因素,在简历投递和面试阶段犯了一些错误,所以还是比较曲折的,也浪费了一些机会。但最终还是在八月的尾巴拿到两个offer。其中一个offer我很满意。因为现在才九月份刚开始,后面还有很多面试,还没最终决定去哪儿,就先不写公司名字。</p><p><strong> 说到面试,这里就提下电话视频面试和现场面试吧。以前我是更喜欢电话视频面试,这样可以少折腾很多,坐车还是蛮累的。经过八月的一些面试,发现现场面试也有其好处。<span class="under0">面试是一个双向考察的过程,作为应聘者除了被考察,在现场面试可以我们更好的了解观察这家公司,也能更好的考察面试官们和将来工作所在的团队。</span></strong></p><p>假期还有一部分的时间和精力用在了减肥上面,这件事是从五月末从百度辞职完就开始做的。我主要是通过keep来进行记录,一共跑了两百多公里,然后还有1000多分钟的健身时间。最终体重少了二十斤,体脂率也减了好几个点。</p><p><img src="/img/杂文/The-last-summer-vocation/1.jpeg" alt="1.png"></p><hr><h3 id="《富爸爸与穷爸爸》"><a href="#《富爸爸与穷爸爸》" class="headerlink" title=" 《富爸爸与穷爸爸》 "></a><strong> 《富爸爸与穷爸爸》 </strong></h3><p>B哥以前推荐了一本书《富爸爸与穷爸爸》,下载很久很久了,今天看完了。书里有这样一段话:</p><p><strong> 遗憾的是有一些古老的说法仍然颇有道理,像“你无法教会一匹老马新的技巧”,除非一个人习惯于变化,否则改变自我是十分困难的。<br>但是,为了你们中间那些对于“工作是为了学习新东西”的观点持游移不定态度的人,我还想说出一句话作为鼓励:<span class="under0">生活就像我去健身房,最痛苦的事情是作出去锻炼的决定,一旦你过了这一关,以后的事情就好办了。有很多次,我害怕去健身房,但是只要我去了,我心里就会感到非常愉快。做完了健身练习后我总是非常高兴地对自己说:做运动真好!</span> </strong></p><p>暑假锻炼的时候,也在宿舍说过类似的话,锻炼最累的就是锻炼前,锻炼完真的很爽。</p><hr><h3 id="专业"><a href="#专业" class="headerlink" title=" 专业 "></a><strong> 专业 </strong></h3><p><strong> 高中的时候,我最想念的专业是生物和文学相关的,填志愿的时候想着,学计算机今后工作可以坐着吹吹空调动动手指就好了,于是所有的志愿全部填了计算机,。</strong>大一的时候保持着较高的阅读量,大二开始,主要阅读的书籍就是技术类的书籍,但其实还是读了很多课外书,可很多都没有做笔记记录,所以忘得比较干净。以后阅读还是尽量写博客画画脑图做下整理。</p><hr><h3 id="音乐"><a href="#音乐" class="headerlink" title=" 音乐 "></a><strong> 音乐 </strong></h3><p>暑假还有很大部分时间就是用来听歌,过去这大半年主要听的就是杰伦和金鑫(最近鑫天王写歌写得听力严重下降了…),其他听得比较多的就是南拳妈妈,SHE,潘玮柏。</p><p><strong><span class="under0">我写代码的时候喜欢听歌,所以听歌的时间很长。</span></strong></p><hr><p>最近这几个月,不少时间用来学习机器学习,深度学习了,扩展了我的技能树。<strong>学习新东西让我感到很舒服,不管是技术上的还是非技术上的。</strong></p><p><strong><span class="under0"> 转眼20岁也只剩下几个月了,希望在今后的日子里可以做出有意思的产品。</span></strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一天中时针和分针完全重合的时间点</title>
      <link href="/2018/08/18/find-the-point-hour-hand-and-minute-hand-completely-coincide-in-a-day/"/>
      <url>/2018/08/18/find-the-point-hour-hand-and-minute-hand-completely-coincide-in-a-day/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>写一个程序，找出一天中时针和分针完全重合的时间点</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 系统ubuntu16</span></span><br><span class="line"><span class="comment">// 开发工具Clion</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="comment">// 时针的速度 360度 / (12 * 60)分 = 0.5度/分</span></span><br><span class="line">    <span class="comment">// 分针的速度 360度/ 60分 = 6度/分</span></span><br><span class="line">    <span class="comment">// 且分针跑得比时针块</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// 0.5 * 60 = 30</span></span><br><span class="line">    <span class="keyword">int</span> catch_distance_by_one_hour = <span class="number">30</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> hour = <span class="number">0</span>; hour &lt; <span class="number">11</span>; hour++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> minute = (hour * catch_distance_by_one_hour) / (<span class="number">6</span><span class="number">-0.5</span>) + <span class="number">0.5</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; hour &lt;&lt; <span class="string">":"</span> &lt;&lt; minute &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt; hour + <span class="number">12</span> &lt;&lt; <span class="string">":"</span> &lt;&lt; minute &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">// 程序打印结果为</span></span><br><span class="line">    <span class="comment">// 0:0</span></span><br><span class="line">    <span class="comment">// 12:0</span></span><br><span class="line">    <span class="comment">// 1:5</span></span><br><span class="line">    <span class="comment">// 13:5</span></span><br><span class="line">    <span class="comment">// 2:11</span></span><br><span class="line">    <span class="comment">// 14:11</span></span><br><span class="line">    <span class="comment">// 3:16</span></span><br><span class="line">    <span class="comment">// 15:16</span></span><br><span class="line">    <span class="comment">// 4:22</span></span><br><span class="line">    <span class="comment">// 16:22</span></span><br><span class="line">    <span class="comment">// 5:27</span></span><br><span class="line">    <span class="comment">// 17:27</span></span><br><span class="line">    <span class="comment">// 6:33</span></span><br><span class="line">    <span class="comment">// 18:33</span></span><br><span class="line">    <span class="comment">// 7:38</span></span><br><span class="line">    <span class="comment">// 19:38</span></span><br><span class="line">    <span class="comment">// 8:44</span></span><br><span class="line">    <span class="comment">// 20:44</span></span><br><span class="line">    <span class="comment">// 9:49</span></span><br><span class="line">    <span class="comment">// 21:49</span></span><br><span class="line">    <span class="comment">// 10:55</span></span><br><span class="line">    <span class="comment">// 22:55</span></span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 水题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Tensorflow最佳实践之MNIST</title>
      <link href="/2018/08/18/Best-practice-of-tensorflow-in-minst/"/>
      <url>/2018/08/18/Best-practice-of-tensorflow-in-minst/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是用tensorflow实现全连接神经网络来解决MNIST问题的记录。</p><p>总共有三个文件,分别是<code>mnist_inference.ipynb</code>(定义了前向传播的过程以及神经网络中的参数),<code>mnist_train.ipynb</code>(定义了神经网络的训练过程),<code>mnist_eval.ipynb</code>(定义了测试过程)</p><hr><h4 id="mnist-inference"><a href="#mnist-inference" class="headerlink" title=" mnist_inference "></a><strong> mnist_inference </strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络结构相关的参数</span></span><br><span class="line">INPUT_NODE = <span class="number">784</span></span><br><span class="line">OUTPUT_NODE = <span class="number">10</span></span><br><span class="line">LAYER1_NODE = <span class="number">500</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过get_variable函数来获取变量。在训练神经网络时,会创建这些变量;</span></span><br><span class="line"><span class="comment"># 在通过测试时会通过保存的模型加载这些变量的取值。而且更加方便的是,因为可以在</span></span><br><span class="line"><span class="comment"># 变量加载时将滑动平均变量重命名,所以可以直接通过同样的名字在训练时使用变量自身,而</span></span><br><span class="line"><span class="comment"># 在测试时使用变量的滑动平均值。在这个函数中也会将变量的正则化损失加入损失集合</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_weight_variable</span><span class="params">(shape, regularizer)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">''</span>, reuse=tf.AUTO_REUSE):</span><br><span class="line">        weights = tf.get_variable(</span><br><span class="line">        <span class="string">"weights"</span>, shape,</span><br><span class="line">        initializer = tf.truncated_normal_initializer(stddev = <span class="number">0.1</span>))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># 当给出了正则化生成函数时,将当前变量的正则化损失加入名字为losses的集合。</span></span><br><span class="line">        <span class="comment"># 在这里使用了add_to_collection函数将一个张量加入一个集合,而这个集合的名称为losses,</span></span><br><span class="line">        <span class="comment"># 这是自定义的集合, 不在tensorflow自动管理的集合列表中</span></span><br><span class="line">        <span class="keyword">if</span> regularizer != <span class="literal">None</span>:</span><br><span class="line">            tf.add_to_collection(<span class="string">'losses'</span>, regularizer(weights))</span><br><span class="line">        <span class="keyword">return</span> weights</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line"><span class="comment"># 定义神经网络的前向传播过程</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">inference</span><span class="params">(input_tensor, regularizer)</span>:</span></span><br><span class="line">    <span class="comment"># 声明第一层神经网络的变量并完成前向传播过程</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'layer1'</span>, reuse=tf.AUTO_REUSE):</span><br><span class="line">        weights = get_weight_variable(</span><br><span class="line">            [INPUT_NODE, LAYER1_NODE], regularizer)</span><br><span class="line">        </span><br><span class="line">        biases = tf.get_variable(</span><br><span class="line">            <span class="string">'biases'</span>, [LAYER1_NODE],</span><br><span class="line">            initializer = tf.constant_initializer(<span class="number">0.0</span>))</span><br><span class="line">        </span><br><span class="line">        layer1 = tf.nn.relu(tf.matmul(input_tensor, weights) + biases)</span><br><span class="line">        </span><br><span class="line">    <span class="comment"># 声明第二层神经网络的变量并完成前向传播过程    </span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">'layer2'</span>, reuse=tf.AUTO_REUSE):</span><br><span class="line">        weights = get_weight_variable(</span><br><span class="line">            [LAYER1_NODE, OUTPUT_NODE], regularizer)</span><br><span class="line">        </span><br><span class="line">        biases = tf.get_variable(</span><br><span class="line">            <span class="string">"biases"</span>, [OUTPUT_NODE],</span><br><span class="line">            initializer = tf.constant_initializer(<span class="number">0.0</span>))</span><br><span class="line">        </span><br><span class="line">        layer2 = tf.matmul(layer1, weights) + biases</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 返回最终的前向传播过程</span></span><br><span class="line">    <span class="keyword">return</span> layer2</span><br></pre></td></tr></table></figure><hr><h4 id="mnist-train"><a href="#mnist-train" class="headerlink" title=" mnist_train "></a><strong> mnist_train </strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ipynb_importer</span><br><span class="line"><span class="keyword">import</span> os</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span>  input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载mnist_inference中定义的常量和前向传播函数</span></span><br><span class="line"><span class="keyword">import</span> mnist_inference</span><br><span class="line"></span><br><span class="line"><span class="comment"># 配置神经网络的参数</span></span><br><span class="line">BATCH_SIZE = <span class="number">100</span></span><br><span class="line">LEARNING_RATE_BASE = <span class="number">0.8</span></span><br><span class="line">LEARNING_RATE_DECAY = <span class="number">0.99</span></span><br><span class="line">REGULARAZTION_RATE = <span class="number">0.0001</span></span><br><span class="line">TRAINING_STEPS = <span class="number">30000</span></span><br><span class="line">MOVING_AVERAGE_DECAY = <span class="number">0.99</span></span><br><span class="line"><span class="comment"># 模型保存的路径和文件名</span></span><br><span class="line">MODEL_SAVE_PATH = <span class="string">"/home/sail/hacker/dl/model"</span></span><br><span class="line">MODEL_NAME = <span class="string">"sail.ckpt"</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">train</span><span class="params">(mnist)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">''</span>, reuse=tf.AUTO_REUSE):</span><br><span class="line">        <span class="comment"># 定义输入输出placeholder</span></span><br><span class="line">        x = tf.placeholder(</span><br><span class="line">            tf.float32, [<span class="literal">None</span>, mnist_inference.INPUT_NODE], name=<span class="string">"x-input"</span>)</span><br><span class="line">        y_ = tf.placeholder(</span><br><span class="line">            tf.float32, [<span class="literal">None</span>, mnist_inference.OUTPUT_NODE], name=<span class="string">"y-input"</span>)</span><br><span class="line"></span><br><span class="line">        regularizer = tf.contrib.layers.l2_regularizer(REGULARAZTION_RATE)</span><br><span class="line">        <span class="comment">#　直接使用mnist_inference中定义的前向传播过程</span></span><br><span class="line">        y = mnist_inference.inference(x, regularizer)</span><br><span class="line">        global_step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line">        variable_averages = tf.train.ExponentialMovingAverage(</span><br><span class="line">            MOVING_AVERAGE_DECAY, global_step)</span><br><span class="line"></span><br><span class="line">        variable_averages_op = variable_averages.apply(</span><br><span class="line">            tf.trainable_variables())</span><br><span class="line"></span><br><span class="line">        cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(</span><br><span class="line">            labels = tf.argmax(y_, <span class="number">1</span>), logits =y )</span><br><span class="line">    <span class="comment">#     cross_entropy = tf.nn.sparse_softmax_cross_entropy_with_logits(</span></span><br><span class="line">    <span class="comment">#         labels = y, logits = tf.argmax(y_, 1))</span></span><br><span class="line"></span><br><span class="line">        cross_entropy_mean = tf.reduce_mean(cross_entropy)</span><br><span class="line">        loss = cross_entropy_mean + tf.add_n(tf.get_collection(<span class="string">'losses'</span>))</span><br><span class="line">        learning_rate = tf.train.exponential_decay(</span><br><span class="line">            LEARNING_RATE_BASE,</span><br><span class="line">            global_step,</span><br><span class="line">            mnist.train.num_examples / BATCH_SIZE,</span><br><span class="line">            LEARNING_RATE_DECAY)</span><br><span class="line"></span><br><span class="line">        train_step = tf.train.GradientDescentOptimizer(learning_rate).minimize(loss, global_step=global_step)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">with</span> tf.control_dependencies([train_step, variable_averages_op]):</span><br><span class="line">            train_op = tf.no_op(name=<span class="string">'train'</span>)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># 初始化TensorFlow持久类</span></span><br><span class="line">        saver = tf.train.Saver()</span><br><span class="line">        <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">            tf.initialize_all_variables().run()</span><br><span class="line"></span><br><span class="line">            <span class="comment"># 在训练过程中不再测试模型在验证数据上的表现,验证和测试的过程将会有一个独立的程序来完成</span></span><br><span class="line">            <span class="keyword">for</span> i <span class="keyword">in</span> range(TRAINING_STEPS):</span><br><span class="line">                xs, ys = mnist.train.next_batch(BATCH_SIZE)</span><br><span class="line">                _, loss_value, step = sess.run([train_op, loss, global_step], feed_dict=&#123;x: xs, y_:ys&#125;)</span><br><span class="line"></span><br><span class="line">                <span class="comment">#　每1000轮保存一次模型</span></span><br><span class="line">                <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">                    <span class="comment"># 输出当前的训练情况。这里只输出了模型在当前训练batch上的损失函数大小。</span></span><br><span class="line">                    <span class="comment"># 通过损失函数的大小可以大概了解训练的情况。在验证数据集上的正确率信息会有一个单独的程序来生成</span></span><br><span class="line">                    print(<span class="string">"after %d training step(s), loss on training batch is %g "</span> % (step, loss_value))</span><br><span class="line"></span><br><span class="line">                    <span class="comment"># 保存当前的模型。注意这里给出了global_step参数,　这样可以让每个被保存模型的文件名末尾加上训练轮数,比如</span></span><br><span class="line">                    <span class="comment"># "sail.ckpt-1000"表示训练1000轮之后得到的模型</span></span><br><span class="line">                    saver.save(sess, os.path.join(MODEL_SAVE_PATH, MODEL_NAME), global_step=global_step)    </span><br><span class="line"></span><br><span class="line">                </span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></span><br><span class="line">    mnist = input_data.read_data_sets(<span class="string">"/home/sail/hacker/dl/tensorflow/book-one/MNISTData"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">    train(mnist)</span><br><span class="line">    </span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure><hr><h4 id="mnist-eval"><a href="#mnist-eval" class="headerlink" title=" mnist_eval "></a><strong> mnist_eval </strong></h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Ipynb_importer</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> tensorflow.examples.tutorials.mnist <span class="keyword">import</span> input_data</span><br><span class="line"></span><br><span class="line"><span class="comment"># 加载mnist_inference 和 mnist_train.py中定义的常量和函数</span></span><br><span class="line"><span class="keyword">import</span> mnist_inference</span><br><span class="line"><span class="keyword">import</span> mnist_train</span><br><span class="line"></span><br><span class="line"><span class="comment"># 每10秒加载一次模型，并在测试数据集上测试最新的模型正确率</span></span><br><span class="line">EVAL_INTERVAL_SECS = <span class="number">10</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">evaluate</span><span class="params">(mnist)</span>:</span></span><br><span class="line">    <span class="keyword">with</span> tf.Graph().as_default() <span class="keyword">as</span> g:</span><br><span class="line">        <span class="comment"># 定义输入输出的格式</span></span><br><span class="line">        x = tf.placeholder(</span><br><span class="line">            tf.float32, [<span class="literal">None</span>, mnist_inference.INPUT_NODE], name=<span class="string">"x-input"</span>)</span><br><span class="line">        y_ = tf.placeholder(</span><br><span class="line">            tf.float32, [<span class="literal">None</span>, mnist_inference.OUTPUT_NODE], name=<span class="string">"y-input"</span>)</span><br><span class="line">        </span><br><span class="line">        validate_feed = &#123;x: mnist.validation.images,</span><br><span class="line">                        y_: mnist.validation.labels&#125;</span><br><span class="line">        </span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 直接通过调用封装好的函数来计算前向传播结果。因为测试时不关注正则化损失的值</span></span><br><span class="line">        <span class="comment"># 所以这里用于计算正则化损失的函数被设置为None</span></span><br><span class="line">        y = mnist_inference.inference(x, <span class="literal">None</span>)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 使用前向传播结果计算正确率。如果需要对未知的样例进行分类,那么使用tf.argmax(y, 1)就可以得到输入样例的预测类别了</span></span><br><span class="line">        correct_prediction = tf.equal(tf.argmax(y, <span class="number">1</span>), tf.argmax(y_, <span class="number">1</span>))</span><br><span class="line">        accuracy = tf.reduce_mean(tf.cast(correct_prediction, tf.float32))</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 通过变量重命名的方式来加载模型,这样在前向传播的过程中就不需要调用求滑动平均的函数来获取平均值了。这样就可以完全</span></span><br><span class="line">        <span class="comment"># 共用mnist_inference中定义的前向传播过程</span></span><br><span class="line">        variable_averages = tf.train.ExponentialMovingAverage(</span><br><span class="line">            mnist_train.MOVING_AVERAGE_DECAY)</span><br><span class="line">        variables_to_restore = variable_averages.variables_to_restore()</span><br><span class="line">        saver = tf.train.Saver(variables_to_restore)</span><br><span class="line">        </span><br><span class="line">        <span class="comment">#每隔EVAL_INTERVAL_SECS秒调用一次计算正确率的过程以检测训练过程中正确率的变化</span></span><br><span class="line">        <span class="keyword">while</span> <span class="literal">True</span>:</span><br><span class="line">            <span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">                <span class="comment"># tf.train.get_checkpoint_state函数通过checkpoint文件自动找到目录中最新模型的文件名</span></span><br><span class="line">                ckpt = tf.train.get_checkpoint_state(</span><br><span class="line">                    mnist_train.MODEL_SAVE_PATH)</span><br><span class="line">                <span class="keyword">if</span> ckpt <span class="keyword">and</span> ckpt.model_checkpoint_path:</span><br><span class="line">                    <span class="comment"># 加载模型</span></span><br><span class="line">                    saver.restore(sess, ckpt.model_checkpoint_path)</span><br><span class="line">                    <span class="comment"># 通过文件名得到模型保存时迭代的轮数</span></span><br><span class="line">                    global_step = ckpt.model_checkpoint_path.split(<span class="string">'/'</span>)[<span class="number">-1</span>].split(<span class="string">'-'</span>)[<span class="number">-1</span>]</span><br><span class="line">                    accuracy_score = sess.run(accuracy, feed_dict=validate_feed)</span><br><span class="line">                    print(<span class="string">"after %s training step(s), validation accuracy = %g "</span> % (global_step, accuracy_score))</span><br><span class="line">                <span class="keyword">else</span>:</span><br><span class="line">                    print(<span class="string">'No checkpoint file found'</span>)</span><br><span class="line">                    <span class="keyword">return</span></span><br><span class="line">                time.sleep(EVAL_INTERVAL_SECS)</span><br><span class="line">                </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">main</span><span class="params">(argv=None)</span>:</span></span><br><span class="line">    mnist = input_data.read_data_sets(<span class="string">"/home/sail/hacker/dl/tensorflow/book-one/MNISTData"</span>, one_hot=<span class="literal">True</span>)</span><br><span class="line">    evaluate(mnist)</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    tf.app.run()</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> MNIST </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>滑动平均模型(tensorflow)</title>
      <link href="/2018/08/14/MovingAverage-in-TensorFlow/"/>
      <url>/2018/08/14/MovingAverage-in-TensorFlow/</url>
      
        <content type="html"><![CDATA[<p>在时间序列分析中，移动平均模型（简记为：MA模型）是一个常见的对单一变量时间序列进行建模的方法。</p><p>移动平均法是用一组最近的实际数据值来预测未来一期或几期内公司产品的需求量、公司产能等的一种常用方法。移动平均法适用于即期预测。当产品需求既不快速增长也不快速下降，且不存在季节性因素时，移动平均法能有效地消除预测中的随机波动，是非常有用的。移动平均法根据预测时使用的各元素的权重不同</p><p><strong> 移动平均法是一种简单平滑预测技术，它的基本思想是：根据时间序列资料、逐项推移，依次计算包含一定项数的序时平均值，以反映长期趋势的方法。因此，当时间序列的数值由于受周期变动和随机波动的影响，起伏较大，不易显示出事件的发展趋势时，使用移动平均法可以消除这些因素的影响，显示出事件的发展方向与趋势（即趋势线），然后依趋势线分析预测序列的长期趋势。</strong></p><hr><h3 id="移动平均法的优缺点"><a href="#移动平均法的优缺点" class="headerlink" title=" 移动平均法的优缺点 "></a><strong> 移动平均法的优缺点 </strong></h3><p>使用移动平均法进行预测能平滑掉需求的突然波动对预测结果的影响。但移动平均法运用时也存在着如下问题：<br>1、加大移动平均法的期数（即加大n值）会使平滑波动效果更好，但会使预测值对数据实际变动更不敏感；<br>2、移动平均值并不能总是很好地反映出趋势。由于是平均值，预测值总是停留在过去的水平上而无法预计会导致将来更高或更低的波动；<br>3、移动平均法要由大量的过去数据的记录。</p><hr><h3 id="MA-IN-TF"><a href="#MA-IN-TF" class="headerlink" title=" MA-IN-TF "></a><strong> MA-IN-TF </strong></h3><p>在tensorflow中提供了<code>tf.train.ExponentialMovingAverage</code>来实现滑动平均模型。在初始化<code>ExponentialMovingAverage</code>时,需要提供一个衰减率(decay)。这个衰减率将用于控制模型更新速度。<code>ExponentialMovingAverage</code>对每一个变量会维护一个影子变量(shadow variable),这个影子变量的初始值就是相应变量的初始值,而每次运行变量更新时,影子变量的值会更新为</p><p>$ shadow_variable = decay \times shadow_variable + (1 - decay) * variable$</p><p>其中<code>shadow_variable</code>为影子变量,variable为待更新的变量,decay为衰减率。从公式可以看出,decay决定了模型的更新速度,decay越大模型越稳定。在实际运用中,decay一般会设成非常接近1的数(比如0.999或0.9999)。为了使模型在训练前期可以更新得更快,<code>ExponentialMovingAverage</code>还提供了<code>num_updates</code>参数来动态设置decay的大小。如果在<code>ExponentialMovingAverage</code>初始化时提供了<code>num_updates</code>参数,那么每次使用的衰减率将是:</p><p>min{$decay, \frac{1 + num_updates}{10 + num_updates}$}</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个变量用于计算滑动平均,初始值为0。</span></span><br><span class="line">v1 = tf.Variable(<span class="number">0</span>, dtype=tf.float32)</span><br><span class="line"><span class="comment"># step变量模拟神经网络中迭代的轮数, 可以用于动态控制衰减率</span></span><br><span class="line">step = tf.Variable(<span class="number">0</span>, trainable=<span class="literal">False</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义一个滑动平均的类(class),初始化时给定了衰减率(0.99)和控制衰减率的变量step</span></span><br><span class="line">ema = tf.train.ExponentialMovingAverage(<span class="number">0.99</span>, step)</span><br><span class="line"><span class="comment"># 定义一个更新变量的滑动平均操作。这里需要给定一个列表,每次执行这个操作时,这个列表中的变量都会被更新</span></span><br><span class="line">maintain_averages_op = ema.apply([v1])</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line"><span class="comment">#     init_op = tf.initialize_all_variables()</span></span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 通过ema.average(v1)获取滑动平均之后的变量取值。在初始化之后变量v1的值和v1的滑动平均都为0</span></span><br><span class="line">    print(sess.run([v1, ema.average(v1)]))</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 更新v1的值为5</span></span><br><span class="line">    sess.run(tf.assign(v1, <span class="number">5</span>))</span><br><span class="line">    <span class="comment">#更新v1的滑动平均值。衰减率为min&#123;0.99, (1+step)/(10+step) = 0.1&#125; = 0.1</span></span><br><span class="line">    sess.run(maintain_averages_op)</span><br><span class="line">    print(sess.run([v1, ema.average(v1)]))</span><br><span class="line">    </span><br><span class="line">    sess.run(tf.assign(step, <span class="number">10000</span>))</span><br><span class="line">    sess.run(tf.assign(v1, <span class="number">10</span>))</span><br><span class="line">    sess.run(maintain_averages_op)</span><br><span class="line">    print(sess.run([v1, ema.average(v1)]))</span><br><span class="line">    </span><br><span class="line">    sess.run(maintain_averages_op)</span><br><span class="line">    print(sess.run([v1, ema.average(v1)]))</span><br><span class="line">    </span><br><span class="line">    </span><br><span class="line">==========================</span><br><span class="line">[<span class="number">0.0</span>, <span class="number">0.0</span>]</span><br><span class="line">[<span class="number">5.0</span>, <span class="number">4.5</span>]</span><br><span class="line">[<span class="number">10.0</span>, <span class="number">4.555</span>]</span><br><span class="line">[<span class="number">10.0</span>, <span class="number">4.60945</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zh.wikipedia.org/wiki/%E7%A7%BB%E5%8A%A8%E5%B9%B3%E5%9D%87%E6%A8%A1%E5%9E%8B" target="_blank" rel="noopener">移动平均模型</a><br><a href="https://blog.csdn.net/qq_39521554/article/details/79028012" target="_blank" rel="noopener">滑动平均法、滑动平均模型法（Moving average，MA）</a><br><a href="https://zh.wikipedia.org/wiki/%E6%99%82%E9%96%93%E5%BA%8F%E5%88%97" target="_blank" rel="noopener">时间序列</a><br><a href="https://blog.csdn.net/huanhuan_coder/article/details/79325071" target="_blank" rel="noopener">markdown编辑数学公式</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> (MA)移动平均模型 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ipynb(Jupyter)文件引入另一个ipynb文件</title>
      <link href="/2018/08/14/ipynb-import-another-ipynb-file/"/>
      <url>/2018/08/14/ipynb-import-another-ipynb-file/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在jupyter中开发时,直接import另外一个<code>xxx.ipynb</code>文件是会报错的</p><p><code>ImportError: No module named &#39;mnist_inference&#39;</code></p><hr><h3 id="解决办法"><a href="#解决办法" class="headerlink" title=" 解决办法 "></a><strong> 解决办法 </strong></h3><p>添加一个<code>jupyter notebook</code>解析文件</p><p><code>Ipynb_importer.py</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> io, os,sys,types</span><br><span class="line"><span class="keyword">from</span> IPython <span class="keyword">import</span> get_ipython</span><br><span class="line"><span class="keyword">from</span> nbformat <span class="keyword">import</span> read</span><br><span class="line"><span class="keyword">from</span> IPython.core.interactiveshell <span class="keyword">import</span> InteractiveShell</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotebookFinder</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Module finder that locates Jupyter Notebooks"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self)</span>:</span></span><br><span class="line">        self.loaders = &#123;&#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">find_module</span><span class="params">(self, fullname, path=None)</span>:</span></span><br><span class="line">        nb_path = find_notebook(fullname, path)</span><br><span class="line">        <span class="keyword">if</span> <span class="keyword">not</span> nb_path:</span><br><span class="line">            <span class="keyword">return</span></span><br><span class="line"></span><br><span class="line">        key = path</span><br><span class="line">        <span class="keyword">if</span> path:</span><br><span class="line">            <span class="comment"># lists aren't hashable</span></span><br><span class="line">            key = os.path.sep.join(path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> key <span class="keyword">not</span> <span class="keyword">in</span> self.loaders:</span><br><span class="line">            self.loaders[key] = NotebookLoader(path)</span><br><span class="line">        <span class="keyword">return</span> self.loaders[key]</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">find_notebook</span><span class="params">(fullname, path=None)</span>:</span></span><br><span class="line">    <span class="string">"""find a notebook, given its fully qualified name and an optional path</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    This turns "foo.bar" into "foo/bar.ipynb"</span></span><br><span class="line"><span class="string">    and tries turning "Foo_Bar" into "Foo Bar" if Foo_Bar</span></span><br><span class="line"><span class="string">    does not exist.</span></span><br><span class="line"><span class="string">    """</span></span><br><span class="line">    name = fullname.rsplit(<span class="string">'.'</span>, <span class="number">1</span>)[<span class="number">-1</span>]</span><br><span class="line">    <span class="keyword">if</span> <span class="keyword">not</span> path:</span><br><span class="line">        path = [<span class="string">''</span>]</span><br><span class="line">    <span class="keyword">for</span> d <span class="keyword">in</span> path:</span><br><span class="line">        nb_path = os.path.join(d, name + <span class="string">".ipynb"</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(nb_path):</span><br><span class="line">            <span class="keyword">return</span> nb_path</span><br><span class="line">        <span class="comment"># let import Notebook_Name find "Notebook Name.ipynb"</span></span><br><span class="line">        nb_path = nb_path.replace(<span class="string">"_"</span>, <span class="string">" "</span>)</span><br><span class="line">        <span class="keyword">if</span> os.path.isfile(nb_path):</span><br><span class="line">            <span class="keyword">return</span> nb_path</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">NotebookLoader</span><span class="params">(object)</span>:</span></span><br><span class="line">    <span class="string">"""Module Loader for Jupyter Notebooks"""</span></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">__init__</span><span class="params">(self, path=None)</span>:</span></span><br><span class="line">        self.shell = InteractiveShell.instance()</span><br><span class="line">        self.path = path</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">def</span> <span class="title">load_module</span><span class="params">(self, fullname)</span>:</span></span><br><span class="line">        <span class="string">"""import a notebook as a module"""</span></span><br><span class="line">        path = find_notebook(fullname, self.path)</span><br><span class="line"></span><br><span class="line">        <span class="keyword">print</span> (<span class="string">"importing Jupyter notebook from %s"</span> % path)</span><br><span class="line"></span><br><span class="line">        <span class="comment"># load the notebook object</span></span><br><span class="line">        <span class="keyword">with</span> io.open(path, <span class="string">'r'</span>, encoding=<span class="string">'utf-8'</span>) <span class="keyword">as</span> f:</span><br><span class="line">            nb = read(f, <span class="number">4</span>)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment"># create the module and add it to sys.modules</span></span><br><span class="line">        <span class="comment"># if name in sys.modules:</span></span><br><span class="line">        <span class="comment">#    return sys.modules[name]</span></span><br><span class="line">        mod = types.ModuleType(fullname)</span><br><span class="line">        mod.__file__ = path</span><br><span class="line">        mod.__loader__ = self</span><br><span class="line">        mod.__dict__[<span class="string">'get_ipython'</span>] = get_ipython</span><br><span class="line">        sys.modules[fullname] = mod</span><br><span class="line"></span><br><span class="line">        <span class="comment"># extra work to ensure that magics that would affect the user_ns</span></span><br><span class="line">        <span class="comment"># actually affect the notebook module's ns</span></span><br><span class="line">        save_user_ns = self.shell.user_ns</span><br><span class="line">        self.shell.user_ns = mod.__dict__</span><br><span class="line"></span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">          <span class="keyword">for</span> cell <span class="keyword">in</span> nb.cells:</span><br><span class="line">            <span class="keyword">if</span> cell.cell_type == <span class="string">'code'</span>:</span><br><span class="line">                <span class="comment"># transform the input to executable Python</span></span><br><span class="line">                code = self.shell.input_transformer_manager.transform_cell(cell.source)</span><br><span class="line">                <span class="comment"># run the code in themodule</span></span><br><span class="line">                exec(code, mod.__dict__)</span><br><span class="line">        <span class="keyword">finally</span>:</span><br><span class="line">            self.shell.user_ns = save_user_ns</span><br><span class="line">        <span class="keyword">return</span> mod</span><br><span class="line">sys.meta_path.append(NotebookFinder())</span><br></pre></td></tr></table></figure><p>再需要引入其他ipynb文件的文件中引入上面的解析文件<code>Ipynb_importer.py</code>即可</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://jupyter-notebook.readthedocs.io/en/latest/examples/Notebook/Importing%20Notebooks.html" target="_blank" rel="noopener">Importing Jupyter Notebooks as Modules</a><br><a href="https://blog.csdn.net/wangjian1204/article/details/67633614" target="_blank" rel="noopener">调用jupyter notebook文件内的函数一种简单方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》第二章(KNN)记录</title>
      <link href="/2018/08/11/the-record-for-the-chapter-tow-of-ml-in-action/"/>
      <url>/2018/08/11/the-record-for-the-chapter-tow-of-ml-in-action/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对《机器学习实战》第二章KNN的一些记录.<br>完整代码以及数据集见<a href="https://github.com/iamsail/machine-learning-in-action" target="_blank" rel="noopener">github</a></p><hr><h3 id="图片整理"><a href="#图片整理" class="headerlink" title=" 图片整理 "></a><strong> 图片整理 </strong></h3><p><img src="/img/机器学习/the-record-for-the-chapter-tow-of-ml-in-action/1.png" alt="1.png"><br><img src="/img/机器学习/the-record-for-the-chapter-tow-of-ml-in-action/2.png" alt="2.png"><br><img src="/img/机器学习/the-record-for-the-chapter-tow-of-ml-in-action/3.png" alt="3.png"></p><hr><h3 id="核心代码"><a href="#核心代码" class="headerlink" title=" 核心代码 "></a><strong> 核心代码 </strong></h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">classify0</span><span class="params">(inX, dataSet, labels, k)</span>:</span></span><br><span class="line">    dataSetsize = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 计算距离</span></span><br><span class="line">    diffMat = tile(inX, (dataSetsize, <span class="number">1</span>)) - dataSet</span><br><span class="line">    sqDiffMat = diffMat**<span class="number">2</span></span><br><span class="line">    sqDistances = sqDiffMat.sum(axis=<span class="number">1</span>)</span><br><span class="line">    distances = sqDistances**<span class="number">0.5</span></span><br><span class="line">    </span><br><span class="line">    sortedDistIndicies = distances.argsort()</span><br><span class="line">    classCount = &#123;&#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 选取距离最近的k个点</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(k):</span><br><span class="line">        voteIlabel = labels[sortedDistIndicies[i]]</span><br><span class="line">        classCount[voteIlabel] = classCount.get(voteIlabel, <span class="number">0</span>) + <span class="number">1</span></span><br><span class="line">    sortedClassCount = sorted(classCount.items(),</span><br><span class="line">                               key = operator.itemgetter(<span class="number">1</span>), reverse=<span class="literal">True</span>)</span><br><span class="line">    <span class="keyword">return</span> sortedClassCount[<span class="number">0</span>][<span class="number">0</span>]</span><br></pre></td></tr></table></figure><p>计算向量xA和xB之间的距离</p><p>$d = \sqrt[2]{(xA_0 - xB_0)^2 + (xA_1 - xB_1)^2} $</p><hr><h3 id="归一化"><a href="#归一化" class="headerlink" title=" 归一化 "></a><strong> 归一化 </strong></h3><p>在处理不同取值范围的特征值,我们通常采用的方法是将数值归一化,如将取值范围处理为0到1或者-1到1之间。这章书上用到的是如下公式</p><p>$newValue = (oldValue - min) / (max - min)$</p><p>其中<code>min</code>和<code>max</code>分别是数据集中的最小特征值和最大特征值,参考代码如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">autoNorm</span><span class="params">(dataSet)</span>:</span></span><br><span class="line">    minVals = dataSet.min(<span class="number">0</span>)</span><br><span class="line">    maxVals = dataSet.max(<span class="number">0</span>)</span><br><span class="line">    ranges = maxVals - minVals</span><br><span class="line">    normDataSet = zeros(shape(dataSet))</span><br><span class="line">    m = dataSet.shape[<span class="number">0</span>]</span><br><span class="line">    normDataSet = dataSet - tile(minVals, (m, <span class="number">1</span>))</span><br><span class="line">    normDataSet = normDataSet / tile(ranges, (m, <span class="number">1</span>))</span><br><span class="line">    <span class="keyword">return</span> normDataSet, ranges, minVals</span><br></pre></td></tr></table></figure><p>这面这个方法叫做极差变化法。归一化可以提升模型的收敛速度和精度,更多可以看以下链接</p><p><a href="https://blog.csdn.net/pipisorry/article/details/52247379" target="_blank" rel="noopener">数据标准化/归一化normalization</a><br><a href="https://blog.csdn.net/UESTC_C2_403/article/details/75804617" target="_blank" rel="noopener">机器学习中常见的几种归一化方法以及原因</a><br><a href="https://blog.csdn.net/pipisorry/article/details/61193868" target="_blank" rel="noopener">数据预处理：独热编码（One-Hot Encoding）</a></p><hr><p><img src="/img/机器学习/the-record-for-the-chapter-tow-of-ml-in-action/4.png" alt="4.png"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/ksearch/article/details/21388985" target="_blank" rel="noopener">python系列】numpy中的tile函数</a><br><a href="http://www.sail.name/2018/05/31/use-mathjax-in-hexo/">在hexo使用mathjax</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 机器学习实战 </tag>
            
            <tag> KNN </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最近公共祖先</title>
      <link href="/2018/08/08/least-common-ancestors/"/>
      <url>/2018/08/08/least-common-ancestors/</url>
      
        <content type="html"><![CDATA[<p>待更新</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.cppblog.com/menjitianya/archive/2015/12/10/212447.html" target="_blank" rel="noopener">夜深人静写算法（六） - 最近公共祖先</a><br><a href="https://github.com/julycoding/The-Art-Of-Programming-By-July/blob/master/ebook/zh/03.03.md" target="_blank" rel="noopener">最近公共祖先LCA问题</a><br><a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E5%85%83%E6%90%9C%E5%B0%8B%E6%A8%B9" target="_blank" rel="noopener">二叉搜索树</a><br><a href="https://legacy.gitbook.com/book/wizardforcel/the-art-of-programming-by-july/details" target="_blank" rel="noopener">《编程之法：面试和算法心得》</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>剑指offer-Partition</title>
      <link href="/2018/08/07/partition-in-Coding-Interviews/"/>
      <url>/2018/08/07/partition-in-Coding-Interviews/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>《剑指offer》一书中的<code>Partition</code>函数在好些题目中都有出现,思路也是我以前没见过的,记录下。</p><hr><h3 id="Partition"><a href="#Partition" class="headerlink" title=" Partition "></a><strong> Partition </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> || length &lt;= <span class="number">0</span> || start &lt; <span class="number">0</span> || end &gt;= length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"invalid parameters"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = RandomInRange(start, end);</span><br><span class="line">    swap(data[index], data[end]);</span><br><span class="line">    <span class="keyword">int</span> small = start - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (index = start; index &lt; end; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[index] &lt; data[end]) &#123;</span><br><span class="line">            small++;</span><br><span class="line">            <span class="keyword">if</span> (small != index) &#123;</span><br><span class="line">                swap(data[index], data[small]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    small++;</span><br><span class="line">    swap(data[small], data[end]);</span><br><span class="line">    <span class="keyword">return</span> small;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>Partition</code>函数,所做的工作就是选择一个数字(记为x),将数组分为两部分,比x小的移到数组左边,大的移到右边。这里的x,对应small索引指向的元素,也叫做基准数。</p><hr><p>以前我写过一篇快速排序的文章<a href="http://www.sail.name/2017/11/30/quick-sort/">快速排序</a>,利用<code>partition</code>又有了新的code</p><h3 id="快速排序"><a href="#快速排序" class="headerlink" title=" 快速排序 "></a><strong> 快速排序 </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;exception&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">RandomInRange</span><span class="params">(<span class="keyword">int</span> start, <span class="keyword">int</span> end)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (end &gt; start)</span><br><span class="line">    &#123;</span><br><span class="line">        srand(time(<span class="literal">NULL</span>));</span><br><span class="line">        <span class="keyword">return</span> start + rand() % (end - start);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> start;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">Partition</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (data == <span class="literal">NULL</span> || length &lt;= <span class="number">0</span> || start &lt; <span class="number">0</span> || end &gt;= length) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="string">"invalid parameters"</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = RandomInRange(start, end);</span><br><span class="line">    swap(data[index], data[end]);</span><br><span class="line">    <span class="keyword">int</span> small = start - <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">for</span> (index = start; index &lt; end; index++) &#123;</span><br><span class="line">        <span class="keyword">if</span> (data[index] &lt; data[end]) &#123;</span><br><span class="line">            small++;</span><br><span class="line">            <span class="keyword">if</span> (small != index) &#123;</span><br><span class="line">                swap(data[index], data[small]);</span><br><span class="line"></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    small++;</span><br><span class="line">    swap(data[small], data[end]);</span><br><span class="line">    <span class="keyword">return</span> small;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> data[], <span class="keyword">int</span> length, <span class="keyword">int</span> start, <span class="keyword">int</span> end)</span> </span>&#123;</span><br><span class="line">    <span class="keyword">if</span> (start == end) &#123;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">int</span> index = Partition(data, length, start, end);</span><br><span class="line">    <span class="keyword">if</span> (index &gt; start) &#123;</span><br><span class="line">        quickSort(data, length, start, index <span class="number">-1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (index &lt; end) &#123;</span><br><span class="line">        quickSort(data, length, index+<span class="number">1</span>, end);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> test[] = &#123;<span class="number">9</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">5</span>, <span class="number">99</span>, <span class="number">1</span>&#125;;</span><br><span class="line">    <span class="keyword">int</span> len = <span class="keyword">sizeof</span>(test) / <span class="keyword">sizeof</span>(*test);</span><br><span class="line">    quickSort(test, len, <span class="number">0</span>, len<span class="number">-1</span>);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;test[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++随机数</title>
      <link href="/2018/08/07/random-number-of-C++/"/>
      <url>/2018/08/07/random-number-of-C++/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对C++中随机数的学习记录</p><hr><p>计算机的随机数都是由伪随机数，即是由小M多项式序列生成的，其中产生每个小序列都有一个初始值，即随机种子。（注意： 小M多项式序列的周期是65535，即每次利用一个随机种子生成的随机数的周期是65535，当你取得65535个随机数后它们又重复出现了。）</p><h3 id="低于C-11"><a href="#低于C-11" class="headerlink" title=" 低于C++11 "></a><strong> 低于C++11 </strong></h3><p>C语言/C++怎样产生随机数：这里要用到的是<code>rand()</code>函数, <code>srand()</code>函数，C语言/C++里没有自带的<code>random(int number)</code>函数。 </p><h4 id="rand"><a href="#rand" class="headerlink" title=" rand() "></a><strong> rand() </strong></h4><p>功能:随机数发生器</p><blockquote><p>用法:int rand(void)<br>所在头文件: stdlib.h<br>rand()的内部实现是用线性同余法做的，它不是真的随机数，因其周期特别长，故在一定的范围里可看成是随机的。<br>rand()返回一随机数值的范围在0至RAND_MAX 间。RAND_MAX的范围最少是在32767之间(int)。用unsigned int 双字节是65535，四字节是4294967295的整数范围。0~RAND_MAX每个数字被选中的机率是相同的。<br>用户未设定随机数种子时，系统默认的随机数种子为1。<br>rand()产生的是伪随机数字，每次执行时是相同的;若要不同,用函数srand()初始化它。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;rand()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="number">1804289383</span></span><br><span class="line"><span class="number">846930886</span></span><br><span class="line"><span class="number">1681692777</span></span><br><span class="line"><span class="number">1714636915</span></span><br><span class="line"><span class="number">1957747793</span></span><br><span class="line"><span class="number">424238335</span></span><br><span class="line"><span class="number">719885386</span></span><br><span class="line"><span class="number">1649760492</span></span><br><span class="line"><span class="number">596516649</span></span><br><span class="line"><span class="number">1189641421</span></span><br></pre></td></tr></table></figure><p>如果要随机生成一个在一定范围的数<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand()% (20 - 10))) + 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;random(<span class="number">10</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">产生一定范围随机数的通用表示公式 </span><br><span class="line">要取得[a,b)的随机整数，使用(rand() % (b-a))+ a; </span><br><span class="line">要取得[a,b]的随机整数，使用(rand() % (b-a+<span class="number">1</span>))+ a; </span><br><span class="line">要取得(a,b]的随机整数，使用(rand() % (b-a))+ a + <span class="number">1</span>; </span><br><span class="line">通用公式:a + rand() % n；其中的a是起始值，n是整数的范围。 </span><br><span class="line">要取得a到b之间的随机整数，另一种表示：a + (<span class="keyword">int</span>)b * rand() / (RAND_MAX + <span class="number">1</span>)。 </span><br><span class="line">要取得<span class="number">0</span>～<span class="number">1</span>之间的浮点数，可以使用rand() / <span class="keyword">double</span>(RAND_MAX)。</span><br></pre></td></tr></table></figure></p><h4 id="srand"><a href="#srand" class="headerlink" title=" srand() "></a><strong> srand() </strong></h4><p>功能:初始化随机数发生器</p><blockquote><p>用法: void srand(unsigned int seed)<br>所在头文件: stdlib.h<br>srand()用来设置rand()产生随机数时的随机数种子。参数seed必须是个整数，如果每次seed都设相同值，rand()所产生的随机数值每次就会一样。</p></blockquote><blockquote><p>rand()产生的随机数在每次运行的时候都是与上一次相同的。若要不同,用函数srand()初始化它。可以利用srand((unsigned int)(time(NULL))的方法，产生不同的随机数种子，因为每一次运行程序的时间是不同的。<br>1)给srand()提供一个种子，它是一个unsigned int类型；<br>2)调用rand()，它会根据提供给srand()的种子值返回一个随机数(在0到RAND_MAX之间)；<br>3)根据需要多次调用rand()，从而不间断地得到新的随机数；<br>4)无论什么时候，都可以给srand()提供一个新的种子，从而进一步“随机化”rand()的输出结果。</p></blockquote><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> random(x) ((rand()% (20 - 10))) + 10</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"></span><br><span class="line">    srand((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>));</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i &lt; <span class="number">10</span>;i++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;random(<span class="number">10</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="C-11"><a href="#C-11" class="headerlink" title=" C++11 "></a><strong> C++11 </strong></h3><p>前面提到的<code>rand</code>和<code>srand</code>使用起来还是比较麻烦的,C++11 中提供的 random 库解决了这一问题，它能让我们方便地生成需要的随机值.</p><h4 id="random库"><a href="#random库" class="headerlink" title=" random库 "></a><strong> random库 </strong></h4><p>随机数引擎类是可以独立运行的随机数发生器，它以均匀的概率生成某一类型的随机数，但无法指定随机数的范围、概率等信息。因此，它也被称为“原始随机数发生器”，由于不能指定生成随机数的范围，它通常不会被单独使用。</p><p>随机数分布类是一个需要于随机数引擎类的支持才能运行的类，但是它能根据用户的需求利用随机数引擎生成符合条件的随机数，例如某一区间、某一分布概率的随机数。</p><p>所有随机数引擎类都支持的操作如下：</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>Engine e</td><td>创建一个引擎。</td></tr><tr><td>Engine e(s)</td><td>创建一个引擎，并用 s 作为种子。</td></tr><tr><td>e.seed(s)</td><td>使用种子 s 充值 e 的状态。</td></tr><tr><td>e.min( ), e.max( )</td><td>e 能生成的最小值和最大值。</td></tr><tr><td>e.discard(u)</td><td>将 e 推进 u 步（u 的类型为 unsigned long long）</td></tr></tbody></table><p>下表随机数分布类共有的操作：</p><table><thead><tr><th>名称</th><th>功能</th></tr></thead><tbody><tr><td>U u</td><td>创建一个分布类 u</td></tr><tr><td>u(e)</td><td>用随机数引擎 e 生成随机数（u 代表随机数分布类）</td></tr><tr><td>u.min( )</td><td>u 能生成的最小值</td></tr><tr><td>u.max( )</td><td>u 能生成的最大值</td></tr><tr><td>u.reset( )</td><td>重置 u 的状态，使随后 u 生成的值不受之前的值影响</td></tr></tbody></table><hr><h4 id="随机非负数——default-random-engine"><a href="#随机非负数——default-random-engine" class="headerlink" title=" 随机非负数——default_random_engine "></a><strong> 随机非负数——default_random_engine </strong></h4><p><code>default_random_engine</code>是一个随机数引擎类。它定义的调用运算符返回一个随机的<code>unsigned</code>类型的值。</p><p>因此，若想生成 10 个随机非负数并输出，程序可以这么写：</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="function">default_random_engine <span class="title">e</span><span class="params">()</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;e( )&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>default_random_engine</code>也只是一个伪随机数发生器，如果在运行一次程序，得到结果将还是这几个数。若想令每次运行程序时的生成结果不同，可以为其设置较为随机的种子，比如当前系统的时间。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">( )</span></span>&#123;</span><br><span class="line">    <span class="function">default_random_engine <span class="title">e</span><span class="params">((<span class="keyword">unsigned</span>)time(<span class="literal">NULL</span>))</span></span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>; i&lt;<span class="number">10</span>; ++i)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;e( )&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="特定范围的非负数——uniform-int-distribution"><a href="#特定范围的非负数——uniform-int-distribution" class="headerlink" title=" 特定范围的非负数——uniform_int_distribution "></a><strong> 特定范围的非负数——uniform_int_distribution </strong></h4><p><code>uniform_int_distribution</code>是一个随机数分布类，也是个模板类，模板参数为生成随机数的类型（不过只能是 <code>int、unsigned、short、unsigned short、long、unsigned long、long long、unsigned long long</code> 中的一种）。它的构造函数接受两个值，表示随机数的分布范围（闭区间）。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;random&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    <span class="built_in">std</span>::random_device rd;  <span class="comment">// 将用于为随机数引擎获得种子</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::mt19937 <span class="title">gen</span><span class="params">(rd())</span></span>; <span class="comment">// 以播种标准 mersenne_twister_engine</span></span><br><span class="line">    <span class="function"><span class="built_in">std</span>::uniform_int_distribution&lt;&gt; <span class="title">dis</span><span class="params">(<span class="number">1</span>, <span class="number">6</span>)</span></span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> n=<span class="number">0</span>; n&lt;<span class="number">10</span>; ++n)</span><br><span class="line">        <span class="comment">// 用 dis 变换 gen 所生成的随机 unsigned int 到 [1, 6] 中的 int</span></span><br><span class="line">        <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; dis(gen) &lt;&lt; <span class="string">' '</span>;</span><br><span class="line">    <span class="built_in">std</span>::<span class="built_in">cout</span> &lt;&lt; <span class="string">'\n'</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>更多c++11中的用法看下面的参考链接吧</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zh.cppreference.com/w/cpp/numeric/random/uniform_int_distribution" target="_blank" rel="noopener">std::uniform_int_distribution</a><br><a href="https://blog.csdn.net/luotuo44/article/details/33690179" target="_blank" rel="noopener">C++11 随机数学习</a><br><a href="https://www.jianshu.com/p/05863a00af8d" target="_blank" rel="noopener">【C++11】随机值获取——random</a><br><a href="https://www.cnblogs.com/growup/archive/2011/06/05/2073301.html" target="_blank" rel="noopener">C++ 随机数</a><br><a href="https://www.cnblogs.com/afarmer/archive/2011/05/01/2033715.html" target="_blank" rel="noopener">C/C++中产生随机数(rand,srand用法)</a><br><a href="http://www.voidcn.com/article/p-euckgqfp-hc.html" target="_blank" rel="noopener">剑指offer里面提到的Partition函数</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>jupyter使用总结</title>
      <link href="/2018/08/05/the-summary-of-use-jupyter/"/>
      <url>/2018/08/05/the-summary-of-use-jupyter/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>本文是对jupyter的使用总结,随着使用的深入,陆续更新在本文。</p><hr><h3 id="插件"><a href="#插件" class="headerlink" title=" 插件 "></a><strong> 插件 </strong></h3><p>jupyter是支持插件的,不过我在自己电脑上折腾了很久却没有弄成功,<code>zsh: command not found: jupyter</code>.</p><p>以后解决了再说</p><hr><h3 id="快捷键"><a href="#快捷键" class="headerlink" title=" 快捷键 "></a><strong> 快捷键 </strong></h3><p><img src="/img/python/the-summary-of-use-jupyter/1.png" alt="1.png"><br><img src="/img/python/the-summary-of-use-jupyter/2.png" alt="2.png"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/feilong_csdn/article/details/80186276" target="_blank" rel="noopener">windows上jupyter notebook主题背景、字体及扩展插件配置(集成vim环境)</a><br><a href="https://zhuanlan.zhihu.com/p/33105153" target="_blank" rel="noopener">Jupyter Notebook介绍、安装及使用教程</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>完整神经网络程序(tensorflow)</title>
      <link href="/2018/07/24/a-full-neural-network-demo/"/>
      <url>/2018/07/24/a-full-neural-network-demo/</url>
      
        <content type="html"><![CDATA[<p>本文是通过tensorflow实现的一个在模拟数据集上训练神经网络,解决二分类问题</p><hr><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> tensorflow <span class="keyword">as</span> tf</span><br><span class="line"><span class="keyword">from</span> numpy.random <span class="keyword">import</span> RandomState</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义训练数据batch的大小</span></span><br><span class="line">batch_size = <span class="number">8</span></span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络的参数</span></span><br><span class="line">w1 = tf.Variable(tf.random_normal([<span class="number">2</span>, <span class="number">3</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line">w2 = tf.Variable(tf.random_normal([<span class="number">3</span>, <span class="number">1</span>], stddev = <span class="number">1</span>, seed = <span class="number">1</span>))</span><br><span class="line"></span><br><span class="line"><span class="comment"># 在shape的一个维度上使用None可以方便使用不同的batch大小</span></span><br><span class="line"><span class="comment"># 在训练时需要把数据分成比较小的batch,但是在测试时,可以一次性使用全部的数据。当数据集比较小的时,这样方便测试,但数据集比较大时，将大量数据</span></span><br><span class="line"><span class="comment"># 放入一个batch可能会导致内存溢出</span></span><br><span class="line">x = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">2</span>), name=<span class="string">'x-input'</span>)</span><br><span class="line">y_ = tf.placeholder(tf.float32, shape=(<span class="literal">None</span>, <span class="number">1</span>), name=<span class="string">'y-input'</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义神经网络前向传播过程</span></span><br><span class="line">a = tf.matmul(x, w1)</span><br><span class="line">y = tf.matmul(a, w2)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义损失函数和反向传播算法</span></span><br><span class="line">cross_entropy = -tf.reduce_mean(y_ * tf.log(tf.clip_by_value(y, <span class="number">1e-10</span>, <span class="number">1.0</span>)))</span><br><span class="line">train_step = tf.train.AdamOptimizer(<span class="number">0.001</span>).minimize(cross_entropy)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 通过随机数生成一个模拟数据集</span></span><br><span class="line">rdm = RandomState(<span class="number">1</span>)</span><br><span class="line">dataset_size = <span class="number">128</span></span><br><span class="line"></span><br><span class="line">X = rdm.rand(dataset_size, <span class="number">2</span>)</span><br><span class="line"></span><br><span class="line"><span class="comment"># 定义规则给出样本的标签</span></span><br><span class="line">Y = [[int(x1 + x2 &lt; <span class="number">1</span>)] <span class="keyword">for</span> (x1, x2) <span class="keyword">in</span> X]</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session() <span class="keyword">as</span> sess:</span><br><span class="line">    init_op = tf.global_variables_initializer()</span><br><span class="line">    <span class="comment">#　初始化变量</span></span><br><span class="line">    sess.run(init_op)</span><br><span class="line">    <span class="comment"># print(sess.run(w1)) </span></span><br><span class="line">    <span class="comment"># print(sess.run(w2)) </span></span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    在训练之前神经网络参数值</span></span><br><span class="line"><span class="string">    w1= [[-0.8113182   1.4845988   0.06532937]</span></span><br><span class="line"><span class="string">         [-2.4427042   0.0992484   0.5912243 ]]</span></span><br><span class="line"><span class="string"></span></span><br><span class="line"><span class="string">    w2 = [[-0.8113182 ]</span></span><br><span class="line"><span class="string">         [ 1.4845988 ]</span></span><br><span class="line"><span class="string">         [ 0.06532937]]</span></span><br><span class="line"><span class="string">    '''</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment"># 设定训练轮数</span></span><br><span class="line">    STEPS = <span class="number">5000</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(STEPS):</span><br><span class="line">        <span class="comment"># 每次选取batch_size个样本进行训练</span></span><br><span class="line">        start = (i * batch_size) % dataset_size</span><br><span class="line">        end = min(start + batch_size, dataset_size)</span><br><span class="line">        </span><br><span class="line">        <span class="comment"># 通过选取的样本训练神经网络并更新参数</span></span><br><span class="line">        sess.run(train_step,</span><br><span class="line">                 feed_dict = &#123;x: X[start:end], y_: Y[start:end]&#125;)</span><br><span class="line">        <span class="keyword">if</span> i % <span class="number">1000</span> == <span class="number">0</span>:</span><br><span class="line">            <span class="comment">#　每隔一段时间计算在所有数据上的交叉熵并输出</span></span><br><span class="line">            total_cross_entropy = sess.run(cross_entropy,feed_dict = &#123;x: X, y_: Y&#125;)</span><br><span class="line">            print(<span class="string">"After %d training step(s),cross entropy on all data is %g"</span> % (i, total_cross_entropy))</span><br><span class="line">            <span class="string">'''</span></span><br><span class="line"><span class="string">            输出结果</span></span><br><span class="line"><span class="string">            After 0 training step(s),cross entropy on all data is 0.0674925</span></span><br><span class="line"><span class="string">            After 1000 training step(s),cross entropy on all data is 0.0163385</span></span><br><span class="line"><span class="string">            After 2000 training step(s),cross entropy on all data is 0.00907547</span></span><br><span class="line"><span class="string">            After 3000 training step(s),cross entropy on all data is 0.00714436</span></span><br><span class="line"><span class="string">            After 4000 training step(s),cross entropy on all data is 0.00578471</span></span><br><span class="line"><span class="string">            </span></span><br><span class="line"><span class="string">            交叉熵逐渐变小,说明预测的结果和真实的结果差距越小</span></span><br><span class="line"><span class="string">            '''</span></span><br><span class="line">   </span><br><span class="line">    print(sess.run(w1))</span><br><span class="line">    print(sess.run(w2))</span><br><span class="line">    <span class="string">'''</span></span><br><span class="line"><span class="string">    训练之后的神经网络参数值</span></span><br><span class="line"><span class="string">    w1 = [[-1.9618274  2.582354   1.6820377]</span></span><br><span class="line"><span class="string">         [-3.4681718  1.0698233  2.11789  ]]</span></span><br><span class="line"><span class="string">    w2 = [[-1.8247149]</span></span><br><span class="line"><span class="string">         [ 2.6854665]</span></span><br><span class="line"><span class="string">         [ 1.418195 ]]</span></span><br><span class="line"><span class="string">    '''</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.broadview.com.cn/book/111" target="_blank" rel="noopener">《TensorFlow实战Google深度学习框架》</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
            <tag> Neural Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>TypeError __init__() got an unexpected keyword argument &#39;shape&#39;</title>
      <link href="/2018/07/24/TypeError-init-got-an-unexpected-keyword-argument-shape/"/>
      <url>/2018/07/24/TypeError-init-got-an-unexpected-keyword-argument-shape/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>在实践《TensorFlow实战Google深度学习框架》一书中的代码时,遇到了一点问题,做下记录</p><hr><p>3.1.2计算图的使用　部分</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">g1 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g1.as_default():</span><br><span class="line">    v = tf.get_variable(<span class="string">"v"</span>, initializer=tf.zeros_initializer(shape=[<span class="number">1</span>]))</span><br><span class="line">    </span><br><span class="line">g2 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g2.as_default():</span><br><span class="line">    v = tf.get_variable(<span class="string">"v"</span>, initializer=tf.ones_initializer(shape=[<span class="number">1</span>])) </span><br><span class="line">    </span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g1) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g2) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br></pre></td></tr></table></figure><p><code>TypeError: __init__() got an unexpected keyword argument &#39;shape&#39;</code></p><p>这里出现这个错误是因为<code>tensorflow</code>版本不一致,书上的是旧版本(0.9.0),而我电脑上安装的是1.8.0</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">tf.__version__</span><br><span class="line">&apos;1.8.0&apos;</span><br></pre></td></tr></table></figure><p>修改为如下代码<br><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">g1 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g1.as_default():</span><br><span class="line">     v = tf.get_variable(<span class="string">"v"</span>, initializer=tf.zeros_initializer()(shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">g2 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g2.as_default():</span><br><span class="line">     v = tf.get_variable(<span class="string">"v"</span>, initializer=tf.zeros_initializer()(shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g1) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g2) <span class="keyword">as</span> sess:</span><br><span class="line">    tf.initialize_all_variables().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br></pre></td></tr></table></figure></p><p>这里抛出了一个警告</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">WARNING:tensorflow:From /usr/local/lib/python3.5/dist-packages/tensorflow/python/util/tf_should_use.py:118: initialize_all_variables (from tensorflow.python.ops.variables) is deprecated and will be removed after 2017-03-02.</span><br><span class="line">Instructions for updating:</span><br><span class="line">Use `tf.global_variables_initializer` instead.</span><br></pre></td></tr></table></figure><p>替换掉<code>initialize_all_variables</code>即可</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">g1 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g1.as_default():</span><br><span class="line">     v = tf.get_variable(<span class="string">"v"</span>, initializer=tf.zeros_initializer()(shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line">g2 = tf.Graph()</span><br><span class="line"><span class="keyword">with</span> g2.as_default():</span><br><span class="line">     v = tf.get_variable(<span class="string">"v"</span>, initializer=tf.zeros_initializer()(shape=[<span class="number">1</span>]))</span><br><span class="line"></span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g1) <span class="keyword">as</span> sess:</span><br><span class="line">tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br><span class="line">        </span><br><span class="line"><span class="keyword">with</span> tf.Session(graph = g2) <span class="keyword">as</span> sess:</span><br><span class="line">tf.global_variables_initializer().run()</span><br><span class="line">    <span class="keyword">with</span> tf.variable_scope(<span class="string">""</span>, reuse = <span class="literal">True</span>):</span><br><span class="line">        print(sess.run(tf.get_variable(<span class="string">"v"</span>)))</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.broadview.com.cn/book/111" target="_blank" rel="noopener">《TensorFlow实战Google深度学习框架》</a><br><a href="https://blog.csdn.net/Cloudox_/article/details/78004656" target="_blank" rel="noopener">终端命令查看TensorFlow版本号及路径</a><br><a href="https://blog.csdn.net/Li_haiyu/article/details/78474831" target="_blank" rel="noopener">TypeError: <strong>init</strong>() got an unexpected keyword argument ‘shape’</a></p>]]></content>
      
      
      <categories>
          
          <category> 深度学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> TensorFlow </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hadoop2.6搭建集群(伪分布式)</title>
      <link href="/2018/07/12/build-cluster-by-hadoop/"/>
      <url>/2018/07/12/build-cluster-by-hadoop/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>一直想学学hadoop,不过因为比较忙,一直没开起头。刚好昨天去图书馆还书了,在书架看到了《Hadoop大数据实战权威指南》,就借了下来。也初步搭建了一个集群,后面可以进一步的学习,本文做些记录。</p><p>本文不是详细的记录安装细节,主要是为了以后若再次搭建,可以更快些。所以你只看我这篇文章,是比较难搭出来的,具体细节推荐看书或者文档。</p><p><img src="/img/大数据/build-cluster-by-hadoop/1.jpeg" alt="书展示"></p><hr><h3 id="我的系统环境"><a href="#我的系统环境" class="headerlink" title=" 我的系统环境 "></a><strong> 我的系统环境 </strong></h3><p>这本书中介绍的搭建环境是在windows下通过安装linux(centos)虚拟机搭建集群。因为我的开发系统就是<code>Ubuntu16.04</code>,所以我就是在<code>Ubuntu</code>下搭建的虚拟机(依旧是Ubuntu16),搭的集群。</p><p>说来好笑,一开始还在担心是不是linux也是可以安装虚拟机。其实linux也是可以安装虚拟机,比如VMware,VirtualBox。我选用的是VMware14。直接去<a href="https://www.vmware.com/" target="_blank" rel="noopener">官网</a>下载安装就好了</p><p>怎么安装虚拟机什么的就不记录了。</p><hr><h3 id="虚拟机克隆安装"><a href="#虚拟机克隆安装" class="headerlink" title=" 虚拟机克隆安装 "></a><strong> 虚拟机克隆安装 </strong></h3><p>集群肯定是有多个机器的,对于hadoop,我们最少得有三个机器。如果重复装三次ubuntu肯定是很蠢的,我们安装好第一个(Ubuntu-One)后,就可以通过克隆安装。这里有两种方法</p><p>比如我有三个机器,这里我每个虚拟机分配的是4G内存,35</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Ubuntu-One</span><br><span class="line">Slave0</span><br><span class="line">Slave1</span><br></pre></td></tr></table></figure><h4 id="方法一"><a href="#方法一" class="headerlink" title=" 方法一 "></a><strong> 方法一 </strong></h4><p>在VMvare的目录下,复制对应系统的整个目录(Ubuntu-One),然后粘贴,将目录改个名Slave0。然后在VMvare的主页选择Slave0这个目录进行一系列操作就好了。</p><h4 id="方法二"><a href="#方法二" class="headerlink" title=" 方法二 "></a><strong> 方法二 </strong></h4><p>在VMvare主页界面,右键点击<code>Ubuntu-One</code>,管理-&gt;克隆(Manage-&gt;Clone),一系列操作即可。</p><hr><h3 id="集群配置"><a href="#集群配置" class="headerlink" title=" 集群配置 "></a><strong> 集群配置 </strong></h3><h4 id="修改主机名"><a href="#修改主机名" class="headerlink" title=" 修改主机名 "></a><strong> 修改主机名 </strong></h4><p><a href="https://blog.csdn.net/ruglcc/article/details/7802077" target="_blank" rel="noopener">ubuntu永久修改主机名</a></p><p>这里我三个机器分别命名为</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">master</span><br><span class="line">slave0</span><br><span class="line">slave1</span><br></pre></td></tr></table></figure><p>如果是centos系统，执行<code>gedit /etc/sysconfig/network</code><br>输入以下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">NETWORKING=yes</span><br><span class="line">HOSTNAME=master</span><br></pre></td></tr></table></figure></p><p>如果是ubuntu系统,执行<code>gedit /etc/hostname</code></p><p>输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">master</span><br></pre></td></tr></table></figure><p>master是用户自己取的主机名,可以根据需要任意命名。</p><p>修改完成后,保存文件。在终端执行<code>hostname master</code>,确认修改生效。关闭终端,再打开一个新的终端,执行<code>hostname</code>，进行确认是否生效。重复以上方法,修改另外两个虚拟机为<code>slave0</code>,<code>slave1</code>.</p><hr><h4 id="网络设置"><a href="#网络设置" class="headerlink" title=" 网络设置 "></a><strong> 网络设置 </strong></h4><p>在终端输入<code>ifconfig</code>命令,<code>inet</code>后面跟的数字就是IP地址。根据IP地址,可以虚拟机之间互相ping,有返回值则说明机器是连通的。</p><p>上面这个只是简单的采用了系统安装时配置的网络IP,实际上，上述地址一般都是DHCP类型的。由于我们目前网络里并没有DHCP服务器,因此,需要将动态主机IP地址修改为静态地址。在虚拟机的设置中找到网络设置,然后将网络状态的ON切换为OFF。注意,修改网络地址需要事先断掉网络连接。</p><p>然后选择IPV4,接着选择Manual,然后增加静态地址信息。这里,设置的地址是192.168.1.100，子网掩码是255.255.255.0，网关地址是192.168.1.1。slave0,1的地址分别是192.168.1.101,192.168.1.102.子网掩码和网关地址相同。</p><p>这样我们就完成了整个集群的网络配置。可以使用ping进行测试。然而,为了用计算机名进行网络访问，我们还需要修改hosts文件中的主机名和IP地址对照裂变。注意,需要在root用户下操作。<br><code>gedit /etc/hosts</code></p><p>然后输入如下代码<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">192.168.1.101 master</span><br><span class="line">192.168.1.102 slave0</span><br><span class="line">192.168.1.101 slave1</span><br></pre></td></tr></table></figure></p><p>以上操作需要在所有主机上进行。然后就可以用主机名代替IP地址了,比如<code>ping slave0</code></p><hr><h4 id="关闭防火墙"><a href="#关闭防火墙" class="headerlink" title=" 关闭防火墙 "></a><strong> 关闭防火墙 </strong></h4><p>大数据应用系统通常部署在linux集群上,一般属于内部网络平台,且计算机之间关系紧密,通信频繁,所以不需要开启防火墙。</p><p>如果是centos系统,防火墙相关操作如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前防火墙状态</span><br><span class="line">systemctl status firewalld.service</span><br><span class="line"></span><br><span class="line"># 关闭防火墙</span><br><span class="line">systemctl stop firewalld.service</span><br><span class="line"></span><br><span class="line"># 一般在关闭防火墙过后,还可以执行如下命令,该命令使防火墙在下次启动计算机时取消防火墙服务</span><br><span class="line">systemctl status firewalld.service</span><br></pre></td></tr></table></figure><p>如果是ubuntu系统,防火墙相关操作,看这篇文章<a href="https://www.cnblogs.com/OnlyDreams/p/7210914.html" target="_blank" rel="noopener">ubuntu 默认防火墙安装、启用、查看状态</a></p><hr><h4 id="安装JDK"><a href="#安装JDK" class="headerlink" title=" 安装JDK "></a><strong> 安装JDK </strong></h4><p>hadoop是基于JAVA环境的,所以必须安装JDK.这里我使用的是jdk-7u71-linux-x64.gz压缩包.</p><p>我们在<code>/usr</code>目录下创建java目录,即<code>/usr/java</code>.然后在该目录下进行解压</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">tar -zxvf jdk-7u71-linux-x64.gz</span><br></pre></td></tr></table></figure><p>接着开始配置环境变量,<code>gedit /home/sail/.profile</code>,新增代码如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># set PATH so it includes user&apos;s private bin directories</span><br><span class="line">PATH=&quot;$HOME/bin:$HOME/.local/bin:$PATH&quot;</span><br><span class="line"></span><br><span class="line"># 以下是新增的代码</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_71/</span><br><span class="line">export PATH=$JAVA_HOME/bin:$PATH</span><br></pre></td></tr></table></figure><p>这里的<code>/usr/java/jdk1.7.0_71/</code>就是java安装文件夹。接着执行<code>source .profile</code>使其生效,<code>java -version</code>进行检查。</p><p>这里罗嗦下,<code>source .profile</code>执行后,关闭终端后重新打开,检查版本就是找不到的,要重启计算机才生效。在ubuntu下还有个<code>.bashrc</code>文件，如果是修改这个文件而不是profile,应该不会这种情况。不过我没有测试过。如果是<code>centos</code>系统的话,则应该修改<code>~/.bash_profile</code>文件。</p><p>这里其他两个虚拟机也需要执行以上操作。当然如果是老司机,应该清楚,我们可以配置好一台机器,然后其他机器直接复制就可以了。</p><hr><h4 id="免密钥登录配置"><a href="#免密钥登录配置" class="headerlink" title=" 免密钥登录配置 "></a><strong> 免密钥登录配置 </strong></h4><p>免密钥登录是指两台linux机器之间ssh连接时不需要用户名和密码。下面的配置分为在master和所有slave节点操作。同时是以普通用户,非root进行操作的.</p><h5 id="Master节点的配置"><a href="#Master节点的配置" class="headerlink" title=" Master节点的配置 "></a><strong> Master节点的配置 </strong></h5><p>在终端<code>~/</code>目录下,执行命令<code>ssh-keygen -t rsa</code>,一路回车即可。</p><p><code>ssh-keygen</code>是用来生成private和public的密钥对,将public密钥拷贝到远程机器后,就可以使用ssh到另外一台机器不用密码了。<code>-t</code>是指定加密算法,这里是rsa。生成的密钥在.ssh目录下</p><p>接下来执行 <code>cat ~/.ssh/id_rsa.pub &gt;&gt; ~/.ssh/authorized_keys</code>，这是一个复制操作。复制过后是为了便于修改文件权限,接下来执行<code>chmod 600 ~/.ssh/authorized_keys</code>,然后将这个文件复制到所有的slave节点。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">scp ~/.ssh/authorized_keys sail@slave0:~/</span><br><span class="line"></span><br><span class="line">scp ~/.ssh/authorized_keys sail@slave1:~/</span><br></pre></td></tr></table></figure><p>然后输入yes,就完成了在master节点的配置</p><hr><h5 id="Slave节点的配置"><a href="#Slave节点的配置" class="headerlink" title=" Slave节点的配置 "></a><strong> Slave节点的配置 </strong></h5><p>在<code>~/</code>目录下执行<code>ssh-keygen -t rsa</code>,一路回车</p><p>接着将从master复制过来的authorized_keys复制到.ssh目录,<code>mv authorized_keys ~/.ssh</code></p><p>然后修改权限,<code>chmod 600 ~/.ssh/authorized_keys</code>。以上操作要在两个slave节点均做.至此,配置完毕。</p><p>在master执行<code>ssh slave0</code>，若登录成功，且不需要输入密码,即证明配置成功。<code>exit</code>,回到本地计算机。</p><hr><h3 id="Hadoop-HDFS安装与配置"><a href="#Hadoop-HDFS安装与配置" class="headerlink" title=" Hadoop HDFS安装与配置 "></a><strong> Hadoop HDFS安装与配置 </strong></h3><h4 id="解压"><a href="#解压" class="headerlink" title=" 解压 "></a><strong> 解压 </strong></h4><p>这里我用的是<code>hadoop-2.6.0.tar.gz</code>。先解压到用户目录,<code>tar -zxvf ~/hadoop-2.6.0.tar.gz</code></p><hr><h4 id="配置hadoop环境变量"><a href="#配置hadoop环境变量" class="headerlink" title=" 配置hadoop环境变量 "></a><strong> 配置hadoop环境变量 </strong></h4><p><code>gedit ~/hadoop-2.6.0/etc/hadoop/hadoop-env.sh</code>,修改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># The java implementation to use.</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_71/</span><br></pre></td></tr></table></figure><hr><h4 id="配置yarn环境变量"><a href="#配置yarn环境变量" class="headerlink" title=" 配置yarn环境变量 "></a><strong> 配置yarn环境变量 </strong></h4><p><code>gedit ~/hadoop-2.6.0/etc/hadoop/yarn-env.sh</code>,修改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"># some Java parameters</span><br><span class="line"># export JAVA_HOME=/home/y/libexec/jdk1.6.0/</span><br><span class="line">export JAVA_HOME=/usr/java/jdk1.7.0_71/</span><br></pre></td></tr></table></figure><hr><h4 id="配置核心组件文件"><a href="#配置核心组件文件" class="headerlink" title=" 配置核心组件文件 "></a><strong> 配置核心组件文件 </strong></h4><p><code>gedit ~/hadoop-2.6.0/etc/hadoop/core-site.xml</code>,修改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">     &lt;name&gt;fs.defaultFS&lt;/name&gt;</span><br><span class="line">     &lt;value&gt;hdfs://master:9000&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line"> &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;/home/sail/hadoopdata&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="配置文件系统"><a href="#配置文件系统" class="headerlink" title=" 配置文件系统 "></a><strong> 配置文件系统 </strong></h4><p><code>gedit ~/hadoop-2.6.0/etc/hadoop/hdfs-site.xml</code>,修改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line"> &lt;property&gt;</span><br><span class="line">    &lt;name&gt;dfs.replication&lt;/name&gt;</span><br><span class="line">&lt;value&gt;1&lt;/value&gt;</span><br><span class="line"> &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="yarn-site-xml"><a href="#yarn-site-xml" class="headerlink" title=" yarn-site.xml "></a><strong> yarn-site.xml </strong></h4><p><code>gedit ~/hadoop-2.6.0/etc/hadoop/yarn-site.xml</code>,修改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.nodemanager.aux-services&lt;/name&gt;</span><br><span class="line">&lt;value&gt;mapreduce_shuffle&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">&lt;name&gt;yarn.resourcemanager.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:18040&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.scheduler.address&lt;/name&gt;</span><br><span class="line">    &lt;value&gt;master:18030&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.resource-tracker.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:18025&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.admin.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:18141&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">&lt;property&gt;</span><br><span class="line">    &lt;name&gt;yarn.resourcemanager.webapp.address&lt;/name&gt;</span><br><span class="line">&lt;value&gt;master:18088&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br><span class="line">    &lt;!-- Site specific YARN configuration properties --&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="配置MapReduce-计算框架文件"><a href="#配置MapReduce-计算框架文件" class="headerlink" title=" 配置MapReduce 计算框架文件 "></a><strong> 配置MapReduce 计算框架文件 </strong></h4><p>先执行如下两行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">cd ~/hadoop-2.6.0/etc/hadoop/</span><br><span class="line">cp mapred-site.xml.template mapred-site.xml`</span><br></pre></td></tr></table></figure></p><p>然后,<code>gedit mapred-site.xml</code>。修改如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;configuration&gt;</span><br><span class="line">    &lt;property&gt;</span><br><span class="line">        &lt;name&gt;mapreduce.framework.name&lt;/name&gt;</span><br><span class="line">        &lt;value&gt;yarn&lt;/value&gt;</span><br><span class="line">    &lt;/property&gt;</span><br><span class="line">&lt;/configuration&gt;</span><br></pre></td></tr></table></figure><hr><h4 id="配置Master的slaves文件"><a href="#配置Master的slaves文件" class="headerlink" title=" 配置Master的slaves文件 "></a><strong> 配置Master的slaves文件 </strong></h4><p>slaves文件给出集群的slave节点。启动hadoop时,根据该文件启动集群,不在列表的slave节点不会被视为计算节点</p><p><code>gedit ~/hadoop-2.6.0/etc/hadoop/slaves</code>,修改为如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">slave0</span><br><span class="line">slave1</span><br></pre></td></tr></table></figure><hr><h4 id="复制Master上的hadoop到salve节点"><a href="#复制Master上的hadoop到salve节点" class="headerlink" title=" 复制Master上的hadoop到salve节点 "></a><strong> 复制Master上的hadoop到salve节点 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">scp -r /home/sail/hadoop-2.6.0 sail@slave0:~/</span><br><span class="line">scp -r /home/sail/hadoop-2.6.0 sail@slave1:~/</span><br></pre></td></tr></table></figure><p>至此,我们就完成了hadoop集群的安装与配置</p><hr><h3 id="Hadoop集群的启动"><a href="#Hadoop集群的启动" class="headerlink" title=" Hadoop集群的启动 "></a><strong> Hadoop集群的启动 </strong></h3><h4 id="配置操作系统环境变量"><a href="#配置操作系统环境变量" class="headerlink" title=" 配置操作系统环境变量 "></a><strong> 配置操作系统环境变量 </strong></h4><p>由于是在Linux集群上安装的hadoop集群,所以自然需要配置Linux系统平台的环境变量。注意,这里的配置需要在集群所有计算机上进行。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">vim .profifle</span><br><span class="line"></span><br><span class="line">#增加如下代码到文件尾部</span><br><span class="line">export HADOOP_HOME=/home/sail/hadoop-2.6.0</span><br><span class="line">export PATH=$HADOOP_HOME/bin:$HADOOP_HOME/sbin:$PATH</span><br></pre></td></tr></table></figure><p>执行<code>source .profile</code>,使上述配置生效。没有生效的话重启下计算机就能生效了。</p><hr><h4 id="创建hadoop数据目录"><a href="#创建hadoop数据目录" class="headerlink" title=" 创建hadoop数据目录 "></a><strong> 创建hadoop数据目录 </strong></h4><p>在用户目录下(~),创建数据目录,<code>mkdir /home/sail/hadoopdata</code></p><p>这里的数据目录名<code>hadoopdata</code>，与前面的hadoop核心组件<code>core-site.xml</code>中的配置<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;property&gt;</span><br><span class="line"> &lt;name&gt;hadoop.tmp.dir&lt;/name&gt;</span><br><span class="line"> &lt;value&gt;/home/sail/hadoopdata&lt;/value&gt;</span><br><span class="line">&lt;/property&gt;</span><br></pre></td></tr></table></figure></p><p>是一致的</p><hr><h4 id="格式化文件系统"><a href="#格式化文件系统" class="headerlink" title=" 格式化文件系统 "></a><strong> 格式化文件系统 </strong></h4><p>该操作只需要在master节点进行,在用户目录下(~)执行即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hdfs namenode -format</span><br></pre></td></tr></table></figure><hr><h4 id="启动和关闭hadoop"><a href="#启动和关闭hadoop" class="headerlink" title=" 启动和关闭hadoop "></a><strong> 启动和关闭hadoop </strong></h4><p>到此,就可以启动hadoop了,进入hadoop的安装目录,执行<code>sbin/start-all.sh</code>即可以启动。如果要关闭,则执行<code>stop-all.sh</code>命令即可</p><p><code>This script is Deprecated. Instead use start-dfs.sh and start-yarn.sh</code></p><p>会提示<code>start-all.sh</code>这个命令已经被抛弃了,推荐使用<code>start-dfs.sh</code>和<code>start-yarn.sh</code></p><hr><h4 id="验证hadoop是否启动成功"><a href="#验证hadoop是否启动成功" class="headerlink" title=" 验证hadoop是否启动成功 "></a><strong> 验证hadoop是否启动成功 </strong></h4><p>在master节点,执行<code>jps</code>命令,如果显示以下四个进程，则表示主节点(Master)启动成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3202 SecondaryNameNode</span><br><span class="line">3001 NameNode</span><br><span class="line">3344 ResourceManager</span><br><span class="line">3600 Jps</span><br></pre></td></tr></table></figure><p>在从节点(slavex),执行<code>jps</code>,若显示以下三个进程,则表示启动成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">2374 Jps</span><br><span class="line">2102 DataNode</span><br><span class="line">2237 NodeManager</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.topspeedsnail.com/archives/6649" target="_blank" rel="noopener">Ubuntu 16.04 安装 VMware Workstation(虚拟机)</a><br><a href="https://blog.csdn.net/qq_26954773/article/details/78128662" target="_blank" rel="noopener">VMware Workstation 14永久激活密钥</a><br><a href="https://www.cnblogs.com/oloroso/p/4612935.html" target="_blank" rel="noopener">linux下VMware安装出现的问题解决</a><br><a href="http://blog.topspeedsnail.com/archives/6650" target="_blank" rel="noopener">Ubuntu 16.04 安装 qBittorrent－BT下载</a><br><a href="https://askubuntu.com/questions/861023/how-do-you-get-bittorrent-on-ubuntu" target="_blank" rel="noopener">How do you get BitTorrent on Ubuntu?</a><br><a href="https://blog.csdn.net/ruglcc/article/details/7802077" target="_blank" rel="noopener">ubuntu永久修改主机名</a><br><a href="https://blog.csdn.net/whaoXYSH/article/details/17755555" target="_blank" rel="noopener">从VMware虚拟机安装到hadoop集群环境配置详细说明</a><br><a href="https://blog.csdn.net/Qiuzhongweiwei/article/details/80172270" target="_blank" rel="noopener">子网掩码,如255.255.255.0\24， 24代表什么?</a><br><a href="https://blog.csdn.net/Bleachswh/article/details/51334661" target="_blank" rel="noopener">Ubuntu16.04 配置环境变量的三种方法</a><br><a href="https://www.cnblogs.com/OnlyDreams/p/7210914.html" target="_blank" rel="noopener">ubuntu 默认防火墙安装、启用、查看状态</a><br><a href="https://blog.csdn.net/u010842515/article/details/52484404" target="_blank" rel="noopener">关于ssh: connect to host master port 22: Connection timed out问题的总结</a><br><a href="https://blog.csdn.net/s646575997/article/details/51227976" target="_blank" rel="noopener">ssh: connect to host slave2 port 22: Connection refused</a><br><a href="https://blog.csdn.net/u012146107/article/details/11766797" target="_blank" rel="noopener">ubuntu 环境变量 失效的解决办法</a><br><a href="https://blog.csdn.net/zdw_zoro/article/details/78052600" target="_blank" rel="noopener">Ubuntu修改环境变量关掉终端就没了，问题解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> 大数据 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hadoop </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子矩阵和</title>
      <link href="/2018/06/29/Maximum-submatrix-sum/"/>
      <url>/2018/06/29/Maximum-submatrix-sum/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>本文是对<a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1074" target="_blank" rel="noopener">最大子矩阵和</a>的记录。这题就是对<a href="http://www.sail.name/2017/12/01/maximum-subsegment/">最大子段和</a>的扩展。</p><p>从最大子段和的一维变成了二维数组的多维。我们要做的就是将二维转为1维,转化为更简单的最大子段和求解。</p><p>这里转化的思想就是对列值就行累加</p><p>比如<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1 2 -3 </span><br><span class="line">3 4 -5</span><br></pre></td></tr></table></figure></p><p>累计变成了<code>4 6 -8</code>就从两行变为了一行,利用最大子段和就能求解。　 </p><hr><h3 id="问题如下"><a href="#问题如下" class="headerlink" title=" 问题如下 "></a><strong> 问题如下 </strong></h3><p>有一个正整数和负整数组成的NxN矩阵，请编写代码找出元素总和最大的子矩阵。请尝试使用一个高效算法。</p><p>给定一个int矩阵mat和矩阵的阶数n，请返回元素总和最大的子矩阵的元素之和。保证元素绝对值小于等于100000，且矩阵阶数小于等于200。</p><p>测试样例：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1 2 -3 </span><br><span class="line">3 4 -5 </span><br><span class="line">-5 -6 -7 </span><br><span class="line"></span><br><span class="line">4</span><br><span class="line">0 -2 -7 0</span><br><span class="line">9 2 -6 2</span><br><span class="line">-4 1 -4 1</span><br><span class="line">-1 8 0 -2</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">10</span><br><span class="line">15</span><br></pre></td></tr></table></figure><hr><h4 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h4><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;string&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span>  MAX 1000</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[], <span class="keyword">int</span> n)</span> </span>&#123;</span><br><span class="line">   <span class="comment">// 这里就是求解最大子段和  </span></span><br><span class="line">   <span class="keyword">int</span> result = <span class="number">0</span>, b = <span class="number">0</span>;</span><br><span class="line">   <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">       <span class="keyword">if</span> (b &gt; <span class="number">0</span>) &#123;</span><br><span class="line">           b += a[i];</span><br><span class="line">       &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">           b = a[i];</span><br><span class="line">       &#125;</span><br><span class="line"></span><br><span class="line">       <span class="keyword">if</span> (b &gt; result) &#123;</span><br><span class="line">           result = b;</span><br><span class="line">       &#125;</span><br><span class="line">   &#125;</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="keyword">int</span> n;</span><br><span class="line">    <span class="keyword">while</span>(<span class="built_in">cin</span> &gt;&gt; n) &#123;</span><br><span class="line">        <span class="keyword">int</span> a[MAX][MAX];</span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">int</span> arr[MAX];</span><br><span class="line">        <span class="keyword">int</span> <span class="keyword">final</span> = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++) &#123;　<span class="comment">// 以第0,1,2...行为起始行开始叠加</span></span><br><span class="line">            <span class="built_in">memset</span>(arr, <span class="number">0</span>, <span class="keyword">sizeof</span>(arr));</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">int</span> j = i; j &lt; n; j++) &#123;</span><br><span class="line">                <span class="comment">// 增加行    </span></span><br><span class="line">                <span class="keyword">for</span> (<span class="keyword">int</span> k = <span class="number">0</span>; k &lt; n; k++) &#123;</span><br><span class="line">                    <span class="comment">//　对列值累加    </span></span><br><span class="line">                    arr[k] += a[j][k];</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">final</span> = max(sum(arr, n), <span class="keyword">final</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="keyword">final</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/GodA/p/5237061.html" target="_blank" rel="noopener">动态规划：最大子矩阵</a><br><a href="http://acm.zju.edu.cn/onlinejudge/showProblem.do?problemCode=1074" target="_blank" rel="noopener">To the Max</a><br><a href="http://www.sail.name/2017/12/01/maximum-subsegment/">最大子段和</a><br><a href="http://kubicode.me/2015/06/23/Algorithm/Max-Sum-in-SubMatrix/" target="_blank" rel="noopener">最大子矩阵和的问题</a><br><a href="https://www.nowcoder.com/questionTerminal/840eee05dccd4ffd8f9433ce8085946b" target="_blank" rel="noopener">[编程题]最大和子矩阵</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>不可描述</title>
      <link href="/2018/06/24/Scientific-Internet/"/>
      <url>/2018/06/24/Scientific-Internet/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">不能说的秘密</h3><div id="security"> <div class="orz-container"> <input style="display:none"> <input type="password" class="get-key" id="pass" autocomplete="new-password"  placeholder="解锁新知识" /> <div class="input-group-orz"> <button type="button" class="final-key" onclick="decryptAES()">O.O</button> </div> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> 不可描述 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim插件配置(ubuntu)</title>
      <link href="/2018/06/22/configure-plug-in-in-ubuntu/"/>
      <url>/2018/06/22/configure-plug-in-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是我配置<code>vim</code>插件的记录。操作系统是<code>ubuntu16.04</code></p><hr><h3 id="安装Vundle"><a href="#安装Vundle" class="headerlink" title=" 安装Vundle "></a><strong> 安装Vundle </strong></h3><p>Vundle是Vim的一个插件管理器，基于git，通过Vundle可以方便的安装github上的Vim插件。</p><p>首先需要确保vim的版本大于等于7.3:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; vim -v</span><br></pre></td></tr></table></figure><p>如果版本不满足,执行以下命令自动升级</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update </span><br><span class="line">sudo apt-get upgrade vim</span><br></pre></td></tr></table></figure><p>确认版本满足后开始安装</p><p>克隆项目到本地<br><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone https://github.com/VundleVim/Vundle.vim.git ~/.vim/bundle/Vundle.vim</span><br></pre></td></tr></table></figure></p><p>配置<code>vimrc</code>文件 </p><p><code>vim ~/.vimrc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible               &quot; be iMproved</span><br><span class="line">filetype off                   &quot; required!</span><br><span class="line">set rtp+=~/.vim/bundle/vundle/</span><br><span class="line">call vundle#rc()</span><br><span class="line">&quot; let Vundle manage Vundle</span><br><span class="line">&quot; required! </span><br><span class="line">Bundle &apos;gmarik/vundle&apos;</span><br><span class="line">&quot; My Bundles here:</span><br><span class="line">filetype plugin indent on     &quot; required!</span><br><span class="line">&quot;</span><br><span class="line">&quot; Brief help</span><br><span class="line">&quot; :BundleList          - list configured bundles  列出所有已配置的插件</span><br><span class="line">&quot; :BundleInstall(!)    - install(update) bundles　 </span><br><span class="line">&quot; :BundleSearch(!) foo - search(or refresh cache first) for foo</span><br><span class="line">&quot; :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles</span><br><span class="line">&quot; :PluginList       - 列出所有已配置的插件</span><br><span class="line">&quot; :PluginInstall     - 安装插件,追加 `!` 用以更新或使用 :PluginUpdate</span><br><span class="line">&quot; :PluginSearch foo - 搜索 foo ; 追加 `!` 清除本地缓存</span><br><span class="line">&quot; :PluginClean      - 清除未使用插件,需要确认; 追加 `!` 自动批准移除未使用插件</span><br><span class="line">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class="line">&quot; NOTE: comments after Bundle command are not allowed..</span><br></pre></td></tr></table></figure><hr><h3 id="安装NERDTree"><a href="#安装NERDTree" class="headerlink" title=" 安装NERDTree "></a><strong> 安装NERDTree </strong></h3><p><strong> nerdtree，用来浏览文档树 </strong></p><p>在<code>.vimrc</code>中加入</p><p><code>Bundle &#39;scrooloose/nerdtree&#39; &quot; 加入NERDTree</code></p><p>保存退出，并重新进入vim，执行<code>:PluginInstall</code>，等待安装，安装完成会有<code>Done</code>状态提示，这样NERDTree插件就安装上了，执行<code>:NERDTree</code>命令，侧栏文件树形目录就出来了。可以映射快捷键调出NERDTree，在<code>.vimrc</code>中加入<code>:map &lt;C-f&gt; :NERDTree&lt;CR&gt;</code>，这样就可以使用<code>Ctrl+f</code>来调出侧边栏。</p><p>最后<code>.vimrc</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">set nocompatible               &quot; be iMproved</span><br><span class="line">filetype off                   &quot; required!</span><br><span class="line">set rtp+=~/.vim/bundle/vundle/</span><br><span class="line">call vundle#rc()</span><br><span class="line">&quot; let Vundle manage Vundle</span><br><span class="line">&quot; required! </span><br><span class="line">Bundle &apos;gmarik/vundle&apos;</span><br><span class="line">Bundle &apos;scrooloose/nerdtree&apos; </span><br><span class="line">&quot; My Bundles here:</span><br><span class="line">filetype plugin indent on     &quot; required!</span><br><span class="line">:map &lt;C-f&gt; :NERDTree&lt;CR&gt;</span><br><span class="line">&quot;</span><br><span class="line">&quot; Brief help</span><br><span class="line">&quot; :BundleList          - list configured bundles</span><br><span class="line">&quot; :BundleInstall(!)    - install(update) bundles</span><br><span class="line">&quot; :BundleSearch(!) foo - search(or refresh cache first) for foo</span><br><span class="line">&quot; :BundleClean(!)      - confirm(or auto-approve) removal of unused bundles</span><br><span class="line">&quot;</span><br><span class="line">&quot; see :h vundle for more details or wiki for FAQ</span><br><span class="line">&quot; NOTE: comments after Bundle command are not allowed..</span><br></pre></td></tr></table></figure><p>快捷键<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">ctrl + w + h    光标 focus 左侧树形目录</span><br><span class="line">ctrl + w + l    光标 focus 右侧文件显示窗口</span><br><span class="line">ctrl + w + w    光标自动在左右侧窗口切换</span><br><span class="line">ctrl + w + r    移动当前窗口的布局位置</span><br><span class="line">o       在已有窗口中打开文件、目录或书签，并跳到该窗口</span><br><span class="line">go      在已有窗口 中打开文件、目录或书签，但不跳到该窗口</span><br><span class="line">t       在新 Tab 中打开选中文件/书签，并跳到新 Tab</span><br><span class="line">T       在新 Tab 中打开选中文件/书签，但不跳到新 Tab</span><br><span class="line">i       split 一个新窗口打开选中文件，并跳到该窗口</span><br><span class="line">gi      split 一个新窗口打开选中文件，但不跳到该窗口</span><br><span class="line">s       vsplit 一个新窗口打开选中文件，并跳到该窗口</span><br><span class="line">gs      vsplit 一个新 窗口打开选中文件，但不跳到该窗口</span><br><span class="line">!       执行当前文件</span><br><span class="line">O       递归打开选中 结点下的所有目录</span><br><span class="line">x       合拢选中结点的父目录</span><br><span class="line">X       递归 合拢选中结点下的所有目录</span><br><span class="line">e       Edit the current dif</span><br><span class="line">双击    相当于 NERDTree-o</span><br><span class="line">中键    对文件相当于 NERDTree-i，对目录相当于 NERDTree-e</span><br><span class="line">D       删除当前书签</span><br><span class="line">P       跳到根结点</span><br><span class="line">p       跳到父结点</span><br><span class="line">K       跳到当前目录下同级的第一个结点</span><br><span class="line">J       跳到当前目录下同级的最后一个结点</span><br><span class="line">k       跳到当前目录下同级的前一个结点</span><br><span class="line">j       跳到当前目录下同级的后一个结点</span><br><span class="line">C       将选中目录或选中文件的父目录设为根结点</span><br><span class="line">u       将当前根结点的父目录设为根目录，并变成合拢原根结点</span><br><span class="line">U       将当前根结点的父目录设为根目录，但保持展开原根结点</span><br><span class="line">r       递归刷新选中目录</span><br><span class="line">R       递归刷新根结点</span><br><span class="line">m       显示文件系统菜单</span><br><span class="line">cd      将 CWD 设为选中目录</span><br><span class="line">I       切换是否显示隐藏文件</span><br><span class="line">f       切换是否使用文件过滤器</span><br><span class="line">F       切换是否显示文件</span><br><span class="line">B       切换是否显示书签</span><br><span class="line">q       关闭 NerdTree 窗口</span><br><span class="line">?       切换是否显示 Quick Help</span><br><span class="line"></span><br><span class="line"># 切换标签页</span><br><span class="line">:tabnew [++opt选项] ［＋cmd］ 文件建立对指定文件新的tab</span><br><span class="line">:tabc   关闭当前的 tab</span><br><span class="line">:tabo   关闭所有其他的 tab</span><br><span class="line">:tabs   查看所有打开的 tab</span><br><span class="line">:tabp   前一个 tab</span><br><span class="line">:tabn   后一个 tab</span><br><span class="line"></span><br><span class="line">标准模式下： gt , gT 可以直接在tab之间切换。</span><br></pre></td></tr></table></figure></p><hr><p>其他不错的插件我用一段时间过后再来本文补充～</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/wr132/article/details/54019046" target="_blank" rel="noopener">Ubuntu 16.04 安装Vundle</a><br><a href="https://www.cnblogs.com/davidhhuan/archive/2013/01/06/2846982.html" target="_blank" rel="noopener">使用Vundle管理vim的插件</a><br><a href="https://blog.csdn.net/zhangpower1993/article/details/52184581" target="_blank" rel="noopener">vim插件管理器：Vundle的介绍及安装（很全）</a><br><a href="https://www.zhihu.com/question/23590572" target="_blank" rel="noopener">有哪些好用到爆的vim插件？</a><br><a href="https://www.cnblogs.com/davidhhuan/archive/2013/01/06/2846982.html" target="_blank" rel="noopener">Vim: 使用Vundle安装NERDTree</a><br><a href="http://mufool.com/2016/07/08/vim-nerdtree/" target="_blank" rel="noopener">NERDTree快捷键</a><br><a href="https://blog.csdn.net/jasonding1354/article/details/45372007" target="_blank" rel="noopener">使用map自定义快捷键</a><br><a href="https://blog.csdn.net/Demorngel/article/details/70474496" target="_blank" rel="noopener">vim插件goyo与limelight</a><br><a href="https://blog.csdn.net/chuanj1985/article/details/6873830" target="_blank" rel="noopener">vim显示行号、语法高亮、自动缩进的设置</a><br><a href="https://www.jianshu.com/p/f0513d18742a" target="_blank" rel="noopener">把vim配置成顺手的python轻量级IDE（一）</a><br><a href="https://github.com/Valloric/YouCompleteMe#javascript-semantic-completion" target="_blank" rel="noopener">YouCompleteMe</a><br><a href="https://juejin.im/post/5a38c37f6fb9a0450909a151" target="_blank" rel="noopener">vim进阶 | 使用插件打造实用vim工作环境</a></p>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>堆排序</title>
      <link href="/2018/06/20/heapsort/"/>
      <url>/2018/06/20/heapsort/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>本文是自己写的堆排序做下记录,不带讲解,没什么参考价值。文末有我看的一些博客的链接。</p><hr><h3 id="code（C-）"><a href="#code（C-）" class="headerlink" title=" code（C++） "></a><strong> code（C++） </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> arrs[] = &#123; <span class="number">23</span>, <span class="number">65</span>, <span class="number">12</span>, <span class="number">3</span>, <span class="number">8</span>, <span class="number">76</span>, <span class="number">345</span>, <span class="number">90</span>, <span class="number">21</span>, <span class="number">75</span>, <span class="number">34</span>, <span class="number">61</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> arrLen = <span class="keyword">sizeof</span>(arrs) / <span class="keyword">sizeof</span>(arrs[<span class="number">0</span>]);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">adjustHeap</span><span class="params">(<span class="keyword">int</span> * arrs, <span class="keyword">int</span> p, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> curParent = arrs[p];</span><br><span class="line">    <span class="keyword">int</span> child = <span class="number">2</span>* p + <span class="number">1</span>;   <span class="comment">//左孩子</span></span><br><span class="line">    <span class="keyword">while</span>(child &lt; len)&#123;     <span class="comment">//没有孩子</span></span><br><span class="line">        <span class="keyword">if</span>(child+<span class="number">1</span>&lt;len&amp;&amp;arrs[child]&lt;arrs[child+<span class="number">1</span>])&#123;</span><br><span class="line">            child++;    <span class="comment">//较大孩子的下标</span></span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(curParent&lt;arrs[child])&#123;</span><br><span class="line">            arrs[p]=arrs[child];</span><br><span class="line">            <span class="comment">//没有将curParent赋值给孩子是因为还要迭代子树，</span></span><br><span class="line">            <span class="comment">//如果其孩子中有大的，会上移，curParent还要继续下移。</span></span><br><span class="line">            p=child;</span><br><span class="line">            child=<span class="number">2</span>*p+<span class="number">1</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">else</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    arrs[p]=curParent;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">heapSort</span><span class="params">(<span class="keyword">int</span> * arrs, <span class="keyword">int</span> len)</span></span>&#123;</span><br><span class="line">    <span class="comment">//建立堆，从最底层的父节点开始</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = arrLen /<span class="number">2</span> <span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)</span><br><span class="line">        adjustHeap(arrs, i, arrLen);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = arrLen <span class="number">-1</span>; i&gt;=<span class="number">0</span>; i--)&#123;</span><br><span class="line">        <span class="keyword">int</span> maxEle = arrs[<span class="number">0</span>];</span><br><span class="line">        arrs[<span class="number">0</span>] = arrs[i];</span><br><span class="line">        arrs[i] = maxEle;</span><br><span class="line"></span><br><span class="line">        adjustHeap(arrs, <span class="number">0</span>, i);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">    heapSort(arrs, arrLen );</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; arrLen; i++)</span><br><span class="line">        <span class="built_in">cout</span> &lt;&lt; arrs[i] &lt;&lt; <span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/MOBIN/p/5374217.html" target="_blank" rel="noopener">图解堆排序</a><br><a href="https://segmentfault.com/a/1190000002466215" target="_blank" rel="noopener">堆排序C++实现</a><br><a href="https://www.jianshu.com/p/1cfdcee48003" target="_blank" rel="noopener">算法入门：堆排序</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>菜鸡拯救秘诀</title>
      <link href="/2018/06/19/install-php-7x-in-ubuntu/"/>
      <url>/2018/06/19/install-php-7x-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p><span class="under0"><strong> 一台没有装PHP的开发机是不完整的。</strong></span></p><p><span class="under0"><strong>在这个或许不是那么好的时代,如果你也和我一样感觉自己很菜,可以试试写世界上最好的语言,这样的确是会好一点。</strong></span></p><hr><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h3><h4 id="安装软件源拓展工具"><a href="#安装软件源拓展工具" class="headerlink" title=" 安装软件源拓展工具 "></a><strong> 安装软件源拓展工具 </strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt -y install software-properties-common apt-transport-https lsb-release ca-certificates</span><br></pre></td></tr></table></figure><h4 id="添加Ondrej-Sury的PHP-PPA源-："><a href="#添加Ondrej-Sury的PHP-PPA源-：" class="headerlink" title=" 添加Ondřej Surý的PHP PPA源 ："></a><strong> 添加<code>Ondřej Surý</code>的<code>PHP PPA</code>源 </strong>：</h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo add-apt-repository ppa:ondrej/php</span><br></pre></td></tr></table></figure><h4 id="更新软件源缓存"><a href="#更新软件源缓存" class="headerlink" title=" 更新软件源缓存 "></a><strong> 更新软件源缓存 </strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt update</span><br></pre></td></tr></table></figure><p>如果在上面的安装过程中遇到了这个错误</p><p><code>You are seeing this message because you have apache2 package installed</code></p><p>解决方法,卸载<code>apache</code>相关的东西</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get purge apache2</span><br><span class="line">sudo apt autoremove</span><br><span class="line">sudo apt autoclean</span><br></pre></td></tr></table></figure><p>其他拓展，按需安装：</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash">  安装其他扩展（按需安装）</span></span><br><span class="line">sudo apt-get install php7.2-gd</span><br><span class="line">sudo apt-get install php7.2-soap</span><br><span class="line">sudo apt-get install php7.2-gmp    </span><br><span class="line">sudo apt-get install php7.2-odbc       </span><br><span class="line">sudo apt-get install php7.2-pspell     </span><br><span class="line">sudo apt-get install php7.2-bcmath   </span><br><span class="line">sudo apt-get install php7.2-enchant    </span><br><span class="line">sudo apt-get install php7.2-imap       </span><br><span class="line">sudo apt-get install php7.2-ldap       </span><br><span class="line">sudo apt-get install php7.2-opcache</span><br><span class="line">sudo apt-get install php7.2-readline   </span><br><span class="line">sudo apt-get install php7.2-sqlite3    </span><br><span class="line">sudo apt-get install php7.2-xmlrpc</span><br><span class="line">sudo apt-get install php7.2-bz2</span><br><span class="line">sudo apt-get install php7.2-interbase</span><br><span class="line">sudo apt-get install php7.2-pgsql      </span><br><span class="line">sudo apt-get install php7.2-recode     </span><br><span class="line">sudo apt-get install php7.2-sybase     </span><br><span class="line">sudo apt-get install php7.2-xsl</span><br><span class="line">sudo apt-get install php7.2-cgi        </span><br><span class="line">sudo apt-get install php7.2-dba </span><br><span class="line">sudo apt-get install php7.2-phpdbg     </span><br><span class="line">sudo apt-get install php7.2-snmp       </span><br><span class="line">sudo apt-get install php7.2-tidy       </span><br><span class="line">sudo apt-get install php7.2-zip</span><br></pre></td></tr></table></figure><hr><h3 id="管理-PHP"><a href="#管理-PHP" class="headerlink" title=" 管理 PHP "></a><strong> 管理 PHP </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">systemctl restart php7.2-fpm #重启</span><br><span class="line">systemctl start php7.2-fpm #启动</span><br><span class="line">systemctl stop php7.2-fpm #关闭</span><br><span class="line">systemctl status php7.2-fpm #检查状态</span><br></pre></td></tr></table></figure><hr><h3 id="查看php已安装扩展命令"><a href="#查看php已安装扩展命令" class="headerlink" title=" 查看php已安装扩展命令 "></a><strong> 查看php已安装扩展命令 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -m</span><br></pre></td></tr></table></figure><hr><h3 id="内置Web-Server"><a href="#内置Web-Server" class="headerlink" title=" 内置Web Server "></a><strong> 内置Web Server </strong></h3><p>PHP 5.4.0起， CLI SAPI 提供了一个内置的Web服务器。</p><p>这个内置的Web服务器主要用于本地开发使用，不可用于线上产品环境。</p><p>URI请求会被发送到PHP所在的的工作目录（Working Directory）进行处理，除非你使用了-t参数来自定义不同的目录。</p><p>如果请求未指定执行哪个PHP文件，则默认执行目录内的index.php 或者 index.html。如果这两个文件都不存在，服务器会返回404错误。</p><p>当你在命令行启动这个Web Server时，如果指定了一个PHP文件，则这个文件会作为一个“路由”脚本，意味着每次请求都会先执行这个脚本。如果这个脚本返回 FALSE ，那么直接返回请求的文件（例如请求静态文件不作任何处理）。否则会把输出返回到浏览器。</p><h4 id="启动Web服务器"><a href="#启动Web服务器" class="headerlink" title=" 启动Web服务器 "></a><strong> 启动Web服务器 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S localhost:8000</span><br></pre></td></tr></table></figure><h4 id="启动时指定根目录"><a href="#启动时指定根目录" class="headerlink" title=" 启动时指定根目录 "></a><strong> 启动时指定根目录 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S localhost:8000 -t foo/</span><br></pre></td></tr></table></figure><h4 id="使用路由（Router）脚本"><a href="#使用路由（Router）脚本" class="headerlink" title=" 使用路由（Router）脚本 "></a><strong> 使用路由（Router）脚本 </strong></h4><p>请求图片直接显示图片，请求HTML则显示“Welcome to PHP”</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">// router.php</span></span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">'/\.(?:png|jpg|jpeg|gif)$/'</span>, $_SERVER[<span class="string">"REQUEST_URI"</span>]))</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">false</span>;    <span class="comment">// 直接返回请求的文件</span></span><br><span class="line"><span class="keyword">else</span> &#123; </span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"&lt;p&gt;Welcome to PHP&lt;/p&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">php -S localhost:8000 router.php</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.mf8.biz/debian-install-php7-2/" target="_blank" rel="noopener">在 Ubuntu/Debian 下安装 PHP7.2</a><br><a href="https://blog.csdn.net/zhezhebie/article/details/79939843" target="_blank" rel="noopener">ubutun安装php7.2</a><br><a href="https://blog.csdn.net/zhezhebie/article/details/79940324" target="_blank" rel="noopener">You are seeing this message because you have apache2 package installed.</a><br><a href="https://blog.csdn.net/qdujunjie/article/details/11559883" target="_blank" rel="noopener">查看php已安装扩展命令</a><br><a href="http://php.net/manual/zh/features.commandline.webserver.php" target="_blank" rel="noopener">内置Web Server</a><br><a href="https://segmentfault.com/a/1190000009066688" target="_blank" rel="noopener">什么是CGI、FastCGI、PHP-CGI、PHP-FPM</a><br><a href="https://segmentfault.com/q/1010000000256516" target="_blank" rel="noopener">FastCgi 与 PHP-FPM 之间的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第九周编程作业</title>
      <link href="/2018/06/17/the-ninth-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/17/the-ninth-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第九周部分课程内容,以及编程作业答案记录,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/ninth-week" target="_blank" rel="noopener">github</a></p><hr><h3 id="estimateGaussian-m"><a href="#estimateGaussian-m" class="headerlink" title=" estimateGaussian.m "></a><strong> estimateGaussian.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function [mu sigma2] = estimateGaussian(X)</span><br><span class="line">%ESTIMATEGAUSSIAN This function estimates the parameters of a </span><br><span class="line">%Gaussian distribution using the data in X</span><br><span class="line">%   [mu sigma2] = estimateGaussian(X), </span><br><span class="line">%   The input X is the dataset with each n-dimensional data point in one row</span><br><span class="line">%   The output is an n-dimensional vector mu, the mean of the data set</span><br><span class="line">%   and the variances sigma^2, an n x 1 vector</span><br><span class="line">% </span><br><span class="line"></span><br><span class="line">% Useful variables</span><br><span class="line">[m, n] = size(X);</span><br><span class="line"></span><br><span class="line">% You should return these values correctly</span><br><span class="line">mu = zeros(n, 1);</span><br><span class="line">sigma2 = zeros(n, 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the mean of the data and the variances</span><br><span class="line">%               In particular, mu(i) should contain the mean of</span><br><span class="line">%               the data for the i-th feature and sigma2(i)</span><br><span class="line">%               should contain variance of the i-th feature.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">mu = 1 / m * (sum(X))</span><br><span class="line">sigma2 = 1 / m * sum((X - repmat(mu, m, 1)).^2)</span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="selectThreshold-m"><a href="#selectThreshold-m" class="headerlink" title=" selectThreshold.m "></a><strong> selectThreshold.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">function [bestEpsilon bestF1] = selectThreshold(yval, pval)</span><br><span class="line">%SELECTTHRESHOLD Find the best threshold (epsilon) to use for selecting</span><br><span class="line">%outliers</span><br><span class="line">%   [bestEpsilon bestF1] = SELECTTHRESHOLD(yval, pval) finds the best</span><br><span class="line">%   threshold to use for selecting outliers based on the results from a</span><br><span class="line">%   validation set (pval) and the ground truth (yval).</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">bestEpsilon = 0;</span><br><span class="line">bestF1 = 0;</span><br><span class="line">F1 = 0;</span><br><span class="line"></span><br><span class="line">stepsize = (max(pval) - min(pval)) / 1000;</span><br><span class="line">for epsilon = min(pval):stepsize:max(pval)</span><br><span class="line">    </span><br><span class="line">    % ====================== YOUR CODE HERE ======================</span><br><span class="line">    % Instructions: Compute the F1 score of choosing epsilon as the</span><br><span class="line">    %               threshold and place the value in F1. The code at the</span><br><span class="line">    %               end of the loop will compare the F1 score for this</span><br><span class="line">    %               choice of epsilon and set it to be the best epsilon if</span><br><span class="line">    %               it is better than the current choice of epsilon.</span><br><span class="line">    %               </span><br><span class="line">    % Note: You can use predictions = (pval &lt; epsilon) to get a binary vector</span><br><span class="line">    %       of 0&apos;s and 1&apos;s of the outlier predictions</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">predictions = (pval &lt; epsilon);  </span><br><span class="line">fp = sum((predictions == 1) &amp; (yval == 0));  </span><br><span class="line">fn = sum((predictions == 0) &amp; (yval == 1));  </span><br><span class="line">tp = sum((predictions == 1) &amp; (yval == 1));  </span><br><span class="line">  </span><br><span class="line">prec = tp / (tp + fp);  </span><br><span class="line">rec = tp / (tp + fn);  </span><br><span class="line">  </span><br><span class="line">F1 = 2 * prec * rec / (prec + rec);  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    % =============================================================</span><br><span class="line"></span><br><span class="line">    if F1 &gt; bestF1</span><br><span class="line">       bestF1 = F1;</span><br><span class="line">       bestEpsilon = epsilon;</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="cofiCostFunc-m"><a href="#cofiCostFunc-m" class="headerlink" title=" cofiCostFunc.m "></a><strong> cofiCostFunc.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line">function [J, grad] = cofiCostFunc(params, Y, R, num_users, num_movies, ...</span><br><span class="line">                                  num_features, lambda)</span><br><span class="line">%COFICOSTFUNC Collaborative filtering cost function</span><br><span class="line">%   [J, grad] = COFICOSTFUNC(params, Y, R, num_users, num_movies, ...</span><br><span class="line">%   num_features, lambda) returns the cost and gradient for the</span><br><span class="line">%   collaborative filtering problem.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% Unfold the U and W matrices from params</span><br><span class="line">X = reshape(params(1:num_movies*num_features), num_movies, num_features);</span><br><span class="line">Theta = reshape(params(num_movies*num_features+1:end), ...</span><br><span class="line">                num_users, num_features);</span><br><span class="line"></span><br><span class="line">            </span><br><span class="line">% You need to return the following values correctly</span><br><span class="line">J = 0;</span><br><span class="line">X_grad = zeros(size(X));</span><br><span class="line">Theta_grad = zeros(size(Theta));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost function and gradient for collaborative</span><br><span class="line">%               filtering. Concretely, you should first implement the cost</span><br><span class="line">%               function (without regularization) and make sure it is</span><br><span class="line">%               matches our costs. After that, you should implement the </span><br><span class="line">%               gradient and use the checkCostFunction routine to check</span><br><span class="line">%               that the gradient is correct. Finally, you should implement</span><br><span class="line">%               regularization.</span><br><span class="line">%</span><br><span class="line">% Notes: X - num_movies  x num_features matrix of movie features</span><br><span class="line">%        Theta - num_users  x num_features matrix of user features</span><br><span class="line">%        Y - num_movies x num_users matrix of user ratings of movies</span><br><span class="line">%        R - num_movies x num_users matrix, where R(i, j) = 1 if the </span><br><span class="line">%            i-th movie was rated by the j-th user</span><br><span class="line">%</span><br><span class="line">% You should set the following variables correctly:</span><br><span class="line">%</span><br><span class="line">%        X_grad - num_movies x num_features matrix, containing the </span><br><span class="line">%                 partial derivatives w.r.t. to each element of X</span><br><span class="line">%        Theta_grad - num_users x num_features matrix, containing the </span><br><span class="line">%                     partial derivatives w.r.t. to each element of Theta</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">J = 1 / 2 * sum(sum(((X * Theta&apos;) .^ R - Y .^ R) .^ 2)) + lambda / 2 * sum(sum(Theta .^ 2)) + lambda / 2 * sum(sum(X .^ 2));  </span><br><span class="line">  </span><br><span class="line">X_grad = ((X * Theta&apos;) .* R - Y .* R) * Theta + lambda .* X;  </span><br><span class="line">Theta_grad = ((X * Theta&apos;) .* R - Y .* R)&apos; * X + lambda .* Theta;  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line">grad = [X_grad(:); Theta_grad(:)];</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考　"></a><strong> 参考　</strong></h3><p><a href="https://blog.csdn.net/ccblogger/article/details/79087224" target="_blank" rel="noopener">Coursera—machine learning(Andrew Ng)第九周编程作业</a><br><a href="https://blog.csdn.net/anqier1009/article/details/5214978" target="_blank" rel="noopener">matlab中repmat函数的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Anomaly Detection </tag>
            
            <tag> Recommender Systems </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>IQR(四分位距)</title>
      <link href="/2018/06/16/interquartile-range/"/>
      <url>/2018/06/16/interquartile-range/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>读大神kernel的时候,看见一个用IQR处理异常值的方法,本文做下记录</p><hr><h3 id="四分位数"><a href="#四分位数" class="headerlink" title=" 四分位数 "></a><strong> 四分位数 </strong></h3><p>四分位数（Quartile）是统计学中分位数的一种，即把所有数值由小到大排列并分成四等份，处于三个分割点位置的数值就是四分位数。</p><p>第一四分位数 (Q1)，又称“较小四分位数”，等于该样本中所有数值由小到大排列后第25%的数字。<br>第二四分位数 (Q2)，又称“中位数”，等于该样本中所有数值由小到大排列后第50%的数字。<br>第三四分位数 (Q3)，又称“较大四分位数”，等于该样本中所有数值由小到大排列后第75%的数字。</p><p><strong> 第三四分位数与第一四分位数的差距又称四分位距（InterQuartile Range, IQR）。</strong></p><hr><h3 id="异常值"><a href="#异常值" class="headerlink" title=" 异常值　"></a><strong> 异常值　</strong></h3><p><strong>异常值通常被定义为小于$Q_1 - 1.5IQR$ 或大于$Q_2 - 1.5IQR$的值</strong></p><h4 id="code"><a href="#code" class="headerlink" title=" code "></a><strong> code </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"># Outlier detection </span><br><span class="line"></span><br><span class="line">def detect_outliers(df,n,features):</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    Takes a dataframe df of features and returns a list of the indices</span><br><span class="line">    corresponding to the observations containing more than n outliers according</span><br><span class="line">    to the Tukey method.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    outlier_indices = []</span><br><span class="line">    </span><br><span class="line">    # iterate over features(columns)</span><br><span class="line">    for col in features:</span><br><span class="line">        # 1st quartile (25%)</span><br><span class="line">        Q1 = np.percentile(df[col], 25)</span><br><span class="line">        # 3rd quartile (75%)</span><br><span class="line">        Q3 = np.percentile(df[col],75)</span><br><span class="line">        # Interquartile range (IQR)</span><br><span class="line">        IQR = Q3 - Q1</span><br><span class="line">        </span><br><span class="line">        # outlier step</span><br><span class="line">        outlier_step = 1.5 * IQR</span><br><span class="line">        </span><br><span class="line">        # Determine a list of indices of outliers for feature col</span><br><span class="line">        outlier_list_col = df[(df[col] &lt; Q1 - outlier_step) | (df[col] &gt; Q3 + outlier_step )].index</span><br><span class="line">        </span><br><span class="line">        # append the found outlier indices for col to the list of outlier indices </span><br><span class="line">        outlier_indices.extend(outlier_list_col)</span><br><span class="line">        </span><br><span class="line">    # select observations containing more than 2 outliers</span><br><span class="line">    outlier_indices = Counter(outlier_indices)        </span><br><span class="line">    multiple_outliers = list( k for k, v in outlier_indices.items() if v &gt; n )</span><br><span class="line">    </span><br><span class="line">    return multiple_outliers   </span><br><span class="line"></span><br><span class="line"># detect outliers from Age, SibSp , Parch and Fare</span><br><span class="line">Outliers_to_drop = detect_outliers(train,2,[&quot;Age&quot;,&quot;SibSp&quot;,&quot;Parch&quot;,&quot;Fare&quot;])</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考　"></a><strong> 参考　</strong></h3><p><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E4%BD%8D%E8%B7%9D" target="_blank" rel="noopener">四分位距</a><br><a href="https://zh.wikipedia.org/wiki/%E5%9B%9B%E5%88%86%E4%BD%8D%E6%95%B0" target="_blank" rel="noopener">四分位数</a><br><a href="https://blog.csdn.net/u011489887/article/details/78973856" target="_blank" rel="noopener">python 基于箱型图进行异常值分析</a></p>]]></content>
      
      
      <categories>
          
          <category> 统计学 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>牛顿迭代法解方程</title>
      <link href="/2018/06/16/solve-equation-by-Newton-iterative-method/"/>
      <url>/2018/06/16/solve-equation-by-Newton-iterative-method/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>前两天帮高中室友解一个方程,他课设中需要解的一个高次方程,使用的是牛顿迭代法,做下记录</p><hr><p>牛顿法的具体细节本文就赘述了,可以参考文末的链接。</p><p><img src="/img/算法/solve-equation-by-Newton-iterative-method/1.png" alt="1.png"></p><hr><p><strong><span class="under0"> 一句话总结下,就是通过选择点,做切线,不断迭代下去,直到收敛。 </span></strong></p><h3 id="代码"><a href="#代码" class="headerlink" title=" 代码　"></a><strong> 代码　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># -*- coding= utf-8 -*-</span><br><span class="line"></span><br><span class="line">def f(x):</span><br><span class="line">    # f的方程</span><br><span class="line">    return 6900 * x ** 3 - 1767780 * x ** 2 + 250788032 * x - 120441587900</span><br><span class="line"></span><br><span class="line">def f_first_order(x):</span><br><span class="line">    # f的一阶导数</span><br><span class="line">    return 6900 * 3 * x ** 2 - 1767780 * 2 * x + 250788032</span><br><span class="line"></span><br><span class="line">def get_root(x0, max_iter=50, tol = 1e-8):</span><br><span class="line">    # 将初始值浮点化</span><br><span class="line">    p0 = x0 * 1.0</span><br><span class="line">    for i in range(max_iter):</span><br><span class="line">        # f的一阶导数不能为0，最普遍的说法是不能非正定</span><br><span class="line">        p = p0 - f(p0)/ f_first_order(p0)</span><br><span class="line"></span><br><span class="line">        # 如果小于精度值则退出迭代</span><br><span class="line">        if abs(p - p0) &lt; tol:</span><br><span class="line">            return u&apos;经过%s次的迭代，我们估计的参数值是%s&apos; % (i, p)</span><br><span class="line">        p0 = p</span><br><span class="line"></span><br><span class="line">    print(u&apos;已达到最大迭代次数， 但是仍然无法收敛&apos;)</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"># for x in range(-10000, 10000, 100):</span><br><span class="line">#    print(get_root(x))</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.zhihu.com/question/20690553" target="_blank" rel="noopener">如何通俗易懂地讲解牛顿迭代法求开方？</a><br><a href="https://www.zhihu.com/question/32280915" target="_blank" rel="noopener">python如何实现迭代法解方程?</a><br><a href="http://python.jobbole.com/85295/" target="_blank" rel="noopener">十行代码实现牛顿方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第八周编程作业</title>
      <link href="/2018/06/14/the-eighth-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/14/the-eighth-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<script src="/crypto-js.js"></script><script src="/mcommon.js"></script><h3 id="encrypt-message">不能说的秘密</h3><div id="security"> <div class="orz-container"> <input style="display:none"> <input type="password" class="get-key" id="pass" autocomplete="new-password"  placeholder="解锁新知识" /> <div class="input-group-orz"> <button type="button" class="final-key" onclick="decryptAES()">O.O</button> </div> <div class="bottom-line"></div> </div> </div> <div id="encrypt-blog" style="display:none">  </div>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Unsupervised Learning </tag>
            
            <tag> Dimensionality Reduction </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第七周编程作业</title>
      <link href="/2018/06/12/the-seventh-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/12/the-seventh-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第七周部分课程内容,以及编程作业答案记录,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/seventh-week" target="_blank" rel="noopener">github</a></p><hr><h3 id="部分PPT"><a href="#部分PPT" class="headerlink" title="　部分PPT "></a><strong>　部分PPT </strong></h3><p><img src="/img/机器学习/the-seventh-week-homework-of-ML-Stanford/1.png" alt="1.png"></p><hr><p><img src="/img/机器学习/the-seventh-week-homework-of-ML-Stanford/2.png" alt="2.png"></p><hr><p><img src="/img/机器学习/the-seventh-week-homework-of-ML-Stanford/3.png" alt="3.png"></p><hr><p><img src="/img/机器学习/the-seventh-week-homework-of-ML-Stanford/4.png" alt="4.png"></p><hr><p><img src="/img/机器学习/the-seventh-week-homework-of-ML-Stanford/5.png" alt="5.png"></p><hr><h3 id="gaussianKernel-m"><a href="#gaussianKernel-m" class="headerlink" title=" gaussianKernel.m "></a><strong> gaussianKernel.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">function sim = gaussianKernel(x1, x2, sigma)</span><br><span class="line">%RBFKERNEL returns a radial basis function kernel between x1 and x2</span><br><span class="line">%   sim = gaussianKernel(x1, x2) returns a gaussian kernel between x1 and x2</span><br><span class="line">%   and returns the value in sim</span><br><span class="line"></span><br><span class="line">% Ensure that x1 and x2 are column vectors</span><br><span class="line">x1 = x1(:); x2 = x2(:);</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly.</span><br><span class="line">sim = 0;</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Fill in this function to return the similarity between x1</span><br><span class="line">%               and x2 computed using a Gaussian kernel with bandwidth</span><br><span class="line">%               sigma</span><br><span class="line">%</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">sim = exp(-sum((x1-x2).^2 ) /(2 * sigma^2))</span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line">    </span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="dataset3Params-m"><a href="#dataset3Params-m" class="headerlink" title=" dataset3Params.m "></a><strong> dataset3Params.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br></pre></td><td class="code"><pre><span class="line">function [C, sigma] = dataset3Params(X, y, Xval, yval)</span><br><span class="line">%DATASET3PARAMS returns your choice of C and sigma for Part 3 of the exercise</span><br><span class="line">%where you select the optimal (C, sigma) learning parameters to use for SVM</span><br><span class="line">%with RBF kernel</span><br><span class="line">%   [C, sigma] = DATASET3PARAMS(X, y, Xval, yval) returns your choice of C and </span><br><span class="line">%   sigma. You should complete this function to return the optimal C and </span><br><span class="line">%   sigma based on a cross-validation set.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly.</span><br><span class="line">C = 1;</span><br><span class="line">sigma = 0.3;</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Fill in this function to return the optimal C and sigma</span><br><span class="line">%               learning parameters found using the cross validation set.</span><br><span class="line">%               You can use svmPredict to predict the labels on the cross</span><br><span class="line">%               validation set. For example, </span><br><span class="line">%                   predictions = svmPredict(model, Xval);</span><br><span class="line">%               will return the predictions on the cross validation set.</span><br><span class="line">%</span><br><span class="line">%  Note: You can compute the prediction error using </span><br><span class="line">%        mean(double(predictions ~= yval))</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">cc = [0.01, 0.03, 0.1, 0.3, 1, 3, 10, 30];</span><br><span class="line">ss = cc;</span><br><span class="line">maxx = 0;</span><br><span class="line"></span><br><span class="line">for i=1:length(cc)</span><br><span class="line">    for j=1:length(cc)</span><br><span class="line">        model = svmTrain(X, y, cc(i), @(x1, x2) gaussianKernel(x1, x2, ss(j)));</span><br><span class="line">        predict = svmPredict(model, Xval);</span><br><span class="line">        cur = mean(double(predict == yval));</span><br><span class="line">        if maxx &lt; cur</span><br><span class="line">            maxx = cur;</span><br><span class="line">            C = cc(i);</span><br><span class="line">            sigma = ss(j);</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="processEmail-m"><a href="#processEmail-m" class="headerlink" title="processEmail.m "></a><strong>processEmail.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line">function word_indices = processEmail(email_contents)</span><br><span class="line">%PROCESSEMAIL preprocesses a the body of an email and</span><br><span class="line">%returns a list of word_indices </span><br><span class="line">%   word_indices = PROCESSEMAIL(email_contents) preprocesses </span><br><span class="line">%   the body of an email and returns a list of indices of the </span><br><span class="line">%   words contained in the email. </span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% Load Vocabulary</span><br><span class="line">vocabList = getVocabList();</span><br><span class="line"></span><br><span class="line">% Init return value</span><br><span class="line">word_indices = [];</span><br><span class="line"></span><br><span class="line">% ========================== Preprocess Email ===========================</span><br><span class="line"></span><br><span class="line">% Find the Headers ( \n\n and remove )</span><br><span class="line">% Uncomment the following lines if you are working with raw emails with the</span><br><span class="line">% full headers</span><br><span class="line"></span><br><span class="line">% hdrstart = strfind(email_contents, ([char(10) char(10)]));</span><br><span class="line">% email_contents = email_contents(hdrstart(1):end);</span><br><span class="line"></span><br><span class="line">% Lower case</span><br><span class="line">email_contents = lower(email_contents);</span><br><span class="line"></span><br><span class="line">% Strip all HTML</span><br><span class="line">% Looks for any expression that starts with &lt; and ends with &gt; and replace</span><br><span class="line">% and does not have any &lt; or &gt; in the tag it with a space</span><br><span class="line">email_contents = regexprep(email_contents, &apos;&lt;[^&lt;&gt;]+&gt;&apos;, &apos; &apos;);</span><br><span class="line"></span><br><span class="line">% Handle Numbers</span><br><span class="line">% Look for one or more characters between 0-9</span><br><span class="line">email_contents = regexprep(email_contents, &apos;[0-9]+&apos;, &apos;number&apos;);</span><br><span class="line"></span><br><span class="line">% Handle URLS</span><br><span class="line">% Look for strings starting with http:// or https://</span><br><span class="line">email_contents = regexprep(email_contents, ...</span><br><span class="line">                           &apos;(http|https)://[^\s]*&apos;, &apos;httpaddr&apos;);</span><br><span class="line"></span><br><span class="line">% Handle Email Addresses</span><br><span class="line">% Look for strings with @ in the middle</span><br><span class="line">email_contents = regexprep(email_contents, &apos;[^\s]+@[^\s]+&apos;, &apos;emailaddr&apos;);</span><br><span class="line"></span><br><span class="line">% Handle $ sign</span><br><span class="line">email_contents = regexprep(email_contents, &apos;[$]+&apos;, &apos;dollar&apos;);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% ========================== Tokenize Email ===========================</span><br><span class="line"></span><br><span class="line">% Output the email to screen as well</span><br><span class="line">fprintf(&apos;\n==== Processed Email ====\n\n&apos;);</span><br><span class="line"></span><br><span class="line">% Process file</span><br><span class="line">l = 0;</span><br><span class="line"></span><br><span class="line">while ~isempty(email_contents)</span><br><span class="line"></span><br><span class="line">    % Tokenize and also get rid of any punctuation</span><br><span class="line">    [str, email_contents] = ...</span><br><span class="line">       strtok(email_contents, ...</span><br><span class="line">              [&apos; @$/#.-:&amp;*+=[]?!()&#123;&#125;,&apos;&apos;&quot;&gt;_&lt;;%&apos; char(10) char(13)]);</span><br><span class="line">   </span><br><span class="line">    % Remove any non alphanumeric characters</span><br><span class="line">    str = regexprep(str, &apos;[^a-zA-Z0-9]&apos;, &apos;&apos;);</span><br><span class="line"></span><br><span class="line">    % Stem the word </span><br><span class="line">    % (the porterStemmer sometimes has issues, so we use a try catch block)</span><br><span class="line">    try str = porterStemmer(strtrim(str)); </span><br><span class="line">    catch str = &apos;&apos;; continue;</span><br><span class="line">    end;</span><br><span class="line"></span><br><span class="line">    % Skip the word if it is too short</span><br><span class="line">    if length(str) &lt; 1</span><br><span class="line">       continue;</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    % Look up the word in the dictionary and add to word_indices if</span><br><span class="line">    % found</span><br><span class="line">    % ====================== YOUR CODE HERE ======================</span><br><span class="line">    % Instructions: Fill in this function to add the index of str to</span><br><span class="line">    %               word_indices if it is in the vocabulary. At this point</span><br><span class="line">    %               of the code, you have a stemmed word from the email in</span><br><span class="line">    %               the variable str. You should look up str in the</span><br><span class="line">    %               vocabulary list (vocabList). If a match exists, you</span><br><span class="line">    %               should add the index of the word to the word_indices</span><br><span class="line">    %               vector. Concretely, if str = &apos;action&apos;, then you should</span><br><span class="line">    %               look up the vocabulary list to find where in vocabList</span><br><span class="line">    %               &apos;action&apos; appears. For example, if vocabList&#123;18&#125; =</span><br><span class="line">    %               &apos;action&apos;, then, you should add 18 to the word_indices </span><br><span class="line">    %               vector (e.g., word_indices = [word_indices ; 18]; ).</span><br><span class="line">    % </span><br><span class="line">    % Note: vocabList&#123;idx&#125; returns a the word with index idx in the</span><br><span class="line">    %       vocabulary list.</span><br><span class="line">    % </span><br><span class="line">    % Note: You can use strcmp(str1, str2) to compare two strings (str1 and</span><br><span class="line">    %       str2). It will return 1 only if the two strings are equivalent.</span><br><span class="line">    %</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    for i=1:length(vocabList)</span><br><span class="line">        if strcmp(vocabList&#123;i&#125;, str)</span><br><span class="line">            word_indices = [word_indices; i];</span><br><span class="line">            break;</span><br><span class="line">        end</span><br><span class="line">    end</span><br><span class="line"></span><br><span class="line">    % =============================================================</span><br><span class="line"></span><br><span class="line">    % Print to screen, ensuring that the output lines are not too long</span><br><span class="line">    if (l + length(str) + 1) &gt; 78</span><br><span class="line">        fprintf(&apos;\n&apos;);</span><br><span class="line">        l = 0;</span><br><span class="line">    end</span><br><span class="line">    fprintf(&apos;%s &apos;, str);</span><br><span class="line">    l = l + length(str) + 1;</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% Print footer</span><br><span class="line">fprintf(&apos;\n\n=========================\n&apos;);</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="emailFeatures-m"><a href="#emailFeatures-m" class="headerlink" title=" emailFeatures.m "></a><strong> emailFeatures.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line">function x = emailFeatures(word_indices)</span><br><span class="line">%EMAILFEATURES takes in a word_indices vector and produces a feature vector</span><br><span class="line">%from the word indices</span><br><span class="line">%   x = EMAILFEATURES(word_indices) takes in a word_indices vector and </span><br><span class="line">%   produces a feature vector from the word indices. </span><br><span class="line"></span><br><span class="line">% Total number of words in the dictionary</span><br><span class="line">n = 1899;</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly.</span><br><span class="line">x = zeros(n, 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Fill in this function to return a feature vector for the</span><br><span class="line">%               given email (word_indices). To help make it easier to </span><br><span class="line">%               process the emails, we have have already pre-processed each</span><br><span class="line">%               email and converted each word in the email into an index in</span><br><span class="line">%               a fixed dictionary (of 1899 words). The variable</span><br><span class="line">%               word_indices contains the list of indices of the words</span><br><span class="line">%               which occur in one email.</span><br><span class="line">% </span><br><span class="line">%               Concretely, if an email has the text:</span><br><span class="line">%</span><br><span class="line">%                  The quick brown fox jumped over the lazy dog.</span><br><span class="line">%</span><br><span class="line">%               Then, the word_indices vector for this text might look </span><br><span class="line">%               like:</span><br><span class="line">%               </span><br><span class="line">%                   60  100   33   44   10     53  60  58   5</span><br><span class="line">%</span><br><span class="line">%               where, we have mapped each word onto a number, for example:</span><br><span class="line">%</span><br><span class="line">%                   the   -- 60</span><br><span class="line">%                   quick -- 100</span><br><span class="line">%                   ...</span><br><span class="line">%</span><br><span class="line">%              (note: the above numbers are just an example and are not the</span><br><span class="line">%               actual mappings).</span><br><span class="line">%</span><br><span class="line">%              Your task is take one such word_indices vector and construct</span><br><span class="line">%              a binary feature vector that indicates whether a particular</span><br><span class="line">%              word occurs in the email. That is, x(i) = 1 when word i</span><br><span class="line">%              is present in the email. Concretely, if the word &apos;the&apos; (say,</span><br><span class="line">%              index 60) appears in the email, then x(60) = 1. The feature</span><br><span class="line">%              vector should look like:</span><br><span class="line">%</span><br><span class="line">%              x = [ 0 0 0 0 1 0 0 0 ... 0 0 0 0 1 ... 0 0 0 1 0 ..];</span><br><span class="line">%</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">for i=1:length(word_indices)</span><br><span class="line">    x(word_indices(i)) = 1;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Support Vector Machines </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>matplotlib中文显示为方框(ubuntu)</title>
      <link href="/2018/06/09/chinese-display-cube-in-matplotlib-at-ubuntu/"/>
      <url>/2018/06/09/chinese-display-cube-in-matplotlib-at-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对<code>matplotlib</code>画图时,中文显示为方框的解决的记录</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h3><p>先下载字体<a href="https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf" target="_blank" rel="noopener">SimHei.ttf下载</a></p><p>将字体放在对应的<code>ttf</code>目录下</p><p>比如我的是<br><code>/home/sail/.local/lib/python3.5/site-packages/matplotlib/mpl-data/fonts/ttf</code></p><p>目录可以通过以下代码进行查询</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib</span><br><span class="line"><span class="keyword">print</span> (matplotlib.matplotlib_fname())</span><br></pre></td></tr></table></figure><hr><p>删除<code>~/.cache/matplotlib</code>的缓冲目录</p><hr><p><img src="/img/python/chinese-display-cube-in-matplotlib-at-ubuntu/1.png" alt="1.png"></p><p>修改<code>/home/sail/.local/lib/python3.5/site-packages/matplotlib/mpl-data/matplotlibrc文件</code>(这里应该是前面查询的目录下的<code>matplotlibrc文件</code>)，修改如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">font.family         : sans-serif        </span><br><span class="line"></span><br><span class="line"># 这里其实在最前面加上SimHei即可</span><br><span class="line">font.sans-serif     : SimHei, Bitstream Vera Sans, Lucida Grande, Verdana, Geneva, Lucid, Arial, Helvetica, Avant Garde, sans-serif </span><br><span class="line">axes.unicode_minus，将True改为False，作用就是解决负号&apos;-&apos;显示为方块的问题</span><br></pre></td></tr></table></figure><p>然后重启即可。</p><hr><p>上面要确认的就是配置文件一定要修改成功,我最初修改了一次,不知道为什么修改的<code>matplotlibrc</code>不见了。然后重新修改了下就可以了。</p><p>当然也可以在代码中修改配置,还是需要在代码中加入以下几行,才可以</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> matplotlib.pyplot <span class="keyword">as</span> plt</span><br><span class="line">font_name = <span class="string">'SIMHEI'</span> </span><br><span class="line">plt.rcParams[<span class="string">'font.family'</span>] = font_name <span class="comment">#用来正常显示中文标签 </span></span><br><span class="line">plt.rcParams[<span class="string">'axes.unicode_minus'</span>]=<span class="literal">False</span> <span class="comment">#用来正常显示负号</span></span><br></pre></td></tr></table></figure><p>最终效果:</p><p><img src="/img/python/chinese-display-cube-in-matplotlib-at-ubuntu/2.png" alt="2.png"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考　"></a><strong> 参考　</strong></h3><p><a href="https://github.com/StellarCN/scp_zh/blob/master/fonts/SimHei.ttf" target="_blank" rel="noopener">SimHei.ttf下载</a><br><a href="https://blog.csdn.net/weixin_39599711/article/details/78813736" target="_blank" rel="noopener">解决matplotlib不能显示中文的问题（Ubuntu）</a><br><a href="http://wenda.chinahadoop.cn/question/6828" target="_blank" rel="noopener">使用matplotlib警告Font family未找到</a><br><a href="https://blog.csdn.net/g11d111/article/details/77600114" target="_blank" rel="noopener">Matplotlib的中文字体显示为方块的问题</a><br><a href="https://segmentfault.com/a/1190000005144275" target="_blank" rel="noopener">python matplotlib 中文显示参数设置</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Zsh-command-not-found-jupyter</title>
      <link href="/2018/06/09/Zsh-command-not-found-jupyter/"/>
      <url>/2018/06/09/Zsh-command-not-found-jupyter/</url>
      
        <content type="html"><![CDATA[<p>今天安装jupyter后,在终端执行<code>jupyter notebook</code>使用提示</p><p><code>Zsh: command not found: jupyter</code></p><p>后来找到了一个解决办法</p><p>先执行<code>pip3 show jupyter</code></p><p>再执行<code>ipython notebook</code>即可</p><hr><p>Python安装pip包的时候权限出现问题</p><p>sudo解决了权限问题，但是pip安装有个本地缓存目录，如果是用sudo，这个目录会写到root用户的home目录下（一般是/root），不用sudo，就写到当前用户home目录下（一般是/home/username）</p><p>sudo也提供了选项 -h ，表示用sudo的权限，但又是用当前用户的home目录，所以最佳方式是：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo -h pip install -U Pillow</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://github.com/jupyter/help/issues/317" target="_blank" rel="noopener">Zsh: command not found: jupyter </a><br><a href="https://www.cnblogs.com/feixiablog/p/8320602.html" target="_blank" rel="noopener">pip install 执行过程中遇到的各种问题</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第六周编程作业</title>
      <link href="/2018/06/07/the-sixth-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/07/the-sixth-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第六周部分课程内容,以及编程作业答案记录,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/fifth-week" target="_blank" rel="noopener">github</a></p><hr><h3 id="作业"><a href="#作业" class="headerlink" title=" 作业 "></a><strong> 作业 </strong></h3><h4 id="linearRegCostFunction-m"><a href="#linearRegCostFunction-m" class="headerlink" title=" linearRegCostFunction.m "></a><strong> linearRegCostFunction.m </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function [J, grad] = linearRegCostFunction(X, y, theta, lambda)</span><br><span class="line">%LINEARREGCOSTFUNCTION Compute cost and gradient for regularized linear </span><br><span class="line">%regression with multiple variables</span><br><span class="line">%   [J, grad] = LINEARREGCOSTFUNCTION(X, y, theta, lambda) computes the </span><br><span class="line">%   cost of using theta as the parameter for linear regression to fit the </span><br><span class="line">%   data points in X and y. Returns the cost in J and the gradient in grad</span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line">grad = zeros(size(theta));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost and gradient of regularized linear </span><br><span class="line">%               regression for a particular choice of theta.</span><br><span class="line">%</span><br><span class="line">%               You should set J to the cost and grad to the gradient.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">J = 1 / (2 * m) * sum((X * theta -y) .^ 2) + lambda / (2 * m) * sum(theta(2:end).^ 2);</span><br><span class="line"></span><br><span class="line">grad = 1 / m * (X&apos; * (X * theta - y));</span><br><span class="line">grad(2:end) = grad(2:end) + lambda / m * theta(2:end);</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">grad = grad(:);</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h4 id="learningCurve-m"><a href="#learningCurve-m" class="headerlink" title=" learningCurve.m "></a><strong> learningCurve.m </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br></pre></td><td class="code"><pre><span class="line">function [error_train, error_val] = ...</span><br><span class="line">    learningCurve(X, y, Xval, yval, lambda)</span><br><span class="line">%LEARNINGCURVE Generates the train and cross validation set errors needed </span><br><span class="line">%to plot a learning curve</span><br><span class="line">%   [error_train, error_val] = ...</span><br><span class="line">%       LEARNINGCURVE(X, y, Xval, yval, lambda) returns the train and</span><br><span class="line">%       cross validation set errors for a learning curve. In particular, </span><br><span class="line">%       it returns two vectors of the same length - error_train and </span><br><span class="line">%       error_val. Then, error_train(i) contains the training error for</span><br><span class="line">%       i examples (and similarly for error_val(i)).</span><br><span class="line">%</span><br><span class="line">%   In this function, you will compute the train and test errors for</span><br><span class="line">%   dataset sizes from 1 up to m. In practice, when working with larger</span><br><span class="line">%   datasets, you might want to do this in larger intervals.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% Number of training examples</span><br><span class="line">m = size(X, 1);</span><br><span class="line"></span><br><span class="line">% You need to return these values correctly</span><br><span class="line">error_train = zeros(m, 1);</span><br><span class="line">error_val   = zeros(m, 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Fill in this function to return training errors in </span><br><span class="line">%               error_train and the cross validation errors in error_val. </span><br><span class="line">%               i.e., error_train(i) and </span><br><span class="line">%               error_val(i) should give you the errors</span><br><span class="line">%               obtained after training on i examples.</span><br><span class="line">%</span><br><span class="line">% Note: You should evaluate the training error on the first i training</span><br><span class="line">%       examples (i.e., X(1:i, :) and y(1:i)).</span><br><span class="line">%</span><br><span class="line">%       For the cross-validation error, you should instead evaluate on</span><br><span class="line">%       the _entire_ cross validation set (Xval and yval).</span><br><span class="line">%</span><br><span class="line">% Note: If you are using your cost function (linearRegCostFunction)</span><br><span class="line">%       to compute the training and cross validation error, you should </span><br><span class="line">%       call the function with the lambda argument set to 0. </span><br><span class="line">%       Do note that you will still need to use lambda when running</span><br><span class="line">%       the training to obtain the theta parameters.</span><br><span class="line">%</span><br><span class="line">% Hint: You can loop over the examples with the following:</span><br><span class="line">%</span><br><span class="line">%       for i = 1:m</span><br><span class="line">%           % Compute train/cross validation errors using training examples </span><br><span class="line">%           % X(1:i, :) and y(1:i), storing the result in </span><br><span class="line">%           % error_train(i) and error_val(i)</span><br><span class="line">%           ....</span><br><span class="line">%           </span><br><span class="line">%       end</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% ---------------------- Sample Solution ----------------------</span><br><span class="line"></span><br><span class="line">for i = 1:m</span><br><span class="line">    theta = trainLinearReg(X(1:i,:), y(1:i), lambda);</span><br><span class="line">    error_train(i) = linearRegCostFunction(X(1:i,:), y(1:i), theta, 0);</span><br><span class="line">    error_val(i) = linearRegCostFunction(Xval, yval, theta, 0);</span><br><span class="line">end </span><br><span class="line"></span><br><span class="line">% -------------------------------------------------------------</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h4 id="polyFeatures-m"><a href="#polyFeatures-m" class="headerlink" title=" polyFeatures.m "></a><strong> polyFeatures.m </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">function [X_poly] = polyFeatures(X, p)</span><br><span class="line">%POLYFEATURES Maps X (1D vector) into the p-th power</span><br><span class="line">%   [X_poly] = POLYFEATURES(X, p) takes a data matrix X (size m x 1) and</span><br><span class="line">%   maps each example into its polynomial features where</span><br><span class="line">%   X_poly(i, :) = [X(i) X(i).^2 X(i).^3 ...  X(i).^p];</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly.</span><br><span class="line">X_poly = zeros(numel(X), p);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Given a vector X, return a matrix X_poly where the p-th </span><br><span class="line">%               column of X contains the values of X to the p-th power.</span><br><span class="line">%</span><br><span class="line">% </span><br><span class="line"></span><br><span class="line">for j = 1:p</span><br><span class="line"> X_poly(:,j) = X.^j;</span><br><span class="line">end</span><br><span class="line">% =========================================================================</span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h4 id="validationCurve-m"><a href="#validationCurve-m" class="headerlink" title=" validationCurve.m "></a><strong> validationCurve.m </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">function [lambda_vec, error_train, error_val] = ...</span><br><span class="line">    validationCurve(X, y, Xval, yval)</span><br><span class="line">%VALIDATIONCURVE Generate the train and validation errors needed to</span><br><span class="line">%plot a validation curve that we can use to select lambda</span><br><span class="line">%   [lambda_vec, error_train, error_val] = ...</span><br><span class="line">%       VALIDATIONCURVE(X, y, Xval, yval) returns the train</span><br><span class="line">%       and validation errors (in error_train, error_val)</span><br><span class="line">%       for different values of lambda. You are given the training set (X,</span><br><span class="line">%       y) and validation set (Xval, yval).</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% Selected values of lambda (you should not change this)</span><br><span class="line">lambda_vec = [0 0.001 0.003 0.01 0.03 0.1 0.3 1 3 10]&apos;;</span><br><span class="line"></span><br><span class="line">% You need to return these variables correctly.</span><br><span class="line">error_train = zeros(length(lambda_vec), 1);</span><br><span class="line">error_val = zeros(length(lambda_vec), 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Fill in this function to return training errors in </span><br><span class="line">%               error_train and the validation errors in error_val. The </span><br><span class="line">%               vector lambda_vec contains the different lambda parameters </span><br><span class="line">%               to use for each calculation of the errors, i.e, </span><br><span class="line">%               error_train(i), and error_val(i) should give </span><br><span class="line">%               you the errors obtained after training with </span><br><span class="line">%               lambda = lambda_vec(i)</span><br><span class="line">%</span><br><span class="line">% Note: You can loop over lambda_vec with the following:</span><br><span class="line">%</span><br><span class="line">%       for i = 1:length(lambda_vec)</span><br><span class="line">%           lambda = lambda_vec(i);</span><br><span class="line">%           % Compute train / val errors when training linear </span><br><span class="line">%           % regression with regularization parameter lambda</span><br><span class="line">%           % You should store the result in error_train(i)</span><br><span class="line">%           % and error_val(i)</span><br><span class="line">%           ....</span><br><span class="line">%           </span><br><span class="line">%       end</span><br><span class="line">%</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">for i=1:size(lambda_vec, 1)</span><br><span class="line">    theta = trainLinearReg(X, y, lambda_vec(i));</span><br><span class="line">    error_train(i) = linearRegCostFunction(X, y, theta, 0);</span><br><span class="line">    error_val(i) = linearRegCostFunction(Xval, yval, theta, 0);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="课程部分内容记录"><a href="#课程部分内容记录" class="headerlink" title=" 课程部分内容记录 "></a><strong> 课程部分内容记录 </strong></h3><h4 id="Evaluating-a-Hypothesis"><a href="#Evaluating-a-Hypothesis" class="headerlink" title=" Evaluating a Hypothesis "></a><strong> Evaluating a Hypothesis </strong></h4><p>Once we have done some trouble shooting for errors in our predictions by:</p><blockquote><p>1.Getting more training examples<br>2.Trying smaller sets of features<br>3.Trying additional features<br>4.Trying polynomial features<br>5.Increasing or decreasing λ<br>6.We can move on to evaluate our new hypothesis.</p></blockquote><p>A hypothesis may have a low error for the training examples but still be inaccurate (because of overfitting). Thus, to evaluate a hypothesis, given a dataset of training examples, we can split up the data into two sets: a training set and a test set. <span class="under0"><strong> Typically, the training set consists of 70 % of your data and the test set is the remaining 30 %.</strong></span></p><hr><h4 id="Diagnosing-Bias-vs-Variance"><a href="#Diagnosing-Bias-vs-Variance" class="headerlink" title=" Diagnosing Bias vs. Variance "></a><strong> Diagnosing Bias vs. Variance </strong></h4><p><strong>High bias (underfitting): </strong>both $J_{train}(\Theta)$  and $J_{CV}(\Theta)$ will be high. Also, $J_{CV}(\Theta) \approx J_{train}(\Theta)$<br><strong> High variance (overfitting): </strong>$J_{train}(\Theta)$ will be low and $J_{CV}(\Theta)$ will be much greater than $J_{train}(\Theta)$<br>The is summarized in the figure below:</p><p><img src="/img/机器学习/the-sixth-week-homework-of-ML-Stanford/1.png" alt="1.png"></p><hr><h4 id="Learning-Curves"><a href="#Learning-Curves" class="headerlink" title=" Learning Curves "></a><strong> Learning Curves </strong></h4><p><img src="/img/机器学习/the-sixth-week-homework-of-ML-Stanford/2.png" alt="2.png"></p><hr><h4 id="Deciding-What-to-Do-Next-Revisited"><a href="#Deciding-What-to-Do-Next-Revisited" class="headerlink" title=" Deciding What to Do Next Revisited "></a><strong> Deciding What to Do Next Revisited </strong></h4><p>Our decision process can be broken down as follows:</p><blockquote><ol><li>Getting more training examples: Fixes high variance</li><li>Trying smaller sets of features: Fixes high variance</li><li>Adding features: Fixes high bias</li><li>Adding polynomial features: Fixes high bias</li><li>Decreasing λ: Fixes high bias</li><li>Increasing λ: Fixes high variance.</li></ol></blockquote><hr><p><img src="/img/机器学习/the-sixth-week-homework-of-ML-Stanford/3.png" alt="3.png"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/qq_27008079/article/details/72511079" target="_blank" rel="noopener">Coursera吴恩达机器学习课程 总结笔记及作业代码——第6周有关机器学习的小建议</a><br><a href="http://blog.sina.com.cn/s/blog_9e67285801010ttn.html" target="_blank" rel="noopener">matlab函数 bsxfun浅谈（转载）</a><br><a href="https://blog.csdn.net/hns20070/article/details/8926084" target="_blank" rel="noopener">Octave学习随笔（更新至6.16）【bsxfun】</a><br><a href="https://www.mathworks.com/help/matlab/ref/ldivide.html" target="_blank" rel="noopener">ldivide, .\</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Advice for Applying Machine Learning </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第五周编程作业</title>
      <link href="/2018/06/06/the-fifth-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/06/the-fifth-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第五周的编程作业答案记录,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/fif-week" target="_blank" rel="noopener">github</a></p><p>此外还记录我在人工智能吧看到的<a href="http://tieba.baidu.com/p/3013551686?see_lz=1" target="_blank" rel="noopener">一篇讲解神经网络的精品帖子</a>的部分搬运。贴吧真是大佬多啊orz</p><hr><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/6.png" alt="6.png"></p><hr><h3 id="作业答案"><a href="#作业答案" class="headerlink" title=" 作业答案 "></a><strong> 作业答案 </strong></h3><h4 id="nnCostFunction-m"><a href="#nnCostFunction-m" class="headerlink" title=" nnCostFunction.m "></a><strong> nnCostFunction.m </strong></h4><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/1.png" alt="1.png"></p><hr><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/2.png" alt="2.png"></p><hr><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/4.png" alt="4.png"></p><hr><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/5.png" alt="5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br></pre></td><td class="code"><pre><span class="line">function [J grad] = nnCostFunction(nn_params, ...</span><br><span class="line">                                   input_layer_size, ...</span><br><span class="line">                                   hidden_layer_size, ...</span><br><span class="line">                                   num_labels, ...</span><br><span class="line">                                   X, y, lambda)</span><br><span class="line">%NNCOSTFUNCTION Implements the neural network cost function for a two layer</span><br><span class="line">%neural network which performs classification</span><br><span class="line">%   [J grad] = NNCOSTFUNCTON(nn_params, hidden_layer_size, num_labels, ...</span><br><span class="line">%   X, y, lambda) computes the cost and gradient of the neural network. The</span><br><span class="line">%   parameters for the neural network are &quot;unrolled&quot; into the vector</span><br><span class="line">%   nn_params and need to be converted back into the weight matrices. </span><br><span class="line">% </span><br><span class="line">%   The returned parameter grad should be a &quot;unrolled&quot; vector of the</span><br><span class="line">%   partial derivatives of the neural network.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% Reshape nn_params back into the parameters Theta1 and Theta2, the weight matrices</span><br><span class="line">% for our 2 layer neural network</span><br><span class="line">Theta1 = reshape(nn_params(1:hidden_layer_size * (input_layer_size + 1)), ...</span><br><span class="line">                 hidden_layer_size, (input_layer_size + 1));</span><br><span class="line"></span><br><span class="line">Theta2 = reshape(nn_params((1 + (hidden_layer_size * (input_layer_size + 1))):end), ...</span><br><span class="line">                 num_labels, (hidden_layer_size + 1));</span><br><span class="line"></span><br><span class="line">% Setup some useful variables</span><br><span class="line">m = size(X, 1);</span><br><span class="line">         </span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line">Theta1_grad = zeros(size(Theta1));</span><br><span class="line">Theta2_grad = zeros(size(Theta2));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: You should complete the code by working through the</span><br><span class="line">%               following parts.</span><br><span class="line">%</span><br><span class="line">% Part 1: Feedforward the neural network and return the cost in the</span><br><span class="line">%         variable J. After implementing Part 1, you can verify that your</span><br><span class="line">%         cost function computation is correct by verifying the cost</span><br><span class="line">%         computed in ex4.m</span><br><span class="line">%</span><br><span class="line">% Part 2: Implement the backpropagation algorithm to compute the gradients</span><br><span class="line">%         Theta1_grad and Theta2_grad. You should return the partial derivatives of</span><br><span class="line">%         the cost function with respect to Theta1 and Theta2 in Theta1_grad and</span><br><span class="line">%         Theta2_grad, respectively. After implementing Part 2, you can check</span><br><span class="line">%         that your implementation is correct by running checkNNGradients</span><br><span class="line">%</span><br><span class="line">%         Note: The vector y passed into the function is a vector of labels</span><br><span class="line">%               containing values from 1..K. You need to map this vector into a </span><br><span class="line">%               binary vector of 1&apos;s and 0&apos;s to be used with the neural network</span><br><span class="line">%               cost function.</span><br><span class="line">%</span><br><span class="line">%         Hint: We recommend implementing backpropagation using a for-loop</span><br><span class="line">%               over the training examples if you are implementing it for the </span><br><span class="line">%               first time.</span><br><span class="line">%</span><br><span class="line">% Part 3: Implement regularization with the cost function and gradients.</span><br><span class="line">%</span><br><span class="line">%         Hint: You can implement this around the code for</span><br><span class="line">%               backpropagation. That is, you can compute the gradients for</span><br><span class="line">%               the regularization separately and then add them to Theta1_grad</span><br><span class="line">%               and Theta2_grad from Part 2.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">ylable = eye(num_labels)(y,:);</span><br><span class="line"></span><br><span class="line">a1 = [ones(m,1) X];</span><br><span class="line">z2 = a1 * Theta1&apos;;</span><br><span class="line">a2 = sigmoid(z2);</span><br><span class="line">a2 = [ones(m,1) a2];</span><br><span class="line">a3 = sigmoid(a2 * Theta2&apos;);</span><br><span class="line"></span><br><span class="line">% 这里不知道为什么用向量的形式写出来是不对的?</span><br><span class="line">%J = 1 / m * (-ylable&apos; * log(a3) - (1 - ylable&apos;) * log(1 - a3));</span><br><span class="line">J = 1 / m * sum( sum( -ylable.* log(a3) -  (1-ylable).*log(1-a3) )); </span><br><span class="line"></span><br><span class="line">% pay attention :&quot; Theta1(:,2:end) &quot; , no &quot;Theta1&quot; .  </span><br><span class="line">regularized = lambda/(2*m) * (sum(sum(Theta1(:,2:end).^2)) + sum(sum(Theta2(:,2:end).^2)) );  </span><br><span class="line">  </span><br><span class="line">J = J + regularized;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">delta3 = a3-ylable;            %5000x10  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">delta2 = delta3 * Theta2 ;  </span><br><span class="line">delta2 = delta2(:,2:end);     </span><br><span class="line">  </span><br><span class="line">delta2 = delta2 .* sigmoidGradient(z2);  %5000x25  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">Delta_1 = zeros(size(Theta1));  </span><br><span class="line">Delta_2 = zeros(size(Theta2));  </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">Delta_1 = Delta_1 + delta2&apos; * a1 ;    </span><br><span class="line">  </span><br><span class="line">Delta_2 = Delta_2 + delta3&apos; * a2 ;    </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">Theta1_grad = 1/m * Delta_1;   </span><br><span class="line">Theta2_grad = 1/m * Delta_2;   </span><br><span class="line">  </span><br><span class="line">  </span><br><span class="line">regularized_1 = lambda/m * Theta1;  </span><br><span class="line">regularized_2 = lambda/m * Theta2;  </span><br><span class="line">  </span><br><span class="line">% j = 0是不需要正则化的</span><br><span class="line">regularized_1(:,1) = zeros(size(regularized_1,1),1);  </span><br><span class="line">regularized_2(:,1) = zeros(size(regularized_2,1),1);  </span><br><span class="line">  </span><br><span class="line">Theta1_grad = Theta1_grad + regularized_1;  </span><br><span class="line">Theta2_grad = Theta2_grad + regularized_2;  </span><br><span class="line">  </span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">% Unroll gradients</span><br><span class="line">grad = [Theta1_grad(:) ; Theta2_grad(:)];</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h4 id="sigmoidGradient-m"><a href="#sigmoidGradient-m" class="headerlink" title=" sigmoidGradient.m "></a><strong> sigmoidGradient.m </strong></h4><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/3.png" alt="3.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function g = sigmoidGradient(z)</span><br><span class="line">%SIGMOIDGRADIENT returns the gradient of the sigmoid function</span><br><span class="line">%evaluated at z</span><br><span class="line">%   g = SIGMOIDGRADIENT(z) computes the gradient of the sigmoid function</span><br><span class="line">%   evaluated at z. This should work regardless if z is a matrix or a</span><br><span class="line">%   vector. In particular, if z is a vector or matrix, you should return</span><br><span class="line">%   the gradient for each element.</span><br><span class="line"></span><br><span class="line">g = zeros(size(z));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the gradient of the sigmoid function evaluated at</span><br><span class="line">%               each value of z (z can be a matrix, vector or scalar).</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">g = sigmoid(z).*(1 - sigmoid(z));</span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h4 id="randInitializeWeights-m"><a href="#randInitializeWeights-m" class="headerlink" title=" randInitializeWeights.m "></a><strong> randInitializeWeights.m </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line">function W = randInitializeWeights(L_in, L_out)</span><br><span class="line">%RANDINITIALIZEWEIGHTS Randomly initialize the weights of a layer with L_in</span><br><span class="line">%incoming connections and L_out outgoing connections</span><br><span class="line">%   W = RANDINITIALIZEWEIGHTS(L_in, L_out) randomly initializes the weights </span><br><span class="line">%   of a layer with L_in incoming connections and L_out outgoing </span><br><span class="line">%   connections. </span><br><span class="line">%</span><br><span class="line">%   Note that W should be set to a matrix of size(L_out, 1 + L_in) as</span><br><span class="line">%   the first column of W handles the &quot;bias&quot; terms</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">W = zeros(L_out, 1 + L_in);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Initialize W randomly so that we break the symmetry while</span><br><span class="line">%               training the neural network.</span><br><span class="line">%</span><br><span class="line">% Note: The first column of W corresponds to the parameters for the bias unit</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">epsilon_init = 0.12;</span><br><span class="line">W = rand(L_out, 1 + L_in) * 2 * epsilon_init − epsilon_init;</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="贴吧搬运"><a href="#贴吧搬运" class="headerlink" title=" 贴吧搬运　"></a><strong> 贴吧搬运　</strong></h3><p>参考这个帖子,仅供参考<a href="http://tieba.baidu.com/p/3013551686?see_lz=1" target="_blank" rel="noopener">机器学习入门——浅谈神经网络</a></p><p><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/7.jpg" alt="7.jpg"><br><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/8.jpg" alt="8.jpg"><br><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/9.jpg" alt="9.jpg"><br><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/10.jpg" alt="10.jpg"><br><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/11.jpg" alt="11.jpg"><br><img src="/img/机器学习/the-fifth-week-homework-of-ML-Stanford/12.jpg" alt="12.jpg"></p><p>这里介绍的是计算完一条记录，就马上更新权重，以后每计算完一条都即时更新权重。实际上批量更新的效果会更好，方法是在不更新权重的情况下，把记录集的每条记录都算过一遍，把要更新的增值全部累加起来求平均值，然后利用这个平均值来更新一次权重，然后利用更新后的权重进行下一轮的计算，这种方法叫批量梯度下降(Batch Gradient Descent)。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://tieba.baidu.com/p/3013551686?see_lz=1" target="_blank" rel="noopener">机器学习入门——浅谈神经网络</a><br><a href="https://blog.csdn.net/dialoal/article/details/50562244" target="_blank" rel="noopener">machine-learning第五周 上机作业</a><br><a href="https://blog.csdn.net/qq_27008079/article/details/71833370" target="_blank" rel="noopener">Coursera吴恩达机器学习课程 总结笔记及作业代码——第5周神经网络续</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Neural Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo加密</title>
      <link href="/2018/06/05/encryption-of-hexo/"/>
      <url>/2018/06/05/encryption-of-hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对hexo对文章加密以及这个过程中踩的一些坑(包括一些浏览器本身的坑)的记录</p><hr><h3 id="hexo-blog-encrypt"><a href="#hexo-blog-encrypt" class="headerlink" title=" hexo-blog-encrypt "></a><strong> hexo-blog-encrypt </strong></h3><p>加密是使用的插件<a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a></p><h4 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h4><p>在 hexo 根目录的 <code>package.json</code> 中添加 <code>&quot;hexo-blog-encrypt&quot;: &quot;1.1.*&quot;</code> 依赖。<br>然后执行 <code>npm install</code> 命令。<br>该插件会自动安装</p><p><span class="under0"> <strong> 这里一定要注意的是不要直接<code>npm install hexo-blog-encrypt</code>,这样文章是会加密失败的,具体原因不知。 </strong></span></p><hr><h4 id="快速开始"><a href="#快速开始" class="headerlink" title=" 快速开始 "></a><strong> 快速开始 </strong></h4><p>首先在 <code>_config.yml</code> 中启用该插件:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Security</span><br><span class="line">##</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure></p><p>然后在你的文章的头部添加上对应的字段，如 <code>password</code>, <code>abstract</code>, <code>message</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">---</span><br><span class="line">title: hello world</span><br><span class="line">date: 2016-03-30 21:18:02</span><br><span class="line">tags:</span><br><span class="line">    - fdsafsdaf</span><br><span class="line">password: Mike</span><br><span class="line">abstract: Welcome to my blog, enter password to read.</span><br><span class="line">message: Welcome to my blog, enter password to read.</span><br><span class="line">---</span><br></pre></td></tr></table></figure><p><code>password</code>: 是该博客加密使用的密码<br><code>abstract</code>: 是该博客的摘要，会显示在博客的列表页<br><code>message</code>: 这个是博客查看时，密码输入框上面的描述性文字</p><p>然后使用 <code>hexo clean &amp;&amp; hexo g &amp;&amp; hexo s</code>,来查看效果。</p><p>当然你也可以像我这样写入<code>package.json</code>中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"hexo g &amp;&amp; hexo s"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"hexo g &amp;&amp; hexo d"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>执行<code>hexo clean &amp;&amp; npm start</code>即可</p><hr><h3 id="自定义加密模板"><a href="#自定义加密模板" class="headerlink" title=" 自定义加密模板　"></a><strong> 自定义加密模板　</strong></h3><p>做完前面的工作,就已经对文章加密成功了。不过默认的模板比较丑,官方提供了自定义模板的方法如下:</p><p><span class="under0"> <strong> 如果你对默认的主题不满意，或者希望修改默认的提示和摘要内容，你可以添加如下配置在 <code>_config.yml</code> 中。</strong></span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Security</span><br><span class="line">##</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br><span class="line">    default_abstract: the content has been encrypted, enter the password to read.&lt;/br&gt;</span><br><span class="line">    default_message: Please enter the password to read.</span><br><span class="line">    default_template:</span><br><span class="line">                    &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.3/jquery.min.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">                    &lt;div id=&quot;security&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;input-container&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;password&quot; class=&quot;form-control&quot; id=&quot;pass&quot; placeholder=&quot; &#123;&#123;message&#125;&#125; &quot; /&gt;</span><br><span class="line">                            &lt;label for=&quot;pass&quot;&gt; &#123;&#123;message&#125;&#125; &lt;/label&gt;</span><br><span class="line">                            &lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div id=&quot;encrypt-blog&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">                        &#123;&#123;content&#125;&#125;</span><br><span class="line">                    &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p>以看见，和上面的配置文件对比来看，多了 <code>default_template</code> 和 <code>default_abstract</code> 和 <code>default_message</code> 配置项。</p><blockquote><p><code>default_abstract</code> : 这个是指在文章列表页，我们看到的加密文章描述。当然这是对所有加密文章生效的。<br><code>default_message</code> : 这个在文章详情页的密码输入框上方的描述性文字。<br><code>default_template</code> : 这个是指在文章详情页，我们看到的输入密码阅读的模板，同理，这个也是针对所有文章的。<br>最后的 <code>content</code> 显示 div 的 id 必须 是 <code>&#39;encrypt-blog&#39;</code>，同时为了好看，也希望进行隐藏。<br>同时，必须要有一个 input 输入框，id 必须是”pass”，用来供用户输入密码。<br>输入密码之后，务必要有一个触发器，用来调用 <code>&#39;decryptAES&#39;</code> 函数。样例中以 <code>button</code> 来触发。</p></blockquote><hr><p>这里我给出我自己修改的模板和样式,喜欢的同学可以拿去直接用</p><p><img src="/img/chrome-bugs/encryption-of-hexo/1.png" alt="1.png"></p><p><a href="http://www.sail.name/2018/06/05/atest/">实际效果见我这篇demo</a></p><p><strong> html </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"># Security</span><br><span class="line">##</span><br><span class="line">encrypt:</span><br><span class="line">    enable: true</span><br><span class="line">    default_abstract: 我的秘密花园</span><br><span class="line">    default_message: 姿势,什么姿势?</span><br><span class="line">    default_template:</span><br><span class="line">                    &lt;div id=&quot;security&quot;&gt;</span><br><span class="line">                        &lt;div class=&quot;orz-container&quot;&gt;</span><br><span class="line">                            &lt;input style=&quot;display:none&quot;&gt;</span><br><span class="line">                            &lt;input type=&quot;password&quot; class=&quot;get-key&quot; id=&quot;pass&quot; autocomplete=&quot;new-password&quot;  placeholder=&quot;解锁新知识&quot; /&gt;</span><br><span class="line">&lt;div class=&quot;input-group-orz&quot;&gt; &lt;button type=&quot;button&quot; class=&quot;final-key&quot; onclick=&quot;decryptAES()&quot;&gt;O.O&lt;/button&gt; &lt;/div&gt;</span><br><span class="line">                            &lt;div class=&quot;bottom-line&quot;&gt;&lt;/div&gt;</span><br><span class="line">                        &lt;/div&gt;</span><br><span class="line">                    &lt;/div&gt;</span><br><span class="line">                    &lt;div id=&quot;encrypt-blog&quot; style=&quot;display:none&quot;&gt;</span><br><span class="line">                        &#123;&#123;content&#125;&#125;</span><br><span class="line">                    &lt;/div&gt;</span><br></pre></td></tr></table></figure></p><p><strong> css </strong><br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*============文章加密样式=============*/</span></span><br><span class="line"><span class="selector-class">.orz-container</span> &#123;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.orz-container</span> <span class="selector-tag">input</span><span class="selector-attr">[type=<span class="string">"password"</span>]</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">left</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">transform</span>: <span class="built_in">translateX</span>(-<span class="number">50%</span>);</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">150px</span>;</span><br><span class="line">  <span class="attribute">padding</span>: <span class="number">0</span> <span class="number">0</span>;</span><br><span class="line">  <span class="attribute">border</span>:none;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">18px</span>;</span><br><span class="line">  <span class="attribute">text-indent</span>: <span class="number">4px</span>;</span><br><span class="line">  <span class="attribute">color</span>: deepskyblue;</span><br><span class="line">  <span class="attribute">border</span>:<span class="number">2px</span> salmon solid;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;</span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span> white inset; <span class="comment">/* Change the color to your own background color */</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="selector-class">.orz-container</span> <span class="selector-class">.final-key</span> &#123;</span><br><span class="line">  <span class="attribute">position</span>: relative;</span><br><span class="line">  <span class="attribute">margin</span>: <span class="number">0</span> auto;</span><br><span class="line">  <span class="attribute">display</span>: block;</span><br><span class="line">  <span class="attribute">background</span>: <span class="number">#FFFFFF</span>;</span><br><span class="line">  <span class="attribute">border</span>: <span class="number">3px</span> solid skyblue;</span><br><span class="line">  <span class="attribute">width</span>: <span class="number">100px</span>;</span><br><span class="line">  <span class="attribute">font-size</span>: <span class="number">16px</span>;</span><br><span class="line">  <span class="attribute">font-weight</span>: <span class="number">600</span>;</span><br><span class="line">  <span class="attribute">border-radius</span>: <span class="number">50%</span>;</span><br><span class="line">  <span class="attribute">height</span>: <span class="number">100px</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-class">.orz-container</span> <span class="selector-class">.final-key</span><span class="selector-pseudo">:hover</span>, <span class="selector-class">.final-key</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">background</span>: yellow;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*============文章加密样式=============*/</span></span><br></pre></td></tr></table></figure></p><hr><h3 id="意外的bug"><a href="#意外的bug" class="headerlink" title=" 意外的bug "></a><strong> 意外的bug </strong></h3><p>这次写这个加密样式的时候,遭遇了一个chrome存在了八年的问题,官方链接戳这儿</p><p><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=46543" target="_blank" rel="noopener">Auto-filled input text box yellow background highlight cannot be turned off!</a></p><p>就是<code>input</code>自动填充的背景颜色是黄色,不能关上。那个颜色的确很….</p><p>折腾了很久,最终找到了一个hack的解决办法</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span>, <span class="selector-tag">input</span><span class="selector-pseudo">:-webkit-autofill</span><span class="selector-pseudo">:focus</span> &#123;</span><br><span class="line">  <span class="attribute">z-index</span>: <span class="number">4</span>;  <span class="comment">/*  这句可以不要　*/</span></span><br><span class="line">  <span class="attribute">-webkit-box-shadow</span>:<span class="number">0</span> <span class="number">0</span> <span class="number">0</span> <span class="number">100px</span> white inset; <span class="comment">/* Change the color to your own background color */</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>后来我又找到了一个办法,既然是自动填充会出现这个黄色,那让input不要自动填充不就好了吗</p><p>这里我列出解决方法,具体可以看本文的参考链接</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 一、使用隐藏input来接受浏览器自动填充，这样不会影响用户体验，也可以兼容所有浏览器</span><br><span class="line">&lt;input style=&quot;display:none&quot;&gt;</span><br><span class="line">or</span><br><span class="line">&lt;input type=&quot;password&quot; style=&#123;&#123;position: &apos;absolute&apos;, top: &apos;-999px&apos;&#125;&#125;/&gt;</span><br><span class="line"></span><br><span class="line"># 二、</span><br><span class="line">&lt;input type=&quot;password&quot; class=&quot;get-key&quot; id=&quot;pass&quot; autocomplete=&quot;new-password&quot;  placeholder=&quot;解锁新知识&quot; /&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://github.com/MikeCoder/hexo-blog-encrypt/blob/master/ReadMe.zh.md" target="_blank" rel="noopener">hexo-blog-encrypt</a><br><a href="https://segmentfault.com/q/1010000006090445?_ea=1009491" target="_blank" rel="noopener">禁止浏览器自动填充到表单</a><br><a href="https://www.jianshu.com/p/368eb18f04cf" target="_blank" rel="noopener">不能忍受的屎黄: chrome表单自动填充</a><br><a href="https://bugs.chromium.org/p/chromium/issues/detail?id=46543" target="_blank" rel="noopener">Auto-filled input text box yellow background highlight cannot be turned off!</a><br><a href="http://webagility.com/posts/the-ultimate-list-of-hacks-for-chromes-forced-yellow-background-on-autocompleted-inputs" target="_blank" rel="noopener">The ultimate list of hacks for Chrome’s forced yellow background on autocompleted inputs</a></p>]]></content>
      
      
      <categories>
          
          <category> chrome-bugs </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo&amp;&amp;博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第四周编程作业</title>
      <link href="/2018/06/03/the-fourth-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/03/the-fourth-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第四周的编程作业答案,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/fourth-week" target="_blank" rel="noopener">github</a></p><hr><h3 id="lrCostFunction-m"><a href="#lrCostFunction-m" class="headerlink" title=" lrCostFunction.m "></a><strong> lrCostFunction.m </strong></h3><p><img src="/img/机器学习/the-fourth-week-homework-of-ML-Stanford/1.png" alt="1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">function [J, grad] = lrCostFunction(theta, X, y, lambda)</span><br><span class="line">%LRCOSTFUNCTION Compute cost and gradient for logistic regression with </span><br><span class="line">%regularization</span><br><span class="line">%   J = LRCOSTFUNCTION(theta, X, y, lambda) computes the cost of using</span><br><span class="line">%   theta as the parameter for regularized logistic regression and the</span><br><span class="line">%   gradient of the cost w.r.t. to the parameters. </span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line">grad = zeros(size(theta));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost of a particular choice of theta.</span><br><span class="line">%               You should set J to the cost.</span><br><span class="line">%               Compute the partial derivatives and set grad to the partial</span><br><span class="line">%               derivatives of the cost w.r.t. each parameter in theta</span><br><span class="line">%</span><br><span class="line">% Hint: The computation of the cost function and gradients can be</span><br><span class="line">%       efficiently vectorized. For example, consider the computation</span><br><span class="line">%</span><br><span class="line">%           sigmoid(X * theta)</span><br><span class="line">%</span><br><span class="line">%       Each row of the resulting matrix will contain the value of the</span><br><span class="line">%       prediction for that example. You can make use of this to vectorize</span><br><span class="line">%       the cost function and gradient computations. </span><br><span class="line">%</span><br><span class="line">% Hint: When computing the gradient of the regularized cost function, </span><br><span class="line">%       there&apos;re many possible vectorized solutions, but one solution</span><br><span class="line">%       looks like:</span><br><span class="line">%           grad = (unregularized gradient for logistic regression)</span><br><span class="line">%           temp = theta; </span><br><span class="line">%           temp(1) = 0;   % because we don&apos;t add anything for j = 0  </span><br><span class="line">%           grad = grad + YOUR_CODE_HERE (using the temp variable)</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">J = 1 / m * sum(-y .* log(sigmoid(X * theta)) - (1 - y) .* log(1 - sigmoid(X * theta)))  + lambda/2/m*sum(theta(2:end) .^ 2);</span><br><span class="line">%J = 1/m * (-y&apos; * log(sigmoid(X*theta)) - (1 - y&apos;)* log(1-sigmoid(X*theta))) + lambda/2/m*sum(theta(2:end) .^ 2);</span><br><span class="line">grad(1, :) = 1/m * (X(:,1)&apos;* (sigmoid(X*theta) - y));</span><br><span class="line">grad(2:end, :) = 1/m * (X(:,2:end)&apos;* (sigmoid(X*theta) - y)) + lambda/m*theta(2:end, :);</span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line">grad = grad(:);</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="oneVsAll-m"><a href="#oneVsAll-m" class="headerlink" title=" oneVsAll.m "></a><strong> oneVsAll.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">function [all_theta] = oneVsAll(X, y, num_labels, lambda)</span><br><span class="line">%ONEVSALL trains multiple logistic regression classifiers and returns all</span><br><span class="line">%the classifiers in a matrix all_theta, where the i-th row of all_theta </span><br><span class="line">%corresponds to the classifier for label i</span><br><span class="line">%   [all_theta] = ONEVSALL(X, y, num_labels, lambda) trains num_labels</span><br><span class="line">%   logistic regression classifiers and returns each of these classifiers</span><br><span class="line">%   in a matrix all_theta, where the i-th row of all_theta corresponds </span><br><span class="line">%   to the classifier for label i</span><br><span class="line"></span><br><span class="line">% Some useful variables</span><br><span class="line">m = size(X, 1);</span><br><span class="line">n = size(X, 2);</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">all_theta = zeros(num_labels, n + 1);</span><br><span class="line"></span><br><span class="line">% Add ones to the X data matrix</span><br><span class="line">X = [ones(m, 1) X];</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: You should complete the following code to train num_labels</span><br><span class="line">%               logistic regression classifiers with regularization</span><br><span class="line">%               parameter lambda. </span><br><span class="line">%</span><br><span class="line">% Hint: theta(:) will return a column vector.</span><br><span class="line">%</span><br><span class="line">% Hint: You can use y == c to obtain a vector of 1&apos;s and 0&apos;s that tell you</span><br><span class="line">%       whether the ground truth is true/false for this class.</span><br><span class="line">%</span><br><span class="line">% Note: For this assignment, we recommend using fmincg to optimize the cost</span><br><span class="line">%       function. It is okay to use a for-loop (for c = 1:num_labels) to</span><br><span class="line">%       loop over the different classes.</span><br><span class="line">%</span><br><span class="line">%       fmincg works similarly to fminunc, but is more efficient when we</span><br><span class="line">%       are dealing with large number of parameters.</span><br><span class="line">%</span><br><span class="line">% Example Code for fmincg:</span><br><span class="line">%</span><br><span class="line">%     % Set Initial theta</span><br><span class="line">%     initial_theta = zeros(n + 1, 1);</span><br><span class="line">%     </span><br><span class="line">%     % Set options for fminunc</span><br><span class="line">%     options = optimset(&apos;GradObj&apos;, &apos;on&apos;, &apos;MaxIter&apos;, 50);</span><br><span class="line">% </span><br><span class="line">%     % Run fmincg to obtain the optimal theta</span><br><span class="line">%     % This function will return theta and the cost </span><br><span class="line">%     [theta] = ...</span><br><span class="line">%         fmincg (@(t)(lrCostFunction(t, X, (y == c), lambda)), ...</span><br><span class="line">%                 initial_theta, options);</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">initial_theta = zeros(n + 1, 1);</span><br><span class="line">options = optimset(&apos;GradObj&apos;, &apos;on&apos;, &apos;MaxIter&apos;, 50);</span><br><span class="line">for c = 1:num_labels</span><br><span class="line">    all_theta(c, :) = fmincg (@(t)(lrCostFunction(t, X, (y == c), lambda)), initial_theta, options);</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="predictOneVsAll-m"><a href="#predictOneVsAll-m" class="headerlink" title=" predictOneVsAll.m "></a><strong> predictOneVsAll.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line">function p = predictOneVsAll(all_theta, X)</span><br><span class="line">%PREDICT Predict the label for a trained one-vs-all classifier. The labels </span><br><span class="line">%are in the range 1..K, where K = size(all_theta, 1). </span><br><span class="line">%  p = PREDICTONEVSALL(all_theta, X) will return a vector of predictions</span><br><span class="line">%  for each example in the matrix X. Note that X contains the examples in</span><br><span class="line">%  rows. all_theta is a matrix where the i-th row is a trained logistic</span><br><span class="line">%  regression theta vector for the i-th class. You should set p to a vector</span><br><span class="line">%  of values from 1..K (e.g., p = [1; 3; 1; 2] predicts classes 1, 3, 1, 2</span><br><span class="line">%  for 4 examples) </span><br><span class="line"></span><br><span class="line">m = size(X, 1);</span><br><span class="line">num_labels = size(all_theta, 1);</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">p = zeros(size(X, 1), 1);</span><br><span class="line"></span><br><span class="line">% Add ones to the X data matrix</span><br><span class="line">X = [ones(m, 1) X];</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Complete the following code to make predictions using</span><br><span class="line">%               your learned logistic regression parameters (one-vs-all).</span><br><span class="line">%               You should set p to a vector of predictions (from 1 to</span><br><span class="line">%               num_labels).</span><br><span class="line">%</span><br><span class="line">% Hint: This code can be done all vectorized using the max function.</span><br><span class="line">%       In particular, the max function can also return the index of the </span><br><span class="line">%       max element, for more information see &apos;help max&apos;. If your examples </span><br><span class="line">%       are in rows, then, you can use max(A, [], 2) to obtain the max </span><br><span class="line">%       for each row.</span><br><span class="line">%       </span><br><span class="line"></span><br><span class="line">temp = all_theta * X&apos;;</span><br><span class="line">[maxx, pp] = max(temp);</span><br><span class="line">p = pp&apos;;</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="predict-m"><a href="#predict-m" class="headerlink" title=" predict.m "></a><strong> predict.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">function p = predict(Theta1, Theta2, X)</span><br><span class="line">%PREDICT Predict the label of an input given a trained neural network</span><br><span class="line">%   p = PREDICT(Theta1, Theta2, X) outputs the predicted label of X given the</span><br><span class="line">%   trained weights of a neural network (Theta1, Theta2)</span><br><span class="line"></span><br><span class="line">% Useful values</span><br><span class="line">m = size(X, 1);</span><br><span class="line">num_labels = size(Theta2, 1);</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">p = zeros(size(X, 1), 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Complete the following code to make predictions using</span><br><span class="line">%               your learned neural network. You should set p to a </span><br><span class="line">%               vector containing labels between 1 to num_labels.</span><br><span class="line">%</span><br><span class="line">% Hint: The max function might come in useful. In particular, the max</span><br><span class="line">%       function can also return the index of the max element, for more</span><br><span class="line">%       information see &apos;help max&apos;. If your examples are in rows, then, you</span><br><span class="line">%       can use max(A, [], 2) to obtain the max for each row.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">X = [ones(m, 1) X];</span><br><span class="line">XX = sigmoid(X*Theta1&apos;);</span><br><span class="line">pp = sigmoid([ones(size(XX, 1), 1) XX] * Theta2&apos;);</span><br><span class="line">[a, p] = max(pp, [], 2);</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/jiangwennjust/article/details/6966172" target="_blank" rel="noopener">Octave基础</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Neural Networks </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第二周编程作业</title>
      <link href="/2018/06/02/the-second-week-homework-of-ML-Stanford/"/>
      <url>/2018/06/02/the-second-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第二周的编程作业答案,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/second-week" target="_blank" rel="noopener">github</a></p><hr><h3 id="warmUpExercise-m"><a href="#warmUpExercise-m" class="headerlink" title=" warmUpExercise.m "></a><strong> warmUpExercise.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">function A = warmUpExercise()</span><br><span class="line">%WARMUPEXERCISE Example function in octave</span><br><span class="line">%   A = WARMUPEXERCISE() is an example function that returns the 5x5 identity matrix</span><br><span class="line"></span><br><span class="line">A = [];</span><br><span class="line">% ============= YOUR CODE HERE ==============</span><br><span class="line">% Instructions: Return the 5x5 identity matrix </span><br><span class="line">%               In octave, we return values by defining which variables</span><br><span class="line">%               represent the return values (at the top of the file)</span><br><span class="line">%               and then set them accordingly. </span><br><span class="line"></span><br><span class="line">A = eye(5);</span><br><span class="line"></span><br><span class="line">% ===========================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="computeCost-m"><a href="#computeCost-m" class="headerlink" title=" computeCost.m　"></a><strong> computeCost.m　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function J = computeCost(X, y, theta)</span><br><span class="line">%COMPUTECOST Compute cost for linear regression</span><br><span class="line">%   J = COMPUTECOST(X, y, theta) computes the cost of using theta as the</span><br><span class="line">%   parameter for linear regression to fit the data points in X and y</span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost of a particular choice of theta</span><br><span class="line">%               You should set J to the cost.</span><br><span class="line">J = 1 / (2*m) * sum((X * theta - y).^2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="gradientDescent-m"><a href="#gradientDescent-m" class="headerlink" title=" gradientDescent.m　"></a><strong> gradientDescent.m　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">function [theta, J_history] = gradientDescent(X, y, theta, alpha, num_iters)</span><br><span class="line">%GRADIENTDESCENT Performs gradient descent to learn theta</span><br><span class="line">%   theta = GRADIENTDESCENT(X, y, theta, alpha, num_iters) updates theta by </span><br><span class="line">%   taking num_iters gradient steps with learning rate alpha</span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line">J_history = zeros(num_iters, 1);</span><br><span class="line"></span><br><span class="line">for iter = 1:num_iters</span><br><span class="line"></span><br><span class="line">    % ====================== YOUR CODE HERE ======================</span><br><span class="line">    % Instructions: Perform a single gradient step on the parameter vector</span><br><span class="line">    %               theta. </span><br><span class="line">    %</span><br><span class="line">    % Hint: While debugging, it can be useful to print out the values</span><br><span class="line">    %       of the cost function (computeCost) and gradient here.</span><br><span class="line">    %</span><br><span class="line">    temp=X&apos;*(X*theta-y);</span><br><span class="line">    theta=theta-1/m*alpha*temp;</span><br><span class="line"></span><br><span class="line">    % ============================================================</span><br><span class="line"></span><br><span class="line">    % Save the cost J in every iteration    </span><br><span class="line">    J_history(iter) = computeCost(X, y, theta);</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="featureNormalize-m"><a href="#featureNormalize-m" class="headerlink" title=" featureNormalize.m　"></a><strong> featureNormalize.m　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">function [X_norm, mu, sigma] = featureNormalize(X)</span><br><span class="line">%FEATURENORMALIZE Normalizes the features in X </span><br><span class="line">%   FEATURENORMALIZE(X) returns a normalized version of X where</span><br><span class="line">%   the mean value of each feature is 0 and the standard deviation</span><br><span class="line">%   is 1. This is often a good preprocessing step to do when</span><br><span class="line">%   working with learning algorithms.</span><br><span class="line"></span><br><span class="line">% You need to set these values correctly</span><br><span class="line">X_norm = X;</span><br><span class="line">mu = zeros(1, size(X, 2));</span><br><span class="line">sigma = zeros(1, size(X, 2));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: First, for each feature dimension, compute the mean</span><br><span class="line">%               of the feature and subtract it from the dataset,</span><br><span class="line">%               storing the mean value in mu. Next, compute the </span><br><span class="line">%               standard deviation of each feature and divide</span><br><span class="line">%               each feature by it&apos;s standard deviation, storing</span><br><span class="line">%               the standard deviation in sigma. </span><br><span class="line">%</span><br><span class="line">%               Note that X is a matrix where each column is a </span><br><span class="line">%               feature and each row is an example. You need </span><br><span class="line">%               to perform the normalization separately for </span><br><span class="line">%               each feature. </span><br><span class="line">%</span><br><span class="line">% Hint: You might find the &apos;mean&apos; and &apos;std&apos; functions useful.</span><br><span class="line">%       </span><br><span class="line"></span><br><span class="line">n = size(X_norm, 2);</span><br><span class="line">for i=1:n</span><br><span class="line">  X_norm(:,i)=(X_norm(:,i)- mean(X_norm(:,i)))/ std(X_norm(:,i));</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">% ============================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="computeCostMulti-m"><a href="#computeCostMulti-m" class="headerlink" title=" computeCostMulti.m　"></a><strong> computeCostMulti.m　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function J = computeCostMulti(X, y, theta)</span><br><span class="line">%COMPUTECOSTMULTI Compute cost for linear regression with multiple variables</span><br><span class="line">%   J = COMPUTECOSTMULTI(X, y, theta) computes the cost of using theta as the</span><br><span class="line">%   parameter for linear regression to fit the data points in X and y</span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost of a particular choice of theta</span><br><span class="line">%               You should set J to the cost.</span><br><span class="line"></span><br><span class="line">J = 1/(2*m)*sum((X*theta-y).^2);</span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="gradientDescentMulti-m"><a href="#gradientDescentMulti-m" class="headerlink" title=" gradientDescentMulti.m　"></a><strong> gradientDescentMulti.m　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function [theta, J_history] = gradientDescentMulti(X, y, theta, alpha, num_iters)</span><br><span class="line">%GRADIENTDESCENTMULTI Performs gradient descent to learn theta</span><br><span class="line">%   theta = GRADIENTDESCENTMULTI(x, y, theta, alpha, num_iters) updates theta by</span><br><span class="line">%   taking num_iters gradient steps with learning rate alpha</span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line">J_history = zeros(num_iters, 1);</span><br><span class="line"></span><br><span class="line">for iter = 1:num_iters</span><br><span class="line"></span><br><span class="line">    % ====================== YOUR CODE HERE ======================</span><br><span class="line">    % Instructions: Perform a single gradient step on the parameter vector</span><br><span class="line">    %               theta. </span><br><span class="line">    %</span><br><span class="line">    % Hint: While debugging, it can be useful to print out the values</span><br><span class="line">    %       of the cost function (computeCostMulti) and gradient here.</span><br><span class="line">    %</span><br><span class="line"></span><br><span class="line">temp=X&apos;*(X*theta-y);</span><br><span class="line">    theta=theta-1/m*alpha*temp;</span><br><span class="line"></span><br><span class="line">    % ============================================================</span><br><span class="line"></span><br><span class="line">    % Save the cost J in every iteration    </span><br><span class="line">    J_history(iter) = computeCostMulti(X, y, theta);</span><br><span class="line"></span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id><a href="#" class="headerlink" title=" 　"></a><strong> 　</strong></h3><p><img src="/img/机器学习/the-second-week-homework-of-ML-Stanford/1.png" alt="1.png"></p><h3 id="ex1-multi-m"><a href="#ex1-multi-m" class="headerlink" title=" ex1_multi.m "></a><strong> ex1_multi.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">% Plot the convergence graph</span><br><span class="line">figure;</span><br><span class="line">plot(1:numel(J_history), J_history, &apos;-b&apos;, &apos;LineWidth&apos;, 2);</span><br><span class="line">xlabel(&apos;Number of iterations&apos;);</span><br><span class="line">ylabel(&apos;Cost J&apos;);</span><br><span class="line"></span><br><span class="line">% Compare learning rate</span><br><span class="line">hold on;</span><br><span class="line">alpha = 0.03;</span><br><span class="line">theta = zeros(3, 1);</span><br><span class="line">[theta, J_history1] = gradientDescentMulti(X, y, theta, alpha, num_iters);</span><br><span class="line">plot(1:100, J_history1(1:100), &apos;r&apos;, &apos;LineWidth&apos;, 2);</span><br><span class="line"></span><br><span class="line">hold on;</span><br><span class="line">alpha = 0.1;</span><br><span class="line">theta = zeros(3, 1);</span><br><span class="line">[theta, J_history2] = gradientDescentMulti(X, y, theta, alpha, num_iters);</span><br><span class="line">plot(1:100, J_history2(1:100), &apos;g&apos;, &apos;LineWidth&apos;, 2);</span><br><span class="line"></span><br><span class="line">% Display gradient descent&apos;s result</span><br><span class="line">fprintf(&apos;Theta computed from gradient descent: \n&apos;);</span><br><span class="line">fprintf(&apos; %f \n&apos;, theta);</span><br><span class="line">fprintf(&apos;\n&apos;);</span><br></pre></td></tr></table></figure><hr><h3 id="normalEqn-m"><a href="#normalEqn-m" class="headerlink" title=" normalEqn.m "></a><strong> normalEqn.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">function [theta] = normalEqn(X, y)</span><br><span class="line">%NORMALEQN Computes the closed-form solution to linear regression </span><br><span class="line">%   NORMALEQN(X,y) computes the closed-form solution to linear </span><br><span class="line">%   regression using the normal equations.</span><br><span class="line"></span><br><span class="line">theta = zeros(size(X, 2), 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Complete the code to compute the closed form solution</span><br><span class="line">%               to linear regression and put the result in theta.</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">% ---------------------- Sample Solution ----------------------</span><br><span class="line"></span><br><span class="line">theta = pinv(X&apos; * X) * X&apos; * y;</span><br><span class="line"></span><br><span class="line">% -------------------------------------------------------------</span><br><span class="line">% ============================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/LoganGo/p/8532018.html" target="_blank" rel="noopener">Coursera-AndrewNg(吴恩达)机器学习笔记——第二周编程作业（线性回归）</a><br><a href="http://www.cnblogs.com/douzujun/p/5815357.html" target="_blank" rel="noopener">Linear regression with multiple variables(多特征的线型回归)算法实例_梯度下降解法(Gradient DesentMulti)以及正规方程解法(Normal Equation)</a><br><a href="https://blog.csdn.net/senketh/article/details/52049933" target="_blank" rel="noopener">机器学习第2周编程作业</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linear Regression </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《机器学习实战》第五章(Logistic回归)代码实现以及讲解</title>
      <link href="/2018/06/01/the-code-and-explain-for-the-chapter-five-of-ml-in-action/"/>
      <url>/2018/06/01/the-code-and-explain-for-the-chapter-five-of-ml-in-action/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对《机器学习实战》第五章Logistic回归的实践以及一些细节的讲解记录.</p><p>完整代码以及数据集见<a href="https://github.com/iamsail/machine-learning-in-action" target="_blank" rel="noopener">github</a></p><hr><h3 id="概述"><a href="#概述" class="headerlink" title=" 概述 "></a><strong> 概述 </strong></h3><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/1.png" alt="1.png"><br><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/2.png" alt="2.png"></p><p>$$图(1)$$</p><hr><p>这里我要先讲一点东西,为后面开始做铺垫</p><p>对于线性模型的函数,有如下的式子</p><p>$f(x) = w_1 x_1 + w_2 x_2 + … + w_n x_n + b$ </p><p>用向量形式写成</p><p>$f(x) = w^T + b$ </p><hr><p>下面这是Logistic回归的假设函数</p><p>$h\theta(x) = g(\theta^T * x)$<br>$g(z) = \frac{1}{1+e^-z}$</p><p>这里的g就是sigmoid函数,如果把sigmoid的函数输入记为z,可以有如下式子</p><p>$z = w_0 x_0 + w_1 x_1 + w_2 x_2 + … + w_n x_n$ </p><p>向量形式就是　$z = w^T$ </p><p>有些地方也会看到如下式子<br>$h\theta(x) = g(\theta_0 + \theta_1 x_1 + \theta_2 x_2 + …)$</p><p>这里需要注意的是多出来的这个$w_0 x_0$,$theta_0$,其实就是对应的前面的b常数项,然后一个常数项 * $x_0$ (若$x_0$取值为１),值是不会变的。后面的代码会涉及到此。</p><p>当然这里都是讨论的都是一次的,都是线性的情况,若是更高次,就可以处理非线性的情况。</p><hr><h3 id="梯度上升-下降"><a href="#梯度上升-下降" class="headerlink" title=" 梯度上升(下降) "></a><strong> 梯度上升(下降) </strong></h3><p>我们进行训练的目的就是找到最佳回归系数,也就是$ｗ$向量。</p><p>这里我们使用梯度上升（下降）法，这里下降与上升只是一个符号(+ or -)的区别，但是本质上都是沿着该函数的梯度方向探寻，这里讲了方向，并未讲到移动量的大小。我们可以称其为步长a。这里步长的选取是有说法的，如果选取太大会导致结果发散；如果选取得太小呢又会使得时间复杂度很高。</p><p>停止条件,通常我们可以设置迭代次数，也可以设置一个迭代终止的误差条件。</p><p>下面这是梯度下降的公式</p><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/3.png" alt="3.png"></p><p>$$图(2)$$</p><hr><h3 id="训练算法-使用梯度上升找到最佳参数"><a href="#训练算法-使用梯度上升找到最佳参数" class="headerlink" title=" 训练算法: 使用梯度上升找到最佳参数　"></a><strong> 训练算法: 使用梯度上升找到最佳参数　</strong></h3><blockquote><p>伪代码如下<br>每个回归系数初始化为１<br>重复Ｒ次<br>　　　　　计算整个数据集的梯度<br>　　　　　使用alpha * gradient 更新回归系数的向量<br>返回回归系数</p></blockquote><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">from numpy import *</span><br><span class="line"></span><br><span class="line">def loadDataSet():</span><br><span class="line">    dataMat = []</span><br><span class="line">    labelMat = []</span><br><span class="line">    fr = open(&apos;testSet.txt&apos;)</span><br><span class="line">    for line in fr.readlines():</span><br><span class="line">        lineArr = line.strip().split()</span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        书上这里说是:为了方便计算,该函数还将X0的值设为1.0</span><br><span class="line">        这里其实是有公式可以参考的,回到线性假设的公式,对应的就是那个常数项</span><br><span class="line">        比如常数项是theta,就可以看做theta * x, x为1.0</span><br><span class="line">        书上说方便,就在于,取1不会改变原来的值</span><br><span class="line">        把这个常数项看做X为1.0,这样在后面就可以通过矩阵来进行计算了 </span><br><span class="line">        &quot;&quot;&quot;</span><br><span class="line">        dataMat.append([1.0, float(lineArr[0]), float(lineArr[1])])</span><br><span class="line">        labelMat.append(int(lineArr[2]))</span><br><span class="line">    return dataMat, labelMat</span><br><span class="line"></span><br><span class="line">def sigmoid(inX):</span><br><span class="line">    return 1.0 / (1 + exp(-inX))</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">def gradAscent(dataMatIn, classLabels):</span><br><span class="line">    &quot;&quot;&quot; 梯度上升求解最佳回归系数</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        dataMatIn: &#123;List&#125; 样本数据,对应假设中的x</span><br><span class="line">        classLabels: &#123;List&#125; 样本数据,对应假设中的函数值h(x)</span><br><span class="line"></span><br><span class="line">    Returns:</span><br><span class="line">        weights: 最佳回归系数矩阵</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    dataMatrix = mat(dataMatIn)</span><br><span class="line">    labelMat = mat(classLabels).transpose()</span><br><span class="line">    m,n = shape(dataMatrix)</span><br><span class="line">    # 向目标移动的步长</span><br><span class="line">    alpha = 0.001</span><br><span class="line">    # 迭代次数</span><br><span class="line">    maxCycles = 500</span><br><span class="line">    weights = ones((n,1))</span><br><span class="line">    for k in range(maxCycles):</span><br><span class="line">    #　参考图二公式,这里是梯度上升</span><br><span class="line">        h = sigmoid(dataMatrix * weights)</span><br><span class="line">        error = (labelMat - h)</span><br><span class="line">        weights = weights + alpha * dataMatrix.transpose() * error</span><br><span class="line">    return weights</span><br></pre></td></tr></table></figure><hr><h3 id="分析数据-画出决策边界"><a href="#分析数据-画出决策边界" class="headerlink" title=" 分析数据: 画出决策边界　"></a><strong> 分析数据: 画出决策边界　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">def plotBestFit(weights):</span><br><span class="line">    &quot;&quot;&quot; 画出数据集和Logistic回归最佳拟合直线的函数</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        weights: 最佳回归系数矩阵</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    import matplotlib.pyplot as plt</span><br><span class="line">    dataMat,labelMat=loadDataSet()</span><br><span class="line">    dataArr = array(dataMat)</span><br><span class="line">    n = shape(dataArr)[0]</span><br><span class="line">    xcord1 = []</span><br><span class="line">    ycord1 = []</span><br><span class="line">    xcord2 = []</span><br><span class="line">    ycord2 = []</span><br><span class="line">    for i in range(n):</span><br><span class="line">        if int(labelMat[i])== 1:</span><br><span class="line">            xcord1.append(dataArr[i,1]); ycord1.append(dataArr[i,2])</span><br><span class="line">        else:</span><br><span class="line">            xcord2.append(dataArr[i,1]); ycord2.append(dataArr[i,2])</span><br><span class="line">    fig = plt.figure()</span><br><span class="line">    ax = fig.add_subplot(111)</span><br><span class="line">    ax.scatter(xcord1, ycord1, s=30, c=&apos;red&apos;, marker=&apos;s&apos;)</span><br><span class="line">    ax.scatter(xcord2, ycord2, s=30, c=&apos;green&apos;)</span><br><span class="line">    x = arange(-3.0, 3.0, 0.1)</span><br><span class="line">    # 最佳拟合直线</span><br><span class="line">    y = (-weights[0]-weights[1]*x)/weights[2]</span><br><span class="line">    ax.plot(x, y)</span><br><span class="line">    plt.xlabel(&apos;X1&apos;); plt.ylabel(&apos;X2&apos;);</span><br><span class="line">    plt.show()</span><br></pre></td></tr></table></figure><p>上面注释最佳拟合直线处,设置了sigmoid函数为0。<strong> 0是两个分类(类别１和类别0)的分界处。</strong>因此我们设定$0 = w_0 x_0 + w_1 x_1 + w_2 x_2$,然后接触X2和X1的关系式(即分割线的方程,X0 =1)</p><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/4.png" alt="4.png"></p><p>$$图(3)  梯度上升算法在500次迭代后得到的Logistic回归最佳拟合直线$$</p><hr><h3 id="训练算法-随机梯度上升"><a href="#训练算法-随机梯度上升" class="headerlink" title=" 训练算法: 随机梯度上升　"></a><strong> 训练算法: 随机梯度上升　</strong></h3><p>梯度上升算法在每次更新回归系数时都需要遍历整个数据集,该方法在100个左右的数据集时尚可,但如果有数十亿样本和成千上万的特征,那么该方法的计算复杂度就太高了。</p><p><strong> 一种改进方式是一次仅用一个样本点来更新回归系数,该方法称为随机梯度上升算法。　</strong>由于可以在新样本到来时对分类器进行增量更新,因而随机梯度上升算法是一个在线学习算法。与“在线学习”相对应,一次处理所有数据被称为“批处理”。</p><p>随机梯度上升算法伪代码如下</p><blockquote><p> 所有回归系数初始化为１<br>对数据集中每个样本<br>　　　计算该样本的梯度<br>     使用alpha * gradient更新回归系数<br>返回回归系数     </p></blockquote><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">def stocGradAscent0(dataMatrix, classLabels):</span><br><span class="line">    &quot;&quot;&quot; 随机梯度上升算法</span><br><span class="line"></span><br><span class="line">        Args:</span><br><span class="line">            dataMatrix:  样本数据,对应假设中的x</span><br><span class="line">            classLabels:  样本数据,对应假设中的函数值h(x)</span><br><span class="line"></span><br><span class="line">        Returns:</span><br><span class="line">            weights: 最佳回归系数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    m,n = shape(dataMatrix)</span><br><span class="line">    alpha = 0.01</span><br><span class="line">    weights = ones(n)</span><br><span class="line">    for i in range(m):</span><br><span class="line">        h = sigmoid(sum(dataMatrix[i] * weights))</span><br><span class="line">        error = classLabels[i] - h</span><br><span class="line">        weights = weights + alpha * error * dataMatrix[i]</span><br><span class="line">    return weights</span><br></pre></td></tr></table></figure><p><strong> 随机梯度上升算法和梯度上升算法很相似,有仍有一些区别,如下:</strong></p><ol><li>后者的变量h和误差error都是向量,而前者则全是数值</li><li>前者没有矩阵转置过程,所有变量的数据类型都是Numpy数组</li></ol><p>可视化:</p><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/5.png" alt="5.png"></p><p>$$图(4)随机梯度上升算法在上述数据集上的执行结果,最佳拟合执行并非最佳分类线$$</p><p>图(4)的拟合直线效果还不错,但和图(3)就不那么完美了。当然直接这样比较是有失公允的,后者的结果是在整个数据集上迭代了500次才得到的。</p><p><span class="under0"><strong> 一个判断优化算法优劣的可靠方法是看它是否收敛,也就是说参数是否达到了稳定值,是否还会不断地变化　</strong></span></p><hr><p>下图是对随机梯度上升算法做了些修改,使其在整个数据集上运行200次。最终绘制的三个回归系数的变化情况</p><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/6.png" alt="6.png"></p><p>$$图(5)$$</p><hr><h3 id="改进的随机梯度上升算法"><a href="#改进的随机梯度上升算法" class="headerlink" title=" 改进的随机梯度上升算法　"></a><strong> 改进的随机梯度上升算法　</strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">def stocGradAscent1(dataMatrix, classLabels, numIter=150):</span><br><span class="line">    &quot;&quot;&quot; 改进的随机梯度上升算法</span><br><span class="line"></span><br><span class="line">        Args:</span><br><span class="line">            dataMatrix:  样本数据,对应假设中的x</span><br><span class="line">            classLabels:  样本数据,对应假设中的函数值h(x)</span><br><span class="line">            numIter: 迭代次数</span><br><span class="line"></span><br><span class="line">        Returns:</span><br><span class="line">            weights: 最佳回归系数</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    m,n = shape(dataMatrix)</span><br><span class="line">    weights = ones(n)</span><br><span class="line">    for j in range(numIter):</span><br><span class="line">        dataIndex = range(m)</span><br><span class="line">        for i in range(m):</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            这是第一处改进地方.alpha在每次迭代时都会调整,这缓解了图(5)上数据波动或者高频波动。</span><br><span class="line">            另外alpha会随着迭代次数不断减小,但永远不会减小到0。    </span><br><span class="line">            必须这样做的原因是为了保证在多次迭代之后新数据仍然具有一定的影响</span><br><span class="line">            如果要处理的问题是动态变化的,可以适当加大上述常数项,来确保新的值获得更大的回归系数</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            alpha = 4 / (1.0 + j + i) + 0.01</span><br><span class="line">            &quot;&quot;&quot;</span><br><span class="line">            这是第二处改进的地方,这里通过随机选取样本来更新回归系数,这种方法将减少周期性波动    </span><br><span class="line">            &quot;&quot;&quot; </span><br><span class="line">            randIndex = int(random.uniform(0, len(dataIndex)))</span><br><span class="line">            h = sigmoid(sum(dataMatrix[randIndex] * weights))</span><br><span class="line">            error = classLabels[randIndex] - h</span><br><span class="line">            weights = weights + alpha * error * dataMatrix[randIndex]</span><br><span class="line">            del(list(dataIndex)[randIndex])</span><br><span class="line">    return weights</span><br></pre></td></tr></table></figure><p>可视化(该分隔线达到了与gradAscent差不多的效果,但是所用的计算量更少):</p><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/7.png" alt="7.png"></p><hr><h3 id="示例-从疝气病预测病马的死亡率"><a href="#示例-从疝气病预测病马的死亡率" class="headerlink" title=" 示例: 从疝气病预测病马的死亡率　"></a><strong> 示例: 从疝气病预测病马的死亡率　</strong></h3><p><a href="http://archive.ics.uci.edu/ml/datasets/Horse+Colic" target="_blank" rel="noopener">原始数据集</a></p><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/8.png" alt="8.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">def classifyVector(inX, weights):</span><br><span class="line">    &quot;&quot;&quot; 分类</span><br><span class="line"></span><br><span class="line">        Args:</span><br><span class="line">            inX:  特征向量</span><br><span class="line">            weights: 回归系数</span><br><span class="line"></span><br><span class="line">        Returns:</span><br><span class="line">            1 or 0</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    prob = sigmoid(sum(inX * weights))</span><br><span class="line">    if prob &gt; 0.5: return 1.0</span><br><span class="line">    else: return 0.0</span><br><span class="line"></span><br><span class="line">def colicTest():</span><br><span class="line">    frTrain = open(&apos;horseColicTraining.txt&apos;)</span><br><span class="line">    frTest = open(&apos;horseColicTest.txt&apos;)</span><br><span class="line">    trainingSet = []</span><br><span class="line">    trainingLabels = []</span><br><span class="line">    for line in frTrain.readlines():</span><br><span class="line">        currLine = line.strip().split(&apos;\t&apos;)</span><br><span class="line">        lineArr = []</span><br><span class="line">        for i in range(21):</span><br><span class="line">            lineArr.append(float(currLine[i]))</span><br><span class="line">        trainingSet.append(lineArr)</span><br><span class="line">        trainingLabels.append(float(currLine[21]))</span><br><span class="line">    trainWeights = stocGradAscent1(array(trainingSet), trainingLabels, 500)</span><br><span class="line">    print(trainWeights);</span><br><span class="line">    errorCount = 0</span><br><span class="line">    numTestVec = 0.0</span><br><span class="line">    for line in frTest.readlines():</span><br><span class="line">        numTestVec += 1.0</span><br><span class="line">        currLine = line.strip().split(&apos;\t&apos;)</span><br><span class="line">        lineArr = []</span><br><span class="line">        for i in range(21):</span><br><span class="line">            lineArr.append(float(currLine[i]))</span><br><span class="line">        if int(classifyVector(array(lineArr), trainWeights)) != int(currLine[21]):</span><br><span class="line">            errorCount += 1</span><br><span class="line">    errorRate = (float(errorCount) / numTestVec)</span><br><span class="line">    print(&apos;the error rate of this test is : %f&apos; % errorRate)</span><br><span class="line">    return errorRate</span><br><span class="line"></span><br><span class="line">def multiTest():</span><br><span class="line">    numTests = 10</span><br><span class="line">    errorSum = 0</span><br><span class="line">    for k in range(numTests):</span><br><span class="line">        errorSum += colicTest()</span><br><span class="line">    print(&apos;after %d iterations the average error rate is : %f &apos; % (numTests, errorSum / float(numTests)))</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">the error rate of this test is : 0.298507</span><br><span class="line">the error rate of this test is : 0.402985</span><br><span class="line">the error rate of this test is : 0.358209</span><br><span class="line">the error rate of this test is : 0.432836</span><br><span class="line">the error rate of this test is : 0.283582</span><br><span class="line">the error rate of this test is : 0.313433</span><br><span class="line">the error rate of this test is : 0.522388</span><br><span class="line">the error rate of this test is : 0.283582</span><br><span class="line">the error rate of this test is : 0.283582</span><br><span class="line">the error rate of this test is : 0.253731</span><br><span class="line">after 10 iterations the average error rate is : 0.343284</span><br></pre></td></tr></table></figure><p>十次迭代过后的平均错误率为34.33%。事实上,这个结果并不差,因为有30%的数据缺失。</p><p>当然如果调整colicTest()中的迭代次数和stocGradAscent1()中的步长,平均错误率可以降到20％左右。</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><strong> 总结 </strong></h3><p><img src="/img/机器学习/the-code-and-explain-for-the-chapter-five-of-ml-in-action/9.png" alt="9.png"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/zdk930519/article/details/54137476" target="_blank" rel="noopener">Markdown中数学公式整理</a><br><a href="https://blog.csdn.net/huanhuan_coder/article/details/79325071" target="_blank" rel="noopener">markdown编辑数学公式</a><br><a href="https://blog.csdn.net/viewcode/article/details/8794401" target="_blank" rel="noopener">对线性回归、逻辑回归、各种回归的概念学习</a><br><a href="https://blog.csdn.net/ben_ben_niao/article/details/47278933" target="_blank" rel="noopener">机器学习05（logistic回归）</a><br><a href="https://baike.baidu.com/item/%E6%9C%80%E5%B0%8F%E4%BA%8C%E4%B9%98%E6%B3%95/2522346?fr=aladdin" target="_blank" rel="noopener">最小二乘法</a><br><a href="https://blog.csdn.net/qq_29108585/article/details/80340312" target="_blank" rel="noopener">Logistic回归-小结</a><br><a href="https://matplotlib.org/contents.html" target="_blank" rel="noopener">matplotlib</a><br><a href="https://blog.csdn.net/qi_1221/article/details/73903131" target="_blank" rel="noopener">Matplotlib中的scatter函数</a><br><a href="https://blog.csdn.net/skyli114/article/details/77508136" target="_blank" rel="noopener">Matplotlib系列—pyplot的plot( )函数</a><br><a href="https://blog.csdn.net/namelessml/article/details/52431570" target="_blank" rel="noopener">原[完]Python函数 range()和arange()</a><br><a href="https://ask.hellobi.com/blog/lsxxx2011/10243" target="_blank" rel="noopener">从零开始学Python【15】–matplotlib(散点图)</a><br><a href="https://blog.csdn.net/rujin_shi/article/details/78997271" target="_blank" rel="noopener">《机器学习实战》5.Logistic回归源码实现</a><br><a href="https://www.jianshu.com/p/37a9cb41401f" target="_blank" rel="noopener">numpy： matrix.getA()</a><br><a href="https://baike.baidu.com/item/%E7%96%9D%E6%B0%94/102197?fromtitle=%E7%96%9D%E6%B0%94%E7%97%85&amp;fromid=4688752&amp;fr=aladdin" target="_blank" rel="noopener">疝气</a><br><a href="http://archive.ics.uci.edu/ml/datasets/Horse+Colic" target="_blank" rel="noopener">Horse Colic Data Set</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Logistic Regression </tag>
            
            <tag> 机器学习实战 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在hexo使用mathjax</title>
      <link href="/2018/05/31/use-mathjax-in-hexo/"/>
      <url>/2018/05/31/use-mathjax-in-hexo/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对在hexo下使用数学公式的方法记录,还是折腾了几十分钟,网上的有些文章有些太老了。</p><p>我使用的是<a href="https://github.com/mathjax/MathJax" target="_blank" rel="noopener">MathJax</a>。MathJax is an open-source JavaScript display engine for LaTeX, MathML, and AsciiMath notation that works in all modern browsers。</p><p>而<a href="https://blog.csdn.net/emptyset110/article/details/50123231" target="_blank" rel="noopener">hexo-math</a>是别人写好的一个自动部署<code>MathJax</code>的<code>hexo</code>插件。 </p><hr><h3 id="使用"><a href="#使用" class="headerlink" title=" 使用 "></a><strong> 使用 </strong></h3><p>先安装<code>hexo-math</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install hexo-math --save</span><br></pre></td></tr></table></figure><hr><p>接下来这里网上很多文章说要执行<code>hexo math install</code>,但是执行这个是没什么用的,hexo会提醒你没这个命令。</p><p>在<code>hexo-math</code>github已经给出了说明:</p><p>自从1.0.6版本过后,<code>hexo-math</code>使用了一种不同的方法注入<code>MathJax</code>到你的站点中,所以不需要再执行<code>hexo math install</code>,如果你之前执行过,执行<code>hexo math</code>即可</p><hr><p>接下来在你博客的配置文件<code>config.yml</code>加上如下的配置</p><p><code>config.yml</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">math:</span><br><span class="line">  engine: &apos;mathjax&apos; # or &apos;katex&apos;</span><br><span class="line">  mathjax:</span><br><span class="line">    src: custom_mathjax_source</span><br><span class="line">    config:</span><br><span class="line">      # MathJax config</span><br><span class="line">  katex:</span><br><span class="line">    css: custom_css_source</span><br><span class="line">    js: custom_js_source # not used</span><br><span class="line">    config:</span><br><span class="line">      # KaTeX config</span><br></pre></td></tr></table></figure><p>在博客主题配置文件<code>config.yml</code>开启<code>mathjax</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"># Enable Mathjax</span><br><span class="line">mathjax: true</span><br></pre></td></tr></table></figure></p><hr><h3 id="实践"><a href="#实践" class="headerlink" title=" 实践 "></a><strong> 实践 </strong></h3><p><span class="under0"><strong>在输入数学公式的时候，需要在数学公式的前后加入<code>$$</code>或<code>$</code>符号，将需要输入的公式加入到<code>$$</code>或<code>$</code>中间。</strong></span></p><p><code>$$</code>会使公式居中,<code>$</code>不会。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$h(\theta) =$</span><br><span class="line">$$h(\theta) =$$</span><br><span class="line">$\alpha$</span><br></pre></td></tr></table></figure><p>展示如下</p><p>$h(\theta) =$<br>$$h(\theta)=$$<br>$\alpha$</p><hr><h3 id="存在的问题"><a href="#存在的问题" class="headerlink" title=" 存在的问题 "></a><strong> 存在的问题 </strong></h3><p>到现在为止,还是存在一些问题的,</p><p>比如如下这一段</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$$</span><br><span class="line">\begin&#123;eqnarray&#125;</span><br><span class="line">\nabla\cdot\vec&#123;E&#125; &amp;=&amp; \frac&#123;\rho&#125;&#123;\epsilon_0&#125; \\</span><br><span class="line">\nabla\cdot\vec&#123;B&#125; &amp;=&amp; 0 \\</span><br><span class="line">\nabla\times\vec&#123;E&#125; &amp;=&amp; -\frac&#123;\partial B&#125;&#123;\partial t&#125; \\</span><br><span class="line">\nabla\times\vec&#123;B&#125; &amp;=&amp; \mu_0\left(\vec&#123;J&#125;+\epsilon_0\frac&#123;\partial E&#125;&#123;\partial t&#125; \right)</span><br><span class="line">\end&#123;eqnarray&#125;</span><br><span class="line">$$</span><br></pre></td></tr></table></figure><p><img src="/img/hexo&amp;&amp;博客记录/use-mathjax-in-hexo/1.png" alt="1.png"></p><p>会出现一些问题，原因是<code>hexo</code>先用<code>marked.js</code>渲染，然后再交给<code>MathJax</code>渲染。在<code>marked.js</code>渲染的时候下划线<code>_</code>是被<code>escape</code>掉并且换成了<code>&lt;em&gt;</code>标签，即斜体字，另外<code>LaTeX</code>中的<code>\\</code>也会被转义成一个<code>\</code>，这样会导致<code>MathJax</code>渲染时不认为它是一个换行符了。</p><hr><h3 id="修复问题-使Marked-js与MathJax共存"><a href="#修复问题-使Marked-js与MathJax共存" class="headerlink" title=" 修复问题(使Marked.js与MathJax共存) "></a><strong> 修复问题(使Marked.js与MathJax共存) </strong></h3><p>通过修改<code>marked.js</code>源码的方式来避开这些问题 </p><ul><li>针对<code>marked.js</code>与<code>Mathjax</code>对于个别字符二次转义的问题，我们只要不让<code>marked.js</code>去转义<code>\\,\{,\}</code>在<code>MathJax</code>中有特殊用途的字符就行了。 </li><li>针对下划线的问题，取消<code>_</code>作为斜体转义，因为<code>marked.js</code>中<code>*</code>也是斜体的意思，所以取消掉<code>_</code>的转义并不影响我们使用<code>markdown</code>，只要我们习惯用<code>*</code>作为斜体字标记就行了。<br>具体修改方式，用编辑器打开<code>marked.js</code>（在<code>./node_modules/marked/lib/</code>中）</li></ul><p>Step 1:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([\\`*&#123;&#125;\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure></p><p>替换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">escape: /^\\([`*\[\]()# +\-.!_&gt;])/,</span><br></pre></td></tr></table></figure></p><p>这一步是在原基础上取消了对<code>\\,\{,\}</code>的转义(escape)</p><hr><p>Step 2:<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em: /^\b_((?:[^_]|__)+?)_\b|^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><p>替换成<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">em:/^\*((?:\*\*|[\s\S])+?)\*(?!\*)/,</span><br></pre></td></tr></table></figure></p><hr><p>重启hexo,可以看见前面那段被渲染成如下这样了</p><p><img src="/img/hexo&amp;&amp;博客记录/use-mathjax-in-hexo/2.png" alt="2.png"></p><p>如果重启没有效果,执行下<code>hexo clean</code></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://github.com/hexojs/hexo-math#migration-note" target="_blank" rel="noopener">hexo-math</a><br><a href="https://blog.csdn.net/emptyset110/article/details/50123231" target="_blank" rel="noopener">搭建一个支持LaTEX的hexo博客</a><br><a href="https://segmentfault.com/a/1190000007261752" target="_blank" rel="noopener">Hexo下mathjax的转义问题</a><br><a href="https://blog.csdn.net/u014630987/article/details/78670258" target="_blank" rel="noopener">如何在 hexo 中支持 Mathjax？</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo&amp;&amp;博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(python)文档字符串</title>
      <link href="/2018/05/30/document-string-of-python/"/>
      <url>/2018/05/30/document-string-of-python/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>看Google开源项目Python风格指南注释部分时,看到文档字符串这个概念,本文做下记录。</p><hr><h3 id="注释"><a href="#注释" class="headerlink" title=" 注释 "></a><strong> 注释 </strong></h3><p>Python中的注释有单行注释和多行注释：</p><p>单行注释以 # 开头</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment"># 这是一个注释</span></span><br><span class="line">print(<span class="string">"Hello, World!"</span>)</span><br></pre></td></tr></table></figure><p>多行注释用三个单引号 ‘’’ 或者三个双引号 “”” 将注释括起来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&apos;&apos;&apos;</span><br><span class="line">这是多行注释，用三个单引号</span><br><span class="line">这是多行注释，用三个单引号 </span><br><span class="line">&apos;&apos;&apos;</span><br><span class="line">print(&quot;Hello, World!&quot;) </span><br><span class="line"></span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">这是多行注释，用三个双引号</span><br><span class="line">这是多行注释，用三个双引号 </span><br><span class="line">&quot;&quot;&quot;</span><br><span class="line">print(&quot;Hello, World!&quot;)</span><br></pre></td></tr></table></figure><hr><h3 id="文档字符串"><a href="#文档字符串" class="headerlink" title=" 文档字符串 "></a><strong> 文档字符串 </strong></h3><p>Python有一种独一无二的的注释方式: 使用文档字符串(<code>DocStrings</code>). 文档字符串是包, 模块, 类或函数里的第一个语句. <span class="under0"><strong>这些字符串可以通过对象的<code>__doc__</code>成员被自动提取, 并且被<code>pydoc</code>所用.</strong></span> (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号”“”( PEP-257 ). </p><p><span class="under0"><strong> 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. </strong></span></p><h4 id="函数和方法"><a href="#函数和方法" class="headerlink" title=" 函数和方法 "></a><strong> 函数和方法 </strong></h4><p>下文所指的函数,包括函数, 方法, 以及生成器.</p><p>一个函数必须要有文档字符串, 除非它满足以下条件:</p><blockquote><p>外部不可见<br> 非常短小<br> 简单明了</p></blockquote><p>关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. <span class="under0"><strong>每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</strong></span></p><p><code>Args:</code><br>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受<em>foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出</em>foo和**bar.</p><p><code>Returns:</code> (或者 <code>Yields:</code> 用于生成器)<br>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</p><p><code>Raises:</code><br>列出与接口有关的所有异常.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):</span><br><span class="line">    &quot;&quot;&quot;Fetches rows from a Bigtable.</span><br><span class="line"></span><br><span class="line">    Retrieves rows pertaining to the given keys from the Table instance</span><br><span class="line">    represented by big_table.  Silly things may happen if</span><br><span class="line">    other_silly_variable is not None.</span><br><span class="line"></span><br><span class="line">    Args:</span><br><span class="line">        big_table: An open Bigtable Table instance.</span><br><span class="line">        keys: A sequence of strings representing the key of each table row</span><br><span class="line">            to fetch.</span><br><span class="line">        other_silly_variable: Another optional variable, that has a much</span><br><span class="line">            longer name than the other args, and which does nothing.</span><br><span class="line"></span><br><span class="line">    Returns:</span><br><span class="line">        A dict mapping keys to the corresponding table row data</span><br><span class="line">        fetched. Each row is represented as a tuple of strings. For</span><br><span class="line">        example:</span><br><span class="line"></span><br><span class="line">        &#123;&apos;Serak&apos;: (&apos;Rigel VII&apos;, &apos;Preparer&apos;),</span><br><span class="line">         &apos;Zim&apos;: (&apos;Irk&apos;, &apos;Invader&apos;),</span><br><span class="line">         &apos;Lrrr&apos;: (&apos;Omicron Persei 8&apos;, &apos;Emperor&apos;)&#125;</span><br><span class="line"></span><br><span class="line">        If a key from the keys argument is missing from the dictionary,</span><br><span class="line">        then that row was not found in the table.</span><br><span class="line"></span><br><span class="line">    Raises:</span><br><span class="line">        IOError: An error occurred accessing the bigtable.Table object.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line">    pass</span><br></pre></td></tr></table></figure><hr><h4 id="类"><a href="#类" class="headerlink" title=" 类 "></a><strong> 类 </strong></h4><p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line">class SampleClass(object):</span><br><span class="line">    &quot;&quot;&quot;Summary of class here.</span><br><span class="line"></span><br><span class="line">    Longer class information....</span><br><span class="line">    Longer class information....</span><br><span class="line"></span><br><span class="line">    Attributes:</span><br><span class="line">        likes_spam: A boolean indicating if we like SPAM or not.</span><br><span class="line">        eggs: An integer count of the eggs we have laid.</span><br><span class="line">    &quot;&quot;&quot;</span><br><span class="line"></span><br><span class="line">    def __init__(self, likes_spam=False):</span><br><span class="line">        &quot;&quot;&quot;Inits SampleClass with blah.&quot;&quot;&quot;</span><br><span class="line">        self.likes_spam = likes_spam</span><br><span class="line">        self.eggs = 0</span><br><span class="line"></span><br><span class="line">    def public_method(self):</span><br><span class="line">        &quot;&quot;&quot;Performs operation blah.&quot;&quot;&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="DocStrings实践"><a href="#DocStrings实践" class="headerlink" title=" DocStrings实践 "></a><strong> DocStrings实践 </strong></h3><p>文件<code>test.py</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">def printMax(x, y):</span><br><span class="line">    &apos;&apos;&apos;Prints the maximum of two numbers.</span><br><span class="line"></span><br><span class="line">    The two values must be integers.&apos;&apos;&apos;</span><br><span class="line">    x = int(x) # convert to integers, if possible</span><br><span class="line">    y = int(y)</span><br><span class="line"></span><br><span class="line">    if x &gt; y:</span><br><span class="line">        print x, &apos;is maximum&apos;</span><br><span class="line">    else:</span><br><span class="line">        print y, &apos;is maximum&apos;</span><br><span class="line"></span><br><span class="line">printMax(3, 5)</span><br><span class="line">print printMax.__doc__</span><br></pre></td></tr></table></figure><p>使用<code>__doc__</code>（双下划线）调用<code>printMax</code>函数的文档字符串属性（属于函数的名称）。Python把 每一样东西 都作为对象，包括这个函数。</p><p>使用<code>help()</code>也可以,它所做的只是抓取函数的<code>__doc__</code>属性，</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">Python 3.5.2 (default, Nov 23 2017, 16:37:01) </span><br><span class="line">[GCC 5.4.0 20160609] on linux</span><br><span class="line">Type &quot;help&quot;, &quot;copyright&quot;, &quot;credits&quot; or &quot;license&quot; for more information.</span><br><span class="line">&gt;&gt;&gt; import test</span><br><span class="line">5 is maximum</span><br><span class="line">Prints the maximum of two numbers.</span><br><span class="line"></span><br><span class="line">    The two values must be integers.</span><br><span class="line">&gt;&gt;&gt; print(test.printMax.__doc__)</span><br><span class="line">Prints the maximum of two numbers.</span><br><span class="line"></span><br><span class="line">    The two values must be integers.</span><br><span class="line">    </span><br><span class="line">&gt;&gt;&gt; help(test.printMax)    </span><br><span class="line">    Help on function printMax in module test:</span><br><span class="line">    </span><br><span class="line">    printMax(x, y)</span><br><span class="line">        Prints the maximum of two numbers.</span><br><span class="line">        </span><br><span class="line">        The two values must be integers.</span><br></pre></td></tr></table></figure><hr><h3 id="Main"><a href="#Main" class="headerlink" title=" Main "></a><strong> Main </strong></h3><p>上面的文件<code>test.py</code>,在导入时也会被执行</p><blockquote><p>即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p></blockquote><p>在Python中, pydoc以及单元测试要求模块必须是可导入的. <strong><span class="under0">你的代码应该在执行主程序前总是检查 if <strong>name</strong> == ‘<strong>main</strong>‘ , 这样当模块被导入时主程序就不会被执行.</span></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">def main():</span><br><span class="line">      ...</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">    main()</span><br></pre></td></tr></table></figure><p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p><p>修改后的<code>test.py</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">def printMax(x, y):</span><br><span class="line">    &apos;&apos;&apos;Prints the maximum of two numbers.</span><br><span class="line"></span><br><span class="line">    The two values must be integers.&apos;&apos;&apos;</span><br><span class="line">    x = int(x) # convert to integers, if possible</span><br><span class="line">    y = int(y)</span><br><span class="line"></span><br><span class="line">    if x &gt; y:</span><br><span class="line">        print (x, &apos;is maximum&apos;)</span><br><span class="line">    else:</span><br><span class="line">        print (y, &apos;is maximum&apos;)</span><br><span class="line"></span><br><span class="line">if __name__ == &apos;__main__&apos;:</span><br><span class="line">printMax(3, 5)</span><br><span class="line">print (printMax.__doc__)</span><br></pre></td></tr></table></figure><p>这样在导入时不会被执行</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.runoob.com/python3/python3-comment.html" target="_blank" rel="noopener">Python3 注释</a><br><a href="http://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/contents/" target="_blank" rel="noopener">Python 风格指南 - 内容目录</a><br><a href="http://www.cnblogs.com/jlsme/articles/1394003.html" target="_blank" rel="noopener">python中的文档字符串(docString)</a><br><a href="https://www.zhihu.com/question/263349308/answer/270927715" target="_blank" rel="noopener">python中文档字符串与注释有什么区别？</a><br><a href="https://www.cnblogs.com/kym/archive/2012/05/14/2498728.html" target="_blank" rel="noopener">说说Python程序的执行过程</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>(python)重新加载模块</title>
      <link href="/2018/05/30/reload-moudles-in-python/"/>
      <url>/2018/05/30/reload-moudles-in-python/</url>
      
        <content type="html"><![CDATA[<p>在python2.x版本中,可以使用<code>reload()</code>重新加载模块</p><p>但是在python3.x已经不在支持该方法,需要像如下这样</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; import importlib</span><br><span class="line">&gt; importlib.reload(moudle-name)</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/x356982611/article/details/52538548" target="_blank" rel="noopener">python reload(sys)找不到，name ‘reload’ is not defined</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>机器学习(coursera 斯坦福)第三周编程作业</title>
      <link href="/2018/05/28/the-thrid-week-homework-of-ML-Stanford/"/>
      <url>/2018/05/28/the-thrid-week-homework-of-ML-Stanford/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是机器学习第三周的编程作业答案,完整题目以及代码见<a href="https://github.com/iamsail/ML-Stanford/tree/master/homework/third-week" target="_blank" rel="noopener">github</a></p><p><strong> 在Octave中运行.m文件,有以下两种方式(假设有文件<code>orz.m</code>) </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># 一</span><br><span class="line">&gt;&gt; orz</span><br><span class="line"></span><br><span class="line"># 二</span><br><span class="line">&gt;&gt; run(&apos;orz.m&apos;)</span><br></pre></td></tr></table></figure><hr><h3 id="sigmoid-m"><a href="#sigmoid-m" class="headerlink" title=" sigmoid.m "></a><strong> sigmoid.m </strong></h3><p><img src="/img/机器学习/the-thrid-week-homework-of-ML-Stanford/1.png" alt="sigmod"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">function g = sigmoid(z)</span><br><span class="line">%SIGMOID Compute sigmoid function</span><br><span class="line">%   g = SIGMOID(z) computes the sigmoid of z.</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">g = zeros(size(z));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the sigmoid of each value of z (z can be a matrix,</span><br><span class="line">%               vector or scalar).</span><br><span class="line"></span><br><span class="line">g = 1./(1 + exp(-z));</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="costFunction-m"><a href="#costFunction-m" class="headerlink" title=" costFunction.m "></a><strong> costFunction.m </strong></h3><p><img src="/img/机器学习/the-thrid-week-homework-of-ML-Stanford/2.png" alt="2.png"><br><img src="/img/机器学习/the-thrid-week-homework-of-ML-Stanford/3.png" alt="3.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function [J, grad] = costFunction(theta, X, y)</span><br><span class="line">%COSTFUNCTION Compute cost and gradient for logistic regression</span><br><span class="line">%   J = COSTFUNCTION(theta, X, y) computes the cost of using theta as the</span><br><span class="line">%   parameter for logistic regression and the gradient of the cost</span><br><span class="line">%   w.r.t. to the parameters.</span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line">grad = zeros(size(theta));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost of a particular choice of theta.</span><br><span class="line">%               You should set J to the cost.</span><br><span class="line">%               Compute the partial derivatives and set grad to the partial</span><br><span class="line">%               derivatives of the cost w.r.t. each parameter in theta</span><br><span class="line">%</span><br><span class="line">% Note: grad should have the same dimensions as theta</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">%J = 1 / m * sum(((-y) .* log(sigmoid(X * theta)) - (1 - y) .* log(1 - sigmoid(X * theta))));</span><br><span class="line">J = 1 / m * sum(((-y)&apos; * log(sigmoid(X * theta)) - (1 - y)&apos; * log(1 - sigmoid(X * theta))));</span><br><span class="line">grad = 1 / m * X&apos; * (sigmoid(X * theta) - y);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><p>这里要注意一下,在<code>octave</code>中,<code>‘</code>是转置算符</p><p>一个向量的转置将其由行向量转为列向量或者由列向量转换为行向量。矩阵的转置将其行和列交换。在数学上,矩阵 A 的转置表示为 A^T 。在 octave 中转置操作用上引号实现。</p><p><strong> 而算符前面的<code>.</code>,表示元素对元素的计算 </strong></p><hr><h3 id="predict-m"><a href="#predict-m" class="headerlink" title=" predict.m "></a><strong> predict.m </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">function p = predict(theta, X)</span><br><span class="line">%PREDICT Predict whether the label is 0 or 1 using learned logistic </span><br><span class="line">%regression parameters theta</span><br><span class="line">%   p = PREDICT(theta, X) computes the predictions for X using a </span><br><span class="line">%   threshold at 0.5 (i.e., if sigmoid(theta&apos;*x) &gt;= 0.5, predict 1)</span><br><span class="line"></span><br><span class="line">m = size(X, 1); % Number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly</span><br><span class="line">p = zeros(m, 1);</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Complete the following code to make predictions using</span><br><span class="line">%               your learned logistic regression parameters. </span><br><span class="line">%               You should set p to a vector of 0&apos;s and 1&apos;s</span><br><span class="line">%</span><br><span class="line"></span><br><span class="line">result = sigmoid(X * theta);</span><br><span class="line">p = result &gt; 0.5;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =========================================================================</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure><hr><h3 id="costFunctionReg-m"><a href="#costFunctionReg-m" class="headerlink" title=" costFunctionReg.m "></a><strong> costFunctionReg.m </strong></h3><p><img src="/img/机器学习/the-thrid-week-homework-of-ML-Stanford/4.png" alt="4.png"><br><img src="/img/机器学习/the-thrid-week-homework-of-ML-Stanford/5.png" alt="5.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line">function [J, grad] = costFunctionReg(theta, X, y, lambda)</span><br><span class="line">%COSTFUNCTIONREG Compute cost and gradient for logistic regression with regularization</span><br><span class="line">%   J = COSTFUNCTIONREG(theta, X, y, lambda) computes the cost of using</span><br><span class="line">%   theta as the parameter for regularized logistic regression and the</span><br><span class="line">%   gradient of the cost w.r.t. to the parameters. </span><br><span class="line"></span><br><span class="line">% Initialize some useful values</span><br><span class="line">m = length(y); % number of training examples</span><br><span class="line"></span><br><span class="line">% You need to return the following variables correctly </span><br><span class="line">J = 0;</span><br><span class="line">grad = zeros(size(theta));</span><br><span class="line"></span><br><span class="line">% ====================== YOUR CODE HERE ======================</span><br><span class="line">% Instructions: Compute the cost of a particular choice of theta.</span><br><span class="line">%               You should set J to the cost.</span><br><span class="line">%               Compute the partial derivatives and set grad to the partial</span><br><span class="line">%               derivatives of the cost w.r.t. each parameter in theta</span><br><span class="line"></span><br><span class="line">[J , grad] = costFunction(theta, X, y);</span><br><span class="line">J = J + lambda / (2*m) * (sum(theta.^2) - theta(1)^2);</span><br><span class="line">grad = grad + lambda / m * theta;</span><br><span class="line">grad(1) = grad(1) - lambda / m * theta(1);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">% =============================================================</span><br><span class="line"></span><br><span class="line">end</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Logistic Regression </tag>
            
            <tag> Regularization </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>联想R720安装双系统问题记录</title>
      <link href="/2018/05/27/install-dual-system-of-leaven-R720/"/>
      <url>/2018/05/27/install-dual-system-of-leaven-R720/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>昨晚帮同学装了双系统,是新买的电脑,<strong>联想拯救者R720</strong>。记录下遇到几个问题,或许以后还会碰到。</p><p><strong>这个本子是512G的ssd,是在这个硬盘里装win10+Ubuntu16</strong>。一个磁盘win10,一个磁盘Ubuntu16。</p><p>我自己电脑是ssd装的ubuntu,机械装的win10。因为之前给自己装的时候,全部装在ssd始终没成功,以后或许可以再试试。</p><hr><h3 id="分区"><a href="#分区" class="headerlink" title=" 分区 "></a><strong> 分区 </strong></h3><p>因为我们Ubuntu是单独装在一个磁盘里的,安装的时候会涉及到一个分区的问题。</p><p>这是我以前看的一篇博文的建议如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">安装的过程中需要涉及到分区，为了以免日后重装，我的建议是如下分区：</span><br><span class="line">1）、20G,主分区,空间起始位置,Ext4日志文件系统,挂载点/</span><br><span class="line">2）、内存的大小,8G,逻辑分区,空间起始位置,swap交换空间,无挂载点</span><br><span class="line">3）、200MB,逻辑分区,空间起始位置,Ext4日志文件系统,/boot</span><br><span class="line">4）、剩余的空间,逻辑分区,空间起始位置,Ext4日志文件系统,/home</span><br></pre></td></tr></table></figure></p><p><strong> 图表展示 </strong></p><table><thead><tr><th style="text-align:center">大小(MB)</th><th style="text-align:center">新分区类型</th><th style="text-align:center">新分区的位置</th><th style="text-align:center">用于</th><th style="text-align:center">挂载点</th></tr></thead><tbody><tr><td style="text-align:center">20000</td><td style="text-align:center">主分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">Ext4日志文件系统</td><td style="text-align:center">/</td></tr><tr><td style="text-align:center">8000</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">交换空间</td><td style="text-align:center">无</td></tr><tr><td style="text-align:center">200</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">Ext4日志文件系统</td><td style="text-align:center">/boot</td></tr><tr><td style="text-align:center">剩余的空间</td><td style="text-align:center">逻辑分区</td><td style="text-align:center">空间起始位置</td><td style="text-align:center">Ext4日志文件系统</td><td style="text-align:center">/home</td></tr></tbody></table><p>当然空间充足的话,可以给8000,200MB调大些,我一般都会多加几个G。</p><hr><h3 id="BIOS设置"><a href="#BIOS设置" class="headerlink" title=" BIOS设置 "></a><strong> BIOS设置 </strong></h3><p>这里我是用U盘做的Ubuntu的启动盘,因为PC本身就是win10。但是这个本子却检测不了,不能进入安装界面。</p><p>需要对BIOS(F2进入BIOS)进行如下修改</p><p>1.进入<code>Configuration</code>选项，将<code>SATA Controller Mode</code>选为<code>ACHI</code>模式（不选为这个模式的话安装的时候ubuntu读不出来硬盘）。<br>2.进入<code>Security</code>选项将<code>Secure Boot</code>选为<code>disabled</code>。</p><p>当然需要自己修改为优先U盘启动电脑(F12).<br>如果后面不能进入windows,就将刚才那两个BIOS修改的地方改回之前的值即可。 </p><hr><h3 id="无线网卡问题-搜不到wifi"><a href="#无线网卡问题-搜不到wifi" class="headerlink" title=" 无线网卡问题(搜不到wifi) "></a><strong> 无线网卡问题(搜不到wifi) </strong></h3><p>装好系统过后,发现搜索不到WiFi,后来定位到是无线网卡问题。最终在贴吧找到了解决方法(贴吧真的大神多),<strong>这里做下搬运工,链接已经放在了文末</strong>。</p><p>之前，在本吧发了一篇《亲测 联想r720 双硬盘+win10+Ubuntu16.04双系统安装》的帖子。在装好Ubuntu16.04后，发现联想R720的无线网卡（RTL8821AE）存在hard blocked问题（即“Enable Wi-Fi”不起作用）以及wifi信号易断开问题。故在次将我的解决方法写出来，供大家参考。</p><h4 id="问题一"><a href="#问题一" class="headerlink" title=" 问题一 "></a><strong> 问题一 </strong></h4><p><strong> 1.1 问题描述 </strong><br>笔记本型号：Lenovo r720笔记本（i5-7300hq，gtx1060 maxq 6g），默认装入Win10系统，然而当装入Ubuntu16.04双系统时，会出现无线网卡（型号：RTL8821AE）被hard blocked问题。<br>即：<br>在终端敲入：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rfkill list all</span><br></pre></td></tr></table></figure></p><p>会出现：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">0:ideapad_wlan: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked:yes</span><br><span class="line">1:ideapad_bluetooth: Bluetooth</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked: yes</span><br><span class="line">2:phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked:no</span><br><span class="line">3:hci0: Bluetooth</span><br><span class="line">Soft blocked: yes</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure></p><p>可以看到，优先级前的<code>ideapad_wlan</code>的<code>Hard blocked</code>默认为<code>yes</code>，<strong> <span class="under0">即ubuntu默认关闭了硬件wifi开关，而联想R720的wifi只有软件开关，没有硬件开关的启动，所以引起了wifi无法开启的问题。</span> </strong></p><p><strong> 1.2 解决方法 </strong><br>从无线模块的显示列表可以看出，序号2的wifi模块是软硬件是可以启动的，所以，只要将前面默认的模块移出即可。</p><h4 id="a）方法一："><a href="#a）方法一：" class="headerlink" title="  a）方法一： "></a><strong> <span class="under0"> a）方法一：</span> </strong></h4><p>1）移出ideapad无线模块：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure></p><p>2）使用命令查看：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">rfkill list all</span><br></pre></td></tr></table></figure></p><p>如下提示：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">2:phy0: Wireless LAN</span><br><span class="line">Soft blocked: no</span><br><span class="line">Hard blocked:no</span><br><span class="line">3:hci0: Bluetooth</span><br><span class="line">Soft blocked: yes</span><br><span class="line">Hard blocked: no</span><br></pre></td></tr></table></figure></p><p>即wifi模块工作正常，然而每次重启ubuntu系统都要重新进行模块移出，故可将该命令设置为开机自启动。<br>3）在<code>/etc/rc.local</code>文件中添加命令：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">#!/bin/sh -e</span><br><span class="line">#</span><br><span class="line"># rc.local</span><br><span class="line">#</span><br><span class="line"># This script is executed at the end of each multiuser runlevel.</span><br><span class="line"># Make sure that the script will &quot;exit 0&quot; on success or any other</span><br><span class="line"># value on error.</span><br><span class="line">#</span><br><span class="line"># In order to enable or disable this script just change the execution</span><br><span class="line"># bits.</span><br><span class="line">#</span><br><span class="line"># By default this script does nothing.</span><br><span class="line">#因为使用的是非管理员登录，故在执行sudo命令时要输入密码，方可自动化执行，</span><br><span class="line">#此处假设用户密码为123，命令一定要在exit 0之前运行，该文件如果没有修改权限</span><br><span class="line">#修改前使用 chmod 命令修改权限即可！</span><br><span class="line">echo &quot;123&quot; |sudo modprobe -r ideapad_laptop</span><br><span class="line">exit 0</span><br></pre></td></tr></table></figure></p><p>开机启动后系统会自动执行改脚本文件，完成wifi模块的自动移出操作。</p><h4 id="b）方法二（推荐）："><a href="#b）方法二（推荐）：" class="headerlink" title=" b）方法二（推荐）： "></a><strong><span class="under0"> b）方法二（推荐）：</span> </strong></h4><p>通过列入黑名单的方式来实现自动移出<code>ideapad_laptop</code>设备。<br>1）创建<code>/etc/modprobe.d/ideapad.conf</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo touch /etc/modprobe.d/ideapad.conf</span><br></pre></td></tr></table></figure></p><p>2）编辑<code>ideapad.conf</code>文件：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo gedit ideapad.conf</span><br></pre></td></tr></table></figure></p><p>3) 在<code>ideapad.conf</code>文件中添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">blacklist ideapad_laptop</span><br></pre></td></tr></table></figure></p><p>4) 关闭并保存<code>ideapad.conf</code>文件，移除<code>ideapad_laptop</code>设备：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo modprobe -r ideapad_laptop</span><br></pre></td></tr></table></figure></p><p>5) 注销重启Ubuntu系统，可以看到无线设备能够被打开，并能搜索到WiFi信号。</p><h4 id="问题二"><a href="#问题二" class="headerlink" title=" 问题二 "></a><strong> 问题二 </strong></h4><p>2.1 问题描述<br>在解决以上无线网卡开启问题后，发现已连接的wifi容易断开并且信号强度较差</p><p>2.2 解决方法<br>1）插上有线网<br>2）打开终端<br>3）在终端依次执行：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install git build-essential linux-headers-$(uname -r)</span><br><span class="line"></span><br><span class="line">git clone https://github.com/lwfinger/rtlwifi_new.git</span><br><span class="line"></span><br><span class="line">cd rtlwifi_new</span><br><span class="line"></span><br><span class="line">make</span><br><span class="line"></span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><p>4）重启计算机</p><hr><h3 id="宽带连接问题"><a href="#宽带连接问题" class="headerlink" title=" 宽带连接问题 "></a><strong> 宽带连接问题 </strong></h3><p>这个本子在网线连接宽带的时候，也出现了一个错误,如下</p><p><strong> 抱歉,扫描了2个接口,但供应商的访问集中器没有响应。请检查您的网线以及调制解调器的线缆是否接好。导致扫描失败的另一个可能原因是其他的pppoe进程正在占用调制解调器。 </strong></p><p>据同学反馈,解决如下</p><p>编辑<code>/etc/NetworkManager/NetworkManager.conf</code>，将<code>managed=false</code>改成<code>managed=true</code> 然后重启.</p><hr><p>Linux里面有两套管理网络连接的方案：</p><p>1、/etc/network/interfaces（/etc/init.d/networking）<br>2、Network-Manager</p><p>两套方案是冲突的，不能同时共存。</p><p><strong><span class="under0"> 第一个方案适用于没有X的环境，如：服务器；或者那些完全不需要改动连接的场合。 第二套方案使用于有桌面的环境，特别是笔记本，搬来搬去，网络连接情况随时会变的。 </span></strong></p><p>他们两个为了避免冲突，又能共享配置，就有了下面的解决方案：</p><p>1、当<code>Network-Manager</code>发现<code>/etc/network/interfaces</code>被改动的时候，则关闭自己（显示为未托管），除非<code>managed</code>设置成真。</p><p>2、当<code>managed</code>设置成真时，<code>/etc/network/interfaces</code>，则不生效。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo vi /etc/NetworkManager/NetworkManager.conf</span><br></pre></td></tr></table></figure><p>将<code>managed=false</code>改成<code>true</code>，重启一下就可以了。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/fesdgasdgasdg/article/details/54183577" target="_blank" rel="noopener">Ubuntu 16.04与Win10双系统双硬盘安装图解</a><br><a href="https://blog.csdn.net/u013036495/article/details/75043228?locationNum=5&amp;fps=1" target="_blank" rel="noopener">联想拯救者r720自带win10安装linux（ubuntu）双系统</a><br><a href="http://tieba.baidu.com/p/5281696783" target="_blank" rel="noopener">解决Ubuntu16.04下联想R720的无线网卡开启问题及信号不稳定问…</a><br><a href="https://www.cnblogs.com/zhaiyf/p/8979975.html" target="_blank" rel="noopener">Ubuntu：未找到合法的活动链接</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu中使用宽带</title>
      <link href="/2018/05/26/use-broadband-in-ubuntu/"/>
      <url>/2018/05/26/use-broadband-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<p>今天学校负责装宽带的老哥,来宿舍帮我装宽带,线弄好了过后,他却不会在linux下配置。</p><p>百度了一下</p><p>执行以下命令即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo pppoeconf</span><br></pre></td></tr></table></figure><p>然后在弹出的窗口中输入自己的账户名和密码即可</p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>更新octave</title>
      <link href="/2018/05/26/update-octave/"/>
      <url>/2018/05/26/update-octave/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>提交作业的时候报了这个错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">error: structure has no member &apos;message&apos; </span><br><span class="line">error: called from</span><br><span class="line">     submitWithConfiguration at line 35 column 5</span><br><span class="line">     submit at line 40 column 3</span><br><span class="line">error: evaluating argument list element number 2 </span><br><span class="line">error: called from     </span><br><span class="line">     submitWithConfiguration at line 35 column 5     </span><br><span class="line">     submit at line 40 column 3</span><br></pre></td></tr></table></figure><p>我的系统是Ubutu16,octave是4.0.0版本。</p><p>报这个错误的原因是因为octave4.0.0版本,提交作业的脚本在ubuntu上不是能够很好的工作。所以需要对其进行更新。</p><hr><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install octave</span><br></pre></td></tr></table></figure><h3 id="更新"><a href="#更新" class="headerlink" title=" 更新 "></a><strong> 更新 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 查看当前版本</span><br><span class="line"></span><br><span class="line">octave --version</span><br><span class="line"></span><br><span class="line">========================</span><br><span class="line"></span><br><span class="line">sudo add-apt-repository ppa:octave/stable</span><br><span class="line"></span><br><span class="line">sudo apt update</span><br><span class="line"></span><br><span class="line">sudo apt-get install octave</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://stackoverflow.com/questions/45972413/submitting-assignment-on-coursera-ml-in-octave" target="_blank" rel="noopener">Submitting Assignment on Coursera ML in Octave</a></p>]]></content>
      
      
      <categories>
          
          <category> 机器学习 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> octave </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kill不掉mysqld</title>
      <link href="/2018/05/19/cannot-kill-mysql/"/>
      <url>/2018/05/19/cannot-kill-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>以前想停止mysql服务,都是执行类似如此的命令<code>service mysql stop</code>。前阵子某次操作我试图kill -9 掉mysqld,但是<code>mysqld</code>始终都是存在的。</p><p>经过一番搜索,在<a href="https://askubuntu.com/questions/529302/how-to-stop-mysqld-process" target="_blank" rel="noopener">这儿</a>找到了答案:</p><p>The mysql Upstart configuration has the respawn option:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">grep respawn /etc/init/mysql.conf</span><br><span class="line"></span><br><span class="line">respawn</span><br><span class="line">respawn limit 2 5</span><br><span class="line">        elif echo $statusnow | grep -q &apos;respawn/&apos; ; then</span><br></pre></td></tr></table></figure><p>The respawn option tells Upstart to restart the process if it exits or is killed. The limit is 2, so you can try killing of the processes twice, which will tell Upstart not to start them again, or use: <code>sudo service mysql stop</code></p><p>respawn会告诉upstart重启mysqld进程当它退出或者被kill掉。这个限制是2,所以可以通过连续的两次kill或者使用<code>sudo service mysql stop</code></p><p>不过我连续两次的kill或者更多次,是没有kill掉mysqld的。</p><p>另外在<a href="https://serverfault.com/questions/526554/mysql-process-wont-die" target="_blank" rel="noopener">这个帖子</a>看到了另一个回答,贴下</p><p>The mysql server runs with 2 processes, mysqld and mysqld_safe. If you kill mysqld with the SIGKILL signal (9), mysqld_safe will respawn mysqld. If you stop mysqld in the standard way, or kill it with the sigint(15) signal, mysqld_safe notices it and ends. If there is an emergency, remember always to kill -9 mysqld_safe first.</p><p>In this case, it seems that mysqld_safe is restarting just after shutdown. How are you exactly killing mysql?</p><p><code>mysql</code>服务运行的时候有两个进程分别是<code>mysqld</code>和<code>mysqld_safe</code>。当你9杀的时候,<code>mysqld_safe</code>会重启<code>mysqld</code>.如果你以一种标准的方式来停止<code>mysqld</code>,或者以信号量15(SIGTERM)来kill,mysqld_safe将会退出。紧急情况下,记得要先9杀掉<code>mysqld_safe</code>。</p><hr><h3 id="Linux信号"><a href="#Linux信号" class="headerlink" title=" Linux信号 "></a><strong> Linux信号 </strong></h3><h4 id="信号本质"><a href="#信号本质" class="headerlink" title=" 信号本质 "></a><strong> 信号本质 </strong></h4><p>软中断信号（signal，又简称为信号）用来通知进程发生了异步事件。在软件层次上是对中断机制的一种模拟，在原理上，一个进程收到一个信号与处理器收到一个中断请求可以说是一样的。信号是进程间通信机制中唯一的异步通信机制，一个进程不必通过任何操作来等待信号的到达，事实上，进程也不知道信号到底什么时候到达。进程之间可以互相通过系统调用kill发送软中断信号。内核也可以因为内部事件而给进程发送信号，通知进程发生了某个事件。信号机制除了基本通知功能外，还可以传递附加信息。</p><p>每种信号用一个整型常量宏表示，以<code>SIG</code>开头，比如<code>SIGCHLD</code>、<code>SIGINT</code>等，它们在系统头文件中定义。</p><hr><p>通过<code>kill -l</code>命令可以查看系统支持的所有信号：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&gt; kill -l</span><br><span class="line"></span><br><span class="line">HUP INT QUIT ILL TRAP ABRT BUS FPE KILL USR1 SEGV USR2 PIPE ALRM TERM STKFLT CHLD CONT STOP TSTP TTIN TTOU URG XCPU XFSZ VTALRM PROF WINCH POLL PWR SYS</span><br></pre></td></tr></table></figure></p><p><code>SIGTERM</code>(15)和<code>SIGKILL</code>(9)。 <code>SIGTERM</code>比较友好，进程能捕捉这个信号， 根据您的需要来关闭程序。在关闭程序之前，您可以结束打开的记录文件和完成正在做的任务。 在某些情况下， 假如进程正在进行作业而且不能中断，那么进程可以忽略这个<code>SIGTERM</code>信号。</p><p>对于<code>SIGKILL</code>信号，进程是不能忽略的。 这是一个 ‘“我不管您在做什么,立刻停止”’的信号。</p><p>更多可以看下这篇文章<a href="https://major.io/2010/03/18/sigterm-vs-sigkill/" target="_blank" rel="noopener">SIGTERM vs. SIGKILL</a></p><hr><h3 id="守护进程"><a href="#守护进程" class="headerlink" title=" 守护进程 "></a><strong> 守护进程 </strong></h3><p>守护进程一般在系统启动时开始运行，除非强行终止，否则直到系统关机都保持运行。守护进程经常以超级用户（root）权限运行，因为它们要使用特殊的端口（1-1024）或访问某些特殊的资源。</p><p>一个守护进程的父进程是init进程，因为它真正的父进程在fork出子进程后就先于子进程exit退出了，所以它是一个由init继承的孤儿进程。守护进程是非交互式程序，没有控制终端，所以任何输出，无论是向标准输出设备stdout还是标准出错设备stderr的输出都需要特殊处理。</p><p>守护进程的程序命名通常在最后加一个 “d”。 BIND 是伯克利互联网域名服务 (而实际执行的程序名称则是 named)， Apache web系统的程序就叫 httpd， 在行式打印机上的打印守护进程就是 lpd。 这只是一种惯例，不是标准或硬性规定。 例如，为Sendmail而应用的主要mail守护进程就叫sendmail， 却不叫maild，这和您推测的一样。</p><p>查看守护进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ps -eo ppid,pid,sid,stat,tty,comm  | awk &apos;&#123; if ($2 == $3 &amp;&amp; $5 == &quot;?&quot;) &#123;print $0&#125;; &#125;&apos;</span><br></pre></td></tr></table></figure></p><hr><h3 id="mysqld-safe"><a href="#mysqld-safe" class="headerlink" title=" mysqld_safe "></a><strong> mysqld_safe </strong></h3><p><code>cat /usr/bin/mysqld_safe</code> </p><p>Script to start the MySQL daemon and restart it if it dies unexpectedly</p><p><code>mysqld_safe</code> 是mysqld 启动脚本,当<code>mysqld</code>不正常死亡,重启它 。</p><hr><h3 id="MySQL-的四种启动方式"><a href="#MySQL-的四种启动方式" class="headerlink" title=" MySQL 的四种启动方式 "></a><strong> MySQL 的四种启动方式 </strong></h3><p>这部分主要参考了以下几篇文章,贴在这里</p><p><a href="https://blog.csdn.net/leshami/article/details/40749935" target="_blank" rel="noopener">MySQL 数据库的启动与关闭</a><br><a href="https://blog.csdn.net/alexdamiao/article/details/51498684" target="_blank" rel="noopener">MySql在Linux的启动方式</a></p><p>在Linux系统下，MySQL服务器通常有四种启动方式：mysqld守护进程启动，mysqld_safe启动，mysql.server启动，mysqld_multi多实例启动。</p><h4 id="mysqld守护进程启动"><a href="#mysqld守护进程启动" class="headerlink" title=" mysqld守护进程启动 "></a><strong> mysqld守护进程启动 </strong></h4><p>mysqld是mysql的守护进程，这种方式启动的时候会读取my.cnf文件中的[mysqld]和[server]组中的配置参数。一般的，我们通过这种方式手动的调用mysqld，如果不是出去调试的目的，我们一般都不这样做。这种方式如果启动失败的话，错误信息只会从终端输出，而不是记录在错误日志文件中，这样，如果mysql崩溃的话我们也不知道原因，所以这种启动方式一般不用在生产环境中，而一般在调试（debug）系统的时候用到。<br>启动方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld</span><br></pre></td></tr></table></figure><hr><h4 id="mysqld-safe启动"><a href="#mysqld-safe启动" class="headerlink" title=" mysqld_safe启动 "></a><strong> mysqld_safe启动 </strong></h4><p>这种方式启动的时候会读取my.cnf文件中的[mysqld],[server]和[mysqld_safe]组的配置文件,为了兼容，也会读取[safe_mysqld]这个组内的配置文件。<br>mysqld_safe是一个启动脚本，该脚本会调用mysqld启动，如果启动出错，会将错误信息记录到错误日志中，mysqld_safe启动mysqld和monitor mysqld两个进程，这样如果出现mysqld进程异常终止的情况，mysqld_safe会重启mysqld进程。<br>启动方法：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./mysqld_safe</span><br></pre></td></tr></table></figure><hr><h4 id="mysql-server启动"><a href="#mysql-server启动" class="headerlink" title=" mysql.server启动 "></a><strong> mysql.server启动 </strong></h4><p>mysql.server同样是一个启动脚本，调用mysqld_safe脚本。它的执行文件在$MYSQL_BASE/share/mysql/mysql.server 和 support-files/mysql.server。</p><hr><h4 id="mysqld-multi多实例启动"><a href="#mysqld-multi多实例启动" class="headerlink" title=" mysqld_multi多实例启动 "></a><strong> mysqld_multi多实例启动 </strong></h4><p><a href="http://blog.51cto.com/wolfword/1241304" target="_blank" rel="noopener">mysql dba系统学习（4）mysql的多实例multi启动停止</a></p><hr><h3 id="其他"><a href="#其他" class="headerlink" title=" 其他 "></a><strong> 其他 </strong></h3><p>#查看mysqld启动配置文件的优先级<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mysqld --verbose --help |grep -A 1 &quot;Default options&quot;</span><br></pre></td></tr></table></figure></p><hr><p>当MySQL实例启动时，会将自己的进程ID写入一个文件中——该文件即为pid文件。该文件可由参数pid_file控制，默认位于数据库目录下，文件名为主机名.pid：</p><p>mysql&gt; show variables like ‘pid_file’\G;</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/hoys/archive/2012/08/19/2646377.html" target="_blank" rel="noopener">Linux信号（signal) 机制分析</a><br><a href="http://www.cnblogs.com/yucongblog/p/6568374.html" target="_blank" rel="noopener">Linux kill -9 和 kill -15 的区别</a><br><a href="https://www.jianshu.com/p/9c9b74f6a222" target="_blank" rel="noopener">Linux信号机制与信号处理</a><br><a href="https://blog.csdn.net/hlf1203/article/details/52789685" target="_blank" rel="noopener">MySQL使用kill杀不死</a><br><a href="https://serverfault.com/questions/526554/mysql-process-wont-die" target="_blank" rel="noopener">Mysql Process wont die</a><br><a href="https://blog.csdn.net/leshami/article/details/40749935" target="_blank" rel="noopener">MySQL 数据库的启动与关闭</a><br><a href="https://zh.wikipedia.org/wiki/%E8%BF%9B%E7%A8%8BID" target="_blank" rel="noopener">进程ID</a><br><a href="https://blog.csdn.net/u010098331/article/details/50786269" target="_blank" rel="noopener">怎样查看mysql pid文件路径 文件位置</a><br><a href="https://my.oschina.net/u/158589/blog/351890" target="_blank" rel="noopener">Linux查找所有正在运行的守护进程（daemon）</a><br><a href="https://my.oschina.net/u/556678/blog/183780" target="_blank" rel="noopener">守护进程daemon的创建和使用</a><br><a href="https://my.oschina.net/shou1156226/blog/802931" target="_blank" rel="noopener">Linux 守护进程</a><br><a href="https://blog.csdn.net/dlutbrucezhang/article/details/8656680" target="_blank" rel="noopener">UNIX中后台进程与守护进程</a><br><a href="https://www.jianshu.com/p/2f4ef40020aa" target="_blank" rel="noopener">mysqld_safe</a><br><a href="https://blog.csdn.net/liukun321/article/details/6918233" target="_blank" rel="noopener">进程kill 失败</a><br><a href="https://my.oschina.net/sallency/blog/827737" target="_blank" rel="noopener">linux：nohup 命令实现守护进程（屏蔽 SIGHUP 信号）</a><br><a href="https://zh.wikipedia.org/wiki/SIGKILL" target="_blank" rel="noopener">SIGKILL</a><br><a href="https://askubuntu.com/questions/529302/how-to-stop-mysqld-process" target="_blank" rel="noopener">How to stop mysqld process?</a><br><a href="https://www.freebsd.org/doc/zh_CN/books/handbook/basics-daemons.html" target="_blank" rel="noopener">4.8. 守护进程，信号和杀死进程</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL性能分析</title>
      <link href="/2018/05/06/Performance-analysis-of-mysql/"/>
      <url>/2018/05/06/Performance-analysis-of-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对MySQL中性能分析的<code>EXPLAIN</code>和<code>PROFILE</code>的介绍</p><hr><h3 id="EXPLAIN"><a href="#EXPLAIN" class="headerlink" title=" EXPLAIN "></a><strong> EXPLAIN </strong></h3><p>EXPLAIN语句提供了有关SELECT语句的执行计划的信息。完整的EXPLAIN用法见<a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">官方文档</a></p><p>EXPLAIN返回SELECT语句中使用的每个表的一行信息。 它按照MySQL在处理语句时读取它们的顺序列出输出中的表。 MySQL使用嵌套循环连接方法解析所有连接。 这意味着MySQL从第一个表中读取一行，然后在第二个表，第三个表等中找到匹配的行。 处理完所有表后，MySQL将通过表列表输出所选列和回溯，直到找到有更多匹配行的表。 下一行从该表中读取，并且该过程继续下一个表.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; explain select * from help_category;</span><br><span class="line">+----+-------------+---------------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">| id | select_type | table         | partitions | type | possible_keys | key  | key_len | ref  | rows | filtered | Extra |</span><br><span class="line">+----+-------------+---------------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">|  1 | SIMPLE      | help_category | NULL       | ALL  | NULL          | NULL | NULL    | NULL |   40 |   100.00 | NULL  |</span><br><span class="line">+----+-------------+---------------+------------+------+---------------+------+---------+------+------+----------+-------+</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">&lt;=====&gt;</span><br><span class="line"></span><br><span class="line">mysql&gt; explain select * from help_category\G;</span><br><span class="line">*************************** 1. row ***************************</span><br><span class="line">           id: 1</span><br><span class="line">  select_type: SIMPLE</span><br><span class="line">        table: help_category</span><br><span class="line">   partitions: NULL</span><br><span class="line">         type: ALL</span><br><span class="line">possible_keys: NULL</span><br><span class="line">          key: NULL</span><br><span class="line">      key_len: NULL</span><br><span class="line">          ref: NULL</span><br><span class="line">         rows: 40</span><br><span class="line">     filtered: 100.00</span><br><span class="line">        Extra: NULL</span><br><span class="line">1 row in set, 1 warning (0.00 sec)</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">列</th><th style="text-align:center">北京</th></tr></thead><tbody><tr><td style="text-align:center">id</td><td style="text-align:center">查询标识符</td></tr><tr><td style="text-align:center">select_type</td><td style="text-align:center">查询类型</td></tr><tr><td style="text-align:center">table</td><td style="text-align:center">显示这一行的数据是关于哪张表</td></tr><tr><td style="text-align:center">partitions</td><td style="text-align:center">使用的哪个分区</td></tr><tr><td style="text-align:center">type</td><td style="text-align:center"><a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html#explain-join-types" target="_blank" rel="noopener">the join type</a>,描述这些表是如何连接的</td></tr><tr><td style="text-align:center">possible_keys</td><td style="text-align:center">可能用到的索引</td></tr><tr><td style="text-align:center">key</td><td style="text-align:center">实际用到的索引</td></tr><tr><td style="text-align:center">key_len</td><td style="text-align:center">实际用到的索引的长度</td></tr><tr><td style="text-align:center">ref</td><td style="text-align:center">引用索引对应的表中哪些行</td></tr><tr><td style="text-align:center">rows</td><td style="text-align:center">该查询遍历了多少行数据</td></tr><tr><td style="text-align:center">filtered</td><td style="text-align:center">通过过滤条件之后对比总数的百分比</td></tr><tr><td style="text-align:center">Extra</td><td style="text-align:center">额外信息</td></tr></tbody></table><h4 id="select-type"><a href="#select-type" class="headerlink" title=" select_type "></a><strong> select_type </strong></h4><table><thead><tr><th style="text-align:center">查询类型值</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">SIMPLE</td><td style="text-align:center">简单select(不使用union或子查询)</td></tr><tr><td style="text-align:center">PRIMARY</td><td style="text-align:center">最外面的select</td></tr><tr><td style="text-align:center">UNION</td><td style="text-align:center">union中的第二个或后面的select</td></tr><tr><td style="text-align:center">DEPENDENT UNION</td><td style="text-align:center">union union中的第二个或后面的select语句,取决于外面的查询</td></tr><tr><td style="text-align:center">UNION RESULT</td><td style="text-align:center">result union的结果</td></tr><tr><td style="text-align:center">SUBQUERY</td><td style="text-align:center">子查询中的第一个select</td></tr><tr><td style="text-align:center">DEPENDENT SUBQUERY</td><td style="text-align:center">subquery 子查询中的第一个select,取决于外面的查询</td></tr><tr><td style="text-align:center">UNCACHEABLE SUBQUERY</td><td style="text-align:center">不可缓存的子查询,必须重新评估外部查询的每一行</td></tr><tr><td style="text-align:center">UNCACHEABLE UNION</td><td style="text-align:center">union中的第二个或后面的select,且属于UNCACHEABLE SUBQUERY</td></tr></tbody></table><h4 id="type"><a href="#type" class="headerlink" title=" type "></a><strong> type </strong></h4><p>从最好到最差的连接类型:</p><p><code>system &gt; const &gt; eq_ref &gt; ref &gt; fulltext &gt; ref_or_null &gt; index_merge &gt; unique_subquery &gt; index_subquery &gt; range &gt; index &gt; ALL</code></p><p>ALL代表扫描了全表才确定结果。一般来说,得保证查询至少达到range级别,最好能达到ref。可以通过加索引等方法来优化。</p><hr><h3 id="PROFILE"><a href="#PROFILE" class="headerlink" title=" PROFILE "></a><strong> PROFILE </strong></h3><p>当我们要对某一条sql的性能进行分析时,可以使用PROFILE来分析SQL语句的执行过程。</p><p>这个我用得还不多,推荐阅读<a href="http://www.ywnds.com/?p=8677" target="_blank" rel="noopener">MySQL使用profile分析SQL语句执行过程</a></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">EXPLAIN Output Format</a><br><a href="https://tech.meituan.com/mysql-index.html" target="_blank" rel="noopener">MySQL索引原理及慢查询优化</a><br><a href="http://www.imooc.com/article/1204" target="_blank" rel="noopener">Mysql处理海量数据时的一些优化查询速度方法</a><br><a href="http://www.cnblogs.com/nixi8/p/4574709.html" target="_blank" rel="noopener">【mysql的设计与优化专题(6)】mysql索引攻略</a><br><a href="https://blog.csdn.net/u012410733/article/details/66472157" target="_blank" rel="noopener">mysql 执行计划explain详解</a><br><a href="http://www.ywnds.com/?p=8677" target="_blank" rel="noopener">MySQL使用profile分析SQL语句执行过程</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重装MySQL</title>
      <link href="/2018/05/05/reinstall-mysql-in-linux/"/>
      <url>/2018/05/05/reinstall-mysql-in-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>因为我的一大波骚操作导致MySQL使用中出现这个下面这个错误,记作A<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">update-alternatives: 错误: 候选项路径 /etc/mysql/mysql.cnf 不存在</span><br><span class="line">dpkg: 处理软件包 mysql-server-5.7 (--configure)时出错：</span><br><span class="line"> 子进程 已安装 post-installation 脚本 返回错误状态 2</span><br><span class="line">dpkg: 依赖关系问题使得 mysql-server 的配置工作不能继续：</span><br><span class="line"> mysql-server 依赖于 mysql-server-5.7；然而：</span><br><span class="line">  软件包 mysql-server-5.7 尚未配置。</span><br><span class="line"></span><br><span class="line">dpkg: 处理软件包 mysql-server (--configure)时出错：</span><br><span class="line"> 依赖关系问题 - 仍未被配置</span><br><span class="line">因为错误消息指示这是由于上一个问题导致的错误，没有写入 apport 报告。</span><br><span class="line">                                                                    在处理时有错误发生：</span><br><span class="line"> mysql-server-5.7</span><br><span class="line"> mysql-server</span><br><span class="line">E: Sub-process /usr/bin/dpkg returned an error code (1)</span><br></pre></td></tr></table></figure></p><p>折腾了很久,搜索的方法没有奏效。</p><p>于是决定卸载重装。应该是卸载的时候没有卸载干净,导致依旧会抛错。</p><p>最终看到<a href="https://blog.csdn.net/luoww1/article/details/53741509" target="_blank" rel="noopener">这篇文章</a>,搞定了。</p><p>执行以下两个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get remove --purge mysql-\*</span><br><span class="line">sudo apt-get install mysql-server mysql-client</span><br></pre></td></tr></table></figure><hr><h3 id="參考"><a href="#參考" class="headerlink" title=" 參考 "></a><strong> 參考 </strong></h3><p><a href="https://blog.csdn.net/luoww1/article/details/53741509" target="_blank" rel="noopener">linux mysql 安装，重装遇到问题</a><br><a href="https://blog.csdn.net/w3045872817/article/details/77334886" target="_blank" rel="noopener">ubuntu完全卸载mysql</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL缓存处理</title>
      <link href="/2018/05/03/the-cache-of-mysql/"/>
      <url>/2018/05/03/the-cache-of-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>缓存可以加快我们的查询速度,但是在做性能优化的时候,通常需要关闭缓存,避免缓存给性能优化带来的影响。本文做些记录。</p><hr><h4 id="基础"><a href="#基础" class="headerlink" title=" 基础 "></a><strong> 基础 </strong></h4><p><code>sql_cache</code>，将查询结果放入查询缓存中。<br><code>sql_no_cache</code>，查询的时候不缓存查询结果。<br><code>sql_buffer_result</code>，在查询语句中，将查询结果缓存到临时表中。</p><p><code>FLUSH QUERY CACHE</code>，可以整理查询缓存，以更好的利用它的内存。这个命令不会从缓存中移除任何查询。<br><code>FLUSH TABLES</code>， 会转储清除查询缓存。<br><code>RESET QUERY CACHE</code>， 使命从查询缓存中移除所有的查询结果,重置查询缓存。</p><h4 id="show-variables-like-‘-query-cache-’"><a href="#show-variables-like-‘-query-cache-’" class="headerlink" title=" show variables like ‘%query_cache%’; "></a><strong> show variables like ‘%query_cache%’; </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like &apos;%query_cache%&apos;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| Variable_name                | Value    |</span><br><span class="line">+------------------------------+----------+</span><br><span class="line">| have_query_cache             | YES      |</span><br><span class="line">| query_cache_limit            | 1048576  |</span><br><span class="line">| query_cache_min_res_unit     | 4096     |</span><br><span class="line">| query_cache_size             | 16777216 |</span><br><span class="line">| query_cache_type             | OFF      |</span><br><span class="line">| query_cache_wlock_invalidate | OFF      |</span><br><span class="line">+------------------------------+----------+</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">系统变量</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center"><code>have_query_cache</code></td><td style="text-align:center">表示当前版本的MYSQL是否支持Query Cache.</td></tr><tr><td style="text-align:center"><code>query_cache_limit</code></td><td style="text-align:center">表示单个结果集所被允许缓存的最大值.默认是 1MB，超过此参数设置的 Query 结果集将不会被 Cache</td></tr><tr><td style="text-align:center"><code>query_cache_min_res_unit</code></td><td style="text-align:center">每个被缓存的结果集要占用的最小内存.</td></tr><tr><td style="text-align:center"><code>query_cache_type</code></td><td style="text-align:center">mysql就是根据这个变量的值来决定到底要不要把查询结果放到查询缓存中. 有三个取值：0,1,2，分别代表了off、on、demand。</td></tr><tr><td style="text-align:center"><code>query_cache_size</code></td><td style="text-align:center">使用的内存大小，默认值为 16M，大小必须是 1024 的整数倍，如果不是整数倍，MySQL 会自动调整降低最小量以达到 1024 的倍数</td></tr><tr><td style="text-align:center"><code>query_cache_wlock_invalidate</code></td><td style="text-align:center">控制当有写锁加在表上的时候，是否先让该表相关的 Query Cache 失效</td></tr></tbody></table><h5 id="query-cache-type"><a href="#query-cache-type" class="headerlink" title=" query_cache_type "></a><strong> query_cache_type </strong></h5><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">0(OFF)</td><td style="text-align:center">关闭 Query Cache 功能，任何情况下都不会使用 Query Cache</td></tr><tr><td style="text-align:center">1(ON)</td><td style="text-align:center">开启 Query Cache 功能，但是当 SELECT 语句中使用的 SQL_NO_CACHE 提示后，将不使用 Query Cache</td></tr><tr><td style="text-align:center">2(DEMAND)</td><td style="text-align:center">开启 Query Cache 功能，但是只有当 SELECT 语句中使用了 SQL_CACHE 提示后，才使用 Query Cache</td></tr></tbody></table><h5 id="query-cache-wlock-invalidate-值选项"><a href="#query-cache-wlock-invalidate-值选项" class="headerlink" title=" query_cache_wlock_invalidate 值选项 "></a><strong> query_cache_wlock_invalidate 值选项 </strong></h5><table><thead><tr><th style="text-align:center">值</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">1(TRUE)</td><td style="text-align:center">在写锁定的同时将使该表相关的所有 Query Cache 失效</td></tr><tr><td style="text-align:center">0(FALSE)</td><td style="text-align:center">在锁定时刻仍然允许读取该表相关的 Query Cache</td></tr></tbody></table><h4 id="SQL-NO-CACHE"><a href="#SQL-NO-CACHE" class="headerlink" title=" SQL_NO_CACHE "></a><strong> SQL_NO_CACHE </strong></h4><p>select 语句中使用 <code>SQL_NO_CACHE</code> 的意义为 这次查询的结果不会被缓存，如果这条语句的结果之前已经被缓存过，那么还有可能将会之前的缓存结果返回。即使<code>query_cache_type</code> 为 ON 或 1 。</p><p>如果要重新测试，就在查询前先执行一下<code>FLUSH QUERY CACHE</code> or <code>RESET QUERY CACHE</code>。然后再带上SQL_NO_CACHE选项.</p><p>当然将<code>query_cache_size</code>设置为0,也是可以使查询结果不被缓存的。如果需要禁止缓存最好将<code>query_cache_type</code>与<code>query_cache_size</code>调整为0.参考这篇文章<a href="http://www.ywnds.com/?p=7386" target="_blank" rel="noopener">MySQL为什么要关闭Query Cache？</a></p><hr><h4 id="show-status-like-‘-Qcache-’"><a href="#show-status-like-‘-Qcache-’" class="headerlink" title=" show status like ‘%Qcache%’; "></a><strong> show status like ‘%Qcache%’; </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">mysql&gt; show status like &apos;%Qcache%&apos;;</span><br><span class="line">+-------------------------+----------+</span><br><span class="line">| Variable_name           | Value    |</span><br><span class="line">+-------------------------+----------+</span><br><span class="line">| Qcache_free_blocks      | 1        |</span><br><span class="line">| Qcache_free_memory      | 16760152 |</span><br><span class="line">| Qcache_hits             | 0        |</span><br><span class="line">| Qcache_inserts          | 0        |</span><br><span class="line">| Qcache_lowmem_prunes    | 0        |</span><br><span class="line">| Qcache_not_cached       | 1        |</span><br><span class="line">| Qcache_queries_in_cache | 0        |</span><br><span class="line">| Qcache_total_blocks     | 1        |</span><br><span class="line">+-------------------------+----------+</span><br></pre></td></tr></table></figure><table><thead><tr><th style="text-align:center">系统变量</th><th style="text-align:center">解释</th></tr></thead><tbody><tr><td style="text-align:center">Qcache_free_blocks</td><td style="text-align:center">表示查询缓存中目前还有多少剩余的blocks，如果该值显示较大，则说明查询缓存中的内存碎片过多了，可能在一定的时间进行整理。</td></tr><tr><td style="text-align:center">Qcache_free_memory</td><td style="text-align:center">查询缓存的内存大小，通过这个参数可以很清晰的知道当前系统的查询内存是否够用，是多了，还是不够用，DBA可以根据实际情况做出调整。</td></tr><tr><td style="text-align:center">Qcache_hits</td><td style="text-align:center">表示有多少次命中缓存。我们主要可以通过该值来验证我们的查询缓存的效果。数字越大，缓存效果越理想。</td></tr><tr><td style="text-align:center">Qcache_inserts</td><td style="text-align:center">表示多少次未命中然后插入，意思是新来的SQL请求在缓存中未找到，不得不执行查询处理，执行查询处理后把结果insert到查询缓存中。这样的情况的次数，次数越多，表示查询缓存应用到的比较少，效果也就不理想。当然系统刚启动后，查询缓存是空的，这很正常。</td></tr><tr><td style="text-align:center">Qcache_lowmem_prunes</td><td style="text-align:center">该参数记录有多少条查询因为内存不足而被移除出查询缓存。通过这个值，用户可以适当的调整缓存大小。</td></tr><tr><td style="text-align:center">Qcache_not_cached</td><td style="text-align:center">表示因为query_cache_type的设置而没有被缓存的查询数量</td></tr><tr><td style="text-align:center">Qcache_queries_in_cache</td><td style="text-align:center">当前缓存中缓存的查询数量</td></tr><tr><td style="text-align:center">Qcache_total_blocks</td><td style="text-align:center">当前缓存的block数量</td></tr></tbody></table><hr><h3 id="是否需要缓存"><a href="#是否需要缓存" class="headerlink" title=" 是否需要缓存 "></a><strong> 是否需要缓存 </strong></h3><h5 id="在实际生产中-是否需要开启QC-是根据业务决定的-不过很多场景下都是不需要开启的。"><a href="#在实际生产中-是否需要开启QC-是根据业务决定的-不过很多场景下都是不需要开启的。" class="headerlink" title=" 在实际生产中,是否需要开启QC,是根据业务决定的,不过很多场景下都是不需要开启的。"></a><strong> 在实际生产中,是否需要开启QC,是根据业务决定的,不过很多场景下都是不需要开启的。</strong></h5><p>Query Cache有如下规则，如果数据表被更改，那么和这个数据表相关的全部Cache全部都会无效，并删除之。这里“数据表更改”包括: INSERT, UPDATE, DELETE, TRUNCATE, ALTER TABLE, DROP TABLE, or DROP DATABASE等。举个例子，如果数据表posts访问频繁，那么意味着它的很多数据会被QC缓存起来，但是每一次posts数据表的更新，无论更新是不是影响到了cache的数据，都会将全部和posts表相关的cache清除。如果你的数据表更新频繁的话，那么Query Cache将会成为系统的负担。有实验表明，糟糕时，QC会降低系统13%的处理能力。</p><p>如果你的应用对数据库的更新很少，那么QC将会作用显著。比较典型的如博客系统，一般博客更新相对较慢，数据表相对稳定不变，这时候QC的作用会比较明显。如果数据库一共往QC中写入了约800W次缓存，但是实际命中的只有约500W次。也就是说，每一个缓存的使用率约为0.66次。很难说，该缓存的作用是否大于QC系统所带来的开销。但是有一点是很肯定的，QC缓存的作用是很微小的，如果应用层能够实现缓存，将可以忽略QC的效果。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/jshuanghua/article/details/53858490" target="_blank" rel="noopener">MySQL高速缓存启动方法及参数详解(query_cache_size)</a><br><a href="http://www.dewen.net.cn/q/5149/Mysql" target="_blank" rel="noopener">Mysql SQL_NO_CACHE不生效的问题</a><br><a href="http://www.liaodiantec.com/a/news/9665" target="_blank" rel="noopener">你真的会用mysql 的SQL_NO_CACHE吗？</a><br><a href="https://cloud.tencent.com/developer/ask/43726" target="_blank" rel="noopener">MySQL-强制不使用缓存来测试查询速度？</a><br><a href="https://www.cnblogs.com/JiangLe/p/5337383.html" target="_blank" rel="noopener">MySQL query_cache_type 详解</a><br><a href="https://blog.csdn.net/wmsjlihuan/article/details/16337685" target="_blank" rel="noopener">mysql 查询缓存 query_cache_type</a><br><a href="https://segmentfault.com/a/1190000003039232" target="_blank" rel="noopener">MySql | 查询缓存笔记</a><br><a href="http://www.ywnds.com/?p=7386" target="_blank" rel="noopener">MySQL为什么要关闭Query Cache？</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如果做不到那就算了</title>
      <link href="/2018/04/30/if-you-cannot-do-it-forget-it/"/>
      <url>/2018/04/30/if-you-cannot-do-it-forget-it/</url>
      
        <content type="html"><![CDATA[<p>前些日子比较忙,很多计划中的事情是没有做的。</p><p>除了忙里偷闲看了一些书。读书笔记遥遥无期。</p><p>工作后发现有的事情不是努努力就能解决的,不过心里有很多事情渴望去做,依旧希望可以改变点什么。</p><p>可以做的选择有很多,自己也有些迷茫。究竟哪一条路才是最优的呢。</p><p><strong><span class="under0"> 一道题目,用动态规划还是贪心去解,很容易做决定。可人生中的选择做起来真的很吃力。动态规划本也就是贪婪的。</span> </strong></p><p>有时候很难过,日子稍微远去,难过也就过去了,再远些,或许还会会心一笑。但有少许事情,现在想起来,除了叹气似乎也做不了什么。</p><p><strong><span class="under0">追不到的梦想换个梦不就得了,如果做不到那就算了。</span> </strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>git config</title>
      <link href="/2018/04/10/git-config/"/>
      <url>/2018/04/10/git-config/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对<code>git config</code>部分参数的一点介绍。</p><p>最好的教程就是<code>man git config</code>。</p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">-e, --edit</span><br><span class="line"></span><br><span class="line">Opens an editor to modify the specified config file; either --system, --global, or repository (default).</span><br></pre></td></tr></table></figure><p><code>git config -e</code>， 就是对配置文件进行编辑。 </p><p>这里还有几个参数,分别是<code>--local</code>, <code>--global</code>, <code>--system</code>,<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line"># git config -e --local</span><br><span class="line"># git config -e --global</span><br><span class="line"># git config -e --system</span><br><span class="line"></span><br><span class="line">--local</span><br><span class="line">    For writing options: write to the repository .git/config file. This is the default behavior.</span><br><span class="line">    For reading options: read only from the repository .git/config rather than from all available files.</span><br><span class="line">    See also the section called “FILES”.</span><br><span class="line"></span><br><span class="line">--global</span><br><span class="line">    For writing options: write to global ~/.gitconfig file rather than the repository .git/config, write to $XDG_CONFIG_HOME/git/config file if this file</span><br><span class="line">    exists and the ~/.gitconfig file doesn’t.</span><br><span class="line">    For reading options: read only from global ~/.gitconfig and from $XDG_CONFIG_HOME/git/config rather than from all available files.</span><br><span class="line">    See also the section called “FILES”.</span><br><span class="line"></span><br><span class="line">--system</span><br><span class="line">    For writing options: write to system-wide $(prefix)/etc/gitconfig rather than the repository .git/config.</span><br><span class="line">    For reading options: read only from system-wide $(prefix)/etc/gitconfig rather than from all available files.</span><br><span class="line">    See also the section called “FILES”.</span><br></pre></td></tr></table></figure></p><p>简单总结下,<code>--local</code>是修改<code>.git/config</code>,<code>--global</code>是修改 <code>~/.gitconfig</code>,<code>--system</code>是修改 <code>/etc/gitconfig</code>.分别是仓库的配置文件,当前用户的配置文件,本机的配置文件。</p><p><code>git config -e</code> 等同于 <code>git config -e --local</code></p><p><code>优先级是git config &gt; git config --global &gt; git config --system</code>,因为配置文件是就近查找的,如果没有,再向外查找配置文件。</p><hr><p><strong> 如果Github没有记录上你的Contributions,可能就是因为你的用户名或者邮箱跟github没有关联上,github认为不是你提交的,不统计。</strong></p><p>对当前仓库做设置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">git config --local user.name &quot;Sail&quot;</span><br><span class="line">git config --local user.email &quot;865605793@qq.com&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="参考链接"><a href="#参考链接" class="headerlink" title=" 参考链接 "></a><strong> 参考链接 </strong></h3><p><a href="https://www.jianshu.com/p/56cb8a5d7379" target="_blank" rel="noopener">【GIT问题】–为什么Github没有记录你的Contributions - 简书</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux输出重定向</title>
      <link href="/2018/04/06/linux-output-redirection/"/>
      <url>/2018/04/06/linux-output-redirection/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对<code>2&gt;&amp;1</code>的学习记录.</p><p>最初本文的标题就是<code>2&gt;&amp;1</code>,限于hexo的限制,变成了现在的样子。</p><p>本文主要参考了<a href="https://blog.csdn.net/GGxiaobai/article/details/53507530" target="_blank" rel="noopener">Linux里的2&gt;&amp;1究竟是什么</a></p><hr><h3 id="基础概念介绍"><a href="#基础概念介绍" class="headerlink" title=" 基础概念介绍 "></a><strong> 基础概念介绍 </strong></h3><p>linux中有三种标准输入输出，分别是 STDIN，STDOUT，STDERR，对应的数字是 0，1，2。</p><p>STDIN 是标准输入，默认从键盘读取信息；<br>STDOUT 是标准输出，默认将输出结果输出至终端，也就是显示器之类的东西；<br>STDERR 是标准的错误信息，默认也会显示在终端上。<br>由于STDOUT与STDERR都会默认显示在终端上，为了区分二者的信息，就有了编号的0，1，2的定义，用1表示STDOUT，2表示STDERR。<br>/dev/null 表示空设备文件</p><h3 id="command-gt-dev-null"><a href="#command-gt-dev-null" class="headerlink" title=" command&gt;/dev/null "></a><strong> command&gt;/dev/null </strong></h3><p>其实这条命令是一个缩写版，对于一个重定向命令，肯定是a &gt; b这种形式，那么command &gt; /dev/null难道是command充当a的角色，/dev/null充当b的角色。这样看起来比较合理，其实一条命令肯定是充当不了a，肯定是command执行产生的输出来充当a，其实就是标准输出stdout。<strong> 所以command &gt; /dev/null相当于执行了command 1 &gt; /dev/null。执行command产生了标准输出stdout(用1表示)，重定向到/dev/null的设备文件中。 </strong></p><h3 id="2-gt-1-2-gt-amp-1"><a href="#2-gt-1-2-gt-amp-1" class="headerlink" title=" 2&gt;1, 2&gt;&amp;1 "></a><strong> 2&gt;1, 2&gt;&amp;1 </strong></h3><p>2就是标准错误,1是标准输出, 2&gt;1 就是把标准错误重定向标准输出。那么2&gt;1 和 2&gt;&amp;1 有什么区别呢</p><p><span class="under0"><strong> &amp;相当于等效于标准输出 </strong></span></p><p>在实际应用中,我们肯定是将一个操作的输出进行重定向,大概格式类似这样</p><p><code>command&gt;a 2&gt;a</code> , <code>command&gt;a 2&gt;&amp;1</code></p><p>等价于</p><p><code>command 1&gt;a 2&gt;a</code>(记作A) , <code>command 1&gt;a 2&gt;&amp;1</code>(记作B)</p><p><span class="under0"><strong> A、B区别就在于前者只打开一次文件a，后者会打开文件两次,后者并导致stdout被stderr覆盖。&amp;1的含义就可以理解为用标准输出的引用，引用的就是重定向标准输出产生打开的a。</strong></span></p><p>从IO效率上来讲,A 比 B 的效率更高。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/GGxiaobai/article/details/53507530" target="_blank" rel="noopener">Linux里的2&gt;&amp;1究竟是什么</a><br><a href="https://blog.csdn.net/huangfei711/article/details/51059310" target="_blank" rel="noopener">linux shell 中的 2&gt;&amp;1 用法说明</a><br><a href="https://www.cnblogs.com/zhenghongxin/p/7029173.html" target="_blank" rel="noopener">linux shell中”2&gt;&amp;1”含义</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu中修改python版本</title>
      <link href="/2018/04/06/change-your-python-version-in-ubuntu/"/>
      <url>/2018/04/06/change-your-python-version-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>我们可能需要使用多个python版本,对于管理多个python版本的情况,我所知道的有两种方案：一是<a href="http://www.sail.name/2017/08/11/Anaconda/">Anaconda</a>,二则是通过docker镜像进行管理。</p><p>而Ubuntu很多底层采用的是Python2.*,Python3和Python2是互相不兼容的，所以此时不能卸载Python2，需要将默认Python的指向Python3。</p><hr><p>像我系统装有python2.7,python3,python3.5.</p><p>首先,移除<code>/usr/bin</code> 下面默认的python文件</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo rm /usr/bin/python</span><br></pre></td></tr></table></figure><p>再将需要设置为默认版本的python link到上一步的位置即可,比如我这里是3.5版本</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo ln -s /usr/bin/python3.5 /usr/bin/python</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.csdn.net/bvl10101111/article/details/53117504" target="_blank" rel="noopener">ubuntu 将python从默认的2.7升级到3.*</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>zsh command not found pip</title>
      <link href="/2018/04/06/zsh-command-not-found-pip/"/>
      <url>/2018/04/06/zsh-command-not-found-pip/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>在zsh中执行<code>pip xxx</code>,出现错误<code>zsh: command not found: pip</code>。 当然我很确定自己是有安装pip的,应该是应该切换了shell,导致环境变量出了问题。</p><p>无奈百度谷歌到的办法都不适合我,最后bing解决了。如果你也折腾了很久,或许可以一试。</p><hr><p><img src="/img/python/zsh-command-not-found-pip/1.png" alt="1.png"></p><p>如图</p><p>先执行 <code>sudo apt-get install --reinstall python3-pip</code>  </p><p>查看是否安装成功 <code>pip3 -V</code></p><p>再执行 <code>pip3 install --upgrade pip</code></p><p>接着 <code>pip --version</code> 即可</p><hr><h3 id="解释"><a href="#解释" class="headerlink" title=" 解释 "></a><strong> 解释 </strong></h3><p>之所以<code>reinstall</code>是因为虽然安装了,但是可能某些文件等之类的缘故,–reinstall 将会重写所有的文件覆盖这个包。</p><p>搞定pip3过后,再回头升级pip.</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://github.com/pypa/pip/issues/3565" target="_blank" rel="noopener">Use Python3-pip</a><br><a href="https://stackoverflow.com/questions/42870537/zsh-command-cannot-found-pip" target="_blank" rel="noopener">zsh command cannot found pip</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Shell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>lrzsz</title>
      <link href="/2018/03/10/lrzsz/"/>
      <url>/2018/03/10/lrzsz/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>从前在学校做开发的时候,有一件事情弄得特别麻烦,那就是本机与服务器(Linux)的文件传输问题。</p><p>当时我有两个解决方案:一个是通过<code>WinSCP</code>,这个桌面软件勾选本地文件上传到服务器相应的目录。二则是将代码等文件上传到github,然后服务端clone下来。</p><p>前几个月到百度来实习,第一天搭建机器环境的时候,才知道<a href="https://baike.baidu.com/item/lrzsz/5592701?fr=aladdin" target="_blank" rel="noopener">lrzsz</a>这个软件。<code>lrzsz</code>是一款在linux里可代替ftp上传和下载的程序。使用这个软件只需要一个命令就可以搞定本机和Linux的文件上传和下载问题了。</p><hr><h3 id="使用"><a href="#使用" class="headerlink" title=" 使用 "></a><strong> 使用 </strong></h3><h4 id="前提"><a href="#前提" class="headerlink" title=" 前提 "></a><strong> 前提 </strong></h4><p>1.Linux端（CentOS, Ubuntu）需要安装rz/sz命令，也就是 lszrz 包。</p><p>2.windows端需要支持ZModem的telnet/ssh客户端(Xshell,SecureCRT支持,putty不支持)</p><h4 id="缺点"><a href="#缺点" class="headerlink" title=" 缺点 "></a><strong> 缺点 </strong></h4><p>使用<code>lszrz</code>非常方便,但是无法传输大于4G的文件。这个时候就需要其他工具了,不过4G大部分情况应该都是够用的。</p><h4 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h4><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install lrzsz | apt-get install lrzsz</span><br></pre></td></tr></table></figure><h4 id="sz、rz"><a href="#sz、rz" class="headerlink" title=" sz、rz "></a><strong> sz、rz </strong></h4><p><code>man rz</code><br>rz(Receive Zmodem),输入rz时、意为服务器接收文件,既将文件从本地上传到服务器。<br>sz(Send Zmodem),输入sz时、意为服务器要发送文件,既从服务器发送文件到本地,或是说本地从服务器上下载文件。</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 下载一个文件： </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sz filename </span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 下载多个文件： </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sz filename1 filename2</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## 下载dir目录下的所有文件，不包含dir下的文件夹： </span></span></span><br><span class="line"><span class="meta">&gt;</span><span class="bash"> sz dir/*</span></span><br><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">##</span></span></span><br><span class="line">上传的时候，如果上传到的linux目录有同名的文件，是无法上传的，需要先删掉linux上的同名文件,或改名</span><br></pre></td></tr></table></figure><p>那如何传输整个目录的文件呢？<strong> 我们需要先将目录进行压缩,再进行传输 </strong></p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#</span><span class="bash"><span class="comment">## tar.gz格式</span></span></span><br><span class="line">解压$ tar zxvf FileName.tar.gz</span><br><span class="line">压缩$ tar zcvf FileName.tar.gz DirName</span><br></pre></td></tr></table></figure><h4 id="传输默认路径设置"><a href="#传输默认路径设置" class="headerlink" title=" 传输默认路径设置 "></a><strong> 传输默认路径设置 </strong></h4><p>Xshell:文件-&gt;属性-&gt;文件传输 中进行设置<br>SecureCRT:选项-&gt;会话选项-&gt;X/Y/Zmodem 中进行设置</p><hr><h3 id="文件传输协议"><a href="#文件传输协议" class="headerlink" title=" 文件传输协议 "></a><strong> 文件传输协议 </strong></h3><p>以前我只知道<a href="https://baike.baidu.com/item/ftp/13839?fr=aladdin" target="_blank" rel="noopener">FTP即File Transfer Protocol（文件传输协议）</a>。其实这下面是有一些细分的协议的。</p><p>百度百科上是这样说的</p><p><strong><span class="under0"> FTP的传输有两种方式：ASCII、二进制。</span></strong></p><h4 id="ASCII传输方式"><a href="#ASCII传输方式" class="headerlink" title=" ASCII传输方式 "></a><strong> ASCII传输方式 </strong></h4><p>假定用户正在拷贝的文件包含的简单ASCII码文本，如果在远程机器上运行的不是UNIX，当文件传输时ftp通常会自动地调整文件的内容以便于把文件解释成另外那台计算机存储文本文件的格式。<br>但是常常有这样的情况，用户正在传输的文件包含的不是文本文件，它们可能是程序，数据库，字处理文件或者压缩文件。在拷贝任何非文本文件之前，用binary 命令告诉ftp逐字拷贝。</p><h4 id="二进制传输模式"><a href="#二进制传输模式" class="headerlink" title=" 二进制传输模式 "></a><strong> 二进制传输模式 </strong></h4><p>在二进制传输中，保存文件的位序，以便原始和拷贝的是逐位一一对应的。即使目的地机器上包含位序列的文件是没意义的。例如，macintosh以二进制方式传送可执行文件到Windows系统，在对方系统上，此文件不能执行。<br>如在ASCII方式下传输二进制文件，即使不需要也仍会转译。这会损坏数据。（ASCII方式一般假设每一字符的第一有效位无意义，因为ASCII字符组合不使用它。如果传输二进制文件，所有的位都是重要的。）</p><hr><h3 id="几种流行的文件传输协议"><a href="#几种流行的文件传输协议" class="headerlink" title=" 几种流行的文件传输协议 "></a><strong> 几种流行的文件传输协议 </strong></h3><p>在某个电子论坛看到的这篇文章,搬运过来,链接见文末参考。</p><p>在联机通信中，人们经常要使用文件传输协议（FileTransfer Protocols）上装或下载文件。我们知道，计算机内部的并行数据在发送到调制解调器之前，必须要转换成串行数据，并给每个字节附加一个起始位和一个停止位，以便使收信系统能准确判断任一字节的开始和结束。<strong> 早期的联机通信中，几乎每个字节都是这样直来直去传送，人们称这种没有任何纠错能力的传输方式为ASCⅡ码传送方式，还有的人则干脆称其为ASCⅡ协议，在有些通信软件的文件传输协议的选择项中也常常有ASCⅡ的选项。</strong>由于ASCⅡ码的传输只是字节流的传送，因而在传输线路状态不佳时就会出现数据丢失、系统死机、通信中断等错误。在ASCⅡ字符集中“＄”符号的数据串是“100100”，如果线路瞬间干扰使前面的“l”丢失变为“0”，成了“100”，也就是字符“D”。ASCⅡ字符集中的“D”（E OT）是标志文件传输结束的符号，接收系统收到该字符后就立即停止数据的接收。<br>.随着人们对数据传输质量的更高要求及对各种方便 传送的需要，多种性能各异的具有检错能力的二进制文件传输协议便相继开发出来。<strong> 二进制文件传输协议不象ASCⅡ传输方式那样一个字节一个字节的依次传送，而是把许多个字节“打”成一定长度的“包”（Packet），并给每个包加上一些能够检错的字节进行传送。也有的人把这种传送叫“块”（Block）传送或是“帧”（Frame）传送。</strong>对方的计算机收到此“包”，必须进行“拆包”（Unpack）处理，才能还原正文内容。“包”的大小团协议不同而有差异，或是128个字节，或是1，024个字节，若尾包的文件字节很少，则采用空字符NUL“补位”的办法把“包”填满。在文件传送过程中，只要收发的协议一致，系统就会在协议约定的状态下，完成控制信号、错误确认及标记等各种传输工作。<strong> 尽管这些协议至今仍没有得到官方的认可，但其可靠的传输性能却受到使用者的青睐，得到了迅速推广，成为事实上的文件传输协议，并被广泛应用在包括Internet在内的各种联机系统中。</strong><br>二进制文件传输协议有很多种，本文不能详尽叙述，只能介绍几种目前较为流行的协议，供使用时参考。</p><h4 id="1-XModem"><a href="#1-XModem" class="headerlink" title=" 1.XModem "></a><strong> 1.XModem </strong></h4><p>XModem又叫Modem7或XModem/checsum（校验和），是较早出现并被广泛使用的二进制文件传输协议，有较强的检错能力。XModem“包”的大小为128字节，每个“包”都携带一个8Bit的“校验和”字节供接收系统检测。若接收检测的结果与“校验和”一致，接收系统就会发出ACK确认回答标志信号并请求传送下一个“包”的信息。若接收检测的结果与“校验和”不一致，接收系统则发出NAK否认回答标志信号，告诉发送系统传输出现错误，请求重传该“包”的内容，如此下去直到整个文件传送结束，或者在一定的时间内纠错无效退出传送状态。<br>XModem的传送可靠率能达到96％，缺点是只能以8个数据位的格式传送文件，而且在流控状态时易造成系统异常。</p><h4 id="2-XModem-CRC"><a href="#2-XModem-CRC" class="headerlink" title=" 2.XModem CRC"></a><strong> 2.XModem CRC</strong></h4><p>XModem CRC是在 XModem协议的基础上改进的版本。由于使用了CRC（循环冗余校验），每个“包”便有了两个“校验和”字节（16Bit),检错能力有了明显增强，使安全系数提高到99.6％以上。但因增加了检错字节使文件的传送时间有所延长，这种延长在长文件传送时最明显。值得一提的是，只有通信中的两个系统具备了CRC的条件才能进行循环冗余码校验，如果其中的一个系统不提供这种校验，另一系统就会自动转换成XModem协议的工作状态。另外，有些早期的通信软件不支持这样的操作，用户只能使用XModem协议。</p><h4 id="3-WModem"><a href="#3-WModem" class="headerlink" title=" 3.WModem "></a><strong> 3.WModem </strong></h4><p>WModem是由XModem协议演变而来的协议，也可以把它叫做“窗口式XModem”。WModem的工作过程比较特别，虽然每个“包”的容易也是128个字节，但它不象XModem那样在每个“包”之后才能收到ACK或者NAK标志信号，而是在连续传递几个“包”之后才能收到ACK或者NAK标志信号。设计者形象地把被传送的第一个数据”包”与后来收到的标志信号之间的时间段称作窗口。<br>正常状态时，WModem可准确检测到NAK的出现，并能确定哪一个“包”在传送时出现错误需要重新传送。由于WModem的窗口数据吞吐量较大，有较大内存缓冲区的系统才能可靠地接收，小内存的计算机是不能使用这个协议的。</p><h4 id="4-YModent-XModem-1K"><a href="#4-YModent-XModem-1K" class="headerlink" title=" 4.YModent/XModem 1K "></a><strong> 4.YModent/XModem 1K </strong></h4><p>YModem的工作方式与XModem几乎一样，不同点只是XModem的“包”有128个字节，而YModem的“包”有 1024个字节，所以YModem又叫 XModem 1K。由于YModem的“包”比XModem的“包”大出许多，因此非常适合传送篇幅很长的大块文件。在线路状况良好的情况下，将会有效地缩短传送时间。如果线路状况不佳，最好不要使用这个协议，因为频繁地重传那些被查出错误的大“包”肯定得不偿失。 </p><h4 id="5-YModem-Batch"><a href="#5-YModem-Batch" class="headerlink" title=" 5.YModem/Batch "></a><strong> 5.YModem/Batch </strong></h4><p>上面介绍的几个二进制文件传输协议在每次使用时只能传送一个数据文件，如果数个文件要传送到同一个接收系统，就只能在第一个文件传送结束后，再进行下一个文件的传送。频繁的操作和额外占用的处理时间，无疑给使用者带来了很多的不便。YModem/Batch协议可有效地解决这类难题。YModem/Batch能把一个以上的文件（包括文件名、字节数量等信息）按照事先编排的顺序一次性地传送给对方，其作用很象DOS系统的BAT批处理命令。接收系统收到文件后，可按需要把每个文件存人指定的驱动器和路径中。 </p><h4 id="6-YModem-G"><a href="#6-YModem-G" class="headerlink" title=" 6. YModem- G "></a><strong> 6. YModem- G </strong></h4><p>YModem－G是一种本身不提供检错或纠错能力的流式协议，除非有 MNP（Microsoft Networking Protocol）硬件协议的支持，否则不能使用。如果有MNP硬件为其提供服务的话， YModem－ G就会成为一个相当不错的协议，因为MNP硬件具有良好的检错和纠错能力。YModem－ G的每“包”容量也是1024个字节，但每一个“包”在传送后并不理会是否有接收端ACK的响应，只是不停地将所有的“包”都发出去，检错和纠错工作完全由MNP系统完成。与YModem－G合作的最佳硬件协议是MNP4。就传送速度而言，YModem－G肯定要比前面介绍的几种协议的速度快得多。</p><h4 id="7-Kermit"><a href="#7-Kermit" class="headerlink" title=" 7. Kermit "></a><strong> 7. Kermit </strong></h4><p>Kermit是一个既灵活又方便且非常有使用价值的协议，用户群较大。同其它文件传送协议一样， Kermit在传送文件时也是将数据打“包”并使用“校验和”。前面介绍的几种协议，不论是哪一种，只要一经选定，“包”的大小就会固定下来。Kermit“包”的大小则是随数据的整体结构和线路质量的变化而改变的。在理想的线路状态时“包”最大，大小为 1KB（1024字节）；线路质量下降时“包”就要随之变小，或是512字节、或是256字节、或是128字节。当线路出现瞬时中断时，Kermit能迅速恢复数据同步传输，这一点是其它协议无法比拟的。大多数协议都是用8数据位方式传送字符，Kermit则可在需要时将8数据位转换为7数据位传送，这样的转换使ASCⅡ字符集中的28个控制字节在传输中增加了可靠性。Kermit还有批处理的功能，可以用通配符“＊”代替文件名或扩展名传送数个文件，如在.TXT之前使用“*”就可以传送所有扩展名为TXT的文件。另外，如果文件中有的字符重复出现，Kermit会使用一种压缩处理技术，即重复字符只被传送一次，同时发送一组关键码告诉接收系统重复的次数和字符的位置，这样可以节省相当多的时间。</p><h4 id="8-ZModem"><a href="#8-ZModem" class="headerlink" title=" 8. ZModem "></a><strong> 8. ZModem </strong></h4><p>ZModem协议尽管是一个不太成熟的协议，但快速可靠的良好性能已使它受到越来越多人的喜爱。ZModem对“包”的处理与 Kermit相仿，“包”的大小也是取决于线路的质量好坏，并提供有效的32Bit或16Bit的CRC错误检测。ZModem具有高级文件管理特点，允许一次传送多份文件和自动上下载文件，操作简单方便。也能在传送意外中断后，迅速重新恢复数据的传送。在常规情况下，ZModem的传送可靠率能达到99％。</p><p>除了上述几种二进制文件传输协议在网络中经常出现外，还有某些系统协议也在文件传输中发挥着作用，如 CompuServe的 B协议和 B十协议以及 AmericaOnline等等。另有一些具有独自的文件传输能力和纠错技术的专有文件传输协议在个别系统中被使用，这种协议只能在特定的软硬件环境下才能起作用，不能在公共免费软件库、共享软件及商业通信中使用。 </p><p>总而言之，二进制文件传输协议是非常优秀的，只要应用得当就能收到良好的传送效果。这些协议的成品在大多数的通信软件包中均有提供，也可以通过BBS或从其它联机网络中下载得到。需要指出的是，由于版本的不同，收发两个系统间选定的同类协议的功能可能略有差异，是否能正常通信要取决于实验后的结果。目前使用最普遍的协议有XModem 7 ZModem和Kermit这三种，其中XModem使用的频率最高。</p><hr><p>在<code>SecureCRT</code>,<code>Xshell</code>中均是有<code>ASCII、Xmodem、Ymodem、Zmodem</code>这四种协议可选的。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/zhengyihan1216/p/6260667.html" target="_blank" rel="noopener">Linux–用SecureCRT来上传和下载文件</a><br><a href="http://blog.51cto.com/skypegnu1/1538371" target="_blank" rel="noopener">Linux基础：利用SSH上传、下载（使用sz与rz命令）</a><br><a href="http://blog.csdn.net/xiaoluoshan/article/details/71773769" target="_blank" rel="noopener">Xmodem、Ymodem、Zmodem</a><br><a href="http://blog.csdn.net/tianlesoftware/article/details/7746005" target="_blank" rel="noopener">SecureCRT 工具 上传下载数据 与 ASCII、Xmodem、Ymodem 、Zmodem 说明</a><br><a href="https://baike.baidu.com/item/ssh/10407?fr=aladdin" target="_blank" rel="noopener">ssh （安全外壳协议）</a><br><a href="https://baike.baidu.com/item/ftp/13839?fr=aladdin" target="_blank" rel="noopener">ftp （文件传输协议）</a><br><a href="http://bbs.eeworld.com.cn/thread-556205-1-1.html" target="_blank" rel="noopener">几种流行的文件传输协议</a><br><a href="http://blog.csdn.net/geurney/article/details/48365295" target="_blank" rel="noopener">文件传输协议FTP、SFTP和SCP</a><br><a href="http://blog.csdn.net/qq_27803491/article/details/52785838" target="_blank" rel="noopener">linux把文件压缩成.tar.gz的命令</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 利器 </tag>
            
            <tag> 计算机网络 </tag>
            
            <tag> 文件传输协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>免费安装Xshell</title>
      <link href="/2018/03/10/install-xshell-for-free/"/>
      <url>/2018/03/10/install-xshell-for-free/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>印象中以前的Xshell是可以勾选个人和学校,免费使用的。但是最近我电脑上的Xshell却提示过期,需要付费。在网上找到了相应的解决办法,做下记录。</p><hr><p>戳<span class="under0"><strong><a href="https://www.netsarang.com/download/down_form.html?code=522" target="_blank" rel="noopener">这儿进入下载页面</a> </strong></span></p><p><img src="/img/linux/install-xshell-for-free/1.png" alt="1.png"></p><p>按照上图完善相应的信息,点击submit按钮即可。相应的邮箱会收到邮件。</p><p><img src="/img/linux/install-xshell-for-free/2.png" alt="2.png"></p><p>点击链接,进入相应的页面下载软件,是免费版的,即可安装。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/pingqiwei/article/details/78502144" target="_blank" rel="noopener">xshell评估过期解决办法</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Xshell </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>github提交的commit,contributions没有显示绿色</title>
      <link href="/2018/03/03/the-contributions-of-github-donnot-appear-green/"/>
      <url>/2018/03/03/the-contributions-of-github-donnot-appear-green/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>因为到百度实习,工作繁忙且周末要补学校的课程作业,这几个月以来几乎没往github提交过commit,只写过几篇博客。博客使用的是hexo搭建的,也是托管在github上。</p><p>然而这几次提交的commit,在<code>contributions</code>统计处却没有出现绿色,误以为是因为在多个电脑,操作系统写博客,出现了一些错误操作,导致的。</p><p>可今天在向其他repo提交commit的时候,发现依旧没被统计上,才发现是其他的原因。</p><hr><p>先说结论:<span class="under0"> <strong> 出现上面所说的情况,是因为邮箱用户名不对。</strong> </span></p><p>在本地执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">git config --list </span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"></span><br><span class="line">git config user.name</span><br><span class="line">git config user.email</span><br></pre></td></tr></table></figure><p>这里查询出来的email是我的百度邮箱。</p><p>问题就出在这儿</p><p><img src="/img/github/the-contributions-of-github-donnot-appear-green/1.png" alt="github账户邮箱"></p><p>如上图,在我的github账户的setting中email中,并没有添加我的百度邮箱,所以<code>contributions</code>那儿是没有显示绿色的,但是commit都是记录上的,在<code>Add email address</code>处添加上邮箱就好了。</p><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title=" 写在后面 "></a><strong> 写在后面 </strong></h3><p>不过因为我的对自己的博客管理在多台电脑,多个操作系统使用的时候,操作有些失误,倒是减少了几百个commit。2333333心累…..</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/e62ces0iem/article/details/73441144" target="_blank" rel="noopener">解决github提交commit,contributions不统计显示绿色的问题</a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>MySQL字符编码相关设置</title>
      <link href="/2018/03/03/the-setting-of-Character-encoding-format-about-mysql/"/>
      <url>/2018/03/03/the-setting-of-Character-encoding-format-about-mysql/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title="  Preface "></a><strong>  Preface </strong></h3><p>最近开发的时候,因为数据库相关字段编码设置的问题,出现了bug。本文是对MySQL字符编码相关设置的记录。</p><p>本文较多参考了鸟哥的<a href="http://www.laruence.com/2008/01/05/12.html" target="_blank" rel="noopener"> 深入Mysql字符集设置 </a>一文,更多参考链接均在文末。</p><hr><h3 id="基本概念"><a href="#基本概念" class="headerlink" title=" 基本概念 "></a><strong> 基本概念 </strong></h3><p>• <strong> 字符(Character) </strong>是指人类语言中最小的表义符号。例如’A’、’B’等；</p><p>• 给定一系列字符，对每个字符赋予一个数值，用数值来代表对应的字符，这一数值就是<strong> 字符的编码(Encoding) </strong>。例如，我们给字符’A’赋予数值0，给字符’B’赋予数值1，则0就是字符’A’的编码；</p><p>• 给定一系列字符并赋予对应的编码后，所有这些字符和编码对组成的集合就是<strong> 字符集(Character Set) </strong>。例如，给定字符列表为{‘A’,’B’}时，{‘A’=&gt;0, ‘B’=&gt;1}就是一个字符集；</p><p>• <strong> 字符序(Collation) </strong>是指在同一字符集内字符之间的比较规则；</p><p>• 确定字符序后，才能在一个字符集上定义什么是等价的字符，以及字符之间的大小关系；</p><p>• <strong> 每个字符序唯一对应一种字符集，但一个字符集可以对应多种字符序，其中有一个是默认字符序(Default Collation)；</strong></p><p>• MySQL中的字符序名称遵从命名惯例：以字符序对应的字符集名称开头；以_ci(表示大小写不敏感)、_cs(表示大小写敏感)或_bin(表示按编码值比较)结尾。例如：在字符序“utf8_general_ci”下，字符“a”和“A”是等价的；</p><hr><h3 id="查看编码"><a href="#查看编码" class="headerlink" title=" 查看编码 "></a><strong> 查看编码 </strong></h3><h4 id="查看数据库编码"><a href="#查看数据库编码" class="headerlink" title=" 查看数据库编码 "></a><strong> 查看数据库编码 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&gt; show variables like '%char%'; | show variables like 'character%';</span><br><span class="line"></span><br><span class="line">+<span class="comment">--------------------------+------------------------------------------------------------+</span></span><br><span class="line">| Variable_name            | Value                                                      |</span><br><span class="line">+<span class="comment">--------------------------+------------------------------------------------------------+</span></span><br><span class="line">| character_set_client     | gbk                                                        |</span><br><span class="line">| character_set_connection | gbk                                                        |</span><br><span class="line">| character_set_database   | utf8mb4                                                    |</span><br><span class="line">| character_set_filesystem | binary                                                     |</span><br><span class="line">| character_set_results    | gbk                                                        |</span><br><span class="line">| character_set_server     | latin1                                                     |</span><br><span class="line">| character_set_system     | utf8                                                       |</span><br><span class="line">| character_sets_dir       | D:\tools\wamp\wamp64\bin\mysql\mysql5.7.19\share\charsets\ |</span><br><span class="line">+<span class="comment">--------------------------+------------------------------------------------------------+</span></span><br></pre></td></tr></table></figure><h4 id="系统变量介绍"><a href="#系统变量介绍" class="headerlink" title=" 系统变量介绍 "></a><strong> 系统变量介绍 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">character_set_client        客户端来源数据使用的字符集</span><br><span class="line">character_set_connection    连接层字符集(从客户端接收到数据，然后传输的字符集)</span><br><span class="line">character_set_database      当前选中数据库的默认字符集</span><br><span class="line">character_set_filesystem    把os上文件名转化成此字符集，即把 character_set_client转换character_set_filesystem， 默认binary是不做任何转换的</span><br><span class="line">character_set_results       查询结果字符集</span><br><span class="line">character_set_server        默认的内部操作字符集</span><br><span class="line">character_set_system        系统元数据(字段名等)字符集</span><br><span class="line">character_sets_dir          该目录保存配置文件，使MySQL可以使用不同的字符集。</span><br></pre></td></tr></table></figure><h4 id="MySQL中的字符集转换过程"><a href="#MySQL中的字符集转换过程" class="headerlink" title=" MySQL中的字符集转换过程 "></a><strong> MySQL中的字符集转换过程 </strong></h4><p>A. MySQL Server收到请求时将请求数据从<code>character_set_client</code>转换为<code>character_set_connection</code>；</p><p>B. 进行内部操作前将请求数据从<code>character_set_connection</code>转换为内部操作字符集，其确定方法如下：</p><p>• 使用每个数据字段的<code>CHARACTER SET</code>设定值；</p><p>• 若上述值不存在，则使用对应数据表的<code>DEFAULT CHARACTER SET</code>设定值(MySQL扩展，非SQL标准)；</p><p>• 若上述值不存在，则使用对应数据库的<code>DEFAULT CHARACTER SET</code>设定值；</p><p>• 若上述值不存在，则使用<code>character_set_server</code>设定值。</p><p>C. 将操作结果从内部操作字符集转换为<code>character_set_results</code>。</p><p><img src="/img/database/the-setting-of-Character-encoding-format-about-mysql/1.jpg" alt="MySQL中的字符集转换过程"></p><h4 id="查看所有数据库的编码"><a href="#查看所有数据库的编码" class="headerlink" title=" 查看所有数据库的编码 "></a><strong> 查看所有数据库的编码 </strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SELECT SCHEMA_NAME 'database', default_character_set_name 'charset', DEFAULT_COLLATION_NAME 'collation' FROM information_schema.SCHEMATA;</span><br></pre></td></tr></table></figure><h4 id="查看单个数据库的编码"><a href="#查看单个数据库的编码" class="headerlink" title=" 查看单个数据库的编码 "></a><strong> 查看单个数据库的编码 </strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; USE my_database;</span><br><span class="line">&gt; show variables like "character_set_database";</span><br></pre></td></tr></table></figure><h4 id="查看表编码"><a href="#查看表编码" class="headerlink" title=" 查看表编码 "></a><strong> 查看表编码 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">show</span> <span class="keyword">create</span> <span class="keyword">table</span> &lt;表名&gt;;</span><br></pre></td></tr></table></figure><h4 id="查看数据表中字符集设置"><a href="#查看数据表中字符集设置" class="headerlink" title=" 查看数据表中字符集设置  "></a><strong> 查看数据表中字符集设置  </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&gt; show full columns from &lt;表名&gt;;</span><br><span class="line"></span><br><span class="line">+<span class="comment">----------------+------------------+--------------------+------+-----+---------+----------------+---------------------------------+---------+</span></span><br><span class="line">| Field          | Type             | Collation          | Null | Key | Default | Extra          | Privileges                      | <span class="keyword">Comment</span> |</span><br><span class="line">+<span class="comment">----------------+------------------+--------------------+------+-----+---------+----------------+---------------------------------+---------+</span></span><br><span class="line">| <span class="keyword">id</span>             | <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> | <span class="literal">NULL</span>               | <span class="keyword">NO</span>   | PRI | <span class="literal">NULL</span>    | auto_increment | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">| <span class="keyword">name</span>           | <span class="built_in">varchar</span>(<span class="number">191</span>)     | utf8mb4_unicode_ci | <span class="keyword">NO</span>   |     | <span class="literal">NULL</span>    |                | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">| email          | <span class="built_in">varchar</span>(<span class="number">191</span>)     | utf8mb4_unicode_ci | <span class="keyword">NO</span>   | UNI | <span class="literal">NULL</span>    |                | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">| <span class="keyword">password</span>       | <span class="built_in">varchar</span>(<span class="number">191</span>)     | utf8mb4_unicode_ci | <span class="keyword">NO</span>   |     | <span class="literal">NULL</span>    |                | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">| remember_token | <span class="built_in">varchar</span>(<span class="number">100</span>)     | utf8mb4_unicode_ci | YES  |     | <span class="literal">NULL</span>    |                | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">| created_at     | <span class="built_in">timestamp</span>        | <span class="literal">NULL</span>               | YES  |     | <span class="literal">NULL</span>    |                | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">| updated_at     | <span class="built_in">timestamp</span>        | <span class="literal">NULL</span>               | YES  |     | <span class="literal">NULL</span>    |                | <span class="keyword">select</span>,<span class="keyword">insert</span>,<span class="keyword">update</span>,<span class="keyword">references</span> |         |</span><br><span class="line">+<span class="comment">----------------+------------------+--------------------+------+-----+---------+----------------+---------------------------------+---------+</span></span><br></pre></td></tr></table></figure><p><span class="under0"><strong>这里要特别说明</strong></span>,网上的很多文章都是将 <code>show full columns from &lt;表名&gt;</code> 这个命令写为查看字段的编码。这个确切的说来是错误的。</p><p><span class="under0"><strong>从上面的查询结果可以看到实际查询出来的是Collation(字符序),而不是字段的编码,但是我们可以通过Collation(字符序)的前缀得知字段的编码。</strong></span></p><p>在stackoverflow上找到这样一段命令</p><h4 id="查询当前数据库所有表的所有字段的字符编码"><a href="#查询当前数据库所有表的所有字段的字符编码" class="headerlink" title=" 查询当前数据库所有表的所有字段的字符编码 "></a><strong> 查询当前数据库所有表的所有字段的字符编码 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">SELECT</span> TABLE_SCHEMA,</span><br><span class="line">       TABLE_NAME,</span><br><span class="line">       CCSA.CHARACTER_SET_NAME <span class="keyword">AS</span> DEFAULT_CHAR_SET,</span><br><span class="line">       COLUMN_NAME,</span><br><span class="line">       COLUMN_TYPE,</span><br><span class="line">       C.CHARACTER_SET_NAME</span><br><span class="line">  <span class="keyword">FROM</span> information_schema.TABLES <span class="keyword">AS</span> T</span><br><span class="line">  <span class="keyword">JOIN</span> information_schema.COLUMNS <span class="keyword">AS</span> C <span class="keyword">USING</span> (TABLE_SCHEMA, TABLE_NAME)</span><br><span class="line">  <span class="keyword">JOIN</span> information_schema.COLLATION_CHARACTER_SET_APPLICABILITY <span class="keyword">AS</span> CCSA</span><br><span class="line">       <span class="keyword">ON</span> (T.TABLE_COLLATION = CCSA.COLLATION_NAME)</span><br><span class="line"> <span class="keyword">WHERE</span> TABLE_SCHEMA=<span class="keyword">SCHEMA</span>()</span><br><span class="line">   <span class="keyword">AND</span> C.DATA_TYPE <span class="keyword">IN</span> (<span class="string">'enum'</span>, <span class="string">'varchar'</span>, <span class="string">'char'</span>, <span class="string">'text'</span>, <span class="string">'mediumtext'</span>, <span class="string">'longtext'</span>)</span><br><span class="line"> <span class="keyword">ORDER</span> <span class="keyword">BY</span> TABLE_SCHEMA,</span><br><span class="line">          TABLE_NAME,</span><br><span class="line">          COLUMN_NAME</span><br><span class="line">;</span><br></pre></td></tr></table></figure><p>这里推荐阅读<a href="http://blog.useasp.net/archive/2013/05/21/The-difference-between-create-database-and-create-schema-in-mysql.aspx" target="_blank" rel="noopener">MySQL中CREATE DATABASE和CREATE SCHEMA区别</a></p><h4 id="查询所有表的信息"><a href="#查询所有表的信息" class="headerlink" title=" 查询所有表的信息 "></a><strong> 查询所有表的信息 </strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&gt; SHOW TABLE STATUS</span><br></pre></td></tr></table></figure><h4 id="查询单张数据表的信息"><a href="#查询单张数据表的信息" class="headerlink" title=" 查询单张数据表的信息 "></a><strong> 查询单张数据表的信息 </strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt; SHOW TABLE STATUS where name like 'table_123'; |</span><br><span class="line">&gt; SHOW TABLE STATUS where name = 'table_name';</span><br></pre></td></tr></table></figure><hr><h3 id="修改编码"><a href="#修改编码" class="headerlink" title=" 修改编码 "></a><strong> 修改编码 </strong></h3><h4 id="修改数据库编码格式"><a href="#修改数据库编码格式" class="headerlink" title=" 修改数据库编码格式 "></a><strong> 修改数据库编码格式 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &lt;表名&gt; <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h4 id="修改一张表的所有字段的编码格式"><a href="#修改一张表的所有字段的编码格式" class="headerlink" title=" 修改一张表的所有字段的编码格式 "></a><strong> 修改一张表的所有字段的编码格式 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> <span class="string">`tablename`</span> <span class="keyword">convert</span> <span class="keyword">to</span> <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h4 id="修改数据表编码格式"><a href="#修改数据表编码格式" class="headerlink" title=" 修改数据表编码格式 "></a><strong> 修改数据表编码格式 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &lt;表名&gt; <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><h4 id="修改字段编码格式"><a href="#修改字段编码格式" class="headerlink" title=" 修改字段编码格式 "></a><strong> 修改字段编码格式 </strong></h4><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">alter</span> <span class="keyword">table</span> &lt;表名&gt; <span class="keyword">change</span> &lt;字段名&gt; &lt;字段名&gt; &lt;类型&gt; <span class="built_in">character</span> <span class="keyword">set</span> utf8;</span><br></pre></td></tr></table></figure><p>注意字段名要输入两次</p><hr><h3 id="存emoji表情"><a href="#存emoji表情" class="headerlink" title=" 存emoji表情 "></a><strong> 存emoji表情 </strong></h3><p>mysql的<code>utf8</code>编码的一个字符最多3个字节，但是一个emoji表情为4个字节，所以utf8不支持存储emoji表情。但是<code>utf8</code>的超集<code>utf8mb4</code>一个字符最多能有4字节，所以能支持emoji表情的存储。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/springsunss/article/details/70337915" target="_blank" rel="noopener">整理 ： 查看和修改 mysql库、表、字段编码</a><br><a href="http://www.laruence.com/2008/01/05/12.html" target="_blank" rel="noopener">深入Mysql字符集设置</a><br><a href="http://blog.csdn.net/wyzxg/article/details/8779682" target="_blank" rel="noopener">mysql字符集小结</a><br><a href="https://stackoverflow.com/questions/1049728/how-do-i-see-what-character-set-a-mysql-database-table-column-is" target="_blank" rel="noopener">How do I see what character set a MySQL database / table / column is?</a><br><a href="http://blog.csdn.net/netcome/article/details/2048296" target="_blank" rel="noopener">数据库 schema含义</a><br><a href="http://blog.useasp.net/archive/2013/05/21/The-difference-between-create-database-and-create-schema-in-mysql.aspx" target="_blank" rel="noopener">MySQL中CREATE DATABASE和CREATE SCHEMA区别</a><br><a href="http://blog.csdn.net/luo4105/article/details/50804148" target="_blank" rel="noopener">mysql修改数据库表和表中的字段的编码格式的修改</a><br><a href="http://blog.xieyc.com/utf8-and-utf8mb4/" target="_blank" rel="noopener">浅谈MySQL中utf8和utf8mb4的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
            <tag> 字符编码 </tag>
            
            <tag> SQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《史蒂夫·乔布斯传》</title>
      <link href="/2018/02/22/read-Steve-Jobs-By-Walter-Isaacson/"/>
      <url>/2018/02/22/read-Steve-Jobs-By-Walter-Isaacson/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>春节期间读了《史蒂夫·乔布斯传》,感触蛮多,本文做些记录(摘抄)。</p><hr><ul><li><p>乔布斯后来说，把父母的钱花在了根本不值那么多钱的教育上，他也开始有负罪感。“我那工薪阶层的父母省下来的钱全花在学费上了，”他在那场著名的斯坦福大学毕业典礼演讲中提到，<strong> “我不知道自己想要干什么，也不知道大学能如何帮我搞清楚自己的人生目标。但我却在花着父母的毕生积蓄。所以我决定退学，我也相信，一切都会顺利。” </strong></p></li><li><p>他并不是真的想离开里德学院，他只是不想再付学费，也不想再去上那些提不起他兴趣的课程了。惊人的是，校方竟然容忍了这一切。“他有一颗渴求知识的心，这很让人感兴趣，”教导主任杰克•达德曼（Jack Dudman）说，<strong> “他拒绝不动脑筋地接受事实，任何事情他都要亲自检验。” </strong>即使在乔布斯停止交学费之后，达德曼还是允许他旁听课程，并且可以继续待在宿舍和朋友们在一起</p></li><li><p>“我一退学，就不用去上那些我不感兴趣的必修课了，我可以去上那些看起来有意思的课。”他说。这其中有一门书法课非常吸引他，因为他注意到校园里的大多数海报都画得很漂亮。<strong> “我学到了衬线字体和无衬线字体，怎样在不同的字母组合间调整其间距，以及怎样作出完美的版面设计。这其中所蕴涵的美、历史意味和艺术精妙之处是科学无法捕捉的，这让我陶醉。” </strong></p></li><li><p>这也再一次证明，<strong> 乔布斯总是有意识地将自己置身于艺术与科技的交汇处。在他所有的产品中，科技必定与完美的设计、外观、手感、精致、人性化甚至是浪漫结合在一起。</strong>他是追求友好图形用户界面的先锋。在这一方面，那门书法课程是意义非凡的。<strong> “ 如果我大学的时候从没有上过那门课，麦金塔计算机里绝不会有那么多种字形以及间距安排合理的字体。既然是Windows抄袭了Mac，那么很有可能所有个人电脑上也不会有这些。” </strong></p></li><li><p>“我当时身处一个神奇的时代，”他后来回忆说，“提升我们觉悟的是禅宗，还有迷幻药。”即便是后来，他依然赞扬致幻剂让自己得到了更多启发：“使用迷幻药是一段意义非凡的经历，也是我一生中最重要的事情之一。迷幻药让你看到硬币的另一面，当药效退去之后你就记不清楚了，<strong><span class="under0"> 但你知道有这么一回事。它让我更清楚什么是重要的——创造伟大的发明，而不是赚钱。应该尽我所能，将此生放回历史和人类思想的长河。</span></strong>”</p></li><li><p>在一些碰巧跟人交流的场合，他会肆无忌惮地称别人为“蠢货”。现在回想起来，他依然坚持自己的评判。 <strong> “我那么耀眼的唯一原因就是，其他人都太糟糕了。” </strong>乔布斯回忆说。</p></li><li><p>乔布斯对《全球概览》着了迷。他尤其钟爱的是1971年的停刊号，当时他还在上高中，之后他一直带着这期杂志，去了大学，去了团结农场。“在停刊号的封底上，有一幅清晨乡间小路的照片，就是那种如果你有冒险精神，会在搭便车旅行时看到的景象。照片下面有一行字：‘<strong><span class="under0"> 求知若饥，虚心若愚。（Stay hungry, Stay foolish.）</span></strong>’”布兰德将乔布斯视为该杂志致力于颂扬的那种混合文化的最完美的化身。“史蒂夫就处在反主流文化与科技的交汇处，”他说，“他看到了工具为人所用的本质。”</p></li><li><p>乔布斯知道怎样说服沃兹。他没有争辩说他们一定能赚钱，而是说这一定会是一次有趣的经历。“即使我们赔了钱，我们也能拥有一家公司，”乔布斯说，当时他们正开着他的大众汽车转悠，“在我们的一生中，至少有这么一次，我们会拥有一家公司。”这句话对沃兹尼亚克的诱惑太大了，比变成富人的诱惑还要大。沃兹尼亚克回忆道：“想象一下那种情景我就兴奋，两个最要好的朋友创办一家公司！天哪！我立马就同意了，我怎么可能拒绝？</p></li><li><p>乔布斯的父亲曾经教导过他，<strong> <span class="under0">追求完美意味着：即便是别人看不到的地方，对其工艺也必须尽心尽力。</span></strong>乔布斯将这一理念应用到了Apple II的内部电路板布局上。<strong> 他否决了最初的设计，理由是其中的线路不够直。</strong></p></li><li><p>马库拉对于乔布斯来说，是一个父亲般的人物。他像乔布斯的养父一样，迁就他的强烈意愿；最终却和他的生父一样，抛弃了他。风险投资人亚瑟•罗克（Arthur Rock）说：“马库拉和史蒂夫之间就是一种父子关系。”马库拉开始向乔布斯传授市场和销售方面的经验。“迈克真的非常照顾我，”乔布斯说，“他的观念与我也十分一致。他强调说，<strong><span class="under0">你永远不该怀着赚钱的目的去创办一家公司。你的目标应该是做出让你自己深信不疑的产品，创办一家生命力很强的公司。</span></strong>”</p><p>马库拉把自己的原则写在了一页纸上，标题为“苹果营销哲学”，其中强调了三点。<strong> 第一点是共鸣（empathy），就是紧密结合顾客的感受。</strong>“我们要比其他任何公司都更好地理解使用者的需求。”<strong> <span class="under0">第二点是专注（focus）。“为了做好我们决定做的事情，我们必须拒绝所有不重要的机会。</span></strong>”</p><p>第三点也是同样重要的一点原则，有一个让人困惑的名字，灌输（impute）。这涉及人们是如何根据一家公司或一个产品传达的信号，来形成对它的判断。“<strong> 人们确实会以貌取物 </strong>，”他写道，“我们也许有最好的产品、最高的质量、最实用的软件等等，如果我们用一种潦草马虎的方式来展示，顾客就会认为我们的产品也是潦草马虎的；而如果我们以创新的、专业的方式展示产品，那么优质的形象也就被灌输到顾客的思想中了。”</p><p>在乔布斯的职业生涯中，他一直十分关注——有时甚至过度关注——营销策略、产品形象乃至包装的细节。“当你打开iPhone或者iPad的包装盒时，我们希望那种美妙的触觉体验可以为你在心中定下产品的基调。”他说，“这是迈克教我的。”</p></li><li><p>在宣传册顶端，麦肯纳放上了一句格言，这句话被普遍认为出自列奥纳多•达•芬奇，也成为了乔布斯设计理念的决定性准则：“ <strong><span class="under0"> 至繁归于至简。（Simplicity is the ultimate sophistication.）</span> </strong>” </p></li><li><p><strong> 预见未来最好的方式就是亲手创造未来 </strong></p></li><li><p>苹果公司对施乐PARC的这次技术盗窃，有时被形容为工业史上最严重的抢劫行为之一。乔布斯偶尔也会骄傲地承认这一说法。“归根结底，我们只是想尽量了解有史以来最棒的发明，然后将它运用到我们正在做的事情中。”他有一次说，“毕加索不是说过么：<strong><span class="under0">‘好的艺术家只是照抄，而伟大的艺术家窃取灵感。’在窃取伟大的灵感这方面，我们一直都是厚颜无耻的。</span> </strong>”</p><p>乔布斯认同的另一个说法是，与其说是苹果公司实施了抢劫，不如说是施乐公司自己酿下了苦果。“他们就是一帮白痴，根本没有意识到电脑的巨大潜力。”他如此形容施乐的管理层，“在这场计算机产业最伟大的胜利中，他们被打败了。施乐本可以称霸整个计算机产业的。”</p><p>以上两种说法都有道理，但并不能说明全部问题。概念与造物之间，如同T•S•艾略特（T. S. Eliot）所说的“落下影子”。<strong><span class="under0">在创新的过程中，新颖的想法只是一部分，具体执行也同样重要。</span> </strong></p></li><li><p>阿特金森的伟大功绩之一（时至今日我们已经对它习以为常，感觉不到它的神奇）就是<strong> 实现了屏幕上窗口间的重叠，这样一来“上面的”窗口就叠在了“下面的”窗口上。这一功能让人们可以像堆叠桌子上的文件纸张一样移动屏幕上的窗口，在你移动上面的窗口时，下面的窗口就会被隐藏起来或者被显示出来。当然，在电脑屏幕上，并没有层层像素隐藏在你看到的画面下，所以在你看到的“上面的”窗口之下，并没有隐藏的窗口。</strong>制造窗口重叠的假象，需要编写复杂的代码，其中运用到了“区域”（Region）这样一个概念。<strong><span class="under0"> 阿特金森强迫自己一定要做出这个效果，因为他觉得自己在施乐PARC见过这个功能。而实际上，施乐PARC的人从来没能实现这个功能，他们后来还对阿特金森完成这一壮举表示了震惊。“我终于知道什么叫无知者无畏了，”阿特金森说，“正因为我不知道这个任务是如此困难，我才得以完成它。”</span> </strong>阿特金森拼命工作，以至于一天早上，他在恍惚之中开着自己的克尔维特撞上了一辆停在路边的卡车，差点儿送命。乔布斯立刻驱车前往医院探望。阿特金森恢复意识后，乔布斯对他说：“我们很担心你。”阿特金森苦笑了一下，回答道：“不用担心，我还记得那些‘区域’。”</p><p>乔布斯还狂热地追求页面滚动的平滑。当你滚动浏览一个文件时，文件内容不应该一行一行地滚动，而应该十分平滑地予以呈现。“他固执地认为，界面上的任何东西都要给使用者留下好印象。”阿特金森说。他们还想要一个可以操纵光标向任意方向移动的鼠标，而不仅仅是上下左右。这就需要使用一个滚球，而不是通常使用的两个轮子。<strong> 一个工程师告诉阿特金森，这样的鼠标是不可能批量生产的。阿特金森在吃晚饭的时候向乔布斯抱怨了这件事，等他第二天上班时，发现那名工程师已经被乔布斯解雇了。接任的工程师见到阿特金森的第一句话就是：“我能做出那种鼠标。”</strong></p></li><li><p>在苹果公司上市30年后，他回顾了当年一夜暴富的感受：</p><p>我从来没有为钱担心过。我成长在一个中产阶级家庭，所以我从没担心过会挨饿；我在雅达利公司的时候，意识到自己是个还不错的工程师，所以我知道自己肯定可以维持生计；<strong><span class="under0">我读大学和在印度的时候，自己选择了过苦日子，后来尽管我开始工作了，但我还是过着十分简单的生活。我经历过极度贫穷，那种感觉很美好，因为我不用为钱担忧，后来我变得特别有钱了，还是不用为钱担心。</span> </strong></p><p>我看到苹果公司的一些人，大赚一笔后就觉得自己要过不同的生活。他们买下劳斯莱斯汽车和许多房子，每所房子都有管家，然后再雇一个人管理所有的管家。他们的妻子去做整形手术，把自己变得稀奇古怪。这不是我想要的生活方式。这太疯狂了。<strong><span class="under0"> 我答应过自己，不会让钱毁了我的生活。  </span></strong></p></li><li><p>尽管已经名利双收了，但乔布斯还是把自己看做一个反主流文化的孩子。有一次访问斯坦福大学的课堂时，他脱下了自己的威尔克斯•巴什福德西装和鞋子，坐在桌子上，盘腿打坐。学生们问了一些诸如苹果的股价何时会上涨之类的问题，乔布斯一概置之不理，而是开始讲对于未来产品的激情，比如某一天造出一台和书本一样小的电脑。渐渐地，不再有人问商业方面的问题了，乔布斯开始向这些衣冠整齐的学生们提问。“你们中还有多少人是处男处女？”他问道。下面有人不安地傻笑。“你们中有多少人尝试过迷幻药？”笑声更大了，只有一两个人举起了手。后来，乔布斯抱怨这一代的孩子，<strong><span class="under0"> 在他看来，这群孩子比他那一代的人更加物质主义，一心追求名利。“我上学的时候，60年代的那股思潮刚过，实用主义、目的性很强的社会风气还没有盛行，”他说，“现在的孩子根本不愿意用理想主义的方式来思考，连接近理想主义都谈不上。他们自然不会让现今的任何哲学问题占用他们太多的时间，因为他们要忙于学习自己的商科专业。”他说，自己那一代人就不一样。“60年代的理想主义之风仍然影响着我们，我认识的与我年龄相仿的人中，大多数人的心里都永远打上了理想主义的烙印。”</span></strong></p></li><li><p>一天，乔布斯走进了拉里•凯尼恩（Larry Kenyon）的办公隔间，他是负责麦金塔电脑操作系统的工程师，乔布斯抱怨说开机启动时间太长了。凯尼恩开始解释，但乔布斯打断了他。他问道：“如果能救人一命的话，你愿意想办法让启动时间缩短10秒钟吗？”凯尼恩说也许可以。乔布斯于是走到一块白板前开始演示，如果有500万人使用Mac，而每天开机都要多用10秒钟，那加起来每年就要浪费大约3亿分钟，而3亿分钟相当于至少 100个人的终身寿命。“这番话让拉里十分震惊，几周过后，乔布斯再来看的时候，启动时间缩短了28秒，”阿特金森回忆说，“史蒂夫能看到宏观层面，从而激励别人工作。  </p></li><li><p><strong><span class="under0">我们的目标从来都不是打败竞争对手，或者是狠赚一笔，而是做出最好的产品，甚至比最好的还要好一点儿。</span> </strong></p></li><li><p>“多年以来，我认识到，当你拥有真正优秀的人才时，你不必对他们太纵容，”乔布斯后来解释说，“你期待他们做出好成绩，你就能让他们做出好成绩。<strong><span class="under0"> 最初的Mac团队让我知道，最顶级的人才喜欢一起工作，而且他们是不能容忍平庸的作品的。你到那个Mac团队里随便找个人问问。他们会告诉你，那些痛苦都是值得的。”</span> </strong></p></li><li><p>他反复强调苹果公司的产品会是<strong> 干净而简洁的 </strong>。“我们会把产品做得光亮又纯净，能展现高科技感，而不是一味使用黑色、黑色、黑色，满是沉重的工业感，就像索尼那样。”他朗声说道，“<strong><span class="under0"> 我们的设计思想就是：极致的简约，我们追求的是能让产品达到在现代艺术博物馆展出的品质。</span></strong>我们管理公司、设计产品、广告宣传的理念就是一句话：<strong> 让我们做得简单一点，真正的简单。</strong>”苹果奉行的这一原则也在它的第一版宣传册上得到了突出：<strong> “至繁归于至简。” </strong></p><p>乔布斯认为，<strong><span class="under0">简约化设计的一个核心要素就是让人能直观地感觉到它的简单易用。设计上的简单并不总能带来操作上的简易。有时候，设计得太漂亮、太简化，用户用起来反而不会那么得心应手。“我们作设计的时候，最重要的事情就是让产品特性一目了然。”</span></strong> 乔布斯告诉一群设计专家。作为例子，他高度赞扬自己为麦金塔电脑创造的桌面概念：“人们直观上就知道该怎么处理桌面。你走进办公室，桌子上有一堆文件。放在最上面的就是最重要的。人们知道怎样转换优先级。我们在设计电脑的时候引入桌面这个概念，一定程度上就是想充分利用人们已经拥有的这一经验。”</p></li><li><p>乔布斯在窗口、文件以及屏幕顶端的标题栏上也耗费了大量精力。他要求阿特金森和卡雷反复修改，因为他对标题栏的样子总是不满意。乔布斯不喜欢丽萨上使用的标题栏，因为它们太黑、太粗糙了。他希望Mac上的标题栏能够更加平滑，再有些细条纹。“我们做了20种不同的标题栏才让他满意。”阿特金森回忆说。<strong><span class="under0"> 卡雷和阿特金森曾一度抱怨说乔布斯在标题栏的修改上耗费了他们太多时间，而他们有更重要的事情要做。乔布斯大发脾气。“你能想象一下每天都要看着它是什么感觉吗？”他吼道，“这不是件小事，这是我们必须做好的事！”</span></strong></p></li><li><p>苹果公司还在车库里办公的时候，埃斯皮诺萨就是沃兹尼亚克的助手之一，在乔布斯的劝说下，他从伯克利退了学，乔布斯的理由是，<strong><span class="under0"> 学习的机会有很多，但研发Mac的机会只有一次。</span> </strong></p></li><li><p>乔布斯从父亲身上学到，<strong><span class="under0">充满激情的工艺就是要确保即使是隐藏的部分也能做得很漂亮。</span> </strong>这种理念最极端也是最有说服力的例子之一，就是乔布斯会仔细检查印刷电路板。电路板上有芯片和其他部件，深藏于麦金塔的内部，没有哪个用户会看到它，但乔布斯还是会从美学角度对它进行评判。“那个部分做得很漂亮，”他说，“但是，看看这些存储芯片。真难看。这些线靠得太近了。”</p><p>一名新手工程师打断他说这有什么关系，“只要机器能运行起来就行，没人会去看电路板的”。</p><p>乔布斯的反应和往常一样：“<strong><span class="under0"> 我想要它尽可能好看一点儿，就算它是在机箱里面的。优秀的木匠不会用劣质木板去做柜子的背板，即使没人会看到。</span> </strong>”几年之后，在麦金塔电脑上市后的一次访谈乔布斯的反应和往常一样：“<strong><span class="under0">我想要它尽可能好看一点儿，就算它是在机箱里面的。优秀的木匠不会用劣质木板去做柜子的背板，即使没人会看到。</span></strong>”几年之后，在麦金塔电脑上市后的一次访谈中，<strong><span class="under0">乔布斯再一次提到了当年父亲对他的教导：“如果你是个木匠，你要做一个漂亮的衣柜，你不会用胶合板做背板，虽然这一块是靠着墙的，没人会看见。你自己知道它就在那儿，所以你会用一块漂亮的木头去做背板。如果你想晚上睡得安稳的话，就要保证外观和质量都足够好。”</span></strong></p></li><li><p>第一条是“决不妥协”。这一条在日后的岁月里被证明是一把双刃剑。大多数技术团队都会妥协。另一方面，Mac最终要成为乔布斯和他的队伍所能做出的最“酷毙了”（Insanely Great）的产品——但它又不能再花上16个月才上市，远远晚于计划时间。<strong> 提出一个计划中的完工日期后，他告诉他们：“<span class="under0">即便错过上市日期，也不能粗制滥造。</span>”换做愿意作出妥协的项目经理，也许会敲定一个完工日期，之后不得再作出任何改动。但乔布斯不是这样的人，他的另一句名言就是： “ <span class="under0">直到上市，产品才能算是完工。</span></strong>  ”</p></li><li><p>他后来告诉我那是他最爱的一句格言。上面写的是：“<strong><span class="under0"> 过程就是奖励。</span> </strong>”他喜欢强调，Mac团队是一支有着崇高使命的特殊队伍。<strong>未来的某一天，他们会回顾这段共同度过的时光，对于那些痛苦的时刻，只是过眼云烟，或者付之一笑，他们会把这段时光看做人生中奇妙的巅峰时刻。</strong></p></li><li><p>“随着时间的流逝，这里的50个人所做的工作将会对整个世界产生深远影响。”他说道，“我知道我可能有一点儿难以相处，但这是我一生中做过的最有趣的事情。”多年之后，当时观众中的大多数人想到乔布斯的那句“有一点儿难以相处”时都会笑起来，并且都同意他的说法：<strong> 能深远地影响世界，是他们一生中最大的乐趣。</strong></p></li><li><p><strong><span class="under0">真正的艺术家总能完成作品</span></strong></p></li><li><p>乔布斯的另一条著名言论是<strong> “当海盗，不要当海军” </strong>。他想给自己的团队灌输叛逆精神，让他们像侠盗一样行事：既为自己的工作感到自豪，又愿意去窃取别人的灵感。就像苏珊•卡雷说的：“他的意思是，<strong> 我们的团队里要有一种叛逆的感觉，我们能快速行动，做成事情。</strong>”</p></li><li><p>你是想卖一辈子糖水呢,还是想抓住机会来改变世界?</p></li><li><p>乔布斯向斯卡利坦言，他觉得自己年轻的时候就会死去，因此他需要尽快取得成就，在硅谷的历史中留下自己的名字。“我们在地球的时间都很短，”那天早上围坐在桌旁的时候，乔布斯告诉斯卡利，“我们或许只有机会做几件真正伟大的事情，并把它们做好。<strong><span class="under0">我们谁也不知道自己能活多长时间，我也不知道，但是我感觉必须趁着自己年轻，多取得一些成就。”</span> </strong></p></li></ul><hr><p><img src="/img/read/read-Steve-Jobs-By-Walter-Isaacson/1.png" alt="1991年乔布斯和盖茨"></p><p>1991 年，乔布斯和盖茨</p><hr><ul><li><p>事实上，微软直到1985年秋季才发布Windows 1.0操作系统。即使花了这么长时间进行开发，它仍然是一款劣质产品。它缺乏麦金塔界面的优雅，窗口平铺；相比之下，麦金塔采用的是比尔•阿特金森设计的神奇的重叠窗口“截取”算法[3]。因此，评论家嘲笑它，消费者唾弃它。<strong> 然而，就像微软的其他产品一样，Windows操作系统因为他们的不懈努力，后来主宰了个人电脑操作系统领域。</strong></p></li><li><p>不过，乔布斯的沮丧之情也可以理解。苹果公司一直以来在执行上更富创新，更有想象力，也更有品位，而且他们的设计也更好。但是，虽然一开始微软只做出了一系列粗制滥造的复制品，它最终还是赢得了操作系统之争。<strong> 这一事实说明世界并非完美：最好最创新的产品并非总是赢家。</strong>这也致使乔布斯在此事十年后对微软大肆批判，虽然他说的话多少有点儿夸张，但也有几分道理。“微软唯一的问题就是他们没有品位，一点儿都没有，”他说，“并不是狭义上的没有品位，而是广义上的，他们没有独到的见解，也不会在产品中注入多少文化……<strong> 因此，我想自己之所以感到难过并不是因为微软成功了，我对他们的成功没有异议，大部分都是他们应得的。我难过的是，他们做的确实只是三流产品。”</strong></p></li><li><p>在两人的争执以及偶尔不情愿地表示出的尊重背后，是基本理念上的差异。乔布斯看好硬件和软件集成的端到端一体化系统，这就致使他要创造出与其他软件和机器都不兼容的计算机。盖茨推崇不同的公司做出互相兼容的机器，自己从中获利：这些硬件设备都运行同一个标准的操作系统——微软的Windows操作系统，并都能运行同样的软件应用程序，如微软的Word和Excel。</p></li><li><p>“你很少能见到一个艺术家在三四十岁时还能有令人惊叹的作品。”乔布斯即将30岁的时候这样说。</p><p>乔布斯30多岁的时候，自他1985年离开苹果后的10年间，确实少有建树。但是当他1995年步入40岁以后，却成就卓著。那一年《玩具总动员》发行上映，第二年苹果收购NeXT，使他一举重返他当年创建的公司。回到苹果，乔布斯将证明，即使超过40岁的人也可以是最好的创新者。<strong> 二十几岁，他就改变了个人电脑，现在，他将同样改变音乐播放器、唱片产业的商业模式、移动电话、应用软件、平板电脑、书籍以及新闻业。</strong></p><p>他之前告诉拉里•埃利森，他的回归策略是把NeXT卖给苹果，借此进入董事会，然后在那儿等着阿梅里奥出错。当乔布斯坚持说他的动机不是钱时，埃利森可能感到迷惑不解。但那的确部分属实。他既没有埃利森那种惹人注目的消费需求，也没有比尔•盖茨那种投身慈善事业的内在冲动，亦没有那种想看看自己在《福布斯》排行榜上能爬多高的竞争意识。<strong><span class="under0">在他那自负和个人动力的驱使下，他要通过创造足以令世人敬畏的传奇来获得满足。这实际上包括 两个方面：制造不断革新不断变化的伟大产品，以及建立一家有持久生命力的公司。</span> </strong>他希望跟埃德温•兰德、比尔•休利特和戴维•帕卡德这些人一起在万神殿占据一席之地，甚至比他们还要高一级。要实现这些，最好的方式就是回到苹果，夺回他的王朝。</p></li><li><p>接下来的时间他们探讨了苹果未来的发展重点。乔布斯雄心勃勃地想建立一家可以长盛不衰的公司，他问马库拉如何实现。马库拉回答说，<strong><span class="under0">长盛不衰的公司都知道如何重塑自我。惠普就是如此：它以生产小仪器起家，后来成为生产计算器的公司，再后来成为生产计算机的公司。“苹果在个人电脑领域被微软挤出了局。”马库拉说，“你必须重塑公司，做点儿其他东西，比如其他消费品或电子设备。你必须化蛹成蝶，完成彻底的蜕变。”乔布斯没多说什么，但是他同意这个观点。</span></strong></p></li><li><p>极少有其他公司或领导者——可能根本没有——敢于把他们的品牌跟甘地、爱因斯坦、马丁•路德•金、毕加索联系在一起，而且大获成功。<strong> 乔布斯能够鼓励人们定义自己——作为反企业的、富有创造性的、敢于创新的叛逆者——而且只通过使用什么电脑就实现了这种定义。<span class="under0">“史蒂夫创造了科技行业唯一一个时尚品牌，”拉里•埃利森说，“人们会因为拥有某些品牌的汽车而骄傲——保时捷、法拉利、普锐斯——因为我开什么车能一定程度上说明我是什么样的人。人们对苹果的产品有同样的感受。”</span> </strong></p></li><li><p><strong>乔布斯的一个过人之处是知道如何做到专注。“决定不做什么跟决定做什么同样重要，”他说，“对公司来说是这样，对产品来说也是这样。” </strong></p></li><li><p>在艾弗这里，乔布斯终于找到了“灵魂伴侣”。<strong> 他要的是真正意义上的简洁，而不是表面功夫。</strong>有一次，艾弗坐在他的设计工作室里，表达了他对简洁的看法：</p><p>为什么我们认为简单就是好？因为对于一个有形的产品来说，我们喜欢那种控制它们的感觉。如果在复杂中有规律可循，你也可以让产品听从于你。<strong><span class="under0">简洁并不仅仅是视觉上的，也不仅仅是把杂乱无章的东西变少或抹掉，而是要挖掘复杂性的深度。要想获得简洁，你就必须要挖得足够深。</span></strong>打个比方，如果你是为了在产品上不装螺丝钉，那你最后可能会造出一个极其烦琐复杂的东西。更好的方式，是更深刻地理解“简洁”一词，理解它的每一个部分，以及它是如何制造的。<strong> 你必须深刻地把握产品的精髓，从而判断 出哪些不重要的部件是可以拿掉的。</strong></p><p>这就是乔布斯和艾弗所一致认同的基本原则。<strong> 设计不仅是关于产品的外观，而且必须要反映出产品的精髓。</strong>“在大多数人看来，设计就和镶嵌工艺差不多，”乔布斯在重新接管苹果后对《财富》杂志说，“但是对于我而言，‘设计’一词绝无任何引申含义。<strong><span class="under0"> 设计是一个人工作品的核心灵魂，并最终由外壳表达出来。</span></strong>”</p></li><li><p>对于大多数公司来说，设计是被工程技术引领的。工程师们制定产品的规格和要求，然后设计师们再据此设计模型和外壳。但对于乔布斯来说，这个过程截然不同。<strong> 在苹果公司创立之初，乔布斯首先确定了Mac电脑的外壳之后，工程师们才依此制造合适的主板和元件。</strong></p></li><li><p>在苹果公司，他(库克)成了贯彻乔布斯直觉的角色。<strong><span class="under0">他默默耕耘，全心投入工作，至今未娶。大多数日子里，他都在凌晨4点半起床，收发邮件，然后去健身房运动一个小时，6点刚过就到达办公室；他在每周日的晚上都要安排电话会议，为下一周的工作作准备。</span></strong>在一个易怒、暴躁的老板手下，库克总是用冷静的态度以及亚拉巴马州人特有的那种镇静的口音和沉着的目光来控制局面。“尽管库克也会感到开心，但他一贯的表情就是皱眉，他的幽默感也是一本正经的、不露声色的，”《财富》杂志的亚当•拉辛斯基（Adam Lashinsky）这样写道，“在会议上，他以让人不适的长时间停顿而出名。每到这时，你听到的都是他在撕他常吃的能量棒包装纸的声音。”</p><p>在任职初期的一次会议上，库克听说苹果公司的某一家中国供应商出了问题。“这太糟糕了。”他说，“应该有人马上去中国处理这件事。”30分钟后，他看着还在桌前坐着的一位运营主管，面无表情地说：“你怎么还没走？”<strong> 那位主管站起来，没带任何行李，直接开车去了旧金山机场，买了机票飞往中国。</strong>他后来成了库克的第一副手。</p></li><li><p>在生活中，大多数情况下，“最佳”和“一般”之间大约相差30%。无论是品质一流的飞机还是最棒的美食，它们也只是比平均水准高30%。但是当我见到沃兹尼亚克时，我认为他比普通工程师要优秀50倍。很多要开会解决的事在他的脑子里就能完成了。<strong><span class="under0">麦金塔团队就致力于成为一个全部是他这样的一流选手的团队。人们总是说他们和别人合不来，他们不喜欢团队合作。但是我发现，一流选手喜欢和一流选手共事，他们只是不喜欢和三流选手在一起罢了。在皮克斯公司，整个公司的人都是一流选手。</span></strong>当我回到苹果，我决定也这么试一下。  </p></li><li><p><strong>乔布斯喜欢向人们讲述，他所做的每件漂亮事都曾有过返工的时候。当他觉得不够完美时，就会重来。</strong>那天，他对团队也讲了这些故事。他讲到了在制作《玩具总动员》的时候，胡迪这个角色原本是一个令人讨厌的家伙；还有麦金塔的制造过程中也出现过一些问题。<strong><span class="under2"> 他说：“如果你发现有些事做得不对，你不能只是忽略它，然后说‘以后再处理’，这是其他公司的做法。” </span></strong></p></li><li><p>乔布斯年近30岁时曾作过一个关于唱片的比喻。他一直在思考为何人在30多岁后就会变得思维僵化、缺乏创新意识。<strong><span class="under0"> 他说：“人们被卡在这些固有的形式中，就像唱片中某一段固定的凹槽，他们永远无法摆脱出来。当然，有些人天生就有强烈的好奇心，永远有一颗孩子般的心，可惜这样的人太稀少了。”45岁时，乔布斯准备从他的凹槽中跳出来。</span></strong></p><p>有很多原因可以解释，为什么他能比其他任何人更清楚地预见到未来的数字革命，并全身心投入这一潮流之中：</p><p> 一直以来，他都站在人性和科技的交叉点上。他热爱音乐、图片和视频。他也热爱计算机。数字中枢的本质就是把我们对创意艺术的欣赏和伟大的工程技术结合起来。<strong> 乔布斯在很多次产品介绍的最后都会展示一个简单的页面：上面有一个路标，标示着“人文”和“科技”的十字路口——他正处在这个位置，而且也是基于此，他才先人一步，有了对数字中枢的设想。</strong></p></li><li><p>“孤注一掷”是他最喜欢的词之一，他也愿意把这个词用在他的新构想上。互联网泡沫的破裂导致其他科技公司减少了对新产品的投入。他回忆说：“ <strong><span class="under0">当所有人都在削减开支的时候，我们反而决定要在情况低迷时继续投资。我们主要会投资在研发上面，发明出一些新东西，一旦低潮期过去，我们就已经领先于竞争对手了。</span></strong>”这种投入造就了苹果公司持续创新最辉煌的十年。   </p></li><li><p><strong> 一家创新型的公司不仅仅要做到推陈出新，而且还要在落后时知道如何迎头追上。</strong></p></li><li><p><strong><span class="under0">如果你一定要用幻灯片来讲,那说明你不知道自己要讲什么</span></strong></p></li><li><p>当我去皮克斯公司工作时，我开始意识到这个巨大的分歧。科技公司不懂创意，他们也不欣赏依赖直觉的思维方式，比如唱片公司的A&amp;R部门[4]听了100个人演唱之后就能感觉到哪5个人会成功。他们之所以认为创意人员只是整天窝在沙发里，自由散漫，是因为他们从来没见过在皮克斯这样的地方，创意人员是多么富有紧迫感和专业素养。另一方面，音乐公司也对技术完全没概念。他们认为他们总能从外面雇到一些技术人员。但是这就像苹果公司去找人制作音乐一样。我们只能得到二流的A&amp;R人员，就像音乐公司只能找到二流技术人员一样。<strong> 我属于少数人，既懂得发明技术需要直觉和创造力，也知道制作艺术作品需要接受真正的专业训练。</strong></p></li><li><p>直到3年之后，2006年11月，微软终于对iPod宣战，推出了Zune播放器，和iPod外观类似，但没有iPod轻巧。两年过去，它的市场份额还不到5%。又过了几年，乔布斯直截了当地指出了造成Zune缺乏灵感的设计和市场疲弱的原因：</p><p><strong>随着年纪增长，我越发懂得“动机”的重要性。Zune是一个败笔，因为微软公司的人并不像我们这样热爱音乐和艺术。<span class="under0">我们赢了，是因为我们发自内心地热爱音乐。我们做iPod是为了自己。当你真正为自己、为好朋友或家人做一些事时，你就不会轻易放弃。但如果你不热爱这件事，那么你就不会多走一步，也不情愿在周末加班，只会安于现状。</span> </strong></p></li><li><p>乔布斯隐瞒了他继续与癌症抗争的实情，告诉大家，他已被“治愈”了，这一如他2003年10月癌症确诊后的缄口不言。这样保密并不稀奇，它是乔布斯本性的一部分。更为令人惊奇的是，他决定公开谈论自己的健康问题。除了登台演示产品，乔布斯平时很少作演讲，但他仍然接受了<strong> <span class="under1"><a href="http://open.163.com/special/opencourse/jobs.html" target="_blank" rel="noopener">斯坦福大学2005年毕业典礼的演讲</a> </span></strong>邀请。在癌症确诊之后，即将50岁的他，处于一种反思状态。</p><p>为了完成演讲，乔布斯找到了杰出的编剧艾伦•索金（Aaron Sorkin），其作品包括电影《好人寥寥》（A Few Good Men）和《白宫风云》（The West Wing）。索金答应帮忙，于是乔布斯给他发了电子邮件，表达了自己的一些想法。乔布斯回忆道：“当时是2月，他没有回复。于是4月的时候我又发了一次邮件，他说‘哦，好啊。’然后我又发了些新想法给他，后来终于电话联系上了，他不停地说‘嗯’，但是一直到6月初，他什么都没给我。”</p><p>乔布斯有点儿不安。以前产品展示的脚本都是他自己写的，但是他从来没有在毕业典礼上作过演讲。一天晚上，他开始自己撰写演讲稿，除了征求妻子的意见，没有其他任何人的帮助。他写出了一篇非常亲切简洁的讲话稿，充满朴实的个人感受，是完美的乔布斯作品。</p><p><strong> 美国作家亚历克斯•黑利（Alex Haley）曾说过，演讲最好的开场是“我来给你们讲个故事吧”。没人愿意听别人说教，但是人人都喜欢听故事。</strong>而这正是乔布斯选择的演讲方式。他的开场白是这样的：“今天，我想向你们讲述我人生中的三个故事，就是这样，没什么大不了的，三个故事而已。”</p><p>第一个是从里德学院退学的故事。“我不用再去上自己不感兴趣的必修课，可以去听更有趣的课程。”第二个故事是被苹果公司解雇如何变成了对自己有益的经历。“成功的沉重又重新被初学者的轻松所取代，对所有事情都不再那样确信。”尽管现场有架飞机拖着一张敦促乔布斯“回收所有电子废物”的条幅，不停地在演讲场地上方盘旋，但是学生们都听得异常专注。不过，深深吸引他们的是第三个故事——确诊患有癌症及这一事实所带来的想法。</p><p><strong><span class="under0"> 记住自己很快就要死了，这是我面对人生重大选择时最重要的工具。因为，几乎一切——所有外界的期望，所有骄傲，所有对于困窘和失败的恐惧——这些东西都在死亡面前烟消云散，只留下真正重要的东西。记住自己终会死去，是我所知最好的方式，避免陷入认为自己会失去什么的陷阱。你已是一无所有，没理由不追随内心。</span></strong></p></li><li><p>乔布斯还利用这个机会强调公司的焦点所在。当年在罗伯特•弗里德兰的农场，他的工作是给苹果树剪枝，以让它们茁壮成长，这一举动后来成为了他精简苹果公司的隐喻。<strong> <span class="under0">乔布斯不鼓励每个团队出于营销的考虑增加产品线，也不允许主意满天飞，他坚持苹果公司一次只着重于两三个优先项目。</span>“在无视身边噪音这方面，没有人比乔布斯做得更好。”库克说道，“<span class="under0">这样，他就能够集中精力于几件事情上，拒绝其他许多事情。很少有人擅长于这一点。</span>”</strong></p></li><li><p>乔布斯病休后不久，在一次跟分析员的电话会议上，库克一改淡定的风格，富有煽动性地宣讲了为什么即使乔布斯不在，苹果也会继续高歌猛进：</p><p>我们相信，我们在地球上存在的目的就是创造伟大的产品，这一点不会改变。我们一直专注于创新。我们崇尚简约而不是复杂。我们相信我们需要拥有并控制我们制造的产品背后的重要技术，并只参与那些我们可以作出重大贡献的市场。<strong><span class="under0">我们相信要对成千上万的项目说不，这样我们才能真正专注于那些对我们来说确实重要和有意义的少数项目。</span>我们相信团队间的深度合作和相互启发，这让我们用别人没有的方式进行创新。坦白地说，这家公司的每一个团队都在不懈地追求完美，我们能诚实地对待自己，承认错误，并有勇气去改变。</strong>我认为，无论是谁在做什么工作，这些价值已经深深地扎根在这家公司，苹果将表现非凡。</p></li><li><p>佩奇来到他家，在乔布斯的客厅里，听他讲如何创造伟大的产品和生命力持久的公司。乔布斯回忆道：</p><p>关于专注，我们谈了很多。还有人的选择。如何知道应该信任谁，以及他如何打造一支可以依赖的团队。我给他讲了必须采用什么样的拦截战术去防止公司变得松散或充斥着二流选手。<strong><span class="under0"> 我强调的主要事项就是专注。</span>要想清楚，谷歌成熟以后想成为什么样的公司。现在摊子铺得到处都是，你想专注去做的5个产品是什么？把其他的都扔掉，因为会拖你的后腿，会把你变成微软，导致你生产的产品符合要求但不伟大。</strong>我尽量做了我能做的。我会继续与像马克•扎克伯格一样的人做这样的事。我余生的一部分时间会用来做这个。我可以帮助下一代记住当下伟大企业的血统，以及如何把这些传统发扬光大。硅谷一直非常支持我。我应该尽我所能作出回报。</p></li><li><p>他想给我看一些私人照片，让我选几张用在这本书里。他太虚弱了，下不了床，所以他指点我去房间的各个抽屉里找，我小心翼翼地把照片拿给他。我坐在床边，一张一张地举起来给他看。有些照片会让他讲出许多故事，而有些，他只是嘟囔一声或是微微一笑。我从未见过他父亲保罗•乔布斯的照片，所以当看到一张照片上一个帅气而贫穷的20世纪50年代的父亲抱着个刚会走路的孩子时，我非常惊讶。“没错，那是他，”他说，“你可以用这张。”然后他指示我打开窗边的一个盒子，里面有一张照片是他父亲在他的婚礼上慈爱地望着他。<strong> “他是个伟大的人。”乔布斯静静地说。我嘀咕了一句“他应该为你感到骄傲”之类的话。乔布斯纠正我说：“他确实为我感到骄傲。”</strong></p></li><li><p>乔布斯的传奇是硅谷创新神话的典型代表：在被传为美谈的车库里开创一家企业，把它打造成全球最有价值的公司。他没有直接发明很多东西，但是他用大师级的手法把理念、艺术和科技融合在一起，就创造了未来。他欣赏图形界面的威力，就以施乐无法做到的方式设计了Mac；他领会了把1 000首歌装进口袋的快乐，就以索尼尽其全部资产和传承都无法成就的方式创造了iPod。有些领导者通过统揽全局去推进创新，有些是通过把握细节。乔布斯两者兼顾，不懈努力。正因如此，30年间他推出的一系列产品改变了一个又一个产业：</p><ul><li>Apple II，采用沃兹尼亚克的电路板并把它变成第一台不再仅供业余爱好者使用的个人计算机。</li><li>麦金塔，引发了家用电脑革命并普及了图形用户界面。</li><li>《玩具总动员》和其他皮克斯大片，开创了数字影像的奇迹。</li><li>苹果零售店，重新塑造了商店在品牌定义中的角色。</li><li>iPod，改变了我们消费音乐的方式。</li><li>iTunes商店，让音乐产业重获新生。</li><li>iPhone，把移动电话变成了音乐、照片、视频、邮件和网络设备。</li><li>应用商店（App Store），生成新的内容创造产业。</li><li>iPad，推出平板计算技术，为数字报纸、杂志、书籍和视频提供了平台。</li><li>iCloud，使计算机不再担任管理我们内容的中心角色，并让我们的电子设备无缝同步。</li><li>苹果公司本身，乔布斯认为这是他最伟大的创作。在这里，想象力被培育、应用和执行的方式极具创造力，使苹果成为了全球最有价值的公司。</li></ul></li></ul><ul><li><p>在我们交谈的过程中，他屡次谈到他希望自己留下什么样的遗产。以下就是那些想法，是他的原话：</p><p><strong> <span class="under0">我的激情所在是打造一家可以传世的公司，这家公司里的人动力十足地创造伟大的产品。其他一切都是第二位的。当然，能赚钱很棒，因为那样你才能够制造伟大的产品。但是动力来自产品，而不是利润。斯卡利本末倒置，把赚钱当成了目标。这种差别很微妙，但它却会影响每一件事：你聘用谁，提拔谁，会议上讨论什么事情。</span></strong></p><p>有些人说：“消费者想要什么就给他们什么。”但那不是我的方式。我们的责任是提前一步搞清楚他们将来想要什么。我记得亨利•福特曾说过，“如果我最初问消费者他们想要什么，他们应该是会告诉我，‘要一匹更快的马！’”<strong> <span class="under0"> 人们不知道想要什么，直到你把它摆在他们面前。正因如此，我从不依靠市场研究。我们的任务是读懂还没落到纸面上的东西。</span></strong></p><p>宝丽来的埃德温• 兰德曾谈过人文与科学的交集。我喜欢那个交集。那里有种魔力。有很多人在创新，但创新并不是我事业最主要的与众不同之处。<strong><span class="under0"> 苹果之所以能与人们产生共鸣，是因为在我们的创新中深藏着一种人文精神。我认为伟大的艺术家和伟大的工程师是相似的，他们都有自我表达的欲望。事实上最早做Mac的最优秀的人里，有些人同时也是诗人和音乐家。</span>在20 世纪70 年代，计算机成为人们表现创造力的一种方式。一些伟大的艺术家，像列奥纳多• 达• 芬奇和米开朗基罗，同时也是精通科学的人。</strong>米开朗基罗懂很多关于采石的知识，他不是只知道如何雕塑。</p><p>人们付钱让我们为他们整合东西，因为他们不能7天24小时地去想这些。如果你对生产伟大的产品有极大的激情，它会推着你去追求一体化，去把你的硬件、软件以及内容管理都整合在一起。你想开辟新的领域，就必须自己来做。如果你想让产品对其他硬件或软件开放，你就只能放弃一些愿景。</p><p>过去，不同阶段有不同的公司成为了硅谷的典范。很长一段时间里，是惠普。后来，在半导体时代，是仙童和英特尔。我觉得，有一段时间是苹果，后来没落了。而今天，我认为是苹果和谷歌——苹果更多一些。我想苹果已经经受住了时间的检验。它曾有过起起伏伏，但如今仍然走在时代的前沿。</p><p>要指出微软的不足很容易。他们显然已经丧失了统治地位，已经变得基本上无关紧要。但是我欣赏他们所做的，也了解那有多么困难。他们很擅长商业方面的事务。他们在产品方面从未有过应有的野心。比尔喜欢把自己说成是做产品的人，但他真的不是。他是个商人。赢得业务比做出伟大的产品更重要。他最后成了最富有的人，如果这就是他的目标，那么他实现了。但那从来都不是我的目标，而且我怀疑，那最终是否是他的目标。我欣赏他，欣赏他创建的公司，很出色，我也喜欢跟他合作。他很聪明，实际上也很有幽默感。但是微软的基因里从来都没有人文精神和艺术气质。即使在看到Mac以后，他们都模仿不好。他们完全没搞懂它是怎么回事儿。</p><p><strong>像IBM或微软这样的公司为什么会衰落，我有我自己的见解。这样的公司干得很好，它们进行创新，成为或接近成为某个领域的垄断者，然后产品的质量就变得不那么重要了。</strong>这些公司开始重视优秀的销售人员，因为是他们在推动销售、改写了收入数字，而不是产品的工程师和设计师。因此销售人员最后成为公司的经营者。IBM的约翰•埃克斯是聪明、善辩、非常棒的销售人员，但是对产品一无所知。同样的事情也发生在施乐。做销售的人经营公司，做产品的人就不再那么重要，其中很多人就失去了创造的激情。斯卡利加入后，苹果就发生了这样的事情，那是我的失误；鲍尔默接管微软后也是这样。苹果很幸运，能够东山再起，但我认为只要鲍尔默还在掌舵，微软就不会有什么起色。</p><p><strong>我讨厌一种人，他们把自己称为“企业家”，实际上真正想做的却是创建一家企业，然后把它卖掉或上市，他们就可以变现，一走了之。他们不愿意费力气打造一家真正的公司，而这正是商业领域里最艰难的工作。只有做到这一点你才能真正有所贡献，为前人留下的遗产添砖加瓦。你要打造一家再过一两代人仍然屹立不倒的公司。那就是沃尔特• 迪士尼，还有休利特和帕卡德，还有创建英特尔的人所做的。他们创造了传世的公司，而不仅仅是赚了钱。这正是我对苹果的期望。</strong></p><p><strong>我不认为我对别人很苛刻，但如果谁把什么事搞砸了，我会当面跟他说。 <span class="under0"> 诚实是我的责任。</span>我知道我在说什么，而且事实证明通常我是对的。那是我试图创建的文化。我们相互间诚实到残酷的地步，任何人都可以跟我说，他们认为我就是一堆狗屎，我也可以这样说他们。我们有过一些激烈的争吵，互相吼叫，那可以说是我最美好的一段时光。</strong>我在别人面前说“罗恩，那个商店看起来像坨屎”的时候没什么不良感觉。或者我会说“天啊，我们真他妈把这个工艺搞砸了”，就当着负责人的面。这就是我们的规矩：你就得超级诚实。也许有更好的方式，像个绅士俱乐部一样，大家都戴着领带，说着上等人的敬语，满嘴华丽委婉的词汇，但是我对此不太在行，因为我是来自加利福尼亚的中产阶级。</p><p>我有时候对别人很严厉，可能没有必要那么严厉。我还记得里德6岁时，他回到家，而我那天刚解雇了一个人，我当时就在想，一个人要怎样告诉他的家人和幼子他失业了。很不好受。但是必须有人去做这样的事。我认为确保团队的优秀始终是我的责任，如果我不去做这件事，没有人会去做。</p><p><strong>你必须不断地去推动创新。</strong>迪伦本来可以一直唱抗议歌曲，可能会赚很多钱，但是他没有那么做。他必须向前走，1965年在民谣中融入电子音乐元素时，他疏远了很多人。1966 年的欧洲巡演是他的巅峰。他会先上台演奏原声吉他，观众非常喜欢。然后他会带出The Band 乐队，他们都演奏电子乐器，观众有时候就会喝倒彩。有一次他正要唱《像一块滚石》，观众中有人高喊“叛徒！”迪伦说：“搞他妈个震耳欲聋！”他们真那样做了。披头士乐队也一样。<strong><span class="under0"> 他们一直演变、前行、改进他们的艺术。那就是我一直试图做的事情——不断前进。否则，就如迪伦所说，如果你不忙着求生，你就在忙着求死。</span></strong></p><p>我的动力是什么？<strong>我觉得，大多数创造者都想为我们能够得益于前人取得的成就而表达感激。我并没有发明我用的语言或数学。我的食物基本都不是我自己做的，衣服更是一件都没做过。我所做的每一件事都有赖于我们人类的其他成员，以及他们的贡献和成就。我们很多人都想回馈社会，在历史的长河中再添上一笔。我们只能用这种大多数人都掌握的方式去表达——因为我们不会写鲍勃•迪伦的歌或汤姆• 斯托帕德（Tom Stoppard）的戏剧。<span class="under0">我们试图用我们仅有的天分去表达我们深层的感受，去表达我们对前人所有贡献的感激，去为历史长河加上一点儿什么。那就是推动我的力量。</span></strong></p></li></ul><hr><h3 id="写在后面"><a href="#写在后面" class="headerlink" title=" 写在后面 "></a><strong> 写在后面 </strong></h3><p>上一篇<code>阅读笔记</code>分类中的博文<a href="http://localhost:4000/2018/02/22/read-Steve-Jobs-By-Walter-Isaacson/" target="_blank" rel="noopener">《哲思录》（一）</a>还是写在16年的。17年很忙,但是在技术之外还是读了一些书,遗憾的是没有记录下什么,以至于忘了太多。印象深刻的是《乌合之众》,这本书是当时梦圆强烈推荐的。</p><p>回到本书,感慨很多。挑一处讲讲</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">乔布斯喜欢向人们讲述，他所做的每件漂亮事都曾有过返工的时候。当他觉得不够完美时，就会重来。</span><br><span class="line">那天，他对团队也讲了这些故事。</span><br><span class="line">他讲到了在制作《玩具总动员》的时候，胡迪这个角色原本是一个令人讨厌的家伙；</span><br><span class="line">还有麦金塔的制造过程中也出现过一些问题。</span><br><span class="line">他说：“如果你发现有些事做得不对，你不能只是忽略它，然后说‘以后再处理’，这是其他公司的做法。”</span><br></pre></td></tr></table></figure><p>在百度做review的时候,有些我想在后面再做优化改进,端化会先让我解决掉这些问题,而不是放到以后。我们要对入库的代码负责。</p><p>最后以顾城的一句话结束本文</p><p><strong> 技术是人生存所依赖的，却不是人的精神能依凭的；它是生存的方法，而不是生存的法则。科学是一个很小的东西，并不像人们所寄望的那样可以无所不能。</strong></p><hr><h3 id="相关资源"><a href="#相关资源" class="headerlink" title=" 相关资源 "></a><strong> 相关资源 </strong></h3><p><a href="http://open.163.com/special/opencourse/jobs.html" target="_blank" rel="noopener">斯坦福大学2005年毕业典礼的演讲</a></p>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>phpstorm代码缩进风格设置</title>
      <link href="/2018/01/27/Code-indentation-style-settings-of-phpstorm/"/>
      <url>/2018/01/27/Code-indentation-style-settings-of-phpstorm/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对在phpstorm中设置代码缩进风格的记录</p><hr><p>关于缩进风格,四个空格还是tab可以说和vim还是emacs好一样都是程序员届的未解之谜。</p><p>我本人是使用四个空格作为缩进的。</p><hr><p><img src="/img/Developer-Tools/Code-indentation-style-settings-of-phpstorm/1.png" alt="1.png"></p><p><code>File -&gt; Settings -&gt; Editor -&gt; Code Style</code><br><code>文件 -&gt; 设置 -&gt; 编辑器 -&gt; Code Style</code></p><p>把<code>Detect and use exsiting file indents for editing</code> 勾掉。<br>不然缩进设置无效,默认设置就是使用4个空格代替tab。</p><p><img src="/img/Developer-Tools/Code-indentation-style-settings-of-phpstorm/2.png" alt="2.png"></p><p><code>Code Style</code>下面的语言可以进行更细化的设置</p><hr><p>有时候需要刷一遍tab缩进，把你不希望看到的缩进风格改成你希望的：<br>使用<code>Ctrl + Alt + I</code>,直接把tab刷成4空格。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/cor_twi/article/details/52038301" target="_blank" rel="noopener">PHPStorm IntelliJ IDEA 代码缩进风格设置</a></p>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 编码风格 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>JS保留两位小数</title>
      <link href="/2018/01/27/use-js-to-keep-tow-decimal-digits/"/>
      <url>/2018/01/27/use-js-to-keep-tow-decimal-digits/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对JS保留两位小数的方法的记录。</p><hr><p>测试数据<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> numObj = <span class="number">12345.6789</span>;</span><br><span class="line"><span class="keyword">var</span> numObj = <span class="number">12345.6</span>;</span><br><span class="line"><span class="keyword">var</span> numObj = <span class="number">12345</span>;</span><br></pre></td></tr></table></figure></p><h3 id="方法一"><a href="#方法一" class="headerlink" title=" 方法一 "></a><strong> 方法一 </strong></h3><p><code>numObj.toFixed(2)</code></p><hr><p><code>toFixed()</code> 方法使用定点表示法来格式化一个数。</p><h4 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h4><p><code>numObj.toFixed(digits)</code></p><h4 id="参数"><a href="#参数" class="headerlink" title=" 参数 "></a><strong> 参数 </strong></h4><p><code>digits</code><br>小数点后数字的个数；介于 0 到 20 （包括）之间，实现环境可能支持更大范围。<span class="under0">如果忽略该参数，则默认为 0</span>。</p><h4 id="返回值"><a href="#返回值" class="headerlink" title=" 返回值 "></a><strong> 返回值 </strong></h4><p>所给数值的定点数表示法的<strong> 字符串形式 </strong>。</p><hr><h3 id="方法二"><a href="#方法二" class="headerlink" title=" 方法二 "></a><strong> 方法二 </strong></h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">returnFloat</span>(<span class="params">value</span>)</span>&#123;</span><br><span class="line"> <span class="keyword">var</span> value = <span class="built_in">Math</span>.round(<span class="built_in">parseFloat</span>(value)*<span class="number">100</span>)/<span class="number">100</span>;</span><br><span class="line"> <span class="keyword">var</span> xsd   = value.toString().split(<span class="string">"."</span>);</span><br><span class="line"> <span class="keyword">if</span> (xsd.length == <span class="number">1</span>) &#123;</span><br><span class="line">    value=value.toString() + <span class="string">".00"</span>;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line"> &#125;</span><br><span class="line"> </span><br><span class="line"> <span class="keyword">if</span> (xsd.length &gt; <span class="number">1</span>) &#123;</span><br><span class="line">     <span class="keyword">if</span> (xsd[<span class="number">1</span>].length &lt; <span class="number">2</span>) &#123;</span><br><span class="line">        value = value.toString() + <span class="string">"0"</span>;</span><br><span class="line">     &#125;</span><br><span class="line">     <span class="keyword">return</span> value;</span><br><span class="line"> &#125;</span><br><span class="line">&#125;</span><br><span class="line"> <span class="keyword">var</span> num = <span class="number">3.1</span>;</span><br><span class="line"> <span class="built_in">console</span>.log(returnFloat(num));</span><br></pre></td></tr></table></figure><h4 id="解释"><a href="#解释" class="headerlink" title=" 解释 "></a><strong> 解释 </strong></h4><p><code>var value=Math.round(parseFloat(value)*100)/100</code></p><p><code>parseFloat(value)</code>将参数转换为浮点数，因为参数有可能是字符串，乘以100是因为要保留两位小数，先将小数点向右移动两个位数，然后再利用Math.round()方法实行四舍五入计算，最后除以100，这样就实现了保留两位小数，并且还具有四舍五入效果。</p><p><strong> 但是这个并不完美，如果参数数字本身的小数位数大于等于2是可以的，如3.1415，但是如3或者3.0这样的还是没有完美的实现。</strong></p><p><code>var xsd   = value.toString().split(&quot;.&quot;);</code></p><p>所以此句后面的代码,以小数点为分界拆成数组,对数组的长度以及倘若数组长度为2,对数组的第二个元素(即小数点后面的数字位数进行了判断处理)</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title="　参考 "></a><strong>　参考 </strong></h3><p><a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Number/toFixed" target="_blank" rel="noopener">Number.prototype.toFixed()</a><br><a href="http://www.jb51.net/article/76584.htm" target="_blank" rel="noopener">javascript实现保留两位小数的多种方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>重学Git</title>
      <link href="/2018/01/27/relearn-git/"/>
      <url>/2018/01/27/relearn-git/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>最近做项目的过程中,发现自己对git的掌握并不牢固,有的用法还比较生疏。当然也和我以往面对的场景不同有关。本文做一些记录。</p><hr><h3 id="寻找历史命令"><a href="#寻找历史命令" class="headerlink" title=" 寻找历史命令 "></a><strong> 寻找历史命令 </strong></h3><p>当我们处在terminal,可以通过<code>history</code>来查看历史命令。<strong><span class="under0"> 其实还可以通过ctrl+r,来搜索历史命令。</span></strong></p><hr><h3 id="git-log"><a href="#git-log" class="headerlink" title=" git log "></a><strong> git log </strong></h3><p><code>git log</code>可以查看提交历史。</p><p>默认不用任何参数的话，<code>git log</code>会按提交时间列出所有的更新，最近的更新排在最上面。每次更新都有一个 SHA-1 校验和、作者的名字和电子邮件地址、提交时间，最后缩进一个段落显示提交说明。</p><p><img src="/img/git/relearn-git/1.png" alt="1.png"></p><p>辅助一些参数的话,可以发挥更强大的功能。</p><h4 id="p"><a href="#p" class="headerlink" title=" -p "></a><strong> -p </strong></h4><p><code>-p</code> 选项展开显示每次提交的内容差异。<code>git log -p</code></p><h4 id="n"><a href="#n" class="headerlink" title=" -n "></a><strong> -n </strong></h4><p><code>-n</code> 选项显示最近的n次更新。<code>git log -n</code></p><h4 id="–word-diff"><a href="#–word-diff" class="headerlink" title=" –word-diff "></a><strong> –word-diff </strong></h4><p>某些时候，单词层面的对比，比行层面的对比，更加容易观察。Git 提供了 <code>--word-diff</code> 选项。我们可以将其添加到 <code>git log -p</code> 命令的后面，从而获取单词层面上的对比。在程序代码中进行单词层面的对比常常是没什么用的。不过当你需要在书籍、论文这种很大的文本文件上进行对比的时候，这个功能就显出用武之地了。<code>git log -p --word-diff</code></p><p><code>git log</code>还提供了许多摘要选项可以用</p><h4 id="–stat"><a href="#–stat" class="headerlink" title=" –stat "></a><strong> –stat </strong></h4><p>仅显示简要的增改行数统计。<code>git log --stat</code></p><h4 id="–pretty"><a href="#–pretty" class="headerlink" title=" –pretty "></a><strong> –pretty </strong></h4><p>可以指定使用完全不同于默认格式的方式展示提交历史。<br>比如用<code>oneline</code>将每个提交放在一行显示，这在提交数很大时非常有用。另外还有<code>short</code>，<code>full</code> 和 <code>fuller</code> 可以用，展示的信息或多或少有些不同.</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">git log --pretty=oneline</span><br><span class="line">git log --pretty=short</span><br><span class="line">git log --pretty=full</span><br><span class="line">git log --pretty=fuller</span><br></pre></td></tr></table></figure><p>特别的是使用<code>format</code>,可以定制要显示的记录格式，这样的输出便于后期编程提取分析</p><p><code>git log --pretty=format:&quot;%h - %an, %ar : %s&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ca82a6d - Scott Chacon, 11 months ago : changed the version number</span><br><span class="line">085bb3b - Scott Chacon, 11 months ago : removed unnecessary test code</span><br><span class="line">a11bef0 - Scott Chacon, 11 months ago : first commit</span><br></pre></td></tr></table></figure><p><img src="/img/git/relearn-git/2.png" alt="2.png"></p><h4 id="–graph"><a href="#–graph" class="headerlink" title=" –graph "></a><strong> –graph </strong></h4><p>用 <code>oneline</code> 或 <code>format</code> 时结合 <code>--graph</code> 选项，可以看到开头多出一些 ASCII 字符串表示的简单图形，形象地展示了每个提交所在的分支及其分化衍合情况</p><p><code>git log --pretty=format:&quot;%h %s&quot; --graph</code></p><h4 id="按照时间作限制"><a href="#按照时间作限制" class="headerlink" title=" 按照时间作限制 "></a><strong> 按照时间作限制 </strong></h4><p>列出所有最近两周内的提交</p><p><code>git log --since=2.weeks</code></p><p><img src="/img/git/relearn-git/3.png" alt="3.png"></p><hr><h3 id="git-cherry-pick"><a href="#git-cherry-pick" class="headerlink" title=" git cherry-pick "></a><strong> git cherry-pick </strong></h3><p>这个命令以前我没接触过。<strong><span class="under0"> 作用是将之前的提交的挑选某一个、或多个commit应用到当前分支。 </span></strong></p><p>比如有master和dev两个分支,master分支有a1,a2两个commit,dev分支有b1,b2,b3三个commit,如果想将b2分支合并到master。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git checkout master</span><br><span class="line"></span><br><span class="line">git cherry-pick b2-commit-id</span><br><span class="line"></span><br><span class="line">## cherry-pick过后,如果出现了冲突,就解决冲突后再提交</span><br></pre></td></tr></table></figure><hr><h3 id="git-rebase"><a href="#git-rebase" class="headerlink" title=" git rebase "></a><strong> git rebase </strong></h3><p><a href="http://gitbook.liuhui998.com/4_2.html" target="_blank" rel="noopener">rebase</a></p><hr><h3 id="git-stash"><a href="#git-stash" class="headerlink" title=" git stash "></a><strong> git stash </strong></h3><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89" target="_blank" rel="noopener">这篇文章</a>讲得很详细</p><p>总结下常用的几个命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># 将修改暂存到栈中</span><br><span class="line">git stash</span><br><span class="line"></span><br><span class="line"># 查看现有的储藏</span><br><span class="line">git stash list</span><br><span class="line"></span><br><span class="line"># 应用指定的储藏  apply 选项只尝试应用储藏的工作——储藏的内容仍然在栈上。</span><br><span class="line">git stash apply stash@&#123;n&#125;</span><br><span class="line"></span><br><span class="line"># 要移除它,运行</span><br><span class="line">git stash drop  stash@&#123;n&#125;</span><br><span class="line"></span><br><span class="line"># 重新应用储藏，同时立刻将其从堆栈中移走</span><br><span class="line">git stash pop  stash@&#123;n&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="git-reset"><a href="#git-reset" class="headerlink" title=" git reset "></a><strong> git reset </strong></h3><p>Git中，用<code>HEAD</code>表示当前版本,也就是最新的提交,上一个版本就是<code>HEAD^</code>,上上一个版本就是<code>HEAD^^</code>,当然往上100个版本写100个^比较容易数不过来,所以写成<code>HEAD~100</code></p><p>这个命令的难点在于理解这三个参数:<code>soft,mixed(默认),hard</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">soft  就是只动repo</span><br><span class="line">mixed 就是动repo还有staging</span><br><span class="line">hard  就是动repo还有staging还有working</span><br></pre></td></tr></table></figure></p><p>这里又涉及了三个概念,分别是<code>Working Tree,Index,Repository</code></p><ol><li><p>Working Tree (工作目录): Git管理的目录，也就是我们实际操作的目录</p></li><li><p>Index (系统索引): 存放一堆需要被commit的(异动)文件内容集合，把档案加入索引称Stage 或Cache。</p></li><li><p>Repository (仓库): 是Git存放文件的位置，许多commit结点(版本)记录于此。</p></li></ol><hr><h3 id="git-add"><a href="#git-add" class="headerlink" title=" git add "></a><strong> git add </strong></h3><p><code>git add .</code>：他会监控工作区的状态树，使用它会把工作时的所有变化提交到暂存区，包括文件内容修改(modified)以及新文件(new)，但不包括被删除的文件。</p><p><code>git add -u</code>：他仅监控已经被add的文件（即<code>tracked file</code>），他会将被修改、删除的文件提交到暂存区。<code>git add -u</code>不会提交新文件（<code>untracked file</code>）。（<code>git add --update</code>的缩写）</p><p><code>git add -A</code>：是上面两个功能的合集（<code>git add --all</code>的缩写）</p><hr><h3 id="删除分支"><a href="#删除分支" class="headerlink" title=" 删除分支 "></a><strong> 删除分支 </strong></h3><h4 id="删除远程分支"><a href="#删除远程分支" class="headerlink" title=" 删除远程分支 "></a><strong> 删除远程分支 </strong></h4><p><code>git push origin --delete remote-branch-name</code></p><h4 id="删除本地分支"><a href="#删除本地分支" class="headerlink" title=" 删除本地分支 "></a><strong> 删除本地分支 </strong></h4><p><code>git branch -d local-branch-name</code></p><p>若分支有修改还未合并，会提示还没合并。</p><p>强行删除本地分支</p><p><code>git branch -D local-branch-name</code></p><hr><h3 id="分支管理"><a href="#分支管理" class="headerlink" title=" 分支管理 "></a><strong> 分支管理 </strong></h3><h4 id="本地从当前所在分支上创建一个新分支"><a href="#本地从当前所在分支上创建一个新分支" class="headerlink" title=" 本地从当前所在分支上创建一个新分支 "></a><strong> 本地从当前所在分支上创建一个新分支 </strong></h4><p><code>git checkout -b newBranchName</code></p><h4 id="拉取远程某个分支到本地"><a href="#拉取远程某个分支到本地" class="headerlink" title=" 拉取远程某个分支到本地 "></a><strong> 拉取远程某个分支到本地 </strong></h4><p><code>git checkout -b local-branch-name origin/remote-branch-name</code></p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>最近才发现自己对git掌握得很皮毛。想起之前觉得自己掌握得不错,无地自容…..</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://git-scm.com/book/zh/v1/Git-%E5%9F%BA%E7%A1%80-%E6%9F%A5%E7%9C%8B%E6%8F%90%E4%BA%A4%E5%8E%86%E5%8F%B2" target="_blank" rel="noopener"> Git 基础 - 查看提交历史</a><br><a href="https://git-scm.com/docs/git-cherry-pick" target="_blank" rel="noopener">git-cherry-pick</a><br><a href="https://backlog.com/git-tutorial/cn/stepup/stepup7_4.html" target="_blank" rel="noopener">cherry-pick</a><br><a href="http://blog.csdn.net/wh_19910525/article/details/7784901" target="_blank" rel="noopener">git stash和git stash pop</a><br><a href="http://gitbook.liuhui998.com/4_2.html" target="_blank" rel="noopener">rebase</a><br><a href="https://git-scm.com/book/zh/v1/Git-%E5%B7%A5%E5%85%B7-%E5%82%A8%E8%97%8F%EF%BC%88Stashing%EF%BC%89" target="_blank" rel="noopener">Git 工具 - 储藏（Stashing）</a><br><a href="https://www.liaoxuefeng.com/wiki/0013739516305929606dd18361248578c67b8067c8c017b000/0013744142037508cf42e51debf49668810645e02887691000" target="_blank" rel="noopener">版本回退</a><br><a href="http://www.cnblogs.com/kidsitcn/p/4513297.html" target="_blank" rel="noopener">git reset soft,hard,mixed之区别深解</a><br><a href="http://blog.csdn.net/carolzhang8406/article/details/49761927" target="_blank" rel="noopener">git reset hard/soft/mixed区别</a><br><a href="https://dotblogs.com.tw/wasichris/2016/04/29/225157" target="_blank" rel="noopener">Git Reset - mixed, hard and soft</a><br><a href="https://segmentfault.com/a/1190000009658888" target="_blank" rel="noopener">git reset详解</a><br><a href="https://www.cnblogs.com/qianqiannian/p/6010238.html" target="_blank" rel="noopener">Git reset</a><br><a href="http://blog.csdn.net/lcxywfe/article/details/53260338" target="_blank" rel="noopener"> git add .和git add -u和git add -A的区别</a><br><a href="http://blog.csdn.net/sub_lele/article/details/52289996" target="_blank" rel="noopener">Git 如何删除本地分支和远程分支</a><br><a href="http://blog.csdn.net/bin622/article/details/69948525" target="_blank" rel="noopener">Git本地从某个分支上创建新分支以及拉取远程分支到本地分支</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Isb_release</title>
      <link href="/2018/01/06/lsb_release/"/>
      <url>/2018/01/06/lsb_release/</url>
      
        <content type="html"><![CDATA[<p><code>lsb_release</code>是查看系统版本信息的工具。</p><p>类似的有<code>uname -a</code>,<code>cat /proc/version</code>命令,不过这两个命令是用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）。也就是使用该命令只能查看到内核版本,却不知道系统版本。</p><hr><h3 id="lsb-release"><a href="#lsb-release" class="headerlink" title=" lsb_release "></a><strong> lsb_release </strong></h3><p>检查是否安装了<code>lsb_release</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -r</span><br></pre></td></tr></table></figure><p>安装<code>lsb_release</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install -y redhat-lsb</span><br></pre></td></tr></table></figure></p><p>查看系统版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">lsb_release -a</span><br></pre></td></tr></table></figure><p><code>lsb_release</code>适用于所有的Linux发行版，包括Redhat、SuSE、Debian…等发行版</p><hr><h3 id="补充"><a href="#补充" class="headerlink" title=" 补充 "></a><strong> 补充 </strong></h3><p>其他查看系统版本信息的命令有</p><p><code>cat /etc/redhat-release</code>  这种方法只适合Redhat系的Linux</p><p><code>cat /etc/issue</code> 此命令也适用于所有的Linux发行版(这个命令,在我自己的服务器测试失败)</p><hr><p><code>/etc/issue</code> 和 <code>/etc/redhat-release</code>都是系统安装时默认的发行版本信息，通常安装好系统后文件内容不会发生变化。<br><code>lsb_release -a</code>:FSG（Free Standards Group）组织开发的LSB (Linux Standard Base)标准的一个命令，用来查看linux兼容性的发行版信息。</p><p><strong> 关于<code>lsb_release -a</code>和<code>/etc/issue</code>显示的发行版本号不同，原因只有一个：系统内核手动升级了。</strong></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://blog.slogra.com/post-338.html" target="_blank" rel="noopener">解决-bash: lsb_release: command not found</a><br><a href="http://www.ha97.com/2987.html" target="_blank" rel="noopener">（原创）Linux下查看系统版本号信息的方法</a><br><a href="https://zhidao.baidu.com/question/365547310.html" target="_blank" rel="noopener">Linux中 cat /etc/issue 和lsb_release命令显示的结果会不同么</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2017 年度总结</title>
      <link href="/2018/01/01/2017-summary/"/>
      <url>/2018/01/01/2017-summary/</url>
      
        <content type="html"><![CDATA[<p><strong> 过去的一年发生了很多的事情，有的事情是我所始料未及的 </strong></p><p><strong><span class="under0"> 这些点滴还记忆得异常清晰,其实会想重来一次会怎样,但生活是不能倒带的。不同于code,出现了问题,你不能企盼通过回滚来解决。哪怕我打好了日志、做好了备份,留下了可追忆的线索。</span> </strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>灌溉</title>
      <link href="/2017/12/03/irrigation/"/>
      <url>/2017/12/03/irrigation/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本题的题目和答案依次戳 <a href="https://github.com/iamsail/algorithm-homework/blob/master/question/experimentThree-Four/%E7%81%8C%E6%BA%89.md" target="_blank" rel="noopener">一</a> <a href="https://github.com/iamsail/algorithm-homework/blob/master/answer/experimentThree-Four/%E7%81%8C%E6%BA%89.cpp" target="_blank" rel="noopener">二</a>。</p><hr><h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p>到了旱季农业生产的灌溉就成了一个大问题。为了保证灌溉的顺利，某县政府决定投资为各个村之间建立灌溉管道。</p><p>输入第1行包括一个整数N，表示某县的村庄的数量。（3≤N≤100），第2行-结尾为一个N×N的矩阵,表示每个村庄之间的距离。虽然在理论上，他们是N行，每行由N个用空格分隔的数组成，实际上，他们限制在80个字符，因此，某些行会紧接着另一些行。当然，对角线将会是0，因为不会有线路从第i个村到它本身（任何两个村之间的距离都不大于100000）。</p><p>输出只有一个，为修建灌溉管道将所有村庄相连在一个灌溉系统里所需的最小管道长度。</p><hr><h3 id="题解"><a href="#题解" class="headerlink" title=" 题解 "></a><strong> 题解 </strong></h3><p><strong> 本题是最小生成树问题。 </strong>常用的算法有<code>prim</code>算法和<code>kruskal</code>算法。前者的贪心策略是从起点(S集合)开始不断寻找非起点(V集合)的点,找到距离最近的点,然后将该点移入A集合。<br>本文的代码就是使用的<code>prim</code>算法</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">const</span> <span class="keyword">int</span> maxNumber = <span class="number">105</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> N;</span><br><span class="line"><span class="keyword">int</span> a[maxNumber][maxNumber];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">prim</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> ans = <span class="number">0</span>;</span><br><span class="line">   <span class="comment">//S集合到V集合最短边的权值,最小距离</span></span><br><span class="line">    <span class="keyword">int</span> lowCost[maxNumber] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line">   <span class="comment">//存放顶点,为S集合中距离V集合中j顶点最近的顶点</span></span><br><span class="line">    <span class="keyword">int</span> closest[maxNumber] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line">    <span class="keyword">bool</span> s[maxNumber];<span class="comment">//S集合</span></span><br><span class="line"></span><br><span class="line">    s[<span class="number">1</span>] = <span class="literal">true</span>;</span><br><span class="line">   <span class="comment">//初始化</span></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">2</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        lowCost[i] = a[<span class="number">1</span>][i];</span><br><span class="line">        closest[i] = <span class="number">1</span>; </span><br><span class="line">s[i] = <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; N; i++)&#123;</span><br><span class="line">        <span class="keyword">int</span> min = <span class="number">99999999</span>;</span><br><span class="line">        <span class="keyword">int</span> j = <span class="number">1</span>;</span><br><span class="line">        <span class="comment">//循环除最初起点的所有顶点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= N; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>((!s[k]) &amp;&amp; lowCost[k] &lt; min)&#123;</span><br><span class="line">                min = lowCost[k];</span><br><span class="line">                j = k;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//最优解</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;j&lt;&lt;<span class="string">"  "</span>&lt;&lt;closest[j]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">        s[j] = <span class="literal">true</span>;</span><br><span class="line">        ans += min;</span><br><span class="line">        <span class="comment">//S集合加入新顶点后,更新最小距离和顶点</span></span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> k = <span class="number">2</span>; k &lt;= N; k++)&#123;</span><br><span class="line">            <span class="keyword">if</span>(a[j][k] &lt; lowCost[k] &amp;&amp; (!s[k]))&#123;</span><br><span class="line">                lowCost[k] = a[j][k];</span><br><span class="line">                closest[k] = j;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> ans;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; N;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= N; i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">1</span>; j &lt;= N; j++)&#123;</span><br><span class="line">            <span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; prim() &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试数据"><a href="#测试数据" class="headerlink" title=" 测试数据 "></a><strong> 测试数据 </strong></h3><h4 id="输入"><a href="#输入" class="headerlink" title=" 输入 "></a><strong> 输入 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">4</span><br><span class="line">0 4 9 21</span><br><span class="line">4 0 8 17</span><br><span class="line">9 8 0 16</span><br><span class="line">21 17 16 0</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title=" 输出 "></a><strong> 输出 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">2  1</span><br><span class="line">3  2</span><br><span class="line">4  3</span><br><span class="line">28</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zh.wikipedia.org/wiki/%E6%99%AE%E6%9E%97%E5%A7%86%E7%AE%97%E6%B3%95" target="_blank" rel="noopener">普里姆算法</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
            <tag> 最小生成树 </tag>
            
            <tag> 树·图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最优装载问题</title>
      <link href="/2017/12/03/Optimal-loading/"/>
      <url>/2017/12/03/Optimal-loading/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title=" 问题描述 "></a><strong> 问题描述 </strong></h3><p><img src="/img/algorithm/Optimal-loading/1.png" alt="1.png"></p><hr><h3 id="题解"><a href="#题解" class="headerlink" title=" 题解 "></a><strong> 题解 </strong></h3><p>因为要尽可能多的集装箱上船,且轮船的载重有限, <strong> <span class="under0"> 故贪心策略是:重量轻的优先上船 </span></strong></p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> weight;</span><br><span class="line"><span class="keyword">bool</span> get = <span class="literal">false</span>;<span class="comment">//是否上船 </span></span><br><span class="line"><span class="keyword">int</span> index; <span class="comment">//存下标 </span></span><br><span class="line">&#125;a[<span class="number">2017</span>]; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="comment">//质量轻的排前面</span></span><br><span class="line"><span class="keyword">if</span>(x.weight &lt;= y.weight)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n,c;<span class="comment">//集装箱数量,轮船载重量</span></span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n&gt;&gt;c;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;a[i].weight;</span><br><span class="line">a[i].index = i + <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line">sort(a,a+n,cmp);</span><br><span class="line"><span class="keyword">int</span> sumWeight = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> count = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n &amp;&amp; a[i].weight &lt;= c ;i++)&#123;</span><br><span class="line">a[i].get = <span class="literal">true</span>;</span><br><span class="line">sumWeight += a[i].weight;</span><br><span class="line">count++;</span><br><span class="line">c -= a[i].weight;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"箱子个数  总重量  "</span>&lt;&lt;count&lt;&lt;<span class="string">"  "</span>&lt;&lt;sumWeight&lt;&lt;<span class="built_in">endl</span>; </span><br><span class="line"><span class="comment">// 这个是用来存储下标的数组,打印出标准格式 </span></span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2017</span>] = &#123;<span class="number">0</span>&#125;; </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n &amp;&amp; a[i<span class="number">-1</span>].get ; i++)&#123;</span><br><span class="line">b[a[i<span class="number">-1</span>].index] = <span class="number">1</span>;</span><br><span class="line">&#125; </span><br><span class="line"><span class="comment">//打印标准格式</span></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;=n ; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b[i] == <span class="number">1</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">1</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">0</span>&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">")"</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="测试数据"><a href="#测试数据" class="headerlink" title=" 测试数据 "></a><strong> 测试数据 </strong></h3><h4 id="输入"><a href="#输入" class="headerlink" title=" 输入 "></a><strong> 输入 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">8 400</span><br><span class="line">100 200 50 90 150 50 20 80</span><br></pre></td></tr></table></figure><h4 id="输出"><a href="#输出" class="headerlink" title=" 输出 "></a><strong> 输出 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">箱子个数  总重量  6  390</span><br><span class="line">(1 0 1 1 0 1 1 1 )</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>活动安排问题</title>
      <link href="/2017/12/03/Activity-arrangement/"/>
      <url>/2017/12/03/Activity-arrangement/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title=" 问题描述 "></a><strong> 问题描述 </strong></h3><p>这里我就用截的PPT里的图片简单描述</p><p><img src="/img/algorithm/Activity-arrangement/1.png" alt="1.png"><br><img src="/img/algorithm/Activity-arrangement/2.png" alt="2.png"><br><img src="/img/algorithm/Activity-arrangement/3.png" alt="3.png"><br><img src="/img/algorithm/Activity-arrangement/4.png" alt="4.png"></p><hr><h3 id="题解"><a href="#题解" class="headerlink" title=" 题解 "></a><strong> 题解 </strong></h3><p>上面的图片已经讲述得很清楚了,这里做些总结和补充。<strong> 这里的贪心策略是越早结束的活动越先安排,这样才能尽可能多的安排更多的活动,即上面图片中所谓的最大的相容活动子集合。</strong></p><p><strong> 要先对输入数据排序。</strong> 在下面的参考代码中,我使用的结构体来存储输入数据。<strong> 排序是按照如下规则进行排序的:结束时间越小(早),越靠前。倘若结束时间相同,则开始时间越大(晚),越靠前。因为这样可以节约出更多的时间。</strong></p><p>main函数中的j是记录最近一次被选中的活动。当前活动的开始时间大于等于j活动的结束,即可以被选中。</p><hr><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line"><span class="keyword">int</span> start;</span><br><span class="line"><span class="keyword">int</span> end;</span><br><span class="line"><span class="keyword">bool</span> a;<span class="comment">//记录活动是否被选中 </span></span><br><span class="line">&#125;activity[<span class="number">2017</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(x.end &lt; y.end)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="comment">//x.start &gt; y.start是因为结束时间一样,x.start越大,可以节约出更多的时间 </span></span><br><span class="line"><span class="keyword">if</span>(x.end == y.end &amp;&amp; x.start &gt; y.start)<span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line"><span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span>&gt;&gt;activity[i].start&gt;&gt;activity[i].end;</span><br><span class="line">&#125; </span><br><span class="line">sort(activity,activity+n,cmp);</span><br><span class="line">activity[<span class="number">0</span>].a = <span class="literal">true</span>;<span class="comment">//选中第一个活动 </span></span><br><span class="line"><span class="keyword">int</span> count = <span class="number">1</span>; <span class="comment">//可以选择的活动数量 </span></span><br><span class="line"><span class="keyword">int</span> j = <span class="number">0</span>;<span class="comment">//记录最近一次选中的活动 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(activity[i].start &gt;= activity[j].end)&#123;</span><br><span class="line">activity[i].a = <span class="literal">true</span>;</span><br><span class="line">j = i;</span><br><span class="line">count++;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">activity[i].a = <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"最大活动数量"</span>&lt;&lt;count&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(activity[i].a == <span class="literal">true</span>)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;activity[i].start&lt;&lt;<span class="string">"  "</span>&lt;&lt;activity[i].end&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 贪心 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>法师康的工人</title>
      <link href="/2017/12/02/workman-of-FaShiKang/"/>
      <url>/2017/12/02/workman-of-FaShiKang/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本题的题目和答案依次戳 <a href="https://github.com/iamsail/algorithm-homework/blob/master/question/theFourthWeek/%E6%B3%95%E5%B8%88%E5%BA%B7%E7%9A%84%E5%B7%A5%E4%BA%BA.md" target="_blank" rel="noopener">一</a> <a href="https://github.com/iamsail/algorithm-homework/blob/master/answer/theFourthWeek/%E6%B3%95%E5%B8%88%E5%BA%B7%E7%9A%84%E5%B7%A5%E4%BA%BA.cpp" target="_blank" rel="noopener">二</a>。</p><hr><h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p>三个法师康的工人每天早上6点到工厂开始到三条产品生产线上组装桔子手机。第一个工人在200时刻开始（从6点开始计时，以秒作为单位）在生产线上开始生产，一直到1000时刻。第二个工人，在700时刻开始，在1100时刻结束。第三个工人从1500时刻工作到2100时刻。期间最长至少有一个工人在生产线上工作的连续时间为900秒（从200时刻到1100时刻），而最长的无人生产的连续时间（从生产开始到生产结束）为400时刻（1100时刻到1500时刻）。</p><p>你的任务是用一个程序衡量N个工人在N条产品线上的工作时间列表（1≤N≤5000，以秒为单位）。</p><p>最长的至少有一个工人在工作的时间段</p><p>最长的无人工作的时间段（从有人工作开始计）</p><p>输入第1行为一个整数N，第2-N+1行每行包括两个均小于1000000的非负整数数据，表示其中一个工人的生产开始时间与结束时间。输出为一行，用空格分隔开两个我们所求的数。</p><hr><h3 id="样例输入"><a href="#样例输入" class="headerlink" title=" 样例输入 "></a><strong> 样例输入 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">200 1000</span><br><span class="line">700 1100</span><br><span class="line">1500 2100</span><br></pre></td></tr></table></figure><h3 id="样例输出"><a href="#样例输出" class="headerlink" title=" 样例输出 "></a><strong> 样例输出 </strong></h3><p><code>900 400</code></p><hr><h3 id="题解"><a href="#题解" class="headerlink" title=" 题解 "></a><strong> 题解 </strong></h3><p>本题思路挺简单的。先将工人时间排序,开始时间越小越靠前,开始时间相同则结束时间越小的越靠前。<br>然后遍历的同时,更新求解的值即可。</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;algorithm&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> max(a,b) (a&gt;b)?a:b;</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">node</span>&#123;</span></span><br><span class="line">    <span class="keyword">int</span> left,right;</span><br><span class="line">&#125;a[<span class="number">5050</span>];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">bool</span> <span class="title">cmp</span><span class="params">(node x,node y)</span></span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(x.left == y.left) <span class="keyword">return</span>  x.right &lt; y.right;</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">return</span> x.left &lt; y.left;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i].left&gt;&gt;a[i].right;</span><br><span class="line">    &#125;</span><br><span class="line">    sort(a,a+n,cmp);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> personTime = a[<span class="number">0</span>].right - a[<span class="number">0</span>].left;</span><br><span class="line">    <span class="keyword">int</span> noPersonTime = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> startTime = a[<span class="number">0</span>].left,endTime = a[<span class="number">0</span>].right;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt; n; i++)&#123;</span><br><span class="line">        <span class="keyword">if</span>(a[i].left &gt; endTime)&#123;</span><br><span class="line">            noPersonTime =max(noPersonTime,a[i].left - endTime);</span><br><span class="line">            startTime = a[i].left;</span><br><span class="line">        &#125;</span><br><span class="line">        endTime = max(endTime,a[i].right);</span><br><span class="line">        personTime = max(personTime,endTime - startTime);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">cout</span> &lt;&lt; personTime &lt;&lt;<span class="string">" "</span>&lt;&lt;noPersonTime&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 水题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>沙子的质量</title>
      <link href="/2017/12/02/the-weight-of-sand/"/>
      <url>/2017/12/02/the-weight-of-sand/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p>本题题目也放在了github上,<a href="https://github.com/iamsail/algorithm-homework/blob/master/question/theThirdWeek/%E6%B2%99%E5%AD%90%E7%9A%84%E8%B4%A8%E9%87%8F.md" target="_blank" rel="noopener">戳这儿</a></p><h4 id="描述"><a href="#描述" class="headerlink" title=" 描述 "></a><strong> 描述 </strong></h4><p>设有N堆沙子排成一排，其编号为1，2，3，…，N（N&lt; =300）。每堆沙子有一定的数量，可以用一个整数来描述，现在要将这N堆沙子合并成为一堆，每次只能合并相邻的两堆，合并的代价为这两堆沙子的数量之和，合并后与这两堆沙子相邻的沙子将和新堆相邻，合并时由于选择的顺序不同，合并的总代价也不相同，如有4堆沙子分别为 1 3 5 2 我们可以先合并1、2堆，代价为4，得到4 5 2 又合并 1，2堆，代价为9，得到9 2 ，再合并得到11，总代价为4+9+11=24，如果第二步是先合并2，3堆，则代价为7，得到4 7，最后一次合并代价为11，总代价为4+7+11=22；</p><p>问题是：找出一种合理的方法，使总的代价最小。输出最小代价。</p><hr><h4 id="输入格式："><a href="#输入格式：" class="headerlink" title=" 输入格式："></a><strong> 输入格式：</strong></h4><p>第一行一个数N表示沙子的堆数N。 第二行N个数，表示每堆沙子的质量。 &lt; =1000</p><h4 id="输出格式："><a href="#输出格式：" class="headerlink" title=" 输出格式："></a><strong> 输出格式：</strong></h4><p>合并的最小代价</p><hr><h4 id="样例输入"><a href="#样例输入" class="headerlink" title=" 样例输入 "></a><strong> 样例输入 </strong></h4><p>4 1 3 5 2</p><h4 id="样例输出"><a href="#样例输出" class="headerlink" title=" 样例输出 "></a><strong> 样例输出 </strong></h4><p>22</p><hr><h3 id="题解"><a href="#题解" class="headerlink" title=" 题解 "></a><strong> 题解 </strong></h3><p>刚拿到题的时候,当作了贪心写,结果可想而知。</p><p>这里有篇文章讲解了为什么不是贪心,<a href="http://blog.csdn.net/ly59782/article/details/52023732" target="_blank" rel="noopener">戳这儿</a></p><p>用f(i,j)表示将 i 到 j 一段合并所需要的最小代价，枚举中间的断点K转移</p><p>sum[i]表示前i个沙子的质量和，那么(l,r)的质量就是sum[r]-sum[l-1]</p><p>即<code>f(i,j)=min{f(i,k)+f(k+1,j)}</code></p><p>用记忆化搜索(备忘录方法)写起来会比较方便</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;cstring&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf 9999999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 305</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"><span class="keyword">int</span> sand[MAX],sum[MAX],f[MAX][MAX];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">dp</span><span class="params">(<span class="keyword">int</span> l,<span class="keyword">int</span> r)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(f[l][r] != <span class="number">-1</span>)<span class="keyword">return</span> f[l][r];</span><br><span class="line"><span class="keyword">if</span>(l == r)<span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> ans = inf;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = l; i &lt; r; i++)&#123;</span><br><span class="line">ans = min(ans,dp(l,i) + dp(i+<span class="number">1</span>,r));</span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">return</span> f[l][r] = (ans + sum[r] - sum[l <span class="number">-1</span>]);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="built_in">memset</span>(f,<span class="number">-1</span>,<span class="keyword">sizeof</span>(f));</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; sand[i];<span class="number">4</span></span><br><span class="line">sum[i] = sum[i<span class="number">-1</span>] + sand[i];</span><br><span class="line">&#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;dp(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/ly59782/article/details/52023732" target="_blank" rel="noopener">noip1995石子合并-dp</a><br><a href="http://hzwer.com/575.html" target="_blank" rel="noopener">【tyvj1055】沙子合并</a><br><a href="https://www.zhihu.com/question/32096465" target="_blank" rel="noopener">动态规划和贪心的本质区别是什么</a><br><a href="http://blog.csdn.net/yelbosh/article/details/7649717" target="_blank" rel="noopener">贪心法和动态规划法的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最大子段和</title>
      <link href="/2017/12/01/maximum-subsegment/"/>
      <url>/2017/12/01/maximum-subsegment/</url>
      
        <content type="html"><![CDATA[<h3 id="问题介绍"><a href="#问题介绍" class="headerlink" title=" 问题介绍 "></a><strong> 问题介绍 </strong></h3><p>最大子段和问题又叫最大子数列问题。该问题的目标是在数列的一维方向找到一个连续的子数列，使该子数列的和最大。例如，对一个数列<code>−2, 1, −3, 4, −1, 2, 1, −5, 4，</code>其连续子数列中和最大的是<code>4, −1, 2, 1,</code>其和为6。</p><p>该问题最初由布朗大学的<code>Ulf Grenander</code>教授于1977年提出，当初他为了展示数字图像中一个简单的最大似然估计模型。不久之后卡内基梅隆大学的<code>Jay Kadane</code>提出了该问题的线性算法。</p><hr><h3 id="Kadane算法"><a href="#Kadane算法" class="headerlink" title=" Kadane算法 "></a><strong> Kadane算法 </strong></h3><p><code>Kadane算法</code>扫描一次整个数列的所有数值，在每一个扫描点计算以该点数值为结束点的子数列的最大和（ <strong> 正数和 </strong>）。该子数列由两部分组成：以前一个位置为结束点的最大子数列、该位置的数值。因为该算法用到了“最佳子结构”（以每个位置为终点的最大子数列都是基于其前一位置的最大子数列计算得出）， <strong> 该算法可看成动态规划的一个例子。</strong></p><hr><p>将长度为n的目标序列存储在一个数组中,设为<code>a</code>。设数组b为如下</p><p><img src="/img/algorithm/maximum-subsegment/1.png" alt="1.png"></p><p>由b[j]的定义易知,当b[j-1] &gt; 0时 b[j] = b[j-1] + a[j],否则b[j] = a[j]。由此可得计算b[j]的动态规划递归方程</p><p><code>b[j] = max{b[j - 1] + a[j],a[j]}, 1 &lt;= j &lt;= n</code></p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 1000 </span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sum</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> n)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> result = <span class="number">0</span>,b = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">int</span> begin = <span class="number">0</span>,end = <span class="number">0</span>;<span class="comment">//记录最大子段的起始，终止下标 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n;i++)&#123;</span><br><span class="line"><span class="keyword">if</span>(b &gt; <span class="number">0</span>)&#123;</span><br><span class="line">b += a[i];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">b = a[i];</span><br><span class="line">begin = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(b &gt; result)&#123;</span><br><span class="line">result = b;</span><br><span class="line">end = i;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出数组最大字段 </span></span><br><span class="line"> <span class="keyword">for</span>(<span class="keyword">int</span> i = begin; i &lt;= end; i++)&#123;</span><br><span class="line"> <span class="built_in">cout</span>&lt;&lt;a[i]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"> &#125;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;result&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[MAX],n;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;<span class="comment">//数组元素个数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i&lt;n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">sum(a,n);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E5%A4%A7%E5%AD%90%E6%95%B0%E5%88%97%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">最大子数列问题</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>最长公共子序列(LCS)</title>
      <link href="/2017/12/01/The-longest-common-subsequence/"/>
      <url>/2017/12/01/The-longest-common-subsequence/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>这学期算法课的某次计蒜客留的作业,有一题便是求<a href="https://github.com/iamsail/algorithm-homework/blob/master/question/theThirdWeek/%E6%9C%80%E9%95%BF%E5%85%B1%E5%85%AC%E5%AD%90%E4%B8%B2.md" target="_blank" rel="noopener">最长公共子序列</a>。<br>不得不吐槽的是,放题目的人居然取的题名是 <code>最长共公子串</code>。</p><p><span class="under0"> <strong> 子序列和子串的区别是子串是连续的,而子序列的元素可以是间隔开的。无论子串还是子序列各个元素中的相对次序还是和原符号串一样的。 </strong></span></p><p>LCS的定义:一个数列 S，如果分别是两个或多个已知数列的子序列，且是所有符合此条件序列中最长的，则 S称为已知序列的最长公共子序列。</p><hr><p>简单起见,本文讨论的是两个序列的最长公共子序列。也是一个dp水题,根据最优子结构性质有以下的递归关系</p><p><img src="/img/algorithm/The-longest-common-subsequence/1.png" alt="1.png"></p><p>上图最后一行是<code>max{c[i-1][j],c[i][j-1]}  i,j&gt;0;xi != yi;</code>  </p><p>设有两个序列X = {X1,X2,X3….,Xm} , Y ={Y1,Y2,Y3….,Ym};c[i][j]记录Xi和Yi的最长公共子序列长度,s[i][j]记录c[i][j]的值是由哪一个子问题的解得到的(<strong> 比如把c[i-1][j-1]] + 1记作1,c[i-1][j]]记作2,c[i][j-1]]记作3 )</strong>。</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> MAX 2017</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> c[MAX][MAX],s[MAX][MAX];</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">maxLength</span><span class="params">(<span class="built_in">string</span> a,<span class="built_in">string</span> b,<span class="keyword">int</span> aLength,<span class="keyword">int</span> bLength)</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i,j;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= aLength; i++)&#123;c[i][<span class="number">0</span>]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>;i &lt;= bLength; i++)&#123;c[<span class="number">0</span>][i]=<span class="number">0</span>;&#125;</span><br><span class="line"><span class="keyword">for</span>(i = <span class="number">1</span>; i &lt;= aLength; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(j =<span class="number">1</span>; j &lt;= bLength;j++)&#123;</span><br><span class="line"><span class="comment">//这里要-1是因为,字符串的第一个字符是存储在0下标对应的位置的 </span></span><br><span class="line"><span class="keyword">if</span>(a[i<span class="number">-1</span>] == b[j - <span class="number">1</span>])&#123;  </span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j<span class="number">-1</span>] + <span class="number">1</span>;</span><br><span class="line">s[i][j] = <span class="number">1</span>;</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(c[i<span class="number">-1</span>][j] &gt;= c[i][j<span class="number">-1</span>])&#123;</span><br><span class="line">c[i][j] = c[i<span class="number">-1</span>][j];</span><br><span class="line">s[i][j] = <span class="number">2</span>;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">c[i][j] = c[i][j<span class="number">-1</span>];</span><br><span class="line">s[i][j] = <span class="number">3</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> c[aLength][bLength];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">LCS</span><span class="params">(<span class="keyword">int</span> i,<span class="keyword">int</span> j,<span class="built_in">string</span> a)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i == <span class="number">0</span> || j == <span class="number">0</span>)<span class="keyword">return</span>;</span><br><span class="line"><span class="keyword">if</span>(s[i][j] == <span class="number">1</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j<span class="number">-1</span>,a);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;a[i - <span class="number">1</span>];</span><br><span class="line">&#125;<span class="keyword">else</span> <span class="keyword">if</span>(s[i][j] == <span class="number">2</span>)&#123;</span><br><span class="line">LCS(i<span class="number">-1</span>,j,a);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">LCS(i,j<span class="number">-1</span>,a);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">string</span> a,b;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a &gt;&gt;b;</span><br><span class="line"><span class="keyword">int</span> aLength = a.length(),bLength = b.length();</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;maxLength(a,b,aLength,bLength)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">LCS(aLength,bLength,a);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>矩阵连乘</title>
      <link href="/2017/12/01/Matrix-continually-multiply/"/>
      <url>/2017/12/01/Matrix-continually-multiply/</url>
      
        <content type="html"><![CDATA[<h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p>给定n个矩阵｛A1,A2,…,An｝，其中Ai与Ai+1是可乘的，i=1,2 ,…,n-1。如何确定计算矩阵连乘积的计算次序，使得依此次序计算矩阵连乘积需要的数乘次数最少</p><hr><h3 id="动态方程"><a href="#动态方程" class="headerlink" title=" 动态方程 "></a><strong> 动态方程 </strong></h3><p><img src="/img/algorithm/Matrix-continually-multiply/1.gif" alt="1.gif"></p><hr><h3 id="讲解"><a href="#讲解" class="headerlink" title=" 讲解 "></a><strong> 讲解 </strong></h3><p><img src="/img/algorithm/Matrix-continually-multiply/1.jpg" alt="1.jpg"><br><img src="/img/algorithm/Matrix-continually-multiply/2.jpg" alt="2.jpg"><br><img src="/img/algorithm/Matrix-continually-multiply/5.jpg" alt="3.jpg"><br><img src="/img/algorithm/Matrix-continually-multiply/4.jpg" alt="4.jpg"></p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> inf  99999999</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> X(x) x,x,x,x,x,x,x</span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">matrixChain</span><span class="params">(<span class="keyword">int</span> p[],<span class="keyword">int</span> n,<span class="keyword">int</span> m[][<span class="number">7</span>],<span class="keyword">int</span> s[][<span class="number">7</span>])</span></span>&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n;i++)&#123;</span><br><span class="line">m[i][i] = <span class="number">0</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> r = <span class="number">2</span>; r &lt;= n; r++)&#123;<span class="comment">//r为连乘矩阵的个数 </span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n - r + <span class="number">1</span>; i++)&#123; <span class="comment">//i表示连乘矩阵中的第一个</span></span><br><span class="line"><span class="keyword">int</span> j = i + r - <span class="number">1</span>;   <span class="comment">//j表示连乘矩阵中的最后一个</span></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> k = i; k &lt; j; k++)&#123;</span><br><span class="line"><span class="keyword">int</span> temp = m[i][k] + m[k+<span class="number">1</span>][j] + p[i<span class="number">-1</span>]*p[k]*p[j];</span><br><span class="line"><span class="keyword">if</span>(temp &lt; m[i][j]) &#123;</span><br><span class="line">m[i][j] = temp;</span><br><span class="line">s[i][j] = k; </span><br><span class="line">&#125; </span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceBack</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j,<span class="keyword">int</span> s[][<span class="number">7</span>])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)<span class="keyword">return</span>;</span><br><span class="line">traceBack(i,s[i][j],s); </span><br><span class="line">traceBack(s[i][j] + <span class="number">1</span>,j,s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"Multiply A "</span>&lt;&lt;i&lt;&lt;<span class="string">","</span>&lt;&lt;s[i][j];</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">" and A "</span>&lt;&lt;(s[i][j] + <span class="number">1</span>)&lt;&lt;<span class="string">","</span>&lt;&lt;j&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">traceBackMore</span><span class="params">(<span class="keyword">int</span> i, <span class="keyword">int</span> j,<span class="keyword">int</span> s[][<span class="number">7</span>])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(i==j)&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"A"</span>&lt;&lt;i;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"("</span>;</span><br><span class="line">traceBackMore(i,s[i][j],s); </span><br><span class="line">traceBackMore(s[i][j] + <span class="number">1</span>,j,s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">")"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> p[] = &#123;<span class="number">30</span>,<span class="number">35</span>,<span class="number">15</span>,<span class="number">5</span>,<span class="number">10</span>,<span class="number">20</span>,<span class="number">25</span>&#125;; <span class="comment">// 7个P值,6个矩阵 ,n为6 </span></span><br><span class="line"><span class="keyword">int</span> n = <span class="number">6</span>;</span><br><span class="line"><span class="keyword">int</span> m[<span class="number">7</span>][<span class="number">7</span>] = &#123;X(X(inf))&#125;;</span><br><span class="line"><span class="keyword">int</span> s[<span class="number">7</span>][<span class="number">7</span>];</span><br><span class="line"></span><br><span class="line">matrixChain(p,n,m,s); </span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">traceBack(<span class="number">1</span>,n,s);</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">traceBackMore(<span class="number">1</span>,n,s);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/Jason-Damon/p/3231547.html" target="_blank" rel="noopener">矩阵连乘 动态规划</a><br><a href="http://blog.csdn.net/tmljs1988/article/details/6925631" target="_blank" rel="noopener">矩阵连乘 动态规划 详解</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 动态规划 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++函数中数组参数传递</title>
      <link href="/2017/11/30/function-array-parameters-passed-of-C++/"/>
      <url>/2017/11/30/function-array-parameters-passed-of-C++/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>因为只是用C++写写算法水题,代码行数鲜有破百的。</p><p>很多时候函数之间需要使用到某一个数组时,都偷懒写成全局了。一是因为代码量少,尚还不足以引起混乱,二则是因为有的时候题目测试数据比较大,数组也就开得比较大,可能会导致爆栈(new 是懒得new了)。参考我的<a href="http://www.sail.name/2017/11/11/memory-allocation-of-C++/">C++内存分配管理</a>。</p><p>本文对C++中数组参数的传递做一个记录。</p><hr><h3 id="一维数组"><a href="#一维数组" class="headerlink" title=" 一维数组 "></a><strong> 一维数组 </strong></h3><p>一维数组比较方便。有数组和指针两种方式,且数组不需要指定大小。</p><p>这里就用一段测试代码展示下</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> *a,<span class="keyword">int</span> b[])</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; a[<span class="number">2</span>] &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; *a &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt; *a + <span class="number">2</span> &lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"==========="</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b[<span class="number">1</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*b + <span class="number">2</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*(b + <span class="number">2</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123;<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> b[] = &#123;<span class="number">9</span>,<span class="number">8</span>,<span class="number">7</span>,<span class="number">6</span>&#125;;</span><br><span class="line">test(a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 输出 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">3</span><br><span class="line">1</span><br><span class="line">3</span><br><span class="line">===========</span><br><span class="line">0x24fe30</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">11</span><br><span class="line">7</span><br></pre></td></tr></table></figure><p>在大多数情况下,C++和C一样,也将数组名视为指针。C++将数组名解释为其第一个元素的地址</p><p><code>cookies == &amp;cookies[0]</code></p><p>当然也不总是这样的。具体可以看《C++Primer Plus》。最近比较忙,就不展开了。</p><hr><h3 id="二维数组"><a href="#二维数组" class="headerlink" title=" 二维数组 "></a><strong> 二维数组 </strong></h3><p>同样也是数组和指针两种方式。</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">test</span><span class="params">(<span class="keyword">int</span> **a,<span class="keyword">int</span> b[][<span class="number">2</span>])</span></span>&#123;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*((<span class="keyword">int</span>*)a + <span class="number">3</span>*<span class="number">1</span> + <span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*((<span class="keyword">int</span>*)a + <span class="number">3</span>*<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*((<span class="keyword">int</span>*)a)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="string">"==========="</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b[<span class="number">0</span>][<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;b[<span class="number">0</span>]&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*b&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;*(b+<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">&#125; </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">3</span>][<span class="number">3</span>];</span><br><span class="line"><span class="keyword">int</span> b[<span class="number">2</span>][<span class="number">2</span>] = &#123;&#123;<span class="number">1</span>,<span class="number">2</span>&#125;,&#123;<span class="number">3</span>,<span class="number">4</span>&#125;&#125;;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; <span class="number">3</span>; i++)&#123;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; <span class="number">3</span>; j++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i][j];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">test((<span class="keyword">int</span>**)a,b);</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><strong> 输入 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">1 2 3</span><br><span class="line">4 5 6</span><br><span class="line">7 8 9</span><br></pre></td></tr></table></figure><p><strong> 输出 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">5</span><br><span class="line">4</span><br><span class="line">1</span><br><span class="line">===========</span><br><span class="line">1</span><br><span class="line">0x24fe30</span><br><span class="line">0x24fe30</span><br><span class="line">0x24fe38</span><br></pre></td></tr></table></figure><p>将二维数组当作参数的时候，必须指明所有维数大小或者省略第一维的，但是不能省略第二维或者更高维的大小。<br>也就是在上面的代码中,<code>test(int **a,int b[2][2])</code>也是可以的。</p><p>这是由编译器原理限制的<br><strong> 对于数组 int b[m][n]; 如果要取b[i][j]的值(i&gt;=0 &amp;&amp; i&lt;m &amp;&amp; 0&lt;=j &amp;&amp; j &lt; n)，编译器是这样寻址的，它的地址为：<code>b + i*n + j</code>;</strong></p><p>从以上可以看出，如果我们省略了第二维或者更高维的大小，编译器将不知道如何正确的寻址。</p><p>而在使用指针时,需要按照如下的方式进行调用</p><p><code>*((int*)b + n*i + j);</code></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/hanpingliang/article/details/3380351" target="_blank" rel="noopener">C++: 二维数组作函数参数</a><br><a href="http://blog.csdn.net/liyongbao1988/article/details/7463481" target="_blank" rel="noopener">C/C++如何传递二维数组？</a><br><a href="http://blog.csdn.net/sergery/article/details/8046665#reply" target="_blank" rel="noopener">C++,二维数组与指针,二维数组名是不是首地址?</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>快速排序</title>
      <link href="/2017/11/30/quick-sort/"/>
      <url>/2017/11/30/quick-sort/</url>
      
        <content type="html"><![CDATA[<p>快速排序（英语：Quicksort），又称划分交换排序（partition-exchange sort），一种排序算法，最早由东尼·霍尔提出。在平均状况下，排序 n个项目要 O(nlogn)}（大O符号）次比较。在最坏状况下则需要O(n^{2})次比较，但这种状况并不常见。事实上，快速排序通常明显比其他 O(nlogn)算法更快，因为它的内部循环（inner loop）可以在大部分的架构上很有效率地被实现出来。</p><p>该算法是不稳定的排序算法。</p><hr><h3 id="基本思想"><a href="#基本思想" class="headerlink" title=" 基本思想 "></a><strong> 基本思想 </strong></h3><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。</p><p>步骤为：<br>1.从数列中挑出一个元素，称为”基准”（pivot），<br>2.重新排序数列，所有比基准值小的元素摆放在基准前面，所有比基准值大的元素摆在基准后面（相同的数可以到任何一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。<br>3.递归地（recursively）把小于基准值元素的子数列和大于基准值元素的子数列排序。<br>递归到最底部时，数列的大小是零或一，也就是已经排序好了。</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">50</span>];</span><br><span class="line"><span class="keyword">int</span> n;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">quickSort</span><span class="params">(<span class="keyword">int</span> left,<span class="keyword">int</span> right)</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &gt; right)<span class="keyword">return</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> temp = a[left];<span class="comment">//基准数 </span></span><br><span class="line"><span class="keyword">int</span> i = left, j = right;</span><br><span class="line"><span class="keyword">while</span>(i != j)&#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">//注意查找顺序，先从右向左查找 </span></span><br><span class="line"><span class="keyword">while</span>(a[j] &gt;= temp &amp;&amp; i &lt; j)&#123;</span><br><span class="line">j--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//从左向右查找 </span></span><br><span class="line"><span class="keyword">while</span>(a[i] &lt;= temp &amp;&amp; i &lt; j)&#123;</span><br><span class="line">i++;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>( i &lt; j)&#123;</span><br><span class="line"><span class="keyword">int</span> t = <span class="number">0</span>;</span><br><span class="line">t = a[i];</span><br><span class="line">a[i] = a[j];</span><br><span class="line">a[j] = t;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 基准数归位 </span></span><br><span class="line">a[left] = a[i];</span><br><span class="line">a[i] = temp;</span><br><span class="line"></span><br><span class="line">quickSort(left,i<span class="number">-1</span>);</span><br><span class="line">quickSort(i+<span class="number">1</span>,right);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line">quickSort(<span class="number">1</span>,n);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">1</span>; i &lt;= n; i++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt;<span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>; </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://www.cnblogs.com/codingmylife/archive/2012/10/21/2732980.html" target="_blank" rel="noopener">稳定排序和不稳定排序</a><br><a href="https://zh.wikipedia.org/wiki/%E5%BF%AB%E9%80%9F%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">快速排序</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>归并排序</title>
      <link href="/2017/11/29/Merge-sort/"/>
      <url>/2017/11/29/Merge-sort/</url>
      
        <content type="html"><![CDATA[<p>归并排序（英语：Merge sort，或mergesort），是创建在归并操作上的一种有效的排序算法，效率为  O(nlog n) （大O符号）。1945年由约翰·冯·诺伊曼首次提出。该算法是采用分治法（Divide and Conquer）的一个非常典型的应用，且各层分治递归可以同时进行。</p><p>归并操作（merge），也叫归并算法，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。该算法是一个稳定的排序算法。</p><p>基本思想:将待排序的元素分成大小大致相同的两个子集合,分别对两个子集合进行排序,最终将排好序的子集合合并成所要求的排好序的集合。</p><hr><h3 id="演示"><a href="#演示" class="headerlink" title=" 演示 "></a><strong> 演示 </strong></h3><p>一个归并排序的例子：对一个随机点的链表进行排序</p><p><img src="/img/algorithm/Merge_sort/1.gif" alt="1.gif"></p><p>归并排序算法示意图</p><p><img src="/img/algorithm/Merge_sort/2.png" alt="2.png"></p><hr><h3 id="迭代法"><a href="#迭代法" class="headerlink" title=" 迭代法 "></a><strong> 迭代法 </strong></h3><p>1.申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列<br>2.设定两个指针，最初位置分别为两个已经排序序列的起始位置<br>3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置<br>4.重复步骤3直到某一指针到达序列尾<br>5.将另一序列剩下的所有元素直接复制到合并序列尾</p><h3 id="递归法"><a href="#递归法" class="headerlink" title=" 递归法 "></a><strong> 递归法 </strong></h3><p>1.原理如下（假设序列共有 n 个元素）：<br>2.将序列每相邻两个数字进行归并操作，形成 <code>ceil(n/2)</code>个序列，排序后每个序列包含n/2个元素<br>3.若此时序列数不是1个则将上述序列再次归并，形成 <code>ceil(n/4)</code>个序列，每个序列包含n/4个元素<br>4.重复步骤2，直到所有元素排序完毕，即序列数为1</p><hr><h3 id="Code"><a href="#Code" class="headerlink" title=" Code "></a><strong> Code </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt; </span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="keyword">int</span> a[<span class="number">20</span>] = &#123;<span class="number">0</span>&#125;;</span><br><span class="line"><span class="keyword">int</span> n,length;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">merge</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> middle,<span class="keyword">int</span> right,<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line"><span class="keyword">int</span> i = left, j = middle + <span class="number">1</span>;</span><br><span class="line"><span class="keyword">int</span> endOne = middle, endTow = right;</span><br><span class="line"><span class="keyword">int</span> index = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">while</span>(i &lt;= endOne &amp;&amp; j &lt;= endTow)&#123;</span><br><span class="line"><span class="keyword">if</span>(a[i] &lt;= a[j])&#123;</span><br><span class="line">temp[index++] = a[i++];</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">temp[index++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(i &lt;= endOne)&#123;</span><br><span class="line">temp[index++] = a[i++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">while</span>(j &lt;= endTow)&#123;</span><br><span class="line">temp[index++] = a[j++];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; index;i++)&#123;</span><br><span class="line">a[left+i] = temp[i];</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">sort</span><span class="params">(<span class="keyword">int</span> a[],<span class="keyword">int</span> left,<span class="keyword">int</span> right,<span class="keyword">int</span> temp[])</span></span>&#123;</span><br><span class="line"><span class="keyword">if</span>(left &lt; right)&#123;</span><br><span class="line"><span class="keyword">int</span> middle = (left + right) / <span class="number">2</span>;</span><br><span class="line">sort(a,left,middle,temp);</span><br><span class="line">sort(a,middle + <span class="number">1</span>,right,temp);</span><br><span class="line">merge(a,left,middle,right,temp);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; n;<span class="comment">//待排序元素个数</span></span><br><span class="line"><span class="keyword">int</span> temp[n];</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cin</span> &gt;&gt; a[i];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">sort(a,<span class="number">0</span>,n<span class="number">-1</span>,temp);</span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; n; i++)&#123;</span><br><span class="line"><span class="built_in">cout</span> &lt;&lt; a[i] &lt;&lt; <span class="string">" "</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zh.wikipedia.org/wiki/%E5%BD%92%E5%B9%B6%E6%8E%92%E5%BA%8F" target="_blank" rel="noopener">归并排序</a><br><a href="http://blog.csdn.net/yuehailin/article/details/68961304" target="_blank" rel="noopener">白话经典算法系列之五 归并排序的实现（讲的真好）</a><br><a href="http://blog.csdn.net/left_la/article/details/8656953" target="_blank" rel="noopener">【排序算法】归并排序(C++实现)</a></p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 分治 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>百度面经(大三上)</title>
      <link href="/2017/11/28/the-interview-of-Baidu/"/>
      <url>/2017/11/28/the-interview-of-Baidu/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文首发于工作室博客。这段时间也挺忙的,今天才搬到自己博客来。</p><p>之前大二的时候面试了百度和腾讯,当时百度止步于最后一轮技术面,腾讯二面说希望收大三实习后能够留下来的同学。<strong>总之就是都挂了</strong>。加之准备研究web之外的其他领域,也没有面试实习的打算。十月下旬意外收到了百度hr的电话,就安排了面试。</p><p>大二面试过后写了两篇博客,链接贴在这儿。</p><p><a href="http://www.sail.name/2017/03/25/the-spring-in-2017/">这是二零一七年的春天</a><br><a href="http://www.sail.name/2017/07/20/an-FE-interview-of-tencent-yuewen-in-my-sophomore-class/">腾讯阅文前端面试记录(大二)</a></p><hr><h3 id="一面-63min"><a href="#一面-63min" class="headerlink" title=" 一面(63min) "></a><strong> 一面(63min) </strong></h3><ul><li>盒子模型</li><li>垂直居中(display:table-cell)有哪些解决方案</li><li>清除浮动，几种方案</li><li>flex</li><li>BFC(父子元素嵌套,对谁设置BFC),BFC原理，如何设置</li><li>响应式开发 （媒体查询,vw,vh,rem,flex）</li><li>HTML5用过吗<ul><li>这里我说了<code>websocket</code>，然后聊了几个相关的项目</li><li>一些语义化标签</li><li>localstorage，这里结合维护的<a href="http://wander.leanote.com/" target="_blank" rel="noopener">嘉明</a>的毕业留言板项目聊了聊</li></ul></li><li>闭包<ul><li>这里做了一道题,题目我忘了</li></ul></li><li>闭包应用场景    </li><li>然后这里就讲到了jq源码，以及jq写插件</li><li>jq中的$符号,fn,原型链</li><li>jq源码看过吗<ul><li>然后就开始聊源码,这里聊了挺久的,因为我自己封装了一些简单jq函数，就被问到如何同时引入jq，然后又用了自己封装的,如何解决</li></ul></li><li>跟着聊了下模块化的一些解决方案</li><li>模块化聊完,很自然的就聊到了ES6。<ul><li>还问了提升的问题,var 和 let的不同，结合js运行机制解释</li></ul></li><li>用过哪些数据库</li><li>数据库的设计</li><li>php中的mysql,mysqli,pdo库,查询api</li><li>php中的两种引入文件方案,以及有什么不同(include , require)</li><li>用过Laravel吗</li><li>thinkphp源码</li><li>远程线上coding,两个题,一个是写一个快排,一个是用PHP和JS写单例模式</li></ul><p><strong> 但是那天面试官网不好,无奈之下,让我把代码将给他听 </strong></p><ul><li>快排代码,快排的改进,快排什么时候最糟糕,快排的思想</li><li>然后讲了下单例模式的实现</li><li>接着聊到了this的指向问题,以及new的过程 (这儿感觉叙述得不是清楚，一开始他给我叙述的题目,都理解错了,大脑还停在设计模式,后来又交流了下,才明白了面试官想问什么)</li><li>跨域<ul><li>这里讲了几种解决方案</li></ul></li></ul><ul><li>聊了聊工作室团队合作的问题,我说我们的项目很多都是一个人写前端,一个人后端，面试官还挺惊讶的,说他们当初都是两三个人负责前端，两三个负责后端，每个人负责一些模块。然后说这样岂不是几乎用不到git进行团队合作了</li><li>然后还聊了些其他，一些学习方面的问题，包括各自的工作室交流。说我学的东西挺多的，接下来要注意多深入到源码级别的,再多读些源码。</li><li>面试时间持续得较长,有的问题可能被我遗忘了</li></ul><p>这次百度一面是唯一一次面试官既没让我自我介绍,也没问我有什么想问的问题</p><p><strong> 然后面试管告诉我二面面试官今天请假了,让HR再和我约时间二面 </strong></p><hr><h3 id="二面-42min"><a href="#二面-42min" class="headerlink" title=" 二面(42min) "></a><strong> 二面(42min) </strong></h3><ul><li>用过哪些数据库</li><li>一般用什么数据库做项目</li><li>讲见数据库的引擎</li><li>数据库的索引,以及优、缺点,为什么</li><li>聊项目(简历上的,github上的)</li></ul><p><strong> 二面的大部分时间都聊项目了,聊了4个项目左右的样子,因为每个人项目不一样,聊得比较细节,就不写出来了 </strong></p><ul><li>遇到了什么难忘的bug,怎么解决的</li><li>还有什么想问的吗<ul><li>如果二面能够通过的,还有三面吗(对,总共有三轮面试)</li><li>问了下react,lisence的问题</li></ul></li></ul><p>二面是那天下午4点10分结束的,4点20分收到了hr的邮件,说通过了二面。<br>接着就约了5点进行第三轮面试。<br>过了五分钟,收到邮件,说三面面试官有一个会议,然后又再约了下面试时间。</p><hr><h3 id="三面-70min"><a href="#三面-70min" class="headerlink" title=" 三面(70min) "></a><strong> 三面(70min) </strong></h3><ul><li>自我介绍</li><li>聊了简历上的一个项目,面试官让我把这个项目完整的讲下,从项目的idea产生到最后部署<ul><li>这儿就讲了很久,一边讲的时候,面试官会给一些分析、建议</li></ul></li><li>项目遇到的bug，怎么解决的</li><li>然后让我再审视下这个项目,讲讲觉得有哪有些地方是做得不够好的</li><li>接着面试官,又问,如果重新做一次项目,之前存在的问题,会如何改进</li><li>讲讲一个项目,开发的完整流程<ul><li>这里我说漏了测试(测试也很重要,这点我做得很糟糕)</li></ul></li><li>团队合作开发存在的问题怎么解决的,遇到和他人意见冲突时,怎么做的<ul><li>给我提了一些建议</li><li>说公司团队内部,一个对内的小项目,团队内部可能会先讨论一周,具体到编码规范,模块,函数名,这些都要大家事先约定好,还要做code review</li></ul></li><li>介绍你们工作室</li><li>怎么带团队的</li><li>兴趣爱好,技术的以及非技术的</li><li>家在哪儿</li><li>能够接受加班吗</li><li>怎么看待加班这件事</li><li>你的技术规划,职业规划</li><li>说说自己的优、缺点</li><li>对技术发展怎么看的</li><li>除了web以外,还有学习什么吗</li><li>部门技术栈和你预期可能不大一样，怎么看</li><li>给你介绍下我们部门</li><li>实习时间</li></ul><p>三面面了很久。几位面试官都很nice。第二天HR通知过了,给了offer。</p><hr><p><strong> 本来是没准备这么快出去实习的。面试前几个月,自己做的开发都比较少,看的书反而多些,是希望自己能够更加深入。</strong></p><p><strong> 计划赶不上变化。继续加油！</strong></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CMD命令</title>
      <link href="/2017/11/28/cmd-command/"/>
      <url>/2017/11/28/cmd-command/</url>
      
        <content type="html"><![CDATA[<h3 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h3><p>本文是对自己用到的不熟悉的CMD命令的整理。虽然用到CMD的时候很少,毕竟windows下有cmder这种利器,大部分开发都在linux。</p><hr><h3 id="删除文件夹"><a href="#删除文件夹" class="headerlink" title=" 删除文件夹 "></a><strong> 删除文件夹 </strong></h3><p><code>rd directoryName</code></p><p><code>rd</code>的另外一个写法是<code>rmdir</code>,源自ReMakeDirectory。它支持带路径的文件夹名，例如：<code>rd d:\test</code>。</p><p>倘若删除目录下有其他文件,即被删除目录为非空目录,需要加上<code>/s</code>参数,如下</p><p><code>rd /s test</code></p><p>删除目录时,系统会询问 是否确认(Y/N)?</p><p>加上<code>/q</code>【quiet】(安静模式)参数,即可。如下</p><p><code>rd /q /s test</code></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.jb51.net/article/18985.htm" target="_blank" rel="noopener">cmd rd命令 删除文件夹</a></p>]]></content>
      
      
      <categories>
          
          <category> CMD </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>C++内存分配管理</title>
      <link href="/2017/11/11/memory-allocation-of-C++/"/>
      <url>/2017/11/11/memory-allocation-of-C++/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h2><p>最近在撸一道<code>Dijkstra</code>算法题目的时候犯了一个这样的错误。</p><p>我创建一个比较大的数组写在main函数中,整个程序就会退出,而如果放在全局就可以正常运行。</p><p>了解过后,原来涉及到C++内存管理的问题。本文做下记录。</p><hr><h2 id="问题重现"><a href="#问题重现" class="headerlink" title=" 问题重现 "></a><strong> 问题重现 </strong></h2><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">2505</span>][<span class="number">2505</span>];</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面这段代码,运行的时候会发生错误</p><p><code>进程已结束,退出代码139 (interrupted by signal 11: SIGSEGV)</code></p><p>而将a数组放在全局就正常运行</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">int</span> a[<span class="number">2505</span>][<span class="number">2505</span>];</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    <span class="keyword">int</span> x;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt;x;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="解释"><a href="#解释" class="headerlink" title=" 解释 "></a><strong> 解释 </strong></h2><p>在C++中内存管理十分重要,有五中内存分配方式,<span class="under0"><strong> 分别是堆、栈、自由存储区、全局/静态存储区和常量存储区 </strong></span></p><p><strong> 栈 </strong>：在执行函数时，函数内局部变量的存储单元都可以在栈上创建，函数执行结束时这些存储单元自动被释放。栈内存分配运算内置于处理器的指令集中，效率很高，但是分配的内存容量有限。</p><p><strong> 堆 </strong>：就是那些由 <code>new</code>分配的内存块，他们的释放编译器不去管，由我们的应用程序去控制，一般一个<code>new</code>就要对应一个 <code>delete</code>。如果程序员没有释放掉，那么在程序结束后，操作系统会自动回收。</p><p><strong> 自由存储区 </strong>：就是那些由<code>malloc</code>等分配的内存块，他和堆是十分相似的，不过它是用<code>free</code>来结束自己的生命的。</p><p><strong> 全局/静态存储区 </strong>：全局变量和静态变量被分配到同一块内存中，在以前的C语言中，全局变量又分为初始化的和未初始化的，在<code>C++</code>里面没有这个区分了，他们共同占用同一块内存区。</p><p><strong> 常量存储区 </strong>：这是一块比较特殊的存储区，他们里面存放的是常量，不允许修改。</p><hr><p><strong> 在最初,那个错误的写法当中,将a数组在main函数当中创建,占用的内存来自栈空间,而栈空间的大小比较小,所以就会出现最初的错误。当数组在全局中创建时,数组在全局/静态存储区分配内存,而此处的空间会大不少,也就能正常运行了。</strong></p><p>其他内存管理方面的知识,可以看文末的参考链接,就不做摘抄了。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="https://chenqx.github.io/2014/09/25/Cpp-Memory-Management/" target="_blank" rel="noopener">C/C++内存管理详解</a><br><a href="http://www.cnblogs.com/JCSU/articles/1051826.html" target="_blank" rel="noopener">内存分配详解、指针与数组</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTMLElement</title>
      <link href="/2017/11/08/HTMLElement/"/>
      <url>/2017/11/08/HTMLElement/</url>
      
        <content type="html"><![CDATA[<h2 id="Preface"><a href="#Preface" class="headerlink" title=" Preface "></a><strong> Preface </strong></h2><p><code>HTMLElement</code>接口表示所有的 HTML 元素。一些HTML元素直接实现了<code>HTMLElement</code>接口，还有一些间接实现<code>HTMLElement</code>接口.</p><p>所有的DOM元素都继承于 <code>HTMLElement</code> 构造器。通过访问<code>HTMLElement</code>的原型,浏览器可以为我们提供任意扩展HTML节点的能力。</p><hr><h2 id="demo"><a href="#demo" class="headerlink" title=" demo "></a><strong> demo </strong></h2><p><a href="http://www.sail.name/CSS_Demo/js/HTMLElement.html">戳这儿</a></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, "</span> +</span><br><span class="line">           <span class="string">"maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;DOM 原型&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">    &lt;style&gt;</span></span><br><span class="line"><span class="regexp">        div&#123;</span></span><br><span class="line"><span class="regexp">            background: red;</span></span><br><span class="line"><span class="regexp">        &#125;</span></span><br><span class="line"><span class="regexp">    &lt;/</span>style&gt;</span><br><span class="line">&lt;<span class="regexp">/head&gt;</span></span><br><span class="line"><span class="regexp">&lt;body&gt;</span></span><br><span class="line"><span class="regexp">&lt;div id="a"&gt;a&lt;/</span>div&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    HTMLElement.prototype.remove = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">      <span class="keyword">if</span>(<span class="keyword">this</span>.parentNode)&#123;</span><br><span class="line">          <span class="keyword">this</span>.parentNode.removeChild(<span class="keyword">this</span>);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> a = <span class="built_in">document</span>.querySelector(<span class="string">"#a"</span>);</span><br><span class="line">    a.onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        a.remove();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><p>在以上代码中,我们在<code>HTMLElement</code>原型上增加了<code>remove()</code>方法,使得元素本身调用该方法将自己从DOM中删除。</p><hr><h2 id="注意"><a href="#注意" class="headerlink" title=" 注意 "></a><strong> 注意 </strong></h2><p>但是需要注意的是,HTML元素是不可以直接通过其构造器进行实例化的,也就是</p><p><code>var elem = new HTMLElement()</code></p><p>是无效的。</p><p>尽管浏览器暴露了基构造器和原型,它们选择性地禁用了通过构造器创建元素的能力。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p>《JavaScript 忍者秘籍》<br><a href="https://developer.mozilla.org/en-US/docs/Web/API/HTMLElement" target="_blank" rel="noopener">HTMLElement</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>StringBuffer 和 StringBuilder 类</title>
      <link href="/2017/11/05/StringBuffer-and-StringBuilder/"/>
      <url>/2017/11/05/StringBuffer-and-StringBuilder/</url>
      
        <content type="html"><![CDATA[<p>Java 提供了<code>String</code>类来创建和操作字符串。<code>String</code>类是不可改变的，所以你一旦创建了<code>String</code>对象，那它的值就无法改变了。</p><p>如果需要对字符串做很多修改，那么应该选择使用 <code>StringBuffer &amp; StringBuilder 类</code>。和<code>String</code>类不同的是，<code>StringBuffer</code>和<code>StringBuilder</code>类的对象能够被多次的修改，并且不产生新的未使用对象。</p><p><code>StringBuilder</code>类在 Java 5 中被提出，它和<code>StringBuffer</code>之间的最大不同在于<code>StringBuilder</code>的方法不是线程安全的（不能同步访问）。</p><p>由于<code>StringBuilder</code>相较于<code>StringBuffer</code>有速度优势，所以多数情况下建议使用<code>StringBuilder</code>类。然而在应用程序要求线程安全的情况下，则必须使用<code>StringBuffer 类</code>。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="http://www.runoob.com/java/java-stringbuffer.html" target="_blank" rel="noopener">Java StringBuffer 和 StringBuilder 类</a></p>]]></content>
      
      
      <categories>
          
          <category> Java </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>ssh连接服务器</title>
      <link href="/2017/11/03/ssh-connect-server-in-linux/"/>
      <url>/2017/11/03/ssh-connect-server-in-linux/</url>
      
        <content type="html"><![CDATA[<p>以前我在windows是通过xsell连接服务器的,在linux下可以通过<code>PuTTT SSH Client</code>就行连接。</p><p>当然未必愿意多下载一个软件。</p><p>在终端中通过ssh命令就可以连接,也可以通过scp跨服务器对文件就行处理。</p><p>不过我感觉终端通过ssh命令连接一段时间不碰,连接比较容易断。当然可以自己写个脚本封装下,也就解决了。</p><p>本文对该命令做个记录</p><hr><p>ssh命令是openssh套件中的客户端连接工具，可以给予ssh加密协议实现安全的远程登录服务器</p><h3 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h3><p>ssh(选项)(参数)</p><h3 id="选项"><a href="#选项" class="headerlink" title=" 选项 "></a><strong> 选项 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">-1：强制使用ssh协议版本1</span><br><span class="line">-2：强制使用ssh协议版本2</span><br><span class="line">-4：强制使用IPv4地址</span><br><span class="line">-6：强制使用IPv6地址</span><br><span class="line">-A：开启认证代理连接转发功能</span><br><span class="line">-a：关闭认证代理连接转发功能</span><br><span class="line">-b：使用本机指定地址作为对应连接的源ip地址</span><br><span class="line">-C：请求压缩所有数据</span><br><span class="line">-F：指定ssh指令的配置文件</span><br><span class="line">-f：后台执行ssh指令</span><br><span class="line">-g：允许远程主机连接主机的转发端口</span><br><span class="line">-i：指定身份文件</span><br><span class="line">-l：指定连接远程服务器登录用户名</span><br><span class="line">-N：不执行远程指令</span><br><span class="line">-o：指定配置选项</span><br><span class="line">-p：指定远程服务器上的端口</span><br><span class="line">-q：静默模式</span><br><span class="line">-X：开启X11转发功能</span><br><span class="line">-x：关闭X11转发功能</span><br><span class="line">-y：开启信任X11转发功能。</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title=" 参数 "></a><strong> 参数 </strong></h3><p>远程主机：指定要连接的远程ssh服务器；<br>指令：要在远程ssh服务器上执行的指令。</p><hr><p>命令格式 ： ssh <a href="mailto:root@192.xxx.x.x" target="_blank" rel="noopener">root@192.xxx.x.x</a></p><p><strong> root对应你使用的用户名，192……对应的服务器ip地址，一般服务器端口22，命令默认22.如果需要更改端口在ssh后面 -p 端口 </strong></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="http://man.linuxde.net/ssh" target="_blank" rel="noopener">ssh命令</a><br><a href="https://zhidao.baidu.com/question/591014865.html" target="_blank" rel="noopener">在linux系统上如何连接远程服务器</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ssh </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>hexo出错 ENOSPC Error</title>
      <link href="/2017/10/31/ENOSPC-Error(Linux)-in-hexo/"/>
      <url>/2017/10/31/ENOSPC-Error(Linux)-in-hexo/</url>
      
        <content type="html"><![CDATA[<p>今天新写博客的时候出现了如下出错</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">FATAL Something&apos;s wrong. Maybe you can find the solution here: http://hexo.io/docs/troubleshooting.html</span><br><span class="line">Error: watch /home/sail/codelife/code/repo/blog/source/ ENOSPC</span><br><span class="line">    at _errnoException (util.js:1021:11)</span><br><span class="line">    at FSWatcher.start (fs.js:1383:19)</span><br><span class="line">    at Object.fs.watch (fs.js:1409:11)</span><br><span class="line">    at createFsWatchInstance (/home/sail/codelife/code/repo/blog/node_modules/chokidar/lib/nodefs-handler.js:37:15)</span><br><span class="line">    at setFsWatchListener (/home/sail/codelife/code/repo/blog/node_modules/chokidar/lib/nodefs-handler.js:80:15)</span><br><span class="line">    at FSWatcher.NodeFsHandler._watchWithNodeFs (/home/sail/codelife/code/repo/blog/node_modules/chokidar/lib/nodefs-handler.js:228:14)</span><br><span class="line">    at FSWatcher.NodeFsHandler._handleDir (/home/sail/codelife/code/repo/blog/node_modules/chokidar/lib/nodefs-handler.js:407:19)</span><br><span class="line">    at FSWatcher.&lt;anonymous&gt; (/home/sail/codelife/code/repo/blog/node_modules/chokidar/lib/nodefs-handler.js:455:19)</span><br><span class="line">    at FSWatcher.&lt;anonymous&gt; (/home/sail/codelife/code/repo/blog/node_modules/chokidar/lib/nodefs-handler.js:460:16)</span><br><span class="line">    at FSReqWrap.oncomplete (fs.js:154:5)</span><br><span class="line">npm ERR! code ELIFECYCLE</span><br><span class="line">npm ERR! errno 2</span><br><span class="line">npm ERR! hexo-site@0.0.0 start: `hexo g &amp;&amp; hexo s`</span><br><span class="line">npm ERR! Exit status 2</span><br><span class="line">npm ERR! </span><br><span class="line">npm ERR! Failed at the hexo-site@0.0.0 start script.</span><br><span class="line">npm ERR! This is probably not a problem with npm. There is likely additional logging output above.</span><br><span class="line"></span><br><span class="line">npm ERR! A complete log of this run can be found in:</span><br><span class="line">npm ERR!     /home/sail/.npm/_logs/2017-10-31T11_19_48_152Z-debug.log</span><br></pre></td></tr></table></figure><p>因为我在hexo的<code>package.json</code>文件中修改了一下启动脚本,如下</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"scripts"</span>: &#123;</span><br><span class="line">    <span class="string">"start"</span>: <span class="string">"hexo g &amp;&amp; hexo s"</span>,</span><br><span class="line">    <span class="string">"build"</span>: <span class="string">"hexo g &amp;&amp; hexo d"</span></span><br><span class="line">  &#125;,</span><br></pre></td></tr></table></figure><p>我执行的<code>npm start</code>命令,所以这个错误应该是<code>hexo g</code>或者<code>hexo s</code>产生的,其实是<code>hexo s</code></p><hr><h2 id="错误原因"><a href="#错误原因" class="headerlink" title=" 错误原因 "></a><strong> 错误原因 </strong></h2><p>前面的报错信息有一个关键词<code>ENOSPC</code></p><p>在<a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">官方文档</a>查了一下,解决方案如下</p><p>ENOSPC Error (Linux)<br>Sometimes when running the command <code>$ hexo server</code> it returns an error:</p><p><code>Error: watch ENOSPC ...</code><br>It can be fixed by running <code>$ npm dedupe</code> or, if that doesn’t help, try the following in the Linux console:</p><p><code>$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code></p><p><span class="under0">This will increase the limit for the number of files you can watch.</span></p><p>以上的命令作用就是提高我们可以watch的文件数量上限</p><p>又查了一下,应该是gulp导致的</p><p>主要是因为gulp的watch需要监听很多文件的改动，但是fedora、ubuntu系统的文件句柄其实是有限制的，因此可以使用以下命令：</p><p><code>$ echo fs.inotify.max_user_watches=524288 | sudo tee -a /etc/sysctl.conf &amp;&amp; sudo sysctl -p</code></p><hr><h2 id="后记"><a href="#后记" class="headerlink" title=" 后记 "></a><strong> 后记 </strong></h2><p>不知不觉我的博文数量已经110+,数量过多,导致出现了这个问题</p><p>甜蜜的烦恼吧23333333</p>]]></content>
      
      
      
        <tags>
            
            <tag> hexo&amp;&amp;博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>给后端新同学第一次任务的讲解</title>
      <link href="/2017/10/31/the-explain-for-first-task-of-BE-17/"/>
      <url>/2017/10/31/the-explain-for-first-task-of-BE-17/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h2><p>这届后端组大一的新生一共六名同学,三个来自计算机学院,另外三个非计算机学院。</p><p>给他们的第一次任务,是55道程序设计题目,少部分题目,涉及到一些算法。计算机学院的同学使用C++写,非计算机学院的同学使用的python。</p><p>本来是我和<a href="http://www.wuya00.top/" target="_blank" rel="noopener">健勋</a>,负责带非计算机学院的三个学弟。由于健勋就读于国际学院,明年就要出国了,需要准备托福,我就负责了三个学弟。</p><p>代码均放在了工作室<a href="https://github.com/cumtflyingstudio/novice-task-of-BE-17" target="_blank" rel="noopener">github</a>,有关第一次任务存在的一些问题陆续更新在本文</p><hr><h2 id="问题讲解"><a href="#问题讲解" class="headerlink" title=" 问题讲解 "></a><strong> 问题讲解 </strong></h2><h3 id="输入输出问题"><a href="#输入输出问题" class="headerlink" title=" 输入输出问题 "></a><strong> 输入输出问题 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Example(基础)输入两个数,求出它们的和并输出。样例输入:1 2</span><br><span class="line"></span><br><span class="line">样例输入:3</span><br></pre></td></tr></table></figure><p>学弟们大致都是这样写的</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">a=input()</span><br><span class="line">b=input()</span><br><span class="line">a=int(a)</span><br><span class="line">b=int(b)</span><br><span class="line">d=a+b</span><br><span class="line">print(d)</span><br></pre></td></tr></table></figure><p>但是这样的输入是与题目要求不符合的,题目中的输入是在同一行输入两个数,而他们的写法只能在一行输入一个数字</p><p>推荐这样写</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">a,b= map(float, raw_input().split())</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> <code>raw_input()</code> 将所有输入作为字符串看待，返回字符串类型。 </strong></span></p><p>注意：<code>input()</code> 和 <code>raw_input()</code> 这两个函数均能接收 字符串 ，但 <code>raw_input()</code> 直接读取控制台的输入（任何类型的输入它都可以接收）。而对于 input() ，它希望能够读取一个合法的 python 表达式，即你输入字符串的时候必须使用引号将它括起来，否则它会引发一个 SyntaxError 。<br>除非对 <code>input()</code> 有特别需要，否则一般情况下我们都是推荐使用 <code>raw_input()</code> 来与用户交互。</p><p>注意：python3 里 input() 默认接收到的事 str 类型。</p><p>以下是参考链接</p><p><a href="http://www.runoob.com/python/python-func-raw_input.html" target="_blank" rel="noopener">raw_input</a><br><a href="http://www.runoob.com/python/att-string-split.html" target="_blank" rel="noopener">split</a><br><a href="http://www.runoob.com/python/python-func-map.html" target="_blank" rel="noopener">map</a></p><hr><h2 id="循环问题"><a href="#循环问题" class="headerlink" title=" 循环问题 "></a><strong> 循环问题 </strong></h2><p>有的同学在上大学前有过一些C语言的基础,然而Python中的for循环有一些不同</p><p>在C,C++,或者类C的一些语言中for循环大概如下</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(int i = <span class="number">0</span> ; i &lt; n; i++)</span><br><span class="line">    cout &lt;&lt; a[i];</span><br></pre></td></tr></table></figure><p>而在python中设若有如下一个list</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">a = [<span class="number">100</span>,<span class="number">200</span>,<span class="number">300</span>,<span class="number">400</span>,<span class="number">500</span>]</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> x <span class="keyword">in</span> a</span><br><span class="line">    <span class="keyword">print</span> x</span><br></pre></td></tr></table></figure><p>像这样是没有下标的。而在一些程序设计题当中,有时候是需要控制输出格式的,这样就不太方便</p><p>这里有一个解决方案</p><p><span class="under0"><strong> Python内置的<code>enumerate</code>函数可以把一个list变成索引-元素对，这样就可以在for循环中同时迭代索引和元素本身: </strong></span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&gt;&gt;&gt; for i, value in enumerate([&apos;A&apos;, &apos;B&apos;, &apos;C&apos;]):</span><br><span class="line">...     print(i, value)</span><br><span class="line">...</span><br><span class="line">0 A</span><br><span class="line">1 B</span><br><span class="line">2 C</span><br></pre></td></tr></table></figure></p><p>此外listName.index(element)可以得到列表某个元素的下标,len(listName)可以得到某个列表的长度,这样结合起来也可以相互判断</p><p>以下是参考链接</p><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/0014317793224211f408912d9c04f2eac4d2af0d5d3d7b2000" target="_blank" rel="noopener">迭代</a></p><hr><h3 id="持续更新中…"><a href="#持续更新中…" class="headerlink" title=" 持续更新中… "></a><strong> 持续更新中… </strong></h3>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 翔工作室 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux升级node版本</title>
      <link href="/2017/10/22/update-node-version-in-linux/"/>
      <url>/2017/10/22/update-node-version-in-linux/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h2><p>本文是对<code>nodejs</code>版本升级的记录。因为使用的<code>zsh</code>有点不同,做点记录。</p><p><code>nodejs</code> 升级一般使用nvm/n,本文是对n的介绍。</p><hr><h2 id="流程"><a href="#流程" class="headerlink" title=" 流程 "></a><strong> 流程 </strong></h2><p>安装</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm install -g n</span><br></pre></td></tr></table></figure><p>查看当前已经安装的node版本以及正在使用的版本（前面有一个o），你可以通过移动上下方向键来选择要使用的版本，最后按回车生效。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n</span><br></pre></td></tr></table></figure><p>安装最新的版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n latest</span><br></pre></td></tr></table></figure></p><p>安装稳定版本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n stable</span><br></pre></td></tr></table></figure></p><p>删除某个版本</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n rm 0.10.1</span><br></pre></td></tr></table></figure><p>以指定的版本来执行脚本<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ n use 0.10.21 some.js</span><br></pre></td></tr></table></figure></p><hr><h2 id="问题"><a href="#问题" class="headerlink" title=" 问题 "></a><strong> 问题 </strong></h2><p>我本机使用的shell是zsh,需要在sudo权限下才能正确切换。</p><p>退出sudo后,node版本没有切换成功。</p><p><code>vim ~/.zshrc</code></p><p>启动编辑，在最后面添加：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># auto check node version</span><br><span class="line"> autoload -U add-zsh-hook</span><br><span class="line"> load-nvmrc() &#123;</span><br><span class="line"> if [[ -f .nvmrc &amp;&amp; -r .nvmrc  ]]; then</span><br><span class="line">     nvm use</span><br><span class="line"> fi</span><br><span class="line"> &#125;</span><br><span class="line"> add-zsh-hook chpwd load-nvmrc</span><br><span class="line"> load-nvmrc</span><br></pre></td></tr></table></figure></p><p>再执行</p><p><code>source ~/.zshrc</code></p><p>即可</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="https://github.com/tj/n" target="_blank" rel="noopener">t</a><br><a href="http://weizhifeng.net/node-version-management-via-n-and-nvm.html" target="_blank" rel="noopener">利用n和nvm管理Node的版本</a><br><a href="http://www.voidcn.com/article/p-bjkxzbsh-c.html" target="_blank" rel="noopener">自动切换项目的node版本</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>node(v8.5.0+)使用module</title>
      <link href="/2017/10/22/use-module-in-nodejs/"/>
      <url>/2017/10/22/use-module-in-nodejs/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h2><p>在 ES6 之前，社区制定了一些模块加载方案，最主要的有 <code>CommonJS</code> 和 <code>AMD</code> 两种。前者用于服务器，后者用于浏览器。ES6 在语言标准的层面上，实现了模块功能，而且实现得相当简单，完全可以取代 CommonJS 和 AMD 规范，成为浏览器和服务器通用的模块解决方案。</p><p>ES6 模块的设计思想，是尽量的静态化，使得编译时就能确定模块的依赖关系，以及输入和输出的变量。<code>CommonJS</code> 和 <code>AMD</code> 模块，都只能在运行时确定这些东西。比如，<code>CommonJS</code> 模块就是对象，输入时必须查找对象属性</p><p>node采用的模块方案是<code>CommonJS</code>。</p><p>module正是ES6引入的模块方案。node对ES6支持一直不错,不过并没有支持module,因为和node自身使用的<code>CommonJS</code>有所冲突,没拿出比较合适的解决方案。</p><p>直到最近的<code>v8.5.0</code>才开始支持module,到本文写作时,最新的版本是<code>v8.7.0</code></p><hr><h2 id="使用"><a href="#使用" class="headerlink" title=" 使用 "></a><strong> 使用 </strong></h2><p><code>module</code><br>Add support for ESM. This is currently behind the <code>--experimental-modules</code> flag and requires the .mjs extension. <code>node --experimental-modules index.mjs</code></p><hr><p>目前使用这个功能,还需要将你的js文件后缀从<code>js</code>改为<code>mjs</code></p><p>以下是示范</p><p><strong> one.mjs </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> firstName = <span class="string">'Michael'</span>;</span><br><span class="line"><span class="keyword">let</span> lastName = <span class="string">'Jackson'</span>;</span><br><span class="line"><span class="keyword">let</span> year = <span class="number">1958</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;firstName, lastName, year&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong> tow.mjs </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;firstName, lastName, year&#125; <span class="keyword">from</span> <span class="string">'./one'</span>;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(firstName);</span><br><span class="line"><span class="built_in">console</span>.log(lastName);</span><br><span class="line"><span class="built_in">console</span>.log(year);</span><br></pre></td></tr></table></figure><p><code>node --experimental-modules tow.mjs</code></p><hr><p><strong> main.mjs </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> tokenizer = <span class="function">(<span class="params">input</span>)  =&gt;</span>&#123;</span><br><span class="line">    <span class="keyword">let</span> current = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">let</span> tokens = [];</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"666   "</span> + input);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1 "</span> + input);</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"2 "</span> + input.length);</span><br><span class="line">    <span class="keyword">while</span>(current &lt; input.length)&#123;</span><br><span class="line">        <span class="keyword">let</span> char = input[current];</span><br><span class="line">        <span class="keyword">if</span>(char === <span class="string">'&#123;'</span>)&#123;</span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">'paren'</span>,</span><br><span class="line">                value: <span class="string">'&#123;'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            current++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span>(char === <span class="string">'&#125;'</span>)&#123;</span><br><span class="line">            tokens.push(&#123;</span><br><span class="line">                type: <span class="string">'paren'</span>,</span><br><span class="line">                value: <span class="string">'&#125;'</span>,</span><br><span class="line">            &#125;);</span><br><span class="line">            current++;</span><br><span class="line">            <span class="keyword">continue</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        current++;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> &#123;tokenizer&#125;;</span><br></pre></td></tr></table></figure><hr><p><strong> app.mjs </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> &#123;tokenizer&#125;  <span class="keyword">from</span> <span class="string">'./main'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> input = <span class="string">"aaa"</span>;</span><br><span class="line">tokenizer(input);</span><br></pre></td></tr></table></figure><p><code>node --experimental-modules app.mjs</code></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="http://es6.ruanyifeng.com/#docs/module" target="_blank" rel="noopener">Module 的语法</a><br><a href="https://github.com/nodejs/node/blob/master/doc/changelogs/CHANGELOG_V8.md#8.7.0" target="_blank" rel="noopener">CHANGELOG_V8.md</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> node </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C++运算符重载</title>
      <link href="/2017/10/17/Operator-overload-of-reload/"/>
      <url>/2017/10/17/Operator-overload-of-reload/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h2><p>本文是对一个学弟提问的问题的解释,主要涉及C++运算符重载和运算符优先级别的知识。</p><hr><h2 id="问题"><a href="#问题" class="headerlink" title=" 问题 "></a><strong> 问题 </strong></h2><p>输出<br><code>34-32||0&amp;&amp;1;</code>结果是2<br><code>(34-32||0&amp;&amp;1);</code>结果是1<br>为啥😮</p><p>即<br><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;<span class="number">34</span><span class="number">-32</span>||<span class="number">0</span>&amp;&amp;<span class="number">1</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(<span class="number">34</span><span class="number">-32</span>||<span class="number">0</span>&amp;&amp;<span class="number">1</span>)&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">## 结果</span><br><span class="line"><span class="number">2</span></span><br><span class="line"><span class="number">1</span></span><br></pre></td></tr></table></figure></p><p>辅助分析示例子</p><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">cout</span>&lt;&lt;a=<span class="number">100</span>;</span><br><span class="line">会报错</span><br><span class="line"></span><br><span class="line"><span class="built_in">cout</span>&lt;&lt;(a=<span class="number">100</span>);</span><br><span class="line">输出<span class="number">100</span></span><br></pre></td></tr></table></figure><hr><h2 id="分析"><a href="#分析" class="headerlink" title=" 分析 "></a><strong> 分析 </strong></h2><p>先明确下,以下几个运算符的优先级别</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 优先级别从高到低排列,同行的运算符,优先级别相同</span><br><span class="line">( )(圆括号)</span><br><span class="line">+  (加号)  -   (减号) </span><br><span class="line">&lt;&lt; (左移)  &gt;&gt;  (右移)</span><br><span class="line">&amp;&amp; (逻辑与)</span><br><span class="line">|| (逻辑或)</span><br></pre></td></tr></table></figure><hr><p>这里直接给出解释了</p><p><span class="under0"><strong> 重载运算符不能改变原有运算符的优先级, 结合性和操作数个数. </strong></span></p><p><code>&lt;&lt; &gt;&gt;</code>  被重载为流提取运算符</p><hr><p><code>cout&lt;&lt;a</code>    </p><p><code>&lt;&lt;</code>左侧<code>cout</code>是一个<code>ostream</code>对象，右侧就是你的表达式之类的，前面说的<code>cout&lt;&lt;a=100;</code>会报错是因为,重载的<code>operator&lt;&lt;()</code>函数返回的是一个指向<code>ostream</code>对象的引用</p><p>比如<code>cout&lt;&lt; a &lt;&lt;b;</code></p><p><code>cout&lt;&lt;a</code>   本身就是<code>ostream</code>对象<code>cout</code>,将一个值直接赋值给一个对象肯定错了。加上括号过后，改变了运算顺序，<code>cout&lt;&lt;100;</code>,也就是对的</p><p>最开始提到的<code>cout&lt;&lt;34-32||0&amp;&amp;1;</code> </p><p> 一开始执行的是<code>cout&lt;&lt;34-32</code>  输出了一个2，然后返回了一个cout对象</p><p>也就是看作 <code>cout || 0 &amp;&amp; 1</code>,但是这个表达式已经和我们无关了，因为没有流提取符 把它们输出了</p><p>如果你执行 <code>cout&lt;&lt;(cout&lt;&lt;34-32||0&amp;&amp;1);</code>  会输出21   ，因为一开始输出了2，  <code>cout || 0 &amp;&amp; 1</code> 这个式子为1(短路)，再输出1，也就是21</p><p>举个例子<br><code>cout&lt;&lt;(cout || 0);</code></p><p>输出就是1</p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose搭建node与mysql</title>
      <link href="/2017/10/15/node-and-mysql-of-docker-compose/"/>
      <url>/2017/10/15/node-and-mysql-of-docker-compose/</url>
      
        <content type="html"><![CDATA[<h1 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h1><p>本文仅仅是对我管理node与mysql的<code>docker-compose.yml</code>文件记录,作为备忘。</p><hr><h1 id="docker-compose-yml"><a href="#docker-compose-yml" class="headerlink" title=" docker-compose.yml "></a><strong> docker-compose.yml </strong></h1><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">version: &quot;2&quot;</span><br><span class="line">services:</span><br><span class="line">  node:</span><br><span class="line">    image: sail97/node</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;8888:8888&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./app:/app</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br><span class="line"></span><br><span class="line">  mysql:</span><br><span class="line">    image: mysql:5.6</span><br><span class="line">    ports:</span><br><span class="line">      - &quot;3306:3306&quot;</span><br><span class="line">    volumes:</span><br><span class="line">      - ./mysql:/var/lib/mysql/</span><br><span class="line">    environment:</span><br><span class="line">        MYSQL_ROOT_PASSWORD : sail</span><br><span class="line">    restart: always</span><br><span class="line">    stdin_open: true</span><br><span class="line">    tty: true</span><br></pre></td></tr></table></figure><hr><h1 id="目录结构"><a href="#目录结构" class="headerlink" title=" 目录结构 "></a><strong> 目录结构 </strong></h1><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">➜  try tree -L 1</span><br><span class="line">.</span><br><span class="line">├── app</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">└── mysql</span><br></pre></td></tr></table></figure><hr><h1 id="使用"><a href="#使用" class="headerlink" title=" 使用 "></a><strong> 使用 </strong></h1><p>在项目目录下执行</p><p><code>docker-compose up -d</code></p><p>即可</p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Linux更新磁盘空间不足</title>
      <link href="/2017/10/14/insufficient-space-in-drive-of-ubuntu/"/>
      <url>/2017/10/14/insufficient-space-in-drive-of-ubuntu/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h2><p><strong> 贴吧真的是大神多啊！ </strong></p><hr><h2 id="问题"><a href="#问题" class="headerlink" title=" 问题 "></a><strong> 问题 </strong></h2><p>Ubuntu提示有些更新,在更新的时候给出如下消息</p><p>这个更新需要花去 92.1 M 磁盘上总计 /boot 的空间。请在 19.5 M 磁盘上留出 /boot 空间。清空您的回收站和临时文件，用“sudo apt-get clean”清理以前的安装文件。</p><p>但是执行<code>sudo apt-get clean</code>并没有什么作用</p><hr><h2 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h2><p>执行以下命令</p><p><code>sudo apt-get remove --purge $(dpkg -l &#39;linux-*&#39; | sed &#39;/^ii/!d;/&#39;&quot;$(uname -r | sed &quot;s/\(.*\)-\([^0-9]\+\)/\1/&quot;)&quot;&#39;/d;s/^[^ ]* [^ ]* \([^ ]*\).*/\1/;/[0-9]/!d&#39;)</code></p><p><strong><span class="under0"> 除了本机正在使用中的最新内核，删除所有旧内核。</span> </strong></p><p>然后执行</p><p><code>sudo updategrub</code></p><p>即可</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="http://tieba.baidu.com/p/2813472589" target="_blank" rel="noopener">磁盘空间不足，怎么办？</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vector学习</title>
      <link href="/2017/10/13/the-learn-of-vector/"/>
      <url>/2017/10/13/the-learn-of-vector/</url>
      
        <content type="html"><![CDATA[<h2 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h2><p>本文是对C++,<code>STL</code>中的<code>vector</code>学习记录。</p><p>以后与<code>vector</code>相关的内容更新在此处。仅供参考。</p><p>文章尾部有一些演示代码片段</p><hr><h2 id="About"><a href="#About" class="headerlink" title=" About "></a><strong> About </strong></h2><p>向量<code>vector</code>是一种对象实体, 能够容纳许多其他类型相同的元素, 因此又被称为容器。 与<code>string</code>相同, <code>vector</code>同属于<code>STL(Standard Template Library, 标准模板库)</code>中的一种自定义的数据类型, 可以广义上认为是数组的增强版。</p><p>在使用它时, 需要包含头文件 <code>vector</code><br><code>#include&lt;vector&gt;</code></p><p><code>vector</code>容器与数组相比其优点在于它能够根据需要随时自动调整自身的大小以便容下所要放入的元素。此外,<code>vector</code>也提供了许多的方法来对自身进行操作。</p><hr><h2 id="成员函数"><a href="#成员函数" class="headerlink" title=" 成员函数 "></a><strong> 成员函数 </strong></h2><p><a href="http://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="noopener">详细请看这儿</a></p><p>以下列举一些我觉得常用的</p><h3 id="元素访问"><a href="#元素访问" class="headerlink" title=" 元素访问 "></a><strong> 元素访问 </strong></h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>at</td><td>访问指定的元素，同时进行越界检查 </td></tr><tr><td>operator[]</td><td>访问指定的元素 </td></tr><tr><td>front</td><td>访问第一个元素 </td></tr><tr><td>back</td><td>访问最后一个元素 </td></tr><tr><td>data</td><td>返回指向内存中数组第一个元素的指针 </td></tr></tbody></table><hr><h3 id="容量"><a href="#容量" class="headerlink" title=" 容量 "></a><strong> 容量 </strong></h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>empty</td><td>检查容器是否为空 </td></tr><tr><td>size</td><td>返回容纳的元素数 </td></tr><tr><td>max_size</td><td>返回可容纳的最大元素数 </td></tr><tr><td>reserve</td><td>预留存储空间 </td></tr><tr><td>capacity</td><td>返回当前存储空间能够容纳的元素数 </td></tr></tbody></table><hr><h3 id="修改器"><a href="#修改器" class="headerlink" title=" 修改器 "></a><strong> 修改器 </strong></h3><table><thead><tr><th>函数名</th><th>作用</th></tr></thead><tbody><tr><td>clear</td><td>清除内容 </td></tr><tr><td>insert</td><td>插入元素 </td></tr><tr><td>erase</td><td>擦除元素 </td></tr><tr><td>push_back</td><td>将元素添加到容器末尾 </td></tr><tr><td>pop_back</td><td>移除末元素 </td></tr><tr><td>resize</td><td>改变容器中可存储元素的个数 </td></tr><tr><td>swap</td><td>交换内容 </td></tr></tbody></table><hr><h2 id="练习代码"><a href="#练习代码" class="headerlink" title=" 练习代码 "></a><strong> 练习代码 </strong></h2><h3 id="一维数组"><a href="#一维数组" class="headerlink" title=" 一维数组 "></a><strong> 一维数组 </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="comment">// vector 学习</span></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.empty()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">int</span> tem;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tem;</span><br><span class="line">        a.push_back(tem);</span><br><span class="line">        <span class="keyword">if</span>(getchar()==<span class="string">'\n'</span>) <span class="comment">//遇回车结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;a.size();j++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.empty()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="二维数组"><a href="#二维数组" class="headerlink" title=" 二维数组 "></a><strong> 二维数组 </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span> </span>&#123;</span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt;&gt; a;</span><br><span class="line">    <span class="keyword">int</span> M=<span class="number">5</span>,N=<span class="number">5</span>;</span><br><span class="line">    a.resize(M);</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>;i &lt; M;i++)</span><br><span class="line">        a[i].resize(N);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N;j++)&#123;</span><br><span class="line">            a[i][j]= i + j;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; M;i++)&#123;</span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; N;j++)&#123;</span><br><span class="line">            <span class="built_in">cout</span>&lt;&lt;a[i][j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="http://blog.csdn.net/yas12345678/article/details/52601593" target="_blank" rel="noopener"> C++中vector用法详解</a><br><a href="http://zh.cppreference.com/w/cpp/container/vector" target="_blank" rel="noopener">std::vector</a><br><a href="http://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html" target="_blank" rel="noopener">学习C++ -&gt; 向量(vector)</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在C++中以回车结束数组(不定长)输入</title>
      <link href="/2017/10/11/use-enter-to-stop-input-by-array-in-CPP/"/>
      <url>/2017/10/11/use-enter-to-stop-input-by-array-in-CPP/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>本文是对<span class="under0">在C++中以回车结束数组(不定长)输入</span>的记录。</p><p>其实这个问题,在遥远的曾经应该是解决过,可是今天却忘了,网上搜索的一些方案也不太靠谱。</p><p>这告诉我,一些当时觉得简单的坑,或者刚学习的知识点,如果时间允许,最好还是记录下。</p><p>看似慢,实则节约了更多的时间。</p><hr><p>直接上代码了,逻辑相当简单。</p><h3 id="定长的数组"><a href="#定长的数组" class="headerlink" title=" 定长的数组 "></a><strong> 定长的数组 </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span><span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">int</span> a[<span class="number">999</span>];</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">cin</span>&gt;&gt;a[i];</span><br><span class="line">        <span class="keyword">if</span>(getchar()==<span class="string">'\n'</span>) <span class="comment">//遇回车结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>;j++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> test;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; test;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;test&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="不定长的数组"><a href="#不定长的数组" class="headerlink" title=" 不定长的数组 "></a><strong> 不定长的数组 </strong></h3><figure class="highlight c++"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;iostream&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;vector&gt;</span></span></span><br><span class="line"><span class="keyword">using</span> <span class="keyword">namespace</span> <span class="built_in">std</span>;</span><br><span class="line"><span class="function"><span class="keyword">int</span> <span class="title">main</span><span class="params">()</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="built_in">vector</span>&lt;<span class="keyword">int</span>&gt; a;</span><br><span class="line">    <span class="keyword">int</span> i;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">for</span>(i=<span class="number">0</span>;;i++)</span><br><span class="line">    &#123;   <span class="keyword">int</span> tem;</span><br><span class="line">        <span class="built_in">cin</span> &gt;&gt; tem;</span><br><span class="line">        a.push_back(tem);</span><br><span class="line">        <span class="keyword">if</span>(getchar()==<span class="string">'\n'</span>) <span class="comment">//遇回车结束</span></span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">int</span> j=<span class="number">0</span>;j&lt;i+<span class="number">1</span>;j++)</span><br><span class="line">        <span class="built_in">cout</span>&lt;&lt;a[j]&lt;&lt;<span class="string">" "</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;a.size()&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">int</span> test;</span><br><span class="line">    <span class="built_in">cin</span> &gt;&gt; test;</span><br><span class="line">    <span class="built_in">cout</span>&lt;&lt;test&lt;&lt;<span class="built_in">endl</span>;</span><br><span class="line">    <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.cnblogs.com/banyanqianmian/p/6241602.html" target="_blank" rel="noopener">c++输入一组整型数据 不知道长度 回车键结束 并将其存入数组当中</a><br><a href="http://www.cnblogs.com/mr-wid/archive/2013/01/22/2871105.html" target="_blank" rel="noopener">学习C++ -&gt; 向量(vector)</a><br><a href="http://blog.csdn.net/hancunai0017/article/details/7032383" target="_blank" rel="noopener">c++中vector的用法详解</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在linux查看磁盘空间和目录大小</title>
      <link href="/2017/10/09/examine-the-disk-space-and-Directory-size-in-linux/"/>
      <url>/2017/10/09/examine-the-disk-space-and-Directory-size-in-linux/</url>
      
        <content type="html"><![CDATA[<h3 id="preface"><a href="#preface" class="headerlink" title=" preface "></a><strong> preface </strong></h3><p>在某交流群看见讨论大家讨论容器日志的管理,除了想到了容器日志的管理也想到了Linux系统的日志管理,无论是个人PC还是服务器。</p><p>记得之前某次登录工作室服务器,看到了年代久远的日志文件。</p><p>这是不应该的,应该及时对系统日志清理,以免堆积过多,对系统产生影响。</p><p>当然可以通过编写shell脚本自动化处理。这点之后会单独写篇博文介绍。</p><p>本文介绍两个有关监测方面的命令</p><hr><h3 id="df"><a href="#df" class="headerlink" title=" df "></a><strong> df </strong></h3><p>df命令用于显示磁盘分区上的可使用的磁盘空间。默认显示单位为KB。可以利用该命令来获取硬盘被占用了多少空间，目前还剩下多少空间等信息。</p><h4 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h4><p> df(选项)(参数) 选项 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">-a或--all：包含全部的文件系统</span><br><span class="line"> --block-size=&lt;区块大小&gt;：以指定的区块大小来显示区块数目</span><br><span class="line"> -h或--human-readable：以可读性较高的方式来显示信息</span><br><span class="line"> -H或--si：与-h参数相同，但在计算时是以1000 Bytes为换算单位而非1024 Bytes</span><br><span class="line"> -i或--inodes：显示inode的信息</span><br><span class="line"> -k或--kilobytes：指定区块大小为1024字节</span><br><span class="line"> -l或--local：仅显示本地端的文件系统</span><br><span class="line"> -m或--megabytes：指定区块大小为1048576字节</span><br><span class="line"> --no-sync：在取得磁盘使用信息前，不要执行sync指令，此为预设值</span><br><span class="line"> -P或--portability：使用POSIX的输出格式</span><br><span class="line"> --sync：在取得磁盘使用信息前，先执行sync指令</span><br><span class="line"> -t&lt;文件系统类型&gt;或--type=&lt;文件系统类型&gt;：仅显示指定文件系统类型的磁盘信息</span><br><span class="line"> -T或--print-type：显示文件系统的类型</span><br><span class="line"> -x&lt;文件系统类型&gt;或--exclude-type=&lt;文件系统类型&gt;：不要显示指定文件系统类型的磁盘信息</span><br><span class="line"> --help：显示帮助</span><br><span class="line"> --version：显示版本信息。</span><br></pre></td></tr></table></figure><h4 id="参数"><a href="#参数" class="headerlink" title=" 参数 "></a><strong> 参数 </strong></h4><p> 文件：指定文件系统上的文件。 </p><h4 id="实例"><a href="#实例" class="headerlink" title=" 实例 "></a><strong> 实例 </strong></h4><p> 查看系统磁盘设备，默认是KB为单位： </p><p><code>df</code></p><p>使用-h选项以KB以上的单位来显示，可读性高：</p><p><code>df -h</code></p><p>查看全部文件系统：</p><p><code>df -a</code></p><hr><h3 id="du"><a href="#du" class="headerlink" title=" du "></a><strong> du </strong></h3><p>du命令也是查看使用空间的，但是与df命令不同的是Linux du命令是对文件和目录磁盘使用的空间的查看，还是和df命令有一些区别的。</p><h4 id="语法-1"><a href="#语法-1" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h4><p>du [选项][文件] </p><h4 id="选项"><a href="#选项" class="headerlink" title=" 选项 "></a><strong> 选项 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">-a或-all 显示目录中个别文件的大小。</span><br><span class="line">-b或-bytes 显示目录或文件大小时，以byte为单位。</span><br><span class="line">-c或--total 除了显示个别目录或文件的大小外，同时也显示所有目录或文件的总和。</span><br><span class="line">-k或--kilobytes 以KB(1024bytes)为单位输出。</span><br><span class="line">-m或--megabytes 以MB为单位输出。</span><br><span class="line">-s或--summarize 仅显示总计，只列出最后加总的值。</span><br><span class="line">-h或--human-readable 以K，M，G为单位，提高信息的可读性。</span><br><span class="line">-x或--one-file-xystem 以一开始处理时的文件系统为准，若遇上其它不同的文件系统目录则略过。</span><br><span class="line">-L&lt;符号链接&gt;或--dereference&lt;符号链接&gt; 显示选项中所指定符号链接的源文件大小。</span><br><span class="line">-S或--separate-dirs 显示个别目录的大小时，并不含其子目录的大小。</span><br><span class="line">-X&lt;文件&gt;或--exclude-from=&lt;文件&gt; 在&lt;文件&gt;指定目录或文件。</span><br><span class="line">--exclude=&lt;目录或文件&gt; 略过指定的目录或文件。</span><br><span class="line">-D或--dereference-args 显示指定符号链接的源文件大小。</span><br><span class="line">-H或--si 与-h参数相同，但是K，M，G是以1000为换算单位。</span><br><span class="line">-l或--count-links 重复计算硬件链接的文件。</span><br></pre></td></tr></table></figure><h4 id="实例-1"><a href="#实例-1" class="headerlink" title=" 实例  "></a><strong> 实例  </strong></h4><p>显示目录或者文件所占空间</p><p><code>du</code></p><p>查询当前目录和文件的大小</p><p><code>du -sh *</code></p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="http://man.linuxde.net/du" target="_blank" rel="noopener">du命令</a><br><a href="http://man.linuxde.net/df" target="_blank" rel="noopener">df命令</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker-compose生成的容器立刻退出,exited with code 0</title>
      <link href="/2017/10/09/container-exited-with-code-0-created-by-docker-compose/"/>
      <url>/2017/10/09/container-exited-with-code-0-created-by-docker-compose/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title=" 问题 "></a><strong> 问题 </strong></h3><p>通过自己编写的<code>docker-compose.yml</code>管理项目。</p><p>但是生成的容器却立刻退出。</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h3><p>Docker镜像的缺省命令是<code>bash</code>，如果不加 <code>-it</code>,<code>bash</code>命令执行了自动会退出，加<code>-it</code>后docker命令会为容器分配一个伪终端，并接管其<code>stdin/stdout</code>支持交互操作，这时候<code>bash</code>命令不会自动退出</p><p>像不使用<code>docker-compose</code>,我们会执行类似如下的命令</p><p><code>docker run -it --name node node</code></p><p>但<code>docker-compose</code>需要额外配置下</p><p>需要在<code>docker-compose.yml</code>中包含以下行:</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">stdin_open: true</span><br><span class="line">tty: true</span><br></pre></td></tr></table></figure><p>第一个对应于<code>docker run</code>中的 -i ,第二个对应于 -t .</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://stackoverflow.com/questions/37100358/docker-composer-exited-with-code-0" target="_blank" rel="noopener">Docker-Composer exited with code 0</a><br><a href="http://www.developerq.com/article/1497834743" target="_blank" rel="noopener">交互式shell使用Docker Compose</a><br><a href="http://debugo.com/docker-compose/" target="_blank" rel="noopener">Docker Compose—简化复杂应用的利器</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>vim按键说明</title>
      <link href="/2017/10/08/Description-butoon-of-vim/"/>
      <url>/2017/10/08/Description-butoon-of-vim/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p>本文是vim的按键说明,参考的是《鸟哥的Linux的私房菜》。</p><p><strong> <span class="under0">之前<a href="http://www.wuya00.top/" target="_blank" rel="noopener">健勋</a>推荐的Office Lens是真的很好用,搭配上Office全家桶真是极品利器。</span></strong></p><p><strong> <span class="under0">再加上正则对转换出的文字进行一下处理,23333333,爽飞了 </span></strong></p><hr><p>vim的三种模式只有一般模式可以与编辑,命令行模式切换,编辑模式与命令行模式之间并不能切换的。</p><p>下面就来谈谈vim中会用到的按键功能</p><h3 id="第一部分：一般模式可用的按钮说明，光标移动、复制粘贴、查找替换等"><a href="#第一部分：一般模式可用的按钮说明，光标移动、复制粘贴、查找替换等" class="headerlink" title=" 第一部分：一般模式可用的按钮说明，光标移动、复制粘贴、查找替换等 "></a><strong> 第一部分：一般模式可用的按钮说明，光标移动、复制粘贴、查找替换等 </strong></h3><table><thead><tr><th>移动光标的方法</th><th>移动光标的方法</th></tr></thead><tbody><tr><td>h或向左箭头键</td><td>光标向左移动一个字符</td></tr><tr><td>j或向下箭头键</td><td>光标向下移动一个字符</td></tr><tr><td>k或向上箭头键</td><td>光标向上移动一个字符</td></tr><tr><td>l或向右箭头键</td><td>光标向右移动一个字符</td></tr><tr><td><strong>如果想进行多次移动的话，例如向下移动30行,可以使用“30j“或”30+向下箭头键”的组合按键，即加上想要进行的次数（数字）后,按下操作即可</strong></td><td></td></tr><tr><td>[Ctrl]+[f]</td><td>屏幕向下移动一页，相当于[Page Down]按键（常用）</td></tr><tr><td>[Ctrl]+[b]</td><td>屏幕向上移动一页，相当于[Page Up]按键（常用）</td></tr><tr><td>[Ctrl]+[d]</td><td>屏幕向下移动半页</td></tr><tr><td>[Ctrl]+[u]</td><td>屏幕向上移动半页</td></tr><tr><td>+</td><td>光标移动到非空格符的下一行</td></tr><tr><td>-</td><td>光标移动到非空格符的上一行</td></tr><tr><td>n<space></space></td><td>那个n表示“数字”，例如20。按下数字后再按空格键，光标会向右移动这一行的n个字符。例如20<space>,则光标会向后面移动20个字符距离</space></td></tr><tr><td>0或者功能键[Home]</td><td>这是数字“0’’：移动到这一行的最前面字符处（常用）</td></tr><tr><td>$或功能键[End]</td><td>移动到这一行的最后面字符处（常用）</td></tr><tr><td>H</td><td>光标移动到这个屏幕的最上方那一行的第一个字符</td></tr><tr><td>M</td><td>光标移动到这个屏幕的中央那一行的第一个字符</td></tr><tr><td>L</td><td>光标移动到这个屏幕的最下方那一行的第一个字符</td></tr><tr><td>G</td><td>移动到这个文件的最后一行 （常用）</td></tr><tr><td>nG</td><td>n为数字。移动到这个文件的第0行。例如20G则会移动到这个文件的第20行（可配合:set nu）</td></tr><tr><td>gg</td><td>移动到这个文件的第一行，相当于1G（常用） </td></tr><tr><td>N(Enter)</td><td>n为数字。光标向下移动n行（常用） </td></tr><tr><td>查找与替换</td><td>查找与替换</td></tr><tr><td>/word</td><td>向下寻找一个名称为word的字符串。例如要在文件内查找vbird这个字符串，就输入/vbird即可（常用）</td></tr><tr><td>?word</td><td>向上寻找一个字符串名称为word的字符串</td></tr><tr><td>n</td><td>这个n是英文按键。代表重复前一个查找的操作。举例来说，如果刚才我们执行/vbird去向下查找vbird这个字符串，则按下n后，会向下继续查找下一个名称为vbird的字符串。如果是执行?vbird的话，那么按下n则会向上继续查找名称为vbird的字符串</td></tr><tr><td>N</td><td>这个N是英文按键。与n刚好相反，为“反向”进行前一个查找操作。例如输入/vbird后，按下N则表示向上查找vbird</td></tr><tr><td>使用/word配合n及N是非常有帮助的。可以让你重复地找到一些关键字</td><td></td></tr><tr><td>：n1,n2s/word1/word2/g</td><td>ni与n2为数字。在第n1与n2行之间寻找word1这个字符串，并将该字符串替换为word2。举例来说，在100到200行之间查找vbird并替换为VBRID则用“:100,200s/vbird/VBRID/g”（常用）</td></tr><tr><td>：1,$s/word1/word2/g</td><td>从第一行到最后一行查找word1字符串，并将该字符串替换为word2（常用）</td></tr><tr><td>：1,$s/word1/word2/gc</td><td>从第一行到最后一行查找word1字符串，并将该字符串替换为word2。且在替换前显示提示字符给用户确认（confirm）是否需要替换〔常用）</td></tr><tr><td>删除、复制与粘贴</td><td></td></tr><tr><td>x;X</td><td>在一行字当中，x为向后删除一个字符（相当于[DeL]按键),X为向前删除一个字符（相当于(Backspace]）（常用）</td></tr><tr><td>nx</td><td>n为数字，连续向后删除n个字符。举例来说，我要连续删除10个字符，“10x”</td></tr><tr><td>dd</td><td>除光标所在的那一整行（常用）</td></tr><tr><td>ndd</td><td>n为数字。删除光标所在的向下n行，例如20dd则是删除20行（常用）</td></tr><tr><td>d1G</td><td>删除光标所在到第一行的所有数据</td></tr><tr><td>dG</td><td>删除从光标所在到最后一行的所有数据</td></tr><tr><td>d$</td><td>删除从光标所在处到该行的最后一个字符</td></tr><tr><td>d0</td><td>那个是数字的0，删除从光标所在处到该行的最前面一个字符</td></tr><tr><td>yy</td><td>复制光标所在的那一行（常用）</td></tr><tr><td>nyy</td><td>n为数字。复制光标所在的向下n行，例如20yy则是复制20行（常用）</td></tr><tr><td>y1G</td><td>复制光标所在行到第一行的所有数据</td></tr><tr><td>yG</td><td>复制光标所在行到最后一行的所有数据</td></tr><tr><td>y0</td><td>复制光标所在的那个字符到该行行首的所有数据</td></tr><tr><td>y$</td><td>复制光标所在的那个字符到该行行尾的所有数据</td></tr><tr><td>p,P</td><td>p为将已复制的数据在光标下一行粘贴，p则为粘贴在光标上一行。举例来说，我目前光标在第20行，且已经复制了10行数据。则按下p后，那10行数据会粘贴在原本的20行之后，也即由21行开始粘贴。但如果是按下P呢？那么原本的第20行会被变成30行(常用)</td></tr><tr><td>J</td><td>将光标所在行与下一行的数椐结合成同一行</td></tr><tr><td>c</td><td>重复删除多个数据，例如向下删除10行，[10cj]</td></tr><tr><td>u</td><td>复原前一个操作（常用）</td></tr><tr><td>[Ctrl]+r</td><td>重做上一个操作（常用）</td></tr><tr><td>这个u与[Ctrl]+r很常用的命令。一个复原，另一个则是重做一次，利用它们，你的编辑会更加得心应手。</td><td></td></tr><tr><td>.</td><td>不要怀疑。这就是小数点。意思是重复前一个操作的意思。如果你想要重复删除，重复粘贴等操作，按下小数点”.”就好了（常用）</td></tr></tbody></table><h3 id="第二部分-一般模式切涣到编辑模式的可用的按钮说明"><a href="#第二部分-一般模式切涣到编辑模式的可用的按钮说明" class="headerlink" title=" 第二部分:一般模式切涣到编辑模式的可用的按钮说明 "></a><strong> 第二部分:一般模式切涣到编辑模式的可用的按钮说明 </strong></h3><table><thead><tr><th>进入插入或替换的编辑模式</th></tr></thead><tbody><tr><td>i,I</td><td>进入插入模式(Insertmode）：i为从目前光标所在处插入，I为在目前所在行的第一个非空格符处开始插入（常用）</td></tr><tr><td>a,A</td><td>进入插入模式(Insertmode）：a为从目前光标所在的下一个字符处开始插入，A为从光标所在行的最后一个字符处开始插入（常用）</td></tr><tr><td>o,O</td><td>进入插入模式(insertmode）：这是英文字母o的大小写。o为在目前光标所在的下一行处插入新的一行；O为在目前光标所在处的上一行插入新的一行（常用）</td></tr><tr><td>r,R</td><td>进入替换模式（Replacemode):r只会替换光标所在的那一个字符一次；R会一直替换光标所在的文字，直到按下[Esc]键为止（常用）</td></tr><tr><td><strong>上面这些按键中，在vi界面的左下角处会出现”–INSERT–”或”–REPLACE–”的字样。由名称就知道该操作了吧。特别注意的是，我们上面也提过了，你想要在文件里面输入字符时，一定要在左下角处看到INSERT或REPLACE才能输入</strong></td><td></td></tr><tr><td>(Esc)</td><td>退出编辑模式，回到一般模式中（常用）</td></tr></tbody></table><h3 id="第三部分：一般模式切换到命令行模式的可用的按钮说明"><a href="#第三部分：一般模式切换到命令行模式的可用的按钮说明" class="headerlink" title=" 第三部分：一般模式切换到命令行模式的可用的按钮说明 "></a><strong> 第三部分：一般模式切换到命令行模式的可用的按钮说明 </strong></h3><table><thead><tr><th>命令行的保存、离开等命令</th></tr></thead><tbody><tr><td>:w</td><td>将编辑的数据写入硬盘文件中（常用）</td></tr><tr><td>:w!</td><td>若文件属性为“只读”时，强制写入该文件。不过，到底能不能写入，还是跟你对该文件的文件权限有关啊</td></tr><tr><td>:q</td><td>离开vi（常用）</td></tr><tr><td>:q!</td><td>若曾修改过文件，又不想存储，使用“！”为强制离开不保存文件</td></tr><tr><td><strong> 注意一下啊，那个感叹号(!)在vi当中经常具有“强制”的意思</strong></td><td></td></tr><tr><td>:wq</td><td>回车后离开，若为“wq!”则为强制保存后离开（常用）</td></tr><tr><td>ZZ</td><td>这是大写的Z。若文件没有更动，则不保存离开，若文件已经被更动过，则保存后离开</td></tr><tr><td>:w[filename]</td><td>将编辑的数据保存成另一个文件（类似于另存文件）</td></tr><tr><td>:r[filename]</td><td>在编辑的数据中，读入另一个文件的数据，即将”filename”这个文件内容加到光标所在行后面</td></tr><tr><td>:n1,n2 w[filename]</td><td>将ni到n2的内容保存成filename这个文件</td></tr><tr><td>:! command</td><td>暫时离开vi到命令行模式下执行command的显示结果。例如”:! ls/home”即可在vi当中查看/home下面以Is输出的文件信息</td></tr><tr><td><strong>vim环境的更改</strong></td><td></td></tr><tr><td>:set nu</td><td>显示行号,设置之后,会在每一行的前缀显示该行的行号</td></tr><tr><td>:set nonu</td><td>与set nu相反,为取消行号</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> Vim </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>提交镜像到Docker Hub</title>
      <link href="/2017/10/05/push-images-to-Docker-hub/"/>
      <url>/2017/10/05/push-images-to-Docker-hub/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p>本文是如果将本地镜像提交到<code>Docker Hub</code>的记录。</p><hr><h3 id="PUSH"><a href="#PUSH" class="headerlink" title=" PUSH "></a><strong> PUSH </strong></h3><h4 id="注册"><a href="#注册" class="headerlink" title=" 注册 "></a><strong> 注册 </strong></h4><p>首先得有一个帐号23333333</p><p><a href="http://docker.com/" target="_blank" rel="noopener">注册传送门</a></p><hr><h4 id="登录帐号"><a href="#登录帐号" class="headerlink" title=" 登录帐号 "></a><strong> 登录帐号 </strong></h4><p>打开终端</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">##使用docker login命令登入Docker Hub</span><br><span class="line">$ docker login</span><br><span class="line">Username: your Username </span><br><span class="line">Password: your Password</span><br><span class="line"></span><br><span class="line">Login Succeeded</span><br></pre></td></tr></table></figure><hr><h4 id="生成镜像"><a href="#生成镜像" class="headerlink" title=" 生成镜像 "></a><strong> 生成镜像 </strong></h4><p>这里我只介绍如何将容器生成镜像。这样开发环境就可以放在云端,敲击几个命令即可搭建好开发环境。</p><p><code>docker commit [OPTIONS] CONTAINER [REPOSITORY[:TAG]]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">Create a new image from a container&apos;s changes</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -a, --author string    Author (e.g., &quot;John Hannibal Smith &lt;hannibal@a-team.com&gt;&quot;)</span><br><span class="line">  -c, --change list      Apply Dockerfile instruction to the created image</span><br><span class="line">      --help             Print usage</span><br><span class="line">  -m, --message string   Commit message</span><br><span class="line">  -p, --pause            Pause container during commit (default true)</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">## 示范</span><br><span class="line">## d09cdedcfb69 是 对应容器ID</span><br><span class="line"></span><br><span class="line">docker commit d09cdedcfb69 sail97/mysql</span><br><span class="line">OR</span><br><span class="line">sudo docker commit  -m&quot;a new mysql&quot; --author=&apos;Sail&apos; d09cdedcfb69 sail97/mysql:tagName</span><br></pre></td></tr></table></figure><hr><h4 id="提交"><a href="#提交" class="headerlink" title=" 提交 "></a><strong> 提交 </strong></h4><p><code>docker push your your Username/repoName[:TAG]</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## 示范</span><br><span class="line">docker push sail97/mysql</span><br><span class="line">docker push sail97/mysql:v0.0.1</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://lucifaer.github.io/2017/01/18/Docker%E5%AD%A6%E4%B9%A0%E5%B0%8F%E8%AE%B0%E2%80%94%E2%80%94Docker%E7%9A%84%E9%95%9C%E5%83%8F%E5%92%8C%E4%BB%93%E5%BA%93/" target="_blank" rel="noopener">Docker学习小记——Docker的镜像和仓库</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在ubuntu使用zsh</title>
      <link href="/2017/10/04/use-zsh-in-ubuntu/"/>
      <url>/2017/10/04/use-zsh-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p><code>zsh</code>是<code>shell</code>的一种,比<code>bash</code>更加强大。<code>zsh</code>是兼容<code>bash</code>的。</p><p>查看系统安装了哪些shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><hr><h3 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h3><p>安装zsh</p><p><code>sudo apt-get install zsh</code></p><p>确认是否安装成功<br><code>zsh --version</code></p><p>设置zsh为默认shell<br><code>sudo chsh -s $(which zsh)</code></p><p><strong> 注销重新登录 </strong><br><strong> 注销重新登录 </strong><br><strong> 注销重新登录 </strong></p><hr><h3 id="Oh-My-Zsh"><a href="#Oh-My-Zsh" class="headerlink" title=" Oh-My-Zsh "></a><strong> Oh-My-Zsh </strong></h3><p>zsh是shell中的战斗机,但是配置太过复杂,令人望而却步。</p><p><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a>就是解决zsh配置的神器。</p><h4 id="安装-1"><a href="#安装-1" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### via curl</span><br><span class="line">sh -c &quot;$(curl -fsSL https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh)&quot;</span><br><span class="line"></span><br><span class="line">### via wget</span><br><span class="line">sh -c &quot;$(wget https://raw.githubusercontent.com/robbyrussell/oh-my-zsh/master/tools/install.sh -O -)&quot;</span><br></pre></td></tr></table></figure><p>重启一下终端</p><hr><h4 id="主题"><a href="#主题" class="headerlink" title=" 主题 "></a><strong> 主题 </strong></h4><p>修改配置文件<code>~/.zshrc</code></p><p>在配置文件设置主题<br><code>ZSH_THEME=&quot;agnoster&quot;</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># you might need to install a special Powerline font on your console&apos;s host for this to work</span><br><span class="line"># 如果字体乱码</span><br><span class="line"></span><br><span class="line"># clone</span><br><span class="line">git clone https://github.com/powerline/fonts.git --depth=1</span><br><span class="line"></span><br><span class="line"># install</span><br><span class="line">cd fonts</span><br><span class="line">./install.sh</span><br></pre></td></tr></table></figure><p><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/External-themes" target="_blank" rel="noopener">更多主题</a></p><hr><h4 id="进一步优化"><a href="#进一步优化" class="headerlink" title=" 进一步优化"></a><strong> 进一步优化</strong></h4><p>(这一步我没遇到)<br>精简 user@hostname：添加export DEFAULT_USER=”username”到<code>~/.zshrc</code>中，可以隐藏固定的<code>user@hostname</code>信息。</p><hr><h3 id="配置文件"><a href="#配置文件" class="headerlink" title=" 配置文件 "></a><strong> 配置文件 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br></pre></td><td class="code"><pre><span class="line"># ZSH的环境变量</span><br><span class="line">export ZSH=/Users/dawang/.oh-my-zsh</span><br><span class="line"># 主题设置</span><br><span class="line"># 主题列表在 ~/.oh-my-zsh/themes/</span><br><span class="line"># 如果设置为 &quot;random&quot;, 每次开启都会是不同的主题</span><br><span class="line">ZSH_THEME=&quot;agnoster&quot;</span><br><span class="line"># 如果想要大小写敏感，可以取消注释下面的一行</span><br><span class="line"># CASE_SENSITIVE=&quot;true&quot;</span><br><span class="line"># 如果想要连接符不敏感，可以取消注释下面的一行。_ 和 - 将可以互换</span><br><span class="line"># HYPHEN_INSENSITIVE=&quot;true&quot;</span><br><span class="line"># 如果不想要自动更新，可以取消注释下面的一行</span><br><span class="line"># DISABLE_AUTO_UPDATE=&quot;true&quot;</span><br><span class="line"># 自动更新的时间间隔，单位是天，这里设置 30 天更新一次</span><br><span class="line">export UPDATE_ZSH_DAYS=30</span><br><span class="line"># 如果不想要 ls 命令输出带颜色，可以取消注释下面的一行</span><br><span class="line"># DISABLE_LS_COLORS=&quot;true&quot;</span><br><span class="line"># 是否禁止更改终端标题,不要禁止,不然所有终端tab只显示zsh了,而不随着目录的改变而改变显示</span><br><span class="line"># DISABLE_AUTO_TITLE=&quot;true&quot;</span><br><span class="line"># 自动纠正命令,不启用,不怎么好用</span><br><span class="line"># ENABLE_CORRECTION=&quot;true&quot;</span><br><span class="line"># 按tab键补全命令的时候,如果没什么可补全的就会出现三个红点,更人性化显示，这里我们启用</span><br><span class="line">COMPLETION_WAITING_DOTS=&quot;true&quot;</span><br><span class="line"># Uncomment the following line if you want to disable marking untracked files</span><br><span class="line"># under VCS as dirty. This makes repository status check for large repositories</span><br><span class="line"># much, much faster.</span><br><span class="line"># 不要在意这些细节，不需要改动</span><br><span class="line"># DISABLE_UNTRACKED_FILES_DIRTY=&quot;true&quot;</span><br><span class="line"># 历史命令日期显示格式</span><br><span class="line"># 有三种方式: &quot;mm/dd/yyyy&quot;|&quot;dd.mm.yyyy&quot;|&quot;yyyy-mm-dd&quot;，我比较习惯最后那种</span><br><span class="line">HIST_STAMPS=&quot;yyyy-mm-dd&quot;</span><br><span class="line"># Would you like to use another custom folder than $ZSH/custom?</span><br><span class="line"># ZSH_CUSTOM=/path/to/new-custom-folder</span><br><span class="line"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span><br><span class="line"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span><br><span class="line"># Example format: plugins=(rails git textmate ruby lighthouse)</span><br><span class="line"># 插件设置，如果添加太多启动速度会比较慢</span><br><span class="line">plugins=(git autojump)</span><br><span class="line">[[ -s ~/.autojump/etc/profile.d/autojump.zsh ]] &amp;&amp; . ~/.autojump/etc/profile.d/autojump.zsh</span><br><span class="line"># 剩下部分比较不常改动 </span><br><span class="line"># User configuration</span><br><span class="line">export PATH=&quot;/usr/local/bin:/usr/bin:/bin:/usr/sbin:/sbin:/opt/X11/bin:/Library/TeX/texbin&quot;</span><br><span class="line"># export MANPATH=&quot;/usr/local/man:$MANPATH&quot;</span><br><span class="line">source $ZSH/oh-my-zsh.sh</span><br><span class="line"># You may need to manually set your language environment</span><br><span class="line"># export LANG=en_US.UTF-8</span><br><span class="line"># Preferred editor for local and remote sessions</span><br><span class="line"># if [[ -n $SSH_CONNECTION ]]; then</span><br><span class="line">#   export EDITOR=&apos;vim&apos;</span><br><span class="line"># else</span><br><span class="line">#   export EDITOR=&apos;mvim&apos;</span><br><span class="line"># fi</span><br><span class="line"># Compilation flags</span><br><span class="line"># export ARCHFLAGS=&quot;-arch x86_64&quot;</span><br><span class="line"># ssh</span><br><span class="line"># export SSH_KEY_PATH=&quot;~/.ssh/dsa_id&quot;</span><br><span class="line"># Set personal aliases, overriding those provided by oh-my-zsh libs,</span><br><span class="line"># plugins, and themes. Aliases can be placed here, though oh-my-zsh</span><br><span class="line"># users are encouraged to define aliases within the ZSH_CUSTOM folder.</span><br><span class="line"># For a full list of active aliases, run `alias`.</span><br><span class="line">#</span><br><span class="line"># Example aliases</span><br><span class="line"># alias zshconfig=&quot;mate ~/.zshrc&quot;</span><br><span class="line"># alias ohmyzsh=&quot;mate ~/.oh-my-zsh&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="别名设置"><a href="#别名设置" class="headerlink" title=" 别名设置 "></a><strong> 别名设置 </strong></h3><p>查看所有的命令别名</p><p><code>alias</code> </p><p><code>alias | grep git</code></p><p>设置命令别名</p><p><code>.zshrc</code>中添加<code>alias shortcut=&#39;this is the origin command&#39;</code>一行就相当于添加了别名</p><hr><h3 id="插件"><a href="#插件" class="headerlink" title=" 插件 "></a><strong> 插件 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"># Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)</span><br><span class="line"># Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/</span><br><span class="line"># Example format: plugins=(rails git textmate ruby lighthouse)</span><br><span class="line"># Add wisely, as too many plugins slow down shell startup.</span><br><span class="line">plugins=(git)</span><br></pre></td></tr></table></figure><h4 id="git"><a href="#git" class="headerlink" title=" git "></a><strong> git </strong></h4><p>git插件是默认安装好的,更多可以看<a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="noopener">这儿</a></p><p>列举一些常用的别名</p><table><thead><tr><th>g</th><th>git</th></tr></thead><tbody><tr><td>ga</td><td>git add</td></tr><tr><td>gaa</td><td>git add –all</td></tr><tr><td>gapa</td><td>git add –patch</td></tr><tr><td>gb</td><td>git branch</td></tr><tr><td>gba</td><td>git branch -a</td></tr><tr><td>gbr</td><td>git branch –remote</td></tr><tr><td>gcam</td><td>git commit -a -m</td></tr><tr><td>gcf</td><td>git config –list</td></tr><tr><td>gco</td><td>git checkout</td></tr><tr><td>gd</td><td>git diff</td></tr><tr><td>gf</td><td>git fetch</td></tr><tr><td>ghh</td><td>git help</td></tr><tr><td>gl</td><td>git pull</td></tr><tr><td>glgg</td><td>git log –graph –color</td></tr><tr><td>gm</td><td>git merge</td></tr><tr><td>gp</td><td>git push</td></tr><tr><td>gst</td><td>git status</td></tr></tbody></table><hr><h4 id="autojump"><a href="#autojump" class="headerlink" title=" autojump "></a><strong> autojump </strong></h4><p><strong> 这个是神器,强烈推荐 </strong></p><p>安装<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">## 更新源</span><br><span class="line">## sudo apt-get update</span><br><span class="line"></span><br><span class="line">## 安装</span><br><span class="line">sudo apt-get install autojump</span><br><span class="line"></span><br><span class="line">## 看readme</span><br><span class="line">cat /usr/share/doc/autojump/README.Debian</span><br><span class="line"></span><br><span class="line">.zshrc配置文件的最后一行加上. /usr/share/autojump/autojump.sh以使得qutojump生效</span><br></pre></td></tr></table></figure></p><hr><h3 id="一些SHELL命令"><a href="#一些SHELL命令" class="headerlink" title=" 一些SHELL命令 "></a><strong> 一些SHELL命令 </strong></h3><p>最常用的查看shell的命令，但不能实时反映当前shell<br><code>echo $SHELL</code></p><p>环境变量中shell的匹配查找<br><code>env | grep SHELL</code></p><p>先查看当前shell的pid，再定位到此shell进程<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ echo $$</span><br><span class="line">xxx</span><br><span class="line">$ ps -ef | grep xxx</span><br><span class="line"></span><br><span class="line">###一条命令即可实现：</span><br><span class="line">$ ps -ef | grep `echo $$` | grep -v grep | grep -v ps</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://wdxtub.com/2016/02/18/oh-my-zsh/" target="_blank" rel="noopener">zsh 全程指南</a><br><a href="http://macshuo.com/?p=676" target="_blank" rel="noopener">终极 Shell</a><br><a href="https://github.com/robbyrussell/oh-my-zsh/wiki/Plugin:git" target="_blank" rel="noopener">Plugin:git</a><br><a href="https://github.com/robbyrussell/oh-my-zsh" target="_blank" rel="noopener">oh-my-zsh</a><br><a href="http://www.cnblogs.com/zfc2201/articles/6032292.html" target="_blank" rel="noopener">查看当前使用的shell</a><br><a href="https://my.oschina.net/wolx/blog/688447" target="_blank" rel="noopener">zsh下 一些命令行效率工具</a><br><a href="https://github.com/wting/autojump" target="_blank" rel="noopener">autojump</a><br><a href="http://blog.csdn.net/shengzhu1/article/details/54590158" target="_blank" rel="noopener"> Ubuntu16.04LTS安装zsh+oh-my-zsh+autojump</a><br><a href="https://linux.cn/article-3401-1.html" target="_blank" rel="noopener">自动补完不算什么，一键直达目录才是终极神器</a><br><a href="http://www.barretlee.com/blog/2015/03/30/autojump-in-mac/" target="_blank" rel="noopener">Mac下的效率工具autojump</a><br><a href="http://oska874.cf/%E8%AF%B4%E6%98%8E/autojump%E4%BD%BF%E7%94%A8%E6%96%B9%E6%B3%95.html" target="_blank" rel="noopener">Autojump使用方法</a></p>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>github多个帐号使用</title>
      <link href="/2017/10/02/Multiple-github-count-in-one-system/"/>
      <url>/2017/10/02/Multiple-github-count-in-one-system/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p>除了自己的github帐号还有工作室的github帐号,本文记录下多个帐号的使用。</p><hr><h3 id="hexo"><a href="#hexo" class="headerlink" title=" hexo "></a><strong> hexo </strong></h3><p>这里简要叙述下hexo的搭建</p><p>node.js和git是前提条件,不再罗嗦</p><p>安装hexo<br><code>npm install -g hexo</code></p><p>进入blog目录</p><p>初始化,生成模板<br><code>hexo init</code></p><p>预览<br><code>hexo server</code></p><p>然后放入自己的主题文件和曾经的md文件就可以了 </p><p>我自己是多个分支进行管理,其中一个分支就是用来管理md文件以及配置文件的</p><hr><h3 id="多个帐号使用"><a href="#多个帐号使用" class="headerlink" title=" 多个帐号使用 "></a><strong> 多个帐号使用 </strong></h3><p><span class="under0">新建user的SSH Key</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -t rsa -C &quot;username&quot; </span><br><span class="line"></span><br><span class="line">## (注：username为你git上的用户名)</span><br><span class="line">## (注：username为你git上的用户名)</span><br><span class="line">## (注：username为你git上的用户名)</span><br><span class="line"></span><br><span class="line"># 设置名称</span><br><span class="line">Enter file in which to save the key (/c/Users/Administrator/.ssh/id_rsa): </span><br><span class="line"></span><br><span class="line">/c/Users/Administrator/.ssh/id_rsa_user2</span><br></pre></td></tr></table></figure><hr><p><span class="under0">添加密钥到<code>SSH agent</code>中</span></p><p>因为默认只读取<code>id_rsa</code>，为了让SSH识别新的私钥，需将其添加到<code>SSH agent</code>中<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh-add ~/.ssh/id_rsa_user2</span><br><span class="line"></span><br><span class="line">## 如果出现Could not open a connection to your authentication agent的错误，就试着用以下命令：</span><br><span class="line">ssh-agent bash</span><br><span class="line">ssh-add ~/.ssh/id_rsa_user2</span><br></pre></td></tr></table></figure></p><hr><p><span class="under0">修改<code>config</code>文件</span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"> 在~/.ssh目录下找到config文件，如果没有就创建：</span><br><span class="line">touch config    </span><br><span class="line">然后修改我的config配置如下：</span><br><span class="line">如果存在的话，其实就是往这个config中添加一个Host：</span><br><span class="line">#建一个github别名，新建的帐号使用这个别名做克隆和更新</span><br><span class="line">其规则就是：从上至下读取config的内容，在每个Host下寻找对应的私钥。</span><br><span class="line">这里将GitHub SSH仓库地址中的git@github.com替换成新建的Host别名如：github2，那么原地址 是</span><br><span class="line">：git@github.com:test/Mywork.git，替换后应该是：github2:test/Mywork.git.</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## 示范</span><br><span class="line"></span><br><span class="line">Ｈost github.com</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentifyFile ~/.ssh/id_rsa</span><br><span class="line"></span><br><span class="line">## 设置第二个用户</span><br><span class="line">## 新建一个github别名,新建的帐号使用这个别名做克隆和更新</span><br><span class="line"></span><br><span class="line">Ｈost github2</span><br><span class="line">    HostName github.com</span><br><span class="line">    PreferredAuthentications publickey</span><br><span class="line">    IdentifyFile ~/.ssh/id_rsa_user2</span><br></pre></td></tr></table></figure></p><hr><p><span class="under0"> 添加到github帐号</span></p><p>将新生成的<code>~/.ssh/id_rsa_user2.pub</code>文件，将里面的内容添加到GitHub对应帐号<code>setting</code>中的<code>SSH key</code></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://jingyan.baidu.com/article/948f592414ad67d80ef5f966.html" target="_blank" rel="noopener">手把手教你同时使用多github帐号的SSH key</a><br><a href="http://blog.csdn.net/u014343528/article/details/48787221" target="_blank" rel="noopener">git “Could not read from remote repository.Please make sure you have the correct access rights.”解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>再谈docker搭建nginx+php+mysql开发环境</title>
      <link href="/2017/09/26/retalk-use-docker-to-build-development-environment-of-php-mysql-nginx/"/>
      <url>/2017/09/26/retalk-use-docker-to-build-development-environment-of-php-mysql-nginx/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h2><p>前几天我写了一篇博客<a href="http://www.sail.name/2017/09/23/use-docker-to-build-development-environment-of-php-mysql-nginx/">docker搭建nginx+php+mysql开发环境</a>。当时主要是参考一片博文搭建记录的。</p><p>可是这样搭建出来是有一些问题的,具体的原因我还没找出。当然那篇文章还是有一些参考价值。</p><p>于是我又自己重新搭建了一个,踩了很多很多的坑,好在都解决了。</p><p>本文就是记录我的搭建过程,踩的坑,以及结合<code>thinkphp</code>项目存在的一些问题解决方案。</p><p><code>docker</code>的好处我就不说了,和<code>git</code>一样,谁用谁知道。</p><p>本文参考的文章,会放在文末的参考。部分参考内容会在文中给出参考链接。</p><hr><h2 id="搭建"><a href="#搭建" class="headerlink" title=" 搭建 "></a><strong> 搭建 </strong></h2><h3 id="环境介绍"><a href="#环境介绍" class="headerlink" title=" 环境介绍 "></a><strong> 环境介绍 </strong></h3><p>操作系统<br><code>Ubuntu 16.04 LTS</code><br>docker版本<br><code>Docker version 17.05.0-ce</code></p><hr><h3 id="项目结构参考"><a href="#项目结构参考" class="headerlink" title=" 项目结构参考 "></a><strong> 项目结构参考 </strong></h3><p>这里先给出项目结构参考树形图,有的内容是在搭建中产生的,故仅供参考,与后文内容结合看。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sail@codeBetter:~$ tree www -L 1</span><br><span class="line">www</span><br><span class="line">├── default.conf   </span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">├── mysql</span><br><span class="line">├── php.ini</span><br><span class="line">└── www.conf</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">sail@codeBetter:~$ tree www -L 2</span><br><span class="line">www</span><br><span class="line">├── default.conf</span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── coalball</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.php</span><br><span class="line">│   └── mysql.php</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── auto.cnf</span><br><span class="line">│   ├── ca-key.pem</span><br><span class="line">│   ├── ca.pem</span><br><span class="line">│   ├── client-cert.pem</span><br><span class="line">│   ├── client-key.pem</span><br><span class="line">│   ├── coalball</span><br><span class="line">│   ├── coalball.sql</span><br><span class="line">│   ├── ib_buffer_pool</span><br><span class="line">│   ├── ibdata1</span><br><span class="line">│   ├── ib_logfile0</span><br><span class="line">│   ├── ib_logfile1</span><br><span class="line">│   ├── ibtmp1</span><br><span class="line">│   ├── mysql</span><br><span class="line">│   ├── performance_schema</span><br><span class="line">│   ├── private_key.pem</span><br><span class="line">│   ├── public_key.pem</span><br><span class="line">│   ├── server-cert.pem</span><br><span class="line">│   ├── server-key.pem</span><br><span class="line">│   ├── sys</span><br><span class="line">│   └── test_db</span><br><span class="line">├── php.ini</span><br><span class="line">└── www.conf</span><br><span class="line"></span><br><span class="line">### 去掉一些无关内容</span><br><span class="line"></span><br><span class="line">www</span><br><span class="line">├── default.conf </span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── coalball</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.php</span><br><span class="line">│   └── mysql.php</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── coalball.sql</span><br><span class="line">├── php.ini</span><br><span class="line">└── www.conf</span><br></pre></td></tr></table></figure><hr><h3 id="MySQL"><a href="#MySQL" class="headerlink" title=" MySQL "></a><strong> MySQL </strong></h3><p>从 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Dockerhub</a>拉取 <code>MySQL</code> 镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull mysql</span><br></pre></td></tr></table></figure></p><p>实例容器,启动数据库<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">$ docker run -p 3306:3306 --name mysql -v ~/www/mysql/:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d --privileged=true mysql</span><br><span class="line"></span><br><span class="line">### 命令说明：</span><br><span class="line">-p 3306:3306：将容器的3306端口映射到主机的3306端口</span><br><span class="line">-v ~/www/mysql/:/var/lib/mysql：将主机当前用户目录下的mysql文件夹挂载到容器的/var/lib/mysql 下，在mysql容器中产生的数据就会保存在本机mysql目录下</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</span><br><span class="line">-d 后台运行容器</span><br><span class="line">--name 给容器指定别名</span><br><span class="line">--privileged=true  可能会碰到权限问题，需要加参数</span><br></pre></td></tr></table></figure></p><hr><h3 id="Nginx"><a href="#Nginx" class="headerlink" title=" Nginx "></a><strong> Nginx </strong></h3><p>从 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Dockerhub</a>拉取 <code>Nginx</code> 镜像：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure></p><p>实例容器,启动Nginx<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name nginx -p 80:80 -d nginx</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">运行成功后，终端会返回容器的ID号，上面的命令中，</span><br><span class="line"></span><br><span class="line">run：创建一个新的容器</span><br><span class="line">--name：指定容器的名称（如果留空，docker会自动分配一个名称）</span><br><span class="line">-p：导出容器端口到本地服务器，格式：-p &lt;local-port&gt;:&lt;container-port&gt;。在本例中，我们映射容器的80端口到本地服务器的80端口。</span><br><span class="line">nginx：是 Dockerhub 上下载nginx镜像名称（如果本地没有可用的镜像，Docker会自动下载一个）</span><br><span class="line">-d：后台启动。</span><br></pre></td></tr></table></figure></p><p>通过浏览器浏览：<code>http://localhost</code> 就会看到<code>Nginx</code>欢迎界面。</p><p>几个命令介绍<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps -a                       # 查看正在运行的容器</span><br><span class="line">$ docker ps                          # 查看容器</span><br><span class="line">$ docker stop nginx                  # 停止正在运行的容器</span><br><span class="line">$ docker start nginx                 # 启动一个已经停止的容器</span><br><span class="line">$ docker start nginx                 # 重启一个容器</span><br><span class="line">$ docker rm nginx                    # 删除容器</span><br></pre></td></tr></table></figure></p><h4 id="映射HTML路径"><a href="#映射HTML路径" class="headerlink" title=" 映射HTML路径 "></a><strong> 映射HTML路径 </strong></h4><p>默认情况下，<code>Docker nginx</code>服务器的<code>HTML</code>路径（网站根目录）在容器<code>/usr/share/nginx/html</code>目录下，现在需要把这个目录映射到本地服务器的<code>~/www/html</code>目录。在上面命令的基础上加上-v参数，具体如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">## 先删除之前的容器</span><br><span class="line">$ docker rm nginx    </span><br><span class="line"></span><br><span class="line">$ docker run --name nginx -p 80:80 -d -v ~/www/html:/usr/share/nginx/html nginx</span><br></pre></td></tr></table></figure></p><p> -v的参数格式为：<code>&lt;local-volumes&gt;:&lt;container-volumes&gt;</code>。</p><p>在<code>~/www/html</code>下创建一个<code>index.html</code>文件，内容随意</p><p>比如 <code>hello world</code></p><p>在浏览器上访问 <code>http://localhost</code>，刷新一下就可以看到新的内容了。</p><h4 id="配置-Nginx"><a href="#配置-Nginx" class="headerlink" title=" 配置 Nginx "></a><strong> 配置 Nginx </strong></h4><p><code>Nginx</code>的强大很大部分体现在配置文件上，对于一些高级的应用来说，自定义<code>Nginx</code>非常重要。所以，我们需要把<code>Nginx</code>的配置文件复制到本地服务器目录：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/www</span><br><span class="line">$ docker cp nginx:/etc/nginx/conf.d/default.conf default.conf</span><br></pre></td></tr></table></figure><p>再加一个-v参数，把本地的配置文件映射到容器上，在重启容器：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop nginx</span><br><span class="line"></span><br><span class="line">$ docker rm nginx</span><br><span class="line"></span><br><span class="line">$ docker run --name nginx -p 80:80 -v ~/www/html:/usr/share/nginx/html -v ~/www/default.conf:/etc/nginx/conf.d/default.conf -d nginx</span><br></pre></td></tr></table></figure></p><p>如果配置文件有修改，需要重启容器生效：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker restart nginx</span><br></pre></td></tr></table></figure></p><p>这样就可以直接在本地修改配置文件了。</p><hr><h3 id="PHP-FPM"><a href="#PHP-FPM" class="headerlink" title=" PHP-FPM "></a><strong> PHP-FPM </strong></h3><p>从 <a href="https://hub.docker.com/" target="_blank" rel="noopener">Dockerhub</a>拉取 <code>PHP-FPM</code> 镜像：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull php:fpm</span><br></pre></td></tr></table></figure><p>实例容器,启动<code>php:fpm</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run --name php-fpm -p 9000:9000 -d php:fpm</span><br></pre></td></tr></table></figure><p>把配置文件复制到本地：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ cd ~/www</span><br><span class="line"></span><br><span class="line">$ docker cp php-fpm:/usr/local/etc/php-fpm.d/www.conf www.conf</span><br><span class="line">$ docker cp php-fpm:/usr/src/php/php.ini-production php.ini</span><br></pre></td></tr></table></figure><p>这里要特别注意一下,<code>php-fpm:/usr/src/php/php.ini-production</code>,在实例出的容器中,不一定是路径<code>src/php</code>,拉取的<code>php:fpm</code>版本镜像不同,<code>php.ini</code>路径不同。</p><p>可以这样查看<code>php.ini</code>路径</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"># 先进入容器</span><br><span class="line">$ docker exec -it php-fpm bash</span><br><span class="line"></span><br><span class="line">$ cd /usr/src/ &amp;&amp; ls</span><br><span class="line"></span><br><span class="line"># 有以下两个文件</span><br><span class="line">php.tar.xz   php.tar.xz.asc</span><br><span class="line"></span><br><span class="line"># 这里我们需要解压php.tar.xz文件,因为php.ini-production就在其中</span><br><span class="line">//先解压xz</span><br><span class="line"> xz -d php.tar.xz  </span><br><span class="line">//再解压tar</span><br><span class="line"># tar -xvf  php.tar</span><br></pre></td></tr></table></figure><p>解压完毕后, <code>php.ini-production</code>便出现了，我当时的路径是<code>/usr/src/php-7.1.9/php.ini-production</code>。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">即,前文中的</span><br><span class="line"></span><br><span class="line">$ docker cp php-fpm:/usr/src/php/php.ini-production php.ini</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">$ docker cp php-fpm:/usr/src/php-7.1.9/php.ini-production php.ini</span><br></pre></td></tr></table></figure><p>在本地服务器修改 <code>php.ini</code> 的内容，设置<code>cgi.fix_pathinfo=1</code>（要先删除前面的;注释符）。</p><hr><p>前面关于php-fpm的一系列操作主要是为了获得配置文件,并没有挂载本地目录到容器中,所以接下来需要删除容器,重新实例一个容器出来</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop php-fpm</span><br><span class="line">$ docker rm php-fpm</span><br><span class="line"></span><br><span class="line">$ docker run --name php-fpm -p 9000:9000 --link mysql:mysql -v ~/www/html:/var/www/html -v ~/www/www.conf:/usr/local/etc/php-fpm.d/www.conf -v ~/www/php.ini:/usr/local/etc/php/php.ini -d php:fpm</span><br></pre></td></tr></table></figure><h3 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title=" 配置Nginx "></a><strong> 配置Nginx </strong></h3><p>修改<code>Nginx</code>的配置文件，也就是前面我们从容器中复制出的<code>default.conf</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  _;</span><br><span class="line">    root /usr/share/nginx/html;</span><br><span class="line">    index index.php index.html index.htm;</span><br><span class="line"></span><br><span class="line">    #charset koi8-r;</span><br><span class="line">    #access_log  /var/log/nginx/log/host.access.log  main;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        #root   /usr/share/nginx/html;</span><br><span class="line">        #index  index.php index.html index.htm;</span><br><span class="line">try_files $uri $uri/ =404;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    error_page  404  /404.html;</span><br><span class="line">    location = /40x.html &#123;</span><br><span class="line">        root    /user/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /usr/share/nginx/html;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # proxy the PHP scripts to Apache listening on 127.0.0.1:80</span><br><span class="line">    #</span><br><span class="line">    #location ~ \.php$ &#123;</span><br><span class="line">    #    proxy_pass   http://127.0.0.1;</span><br><span class="line">    #&#125;</span><br><span class="line"></span><br><span class="line">    # pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000</span><br><span class="line">    #</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /var/www/html/;</span><br><span class="line">        fastcgi_pass   php-fpm:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">#        fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    # deny access to .htaccess files, if Apache&apos;s document root</span><br><span class="line">    # concurs with nginx&apos;s one</span><br><span class="line">    #</span><br><span class="line">    location ~ /\.ht &#123;</span><br><span class="line">        deny  all;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>关于配置文件,有个需要注意的地方<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /var/www/html/;</span><br><span class="line">        fastcgi_pass   php-fpm:9000;</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">#        fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">        fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">include        fastcgi_params;  </span><br><span class="line">要放在</span><br><span class="line">fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;</span><br><span class="line">的前面</span><br></pre></td></tr></table></figure></p><p>删除刚才的nginx容器,重新生成一个</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop nginx</span><br><span class="line">$ docker rm nginx</span><br><span class="line"></span><br><span class="line">$ docker run --name nginx -p 80:80 --link php-fpm -v ~/www/html:/usr/share/nginx/html -v ~/www/default.conf:/etc/nginx/conf.d/default.conf -d nginx</span><br></pre></td></tr></table></figure><p>在 <code>~/www/html</code> 下创建 <code>index.php</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">    phpinfo();</span><br></pre></td></tr></table></figure></p><p>浏览器访问<code>http://localhost</code></p><p><img src="/img/docker/phpNgxinMysql/phpinfo.png" alt="phpinfo"></p><hr><p>上面的讲述基本描述了如何搭建一个基本的<code>php+nginx+mysql</code>的开发环境。</p><p>然而在实际开发中,还是有问题的,比如php需要安装的一系列的扩展,比如<code>pdo_mysql</code>，我们可以通过编写<code>Dockerfile</code>的方式来定制镜像</p><h2 id="编写Dockerfile"><a href="#编写Dockerfile" class="headerlink" title=" 编写Dockerfile "></a><strong> 编写Dockerfile </strong></h2><p>这里我们再看一下前面展示的项目结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">www</span><br><span class="line">├── default.conf </span><br><span class="line">├── Dockerfile</span><br><span class="line">├── html</span><br><span class="line">│   ├── coalball</span><br><span class="line">│   ├── index.html</span><br><span class="line">│   ├── index.php</span><br><span class="line">│   └── mysql.php</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── coalball.sql</span><br><span class="line">├── php.ini</span><br><span class="line">└── www.conf</span><br></pre></td></tr></table></figure><p><code>Dockerfile</code>如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">FROM php:5.6-fpm</span><br><span class="line"></span><br><span class="line">ADD www.conf   /usr/local/etc/php-fpm.d/www.conf</span><br><span class="line">ADD php.ini    /usr/src/php/php.ini</span><br><span class="line"></span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">        libfreetype6-dev \</span><br><span class="line">        libjpeg62-turbo-dev \</span><br><span class="line">        libmcrypt-dev \</span><br><span class="line">        libpng12-dev \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) iconv mcrypt \</span><br><span class="line">    &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</span><br><span class="line">    &amp;&amp; docker-php-ext-install -j$(nproc) gd \</span><br><span class="line">    &amp;&amp; docker-php-ext-install pdo_mysql</span><br><span class="line"></span><br><span class="line">EXPOSE 9000</span><br></pre></td></tr></table></figure><p>依旧先删除之前的<code>php-fpm</code>容器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$ docker stop php-fpm</span><br><span class="line">$ docker rm php-fpm</span><br><span class="line"></span><br><span class="line"># 构建 运行</span><br><span class="line"># 进入项目的目录,比如我的www文件夹就是建在/home/username下的</span><br><span class="line"></span><br><span class="line">$ cd ~/www</span><br><span class="line">$ docker build -t php-fpm:v1 ./</span><br><span class="line">$ docker run --name php-fpm -p 9000:9000 --link mysql:mysql -v ~/www/html:/var/www/html -v ~/www/www.conf:/usr/local/etc/php-fpm.d/www.conf -v ~/www/php.ini:/usr/local/etc/php/php.ini -d php:fpm</span><br><span class="line"></span><br><span class="line">即可</span><br></pre></td></tr></table></figure><p>当然具体需要哪些扩展还是根据自己的需求来编写<code>Dockerfile</code>。</p><hr><h3 id="结合thinkphp"><a href="#结合thinkphp" class="headerlink" title=" 结合thinkphp "></a><strong> 结合thinkphp </strong></h3><p>前面的内容就基本搭建好了开发环境,这里我仅仅谈跑tp项目遇到一些坑(包括一些容器内的坑),做些记录与分享</p><p><strong> <span class="under0">因为这部分踩的坑比较多,或许记得不太清楚,仅作参考,文末会留下一些参考链接</span> </strong></p><h4 id="How-to-install-the-locate-command"><a href="#How-to-install-the-locate-command" class="headerlink" title=" How to install the locate command? "></a><strong> How to install the locate command? </strong></h4><p>如果<strong><span class="under0"> 在容器中 </span></strong>下载东西失败,且提示没有<code>locate</code>命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">$ apt-get update</span><br><span class="line">$ apt-get install mlocate</span><br></pre></td></tr></table></figure><p>然而此时执行<code>locate</code>寻找一些文件还会有些问题</p><h4 id="locate-can-not-stat-var-lib-mlocate-mlocate-db’-No-such-file-or-directory"><a href="#locate-can-not-stat-var-lib-mlocate-mlocate-db’-No-such-file-or-directory" class="headerlink" title=" locate: can not stat () `/var/lib/mlocate/mlocate.db’: No such file or directory "></a><strong> locate: can not stat () `/var/lib/mlocate/mlocate.db’: No such file or directory </strong></h4><p>更新下数据库</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ updatedb</span><br><span class="line"></span><br><span class="line"># 一次不行的话，多执行几次该命令</span><br></pre></td></tr></table></figure><hr><h4 id="Undefined-class-constant-‘MYSQL-ATTR-INIT-COMMAND’"><a href="#Undefined-class-constant-‘MYSQL-ATTR-INIT-COMMAND’" class="headerlink" title=" Undefined class constant ‘MYSQL_ATTR_INIT_COMMAND’ "></a><strong> Undefined class constant ‘MYSQL_ATTR_INIT_COMMAND’ </strong></h4><p>修改配置文件<code>php.ini</code></p><p>把以下这几项配置都开启,如果你的配置文件(php.ini)中没有,自行添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">extension=php_mysqli.dll</span><br><span class="line">extension=php_pdo.dll</span><br><span class="line">extension=php_pdo_mysql.dll</span><br><span class="line">extension=pdo.so</span><br><span class="line">extension=pdo_mysql.so</span><br><span class="line"></span><br><span class="line"># 如果pdo_mysql扩展安装失败 </span><br><span class="line">可以执行 </span><br><span class="line">docker-php-ext-install pdo_mysql</span><br></pre></td></tr></table></figure></p><h4 id="No-such-file-or-directory"><a href="#No-such-file-or-directory" class="headerlink" title=" No such file or directory "></a><strong> No such file or directory </strong></h4><p>如果访问站点,出现这个错误,可以看看你的phpinfo页面,是否</p><p><img src="/img/docker/phpNgxinMysql/pdo.png" alt="pdo"></p><p><code>pdo_mysql.default_socket</code>是否有<code>Ｌocal Value</code> 和 <code>Ｍaster Value</code></p><p>没有的话,先进入mysql容器中的mysql</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ docker exec -it mysql bash</span><br><span class="line">$ mysql -u root -p</span><br><span class="line"># enter your password</span><br></pre></td></tr></table></figure><p>执行<br><code>mysql&gt; STATUS;</code></p><p><img src="/img/docker/phpNgxinMysql/mysql.png" alt="mysql"></p><p>记录下<code>UNIX socket</code>的值</p><p>在你的<code>php.ini</code>文件将以下的几项配置为<code>UNIX socket</code>的值,没有自行添加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">pdo_mysql.default_socket</span><br><span class="line">mysql.default_socket</span><br><span class="line">mysqli.default_socket</span><br><span class="line"></span><br><span class="line">## 示范</span><br><span class="line">mysqli.default_socket = /var/run/mysqld/mysqld.sock</span><br></pre></td></tr></table></figure></p><p>倘若还有问题,可以参考下<a href="https://stackoverflow.com/questions/22188026/sqlstatehy000-2002-no-such-file-or-directory" target="_blank" rel="noopener">stackoverflow上的这个问题</a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### 这里可以跳过,个人记录</span><br><span class="line">creating a symbolic link in: /var/mysql (create the directory if it does not exist)</span><br><span class="line">cd /var/mysql &amp;&amp; sudo ln -s /Applications/MAMP/tmp/mysql/mysql.sock</span><br><span class="line"></span><br><span class="line">This fixed it for me. I&apos;m not using MAMP though, so it was cd /var/mysql &amp;&amp; sudo ln -s /tmp/mysql.sock</span><br></pre></td></tr></table></figure><hr><h3 id="SQLSTATE-HY000-General-error"><a href="#SQLSTATE-HY000-General-error" class="headerlink" title=" SQLSTATE[HY000]: General error "></a><strong> SQLSTATE[HY000]: General error </strong></h3><h3 id="SQLSTATE-HY000-2002"><a href="#SQLSTATE-HY000-2002" class="headerlink" title=" SQLSTATE[HY000] [2002] "></a><strong> SQLSTATE[HY000] [2002] </strong></h3><h3 id="SQLSTATE-HY000-2002-Connection-refused"><a href="#SQLSTATE-HY000-2002-Connection-refused" class="headerlink" title=" SQLSTATE[HY000] [2002] Connection refused "></a><strong> SQLSTATE[HY000] [2002] Connection refused </strong></h3><p>最后如果项目出现了这类问题,还需要修改项目配置文件的有关数据的配置</p><p><code>&#39;DB_HOST&#39;=&gt;&#39;xxx&#39;,//数据服务器地址</code></p><p><strong> <span class="under0">如果用的是虚拟主机,容器的话，’DB_HOST’ =&gt; ‘’,这一项应该填数据库的主机地址，而不是本机地址的localhost或者127.0.0.1 </span></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">执行</span><br><span class="line">docker inspect --format=&apos;&#123;&#123;.NetworkSettings.IPAddress&#125;&#125;&apos; $CONTAINER_ID</span><br><span class="line"></span><br><span class="line">即可获得容器IP</span><br><span class="line"></span><br><span class="line">但是容器的ip每次启动都会改变，知道容器ip没什么意义！ </span><br><span class="line">但是容器的ip每次启动都会改变，知道容器ip没什么意义！ </span><br><span class="line">但是容器的ip每次启动都会改变，知道容器ip没什么意义！</span><br></pre></td></tr></table></figure><p>这样配置即可,前提是你的容器命名为mysql<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&apos;DB_HOST&apos;=&gt;&apos;mysql&apos;,//数据服务器地址</span><br></pre></td></tr></table></figure></p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>以上就是搭建的大致记录。</p><p>当然可以自己写一份<code>docker-compose.yml</code>使整个搭建过程自动化起来,只需要敲击几个命令即可,必行每次写shell也挺麻烦的。因为时间原因,这儿我就没写了。</p><p>也可以发布成镜像,这样就可以一次搭建环境,永久使用了,下次重装了系统,拉取下即可。</p><hr><p><a href="https://www.awaimai.com/728.html" target="_blank" rel="noopener">Docker部署LNMP完整教程</a><br><a href="http://avnpc.com/pages/build-php-develop-env-by-docker" target="_blank" rel="noopener">Docker在PHP项目开发环境中的应用</a><br><a href="http://www.169it.com/article/9024845268002546255.html" target="_blank" rel="noopener">tar.xz如何解压:linux和windows下tar.xz解压命令介绍</a><br><a href="http://blog.csdn.net/w13770269691/article/details/6987384" target="_blank" rel="noopener">locate: can not stat () `/var/lib/mlocate/mlocate.db’: No such file or directory</a><br><a href="http://www.linuxidc.com/Linux/2012-12/76150.htm" target="_blank" rel="noopener">Mac下PHP连接MySQL报错＂No such file or directory＂的解决办法</a><br><a href="https://stackoverflow.com/questions/22188026/sqlstatehy000-2002-no-such-file-or-directory" target="_blank" rel="noopener">SQLSTATE[HY000] [2002] No such file or directory [duplicate]</a><br><a href="https://segmentfault.com/q/1010000001637726" target="_blank" rel="noopener">宿主机上如何获得 docker container 容器的 ip 地址？</a><br><a href="https://mozillazg.github.io/2016/01/docker-get-containers-ip-address.html" target="_blank" rel="noopener">如何获取 docker 容器(container)的 ip 地址</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>docker搭建nginx+php+mysql开发环境</title>
      <link href="/2017/09/23/use-docker-to-build-development-environment-of-php-mysql-nginx/"/>
      <url>/2017/09/23/use-docker-to-build-development-environment-of-php-mysql-nginx/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p>本文是对<code>docker</code>搭建<code>nginx+php+mysql</code>开发环境的记录。</p><p>主要都是参考了<a href="http://www.tanhui.bid/docker/2016/10/19/%E4%BD%BF%E7%94%A8Docker-docker-compose-%E6%90%AD%E5%BB%BAnginx+php+mysql-%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">这篇文章</a>。</p><p>因为这篇博客写得特别好,特意搬迁到自己的博客,当然在原文基础上增加了一些内容。</p><hr><p>主要使用了两种方式搭建环境。分别是自己写<code>shell</code>和利用<code>docker-compose</code>。</p><h3 id="第一种"><a href="#第一种" class="headerlink" title=" 第一种 "></a><strong> 第一种 </strong></h3><h4 id="MySQL"><a href="#MySQL" class="headerlink" title=" MySQL "></a><strong> MySQL </strong></h4><p>获取MySQL 直接使用官方镜像,输入以下命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker pull mysql:5.6</span><br></pre></td></tr></table></figure></p><p>运行MySQL<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">docker run -p 3306:3306 --name test_mysql -v $PWD/mysql/data:/var/lib/mysql -e MYSQL_ROOT_PASSWORD=123456 -d --privileged=true mysql:5.6</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">### 命令说明：</span><br><span class="line"></span><br><span class="line">-p 3306:3306：将容器的3306端口映射到主机的3306端口</span><br><span class="line">-v PWD/mysql/data:/var/lib/mysql：将主机当前目录下的mysql/data文件夹挂载到容器的/var/lib/mysql 下，在mysql容器中产生的数据就会保存在本机mysql/data目录下</span><br><span class="line">-e MYSQL_ROOT_PASSWORD=123456：初始化root用户的密码</span><br><span class="line">-d 后台运行容器</span><br><span class="line">--name 给容器指定别名</span><br><span class="line">--privileged=true  可能会碰到权限问题，需要加参数</span><br></pre></td></tr></table></figure></p><p>执行以下命令进入mysql 运行环境</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it test_mysql bash</span><br><span class="line"></span><br><span class="line">这样就进入mysql容器了，可以查看mysql 命令</span><br><span class="line">mysql －u root -p</span><br><span class="line">输入密码就可以操作数据库</span><br><span class="line">mysql&gt; show databases;</span><br><span class="line">+--------------------+</span><br><span class="line">| Database           |</span><br><span class="line">+--------------------+</span><br><span class="line">| information_schema |</span><br><span class="line">| mysql              |</span><br><span class="line">| performance_schema |</span><br><span class="line">+--------------------+</span><br><span class="line">4 rows in set (0.07 sec)</span><br><span class="line">mysql&gt; create database if not exists test_db;</span><br><span class="line">Query OK, 1 row affected, 1 warning (0.00 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; use test_db</span><br><span class="line">Reading table information for completion of table and column names</span><br><span class="line">You can turn off this feature to get a quicker startup with -A</span><br><span class="line"></span><br><span class="line">Database changed</span><br><span class="line">mysql&gt; create table people (name varchar(10), age int);</span><br><span class="line">Query OK, 0 rows affected (0.13 sec)</span><br><span class="line"></span><br><span class="line">mysql&gt; insert into people values(&apos;liming&apos;,10);</span><br><span class="line">Query OK, 1 row affected (0.03 sec)</span><br></pre></td></tr></table></figure><h4 id="PHP"><a href="#PHP" class="headerlink" title=" PHP "></a><strong> PHP </strong></h4><p>PHP 同样使用官方的php镜像，不过需要支持mysql扩展。所以我们这次用Dockerfile 来构建一个镜像，以下是Dockerfile<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">FROM  php:5.6-fpm</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line">libfreetype6-dev \</span><br><span class="line">libjpeg62-turbo-dev \</span><br><span class="line">libpng12-dev \</span><br><span class="line">vim \</span><br><span class="line">&amp;&amp; docker-php-ext-install pdo_mysql \</span><br><span class="line">&amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</span><br><span class="line">&amp;&amp; docker-php-ext-install gd \</span><br></pre></td></tr></table></figure></p><p>我们在原本的php5.6上安装了一些工具以及扩展。</p><p>build 我们新建的镜像<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">docker build -t=&quot;php-fpm5.6/v2&quot; .</span><br></pre></td></tr></table></figure></p><p>然后用这个镜像跑一个php环境的容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">docker run -d -p 9000:9000 -v /home/sail/codelife/code/be/php/:/var/www/html/ --name php-with-mysql --link test_mysql:mysql  --volumes-from test_mysql --privileged=true php-fpm5.6/v2</span><br><span class="line"></span><br><span class="line">### 参数解析</span><br><span class="line"></span><br><span class="line">－v 将本地磁盘上的php代码挂载到docker 环境中，对应docker的目录是 /var/www/html/</span><br><span class="line">--name 新建的容器名称 php-with-mysql</span><br><span class="line">--link 链接的容器，链接的容器名称：在该容器中的别名，运行这个容器是，docker中会自动添加一个host识别被链接的容器ip</span><br><span class="line">--privileged=true 权限问题</span><br></pre></td></tr></table></figure></p><p>进入容器<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">docker exec -it php-with-mysql bash</span><br><span class="line">cd /var/www/html &amp;&amp; ls</span><br></pre></td></tr></table></figure></p><p>这里就会看到你本地磁盘下所挂载的文件,在该目录下可以添加一个 <code>mysql.php</code> 文件，如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">try &#123;</span><br><span class="line">    $dbh = new PDO(&apos;mysql:host=mysql;dbname=test_db&apos;, &apos;root&apos;,&apos;12</span><br><span class="line">3456&apos;);</span><br><span class="line">    foreach($dbh-&gt;query(&apos;SELECT * from people&apos;) as $row) &#123;</span><br><span class="line">        print_r($row);</span><br><span class="line">    &#125;</span><br><span class="line">    $dbh = null;</span><br><span class="line">&#125; catch (PDOException $e) &#123;</span><br><span class="line">    print &quot;Error!: &quot; . $e-&gt;getMessage() . &quot;&lt;br/&gt;&quot;;</span><br><span class="line">    die();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>退出编辑<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">root@f5c9b982690a:/var/www/html# php mysql.php</span><br><span class="line">Array</span><br><span class="line">(</span><br><span class="line">    [name] =&gt; liming</span><br><span class="line">    [0] =&gt; liming</span><br><span class="line">    [age] =&gt; 10</span><br><span class="line">    [1] =&gt; 10</span><br><span class="line">)</span><br></pre></td></tr></table></figure></p><p>输出结果如上，这样我们php链接mysql就成功了。</p><h4 id="Nginx"><a href="#Nginx" class="headerlink" title=" Nginx "></a><strong> Nginx </strong></h4><p>安装Nginx镜像</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker pull nginx</span><br></pre></td></tr></table></figure><p>本地编辑nginx配置文件 default.conf 绝对路径为（/home/tanhui/composeTest/nginx/conf/default.conf） 文件内容如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen       80;</span><br><span class="line">    server_name  localhost;</span><br><span class="line"></span><br><span class="line">    location / &#123;</span><br><span class="line">        root   /var/www/html;</span><br><span class="line">        index  index.html index.htm index.php; # 增加index.php</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    #error_page  404              /404.html;</span><br><span class="line"></span><br><span class="line">    # redirect server error pages to the static page /50x.html</span><br><span class="line">    #</span><br><span class="line">    error_page   500 502 503 504  /50x.html;</span><br><span class="line">    location = /50x.html &#123;</span><br><span class="line">        root   /var/www/html;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~ \.php$ &#123;</span><br><span class="line">        root           /var/www/html; # 代码目录</span><br><span class="line">        fastcgi_pass   phpfpm:9000;    # 修改为phpfpm容器</span><br><span class="line">        fastcgi_index  index.php;</span><br><span class="line">        fastcgi_param  SCRIPT_FILENAME  $document_root$fastcgi_script_name; # 修改为$document_root</span><br><span class="line">        include        fastcgi_params;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="运行容器"><a href="#运行容器" class="headerlink" title="运行容器"></a>运行容器</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">docker run -d --link php-with-mysql:phpfpm --volumes-from php-with-mysql -p 81:80 -v /home/sail/codelife/code/be/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf --name nginx-php --privileged=true</span><br><span class="line"></span><br><span class="line">### 参数解析</span><br><span class="line">--link php-with-mysql:phpfpm 将php容器链接到nginx容器里来，phpfpm是nginx容器里的别名。</span><br><span class="line">--volumes-from php-with-mysql 将php-with-mysql 容器挂载的文件也同样挂载到nginx容器中</span><br><span class="line">-v /home/sail/codelife/code/be/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf  将nginx 的配置文件替换，挂载本地编写的配置文件</span><br><span class="line"></span><br><span class="line">docker exec -it nginx-php bash</span><br><span class="line">root@32de01dbee49:/# cd /var/www/html/&amp;&amp;ls</span><br><span class="line">  mysql.php</span><br></pre></td></tr></table></figure><p>我们可以看到挂载在php－mysql容器里的文件夹同样也被挂载在nginx容器里，这时在本机方案127.0.0.1：81/mysql.php,数据库中的数据就在浏览器上输出了。 这样 nginx＋php＋mysql 的连接就基本完成了。</p><hr><h3 id="方法二"><a href="#方法二" class="headerlink" title=" 方法二 "></a><strong> 方法二 </strong></h3><p>上面介绍了用纯docker 命令启动容器，链接容器，但是每次启动容器时都要填写一堆参数，难免容易出错，出错了之后还要删除该容器才能重新跑。接下来就介绍一下 <code>docker-compose.</code></p><h3 id="Docker-Compose"><a href="#Docker-Compose" class="headerlink" title=" Docker Compose "></a><strong> Docker Compose </strong></h3><p>`Docker Compose 是 Docker 官方编排（Orchestration）项目之一，负责快速在集群中部署分布式应用。</p><p><code>Compose</code> 定位是 “定义和运行多个 Docker 容器的应用<code>（Defining and running multi-container Docker applications）</code>”，其前身是开源项目 Fig，目前仍然兼容 Fig 格式的模板文件。</p><p>在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目<code>（project）</code>。</p><p><code>Compose</code> 中有两个重要的概念：</p><p><code>服务（service）</code>：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。<br>项目(project)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。<br><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 <code>Python</code> 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持<code>Docker API</code>，就可以在其上利用 Compose 来进行编排管理。</p><h4 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo pip install -U docker-compose</span><br></pre></td></tr></table></figure><p>可以看到类似如下输出，说明安装成功</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">Collecting docker-compose</span><br><span class="line">  Downloading docker-compose-1.8.0.tar.gz (149kB): 149kB downloaded</span><br><span class="line">...</span><br><span class="line">Successfully installed docker-compose cached-property requests texttable websocket-client docker-py dockerpty six enum34 backports.ssl-match-hostname ipaddress</span><br></pre></td></tr></table></figure><p>安装成功后，可以查看 <code>docker-compose</code> 命令的用法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line">$ docker-compose -h</span><br><span class="line">Define and run multi-container applications with Docker.</span><br><span class="line"></span><br><span class="line">Usage:</span><br><span class="line">  docker-compose [-f=&lt;arg&gt;...] [options] [COMMAND] [ARGS...]</span><br><span class="line">  docker-compose -h|--help</span><br><span class="line"></span><br><span class="line">Options:</span><br><span class="line">  -f, --file FILE           Specify an alternate compose file (default: docker-compose.yml)</span><br><span class="line">  -p, --project-name NAME   Specify an alternate project name (default: directory name)</span><br><span class="line">  --x-networking            (EXPERIMENTAL) Use new Docker networking functionality.</span><br><span class="line">                            Requires Docker 1.9 or later.</span><br><span class="line">  --x-network-driver DRIVER (EXPERIMENTAL) Specify a network driver (default: &quot;bridge&quot;).</span><br><span class="line">                            Requires Docker 1.9 or later.</span><br><span class="line">  --verbose                 Show more output</span><br><span class="line">  -v, --version             Print version and exit</span><br><span class="line"></span><br><span class="line">Commands:</span><br><span class="line">  build              Build or rebuild services</span><br><span class="line">  help               Get help on a command</span><br><span class="line">  kill               Kill containers</span><br><span class="line">  logs               View output from containers</span><br><span class="line">  pause              Pause services</span><br><span class="line">  port               Print the public port for a port binding</span><br><span class="line">  ps                 List containers</span><br><span class="line">  pull               Pulls service images</span><br><span class="line">  restart            Restart services</span><br><span class="line">  rm                 Remove stopped containers</span><br><span class="line">  run                Run a one-off command</span><br><span class="line">  scale              Set number of containers for a service</span><br><span class="line">  start              Start services</span><br><span class="line">  stop               Stop services</span><br><span class="line">  unpause            Unpause services</span><br><span class="line">  up                 Create and start containers</span><br><span class="line">  migrate-to-labels  Recreate containers to add labels</span><br><span class="line">  version            Show the Docker-Compose version information</span><br></pre></td></tr></table></figure></p><p><code>Compose</code>的默认配置文件是<code>docker-compose.yml</code>。让我们看看下面这个文件：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><span class="line">nginx:</span><br><span class="line">  build: ./nginx</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;81:80&quot;</span><br><span class="line">  links:</span><br><span class="line">    - &quot;phpfpm&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - /home/sail/codelife/code/be/php:/var/www/html/</span><br><span class="line">    - /home/sail/codelife/code/be/nginx/conf/default.conf:/etc/nginx/conf.d/default.conf</span><br><span class="line">phpfpm:</span><br><span class="line">  build: ./phpfpm</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;9000:9000&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - ./code/:/var/www/html/</span><br><span class="line">  links:</span><br><span class="line">    - &quot;mysql&quot;</span><br><span class="line">mysql:</span><br><span class="line">  build: ./mysql</span><br><span class="line">  ports:</span><br><span class="line">    - &quot;3306:3306&quot;</span><br><span class="line">  volumes:</span><br><span class="line">    - /home/sail/mysql/data/:/var/lib/mysql/</span><br><span class="line">  environment:</span><br><span class="line">    MYSQL_ROOT_PASSWORD : 123456</span><br></pre></td></tr></table></figure><p>以上的配置文件路径有绝对路径,有相对路径,<code>build</code>参数代表该路径下的<code>Dockerfile</code>先看一下大概的目录结构</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><span class="line">$ tree composeTest</span><br><span class="line">composeTest</span><br><span class="line">├── code</span><br><span class="line">│   ├── index.php</span><br><span class="line">│   ├── mysql.php</span><br><span class="line">│   └── testmysql.php</span><br><span class="line">│</span><br><span class="line">├── docker-compose.yml</span><br><span class="line">├── index.php</span><br><span class="line">├── mysql</span><br><span class="line">│   ├── data</span><br><span class="line">│   │   ├── auto.cnf</span><br><span class="line">│   │   ├── ibdata1</span><br><span class="line">│   │   ├── ib_logfile0</span><br><span class="line">│   │   ├── ib_logfile1</span><br><span class="line">│   │   ├── mysql [error opening dir]</span><br><span class="line">│   │   ├── performance_schema [error opening dir]</span><br><span class="line">│   │   └── test_db [error opening dir]</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">├── nginx</span><br><span class="line">│   ├── conf</span><br><span class="line">│   │   └── default.conf</span><br><span class="line">│   └── Dockerfile</span><br><span class="line">└── phpfpm</span><br><span class="line">    └── Dockerfile</span><br><span class="line"></span><br><span class="line">10 directories, 23 files</span><br><span class="line"></span><br><span class="line">// Dockerfile 如下</span><br><span class="line">$ cat composeTest/mysql/Dockerfile</span><br><span class="line">FROM mysql:5.6</span><br><span class="line"></span><br><span class="line"># tanhui @ localhost in ~ [20:57:51]</span><br><span class="line">$ cat composeTest/phpfpm/Dockerfile</span><br><span class="line"> FROM  php:5.6-fpm</span><br><span class="line"> RUN apt-get update &amp;&amp; apt-get install -y \</span><br><span class="line"> libfreetype6-dev \</span><br><span class="line"> libjpeg62-turbo-dev \</span><br><span class="line"> libpng12-dev \</span><br><span class="line"> vim \</span><br><span class="line"> &amp;&amp; docker-php-ext-install pdo_mysql \</span><br><span class="line"> &amp;&amp; docker-php-ext-configure gd --with-freetype-dir=/usr/include/ --with-jpeg-dir=/usr/include/ \</span><br><span class="line"> &amp;&amp; docker-php-ext-install gd \</span><br><span class="line"></span><br><span class="line"># tanhui @ localhost in ~ [20:58:19]</span><br><span class="line">$ cat composeTest/nginx/Dockerfile</span><br><span class="line">FROM nginx:latest</span><br><span class="line">RUN apt-get update &amp;&amp; apt-get install -y vim</span><br></pre></td></tr></table></figure><p>现在运行这三个容器只要使用命令 <code>docker-compose up -d</code></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.jianshu.com/p/2217cfed29d7" target="_blank" rel="noopener">Docker Compose 配置文件详解</a><br><a href="http://www.tanhui.bid/docker/2016/10/19/%E4%BD%BF%E7%94%A8Docker-docker-compose-%E6%90%AD%E5%BB%BAnginx+php+mysql-%E7%8E%AF%E5%A2%83" target="_blank" rel="noopener">Docker docker-compose 配置Nginx+Php+Mysql开发环境</a><br><a href="https://www.gitbook.com/book/yeasy/docker_practice/details" target="_blank" rel="noopener">Docker —— 从入门到实践</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决docker容器中” Could not resolve host”</title>
      <link href="/2017/09/23/solve-could-not-resolve-host-error-in-docker/"/>
      <url>/2017/09/23/solve-could-not-resolve-host-error-in-docker/</url>
      
        <content type="html"><![CDATA[<h2 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h2><p>在docke容器中执行<code>apt-get update</code>出现了一些系列错误,</p><h2 id="解决"><a href="#解决" class="headerlink" title="解决"></a>解决</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ docker run busybox nslookup google.com</span><br></pre></td></tr></table></figure><p>如果出现了如下内容<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">nslookup: can&apos;t resolve &apos;google.com&apos;   </span><br><span class="line">(Server:    8.8.8.8</span><br><span class="line">Address 1: 8.8.8.8)</span><br></pre></td></tr></table></figure></p><p>那么我们遇到的问题应该是相同的。</p><hr><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ nmcli dev show | grep &apos;IP4.DNS&apos;</span><br></pre></td></tr></table></figure></p><p>出现<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">IP4.DNS[1]:              x.x.x.x</span><br><span class="line">IP4.DNS[2]:              x.x.x.x</span><br></pre></td></tr></table></figure></p><p>在<code>/etc/docker</code>目录下创建文件<code>daemon.json</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">sudo vi daemon.json</span><br><span class="line"></span><br><span class="line">## 此处的dns是填写你前面查询出来的</span><br><span class="line">## 有几个写几个</span><br><span class="line"></span><br><span class="line">&#123;                                                                          </span><br><span class="line">    &quot;dns&quot;: [&quot;x.x.x.x&quot;, &quot;x.x.x.x&quot;]                                                                           </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>重启docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo service docker restart</span><br></pre></td></tr></table></figure></p><p>最后,检验一下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">$ docker run busybox nslookup google.com</span><br><span class="line">Server:    x.x.x.x</span><br><span class="line">Address 1: x.x.x.x</span><br><span class="line">Name:      google.com</span><br><span class="line">Address 1: 2a00:1450:4009:811::200e lhr26s02-in-x200e.1e100.net</span><br><span class="line">Address 2: 216.58.198.174 lhr25s10-in-f14.1e100.net</span><br></pre></td></tr></table></figure><p>大致出现如上信息,即可。</p><hr><h2 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h2><p><a href="https://stackoverflow.com/questions/24991136/docker-build-could-not-resolve-archive-ubuntu-com-apt-get-fails-to-install-a" target="_blank" rel="noopener">Docker build “Could not resolve ‘archive.ubuntu.com’” apt-get fails to install anything</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>在Ubuntu中安装CLion</title>
      <link href="/2017/09/18/install-clion-in-ubuntu/"/>
      <url>/2017/09/18/install-clion-in-ubuntu/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p>本文是对在Ubuntu安装C++开发环境以及CLion使用的记录。</p><p>在windows下面使用CFree,codeblocks之类的软件是集成了gcc之类的,而在linux中需要自己安装GCC和G++。</p><p>这里搬运一段<a href="https://www.zhihu.com/question/20940822" target="_blank" rel="noopener">知乎上关于GCC和G++关系的解释</a></p><p>gcc 最开始的时候是 GNU C Compiler, 如你所知，就是一个c编译器。但是后来因为这个项目里边集成了更多其他不同语言的编译器，GCC就代表 the GNU Compiler Collection，所以表示一堆编译器的合集。 g++则是GCC的c++编译器。现在你在编译代码时调用的gcc，已经不是当初那个c语言编译器了，更确切的说他是一个驱动程序，根据代码的后缀名来判断调用c编译器还是c++编译器 (g++)。比如你的代码后缀是*.c，他会调用c编译器还有linker去链接c的library。如果你的代码后缀是cpp, 他会调用g++编译器，当然library call也是c++版本的。当然我说了这么多你可能感到有些混乱，没关系，你就把gcc当成c语言编译器，g++当成c++语言编译器用就是了。</p><hr><h3 id="GCC-G-安装"><a href="#GCC-G-安装" class="headerlink" title=" GCC G++ 安装 "></a><strong> GCC G++ 安装 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get install build-essential</span><br><span class="line">gcc --version</span><br><span class="line"></span><br><span class="line">sudo apt-get install g++-version</span><br><span class="line">g++ --version</span><br></pre></td></tr></table></figure><hr><h3 id="编译-链接-运行"><a href="#编译-链接-运行" class="headerlink" title=" 编译 链接 运行 "></a><strong> 编译 链接 运行 </strong></h3><h4 id="hello-cpp"><a href="#hello-cpp" class="headerlink" title=" hello.cpp "></a><strong> hello.cpp </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">using namespace std;</span><br><span class="line">int main() &#123;</span><br><span class="line">    cout &lt;&lt; &quot;Hello, world&quot; &lt;&lt; endl;</span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>编译hello.cpp<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -c hello.cpp</span><br></pre></td></tr></table></figure></p><p>输出结果是一个hello.o文件，这是编译过程的生成的中间文件。-c 表示只编译，不链接。</p><p>链接hello.o生成hello.out<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o hello.out hello.o</span><br></pre></td></tr></table></figure></p><p>输出结果是一个hello.out文件，这是最终的可执行文件。-o 表示输出文件，hello.o是上一步生成的.o文件。</p><p>当然，前面两步是可以合并执行，直接执行命令<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ g++ -o hello.out hello.cpp</span><br></pre></td></tr></table></figure></p><p>运行hello.out<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ ./hello.out</span><br></pre></td></tr></table></figure></p><hr><h3 id="CLion"><a href="#CLion" class="headerlink" title=" CLion "></a><strong> CLion </strong></h3><p>在<a href="https://www.jetbrains.com/clion/download/" target="_blank" rel="noopener">官网下载</a></p><p>然后在安装目录下的bin目录打开终端执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">./clion.sh</span><br></pre></td></tr></table></figure><p>即可</p><hr><h3 id="杂"><a href="#杂" class="headerlink" title=" 杂 "></a><strong> 杂 </strong></h3><p>如果在clion中编译运行文件有错误,可以考虑以下几点原因</p><h4 id="1-配置Cmake"><a href="#1-配置Cmake" class="headerlink" title=" 1.配置Cmake "></a><strong> 1.配置Cmake </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo   apt-get install cmake</span><br><span class="line">然后运用</span><br><span class="line">whereis  cmake</span><br><span class="line">whereis  gdb</span><br><span class="line">获取到路径,填入到Clion的配置中就可以了</span><br></pre></td></tr></table></figure><h4 id="2"><a href="#2" class="headerlink" title=" 2. "></a><strong> 2. </strong></h4><p>新建项目时</p><p>仅需要改变<code>Ｃ++ Ｅxecutable</code>的路径,不需要改变<code>Ｃ++ Ｌibrary</code>。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://feixiao.github.io/2015/06/16/clion_1/" target="_blank" rel="noopener">Clion的安装和使用</a><br><a href="http://blog.csdn.net/u011596455/article/details/53271446" target="_blank" rel="noopener">在ubuntu16.04下安装JetBriansClion</a><br><a href="http://www.cnblogs.com/lidabo/p/5888997.html" target="_blank" rel="noopener">在Linux中使用VS Code编译调试C++项目</a><br><a href="http://www.cnblogs.com/lidabo/p/5888997.html" target="_blank" rel="noopener">ubuntu 安装 GCC 和 G++ C++ 开发环境</a></p>]]></content>
      
      
      <categories>
          
          <category> C++ </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CLion </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装双系统</title>
      <link href="/2017/09/03/install-dual-system/"/>
      <url>/2017/09/03/install-dual-system/</url>
      
        <content type="html"><![CDATA[<p>本文是对安装win10+ubuntu的记录,具体的细节不作介绍，文末有参考链接。</p><p><span class="under0">主要记录我踩的一些坑。</span></p><hr><p>因为一些误操作,电脑只有ubuntu,<strong> 在装win10的时候(先装win10,再装linux),显示界面只有两个磁盘分区0和1,而且还不能操作。</strong></p><p>在<a href="http://tieba.baidu.com/p/1371438126" target="_blank" rel="noopener">贴吧中找到了解决方案</a></p><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line">以win7光盘安装为例我们可以在安装完系统后分区，也可以在安装时分区，安装程序创建的都是主分区，并没有创建逻辑分区的任何选项，这样的</span><br><span class="line">情况导致创建4个主分区后剩余的空间无法继续分配，用windows的Diskpart命令可以很简单的帮助我们解决这个问题。</span><br><span class="line">Diskpart命令是Windows环境下的一个命令，利用diskpart可实现对硬盘的分区管理，包括创建分区、删除分区、合并（扩展</span><br><span class="line">）分区，而且设置分区后不用重启电脑也能生效。 利用Diskpart命令来分区，既不用借助第三方工具，也不会产生100MB的“系统保留”分区，其次分区操作直接设置即刻生效</span><br><span class="line">，不用重新启动计算机。</span><br><span class="line"></span><br><span class="line">以一块98G的盘为例</span><br><span class="line">40G【主分区】+20G+20G+18G【逻辑分区】</span><br><span class="line">在安装windows7过程中，到磁盘分区这一步时停下，按组合键“Shift+10”进入cmd窗口。</span><br><span class="line"></span><br><span class="line">输入diskpart 回车即可启动diskpart工具，其提示符为“DISKPART&gt;”。</span><br><span class="line"></span><br><span class="line">输入List Disk回车，显示本机所有磁盘，便于操作正确的磁盘。</span><br><span class="line"></span><br><span class="line">输入Select Disk 0选择要操作的磁盘</span><br><span class="line"></span><br><span class="line">输入Clean 清除已选硬盘上的所有分区。</span><br><span class="line"></span><br><span class="line">输入Create Partition Primary Size=40960 在已选硬盘上创建容量为40960MB（即40G——40*1024=40960）的主磁盘分</span><br><span class="line">区。</span><br><span class="line"></span><br><span class="line">输入Active 激活当前磁盘分区，即刚分好的主磁盘分区。</span><br><span class="line"></span><br><span class="line">输入format quick　快速格式化当前磁盘分区。</span><br><span class="line"></span><br><span class="line">输入Create Partition Extended将剩余空间全部划分为扩展磁盘分区。</span><br><span class="line"></span><br><span class="line">输入Create Partition Logical Size=20480在扩展磁盘分区上创建容量为20G的逻辑磁盘分区。</span><br><span class="line"></span><br><span class="line">输入format quick　快速格式化当前磁盘分区。</span><br><span class="line"></span><br><span class="line">输入Create Partition Logical Size=20480 在扩展磁盘分区上创建容量为20G的第二个逻辑磁盘分区</span><br><span class="line"></span><br><span class="line">输入Format Quick　快速格式化当前磁盘分区。</span><br><span class="line"></span><br><span class="line">输入Create Partition Logical 在扩展磁盘分区上将剩余的磁盘空间创建逻辑磁盘分区。</span><br><span class="line"></span><br><span class="line">输入Format Quick　快速格式化当前磁盘分区。</span><br><span class="line"></span><br><span class="line">输入Exit 　退出diskpart工具</span><br><span class="line"></span><br><span class="line">刷新</span><br></pre></td></tr></table></figure><hr><h3 id="安装Ubuntu-空闲分区不可用"><a href="#安装Ubuntu-空闲分区不可用" class="headerlink" title=" 安装Ubuntu,空闲分区不可用 "></a><strong> 安装Ubuntu,空闲分区不可用 </strong></h3><p><a href="http://blog.csdn.net/d202x/article/details/53312210" target="_blank" rel="noopener">主要参考了这篇文章</a></p><p>这篇文章中总结道</p><p>（1）先设置  交换空间，\ ，\home(可以不设置)这三个挂载点，都用逻辑分区，最后设置主分区挂载\boot,实在不行所有的都用逻辑分区<br>（2）如果上一步不行，那就说明你电脑里的硬盘已经有4个主分区了，或者是ubuntu认为你有4个主分区了，而linux系统最多只能有4个主分区，所以这样你就需要重新对电脑进行分盘分区，建议就一个主分区，其他都是逻辑分区，再从逻辑分区分出空闲空间挂载linux系统。</p><p>当然这个总结在我安装中并没有起作用,<strong> 我是最后设置的 \ (主分区的挂载),搞定的 </strong></p><hr><h3 id="丢失MSVCR110-dll"><a href="#丢失MSVCR110-dll" class="headerlink" title=" 丢失MSVCR110.dll "></a><strong> 丢失MSVCR110.dll </strong></h3><p>装完系统,在安装wamp的时候出现了这个错误</p><p><strong> 无法启动此程序，因为计算机中丢失 MSVCR110.dll。尝试重新安装该程序以解决此问题 </strong></p><p>(这里多说一句,如果安装64位的不成功,可以安装32位的。)</p><p>这里的这个问题,是需要安装vc库文件,链接在wamp官网安装的时候就有提示,<strong> 关键是把32位和64位的都安装即可。</strong></p><hr><h3 id="MySQL密码设置"><a href="#MySQL密码设置" class="headerlink" title=" MySQL密码设置 "></a><strong> MySQL密码设置 </strong></h3><p>此外安装完wamp后,mysql密码默认为空,可以像如下这样设置密码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mysql -u root</span><br><span class="line"></span><br><span class="line">mysql&gt; SET PASSWORD FOR &apos;root&apos;@&apos;localhost&apos; = PASSWORD(&apos;xxxxx&apos;);</span><br></pre></td></tr></table></figure><hr><h3 id="补充"><a href="#补充" class="headerlink" title=" 补充 "></a><strong> 补充 </strong></h3><p>今天是2017年10月4日。昨晚帮两位朋友装了系统,记录一些补充的东西。</p><p>在安装的时候选择自己划分区</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">安装的过程中需要涉及到分区，为了以免日后重装，我的建议是如下分区：</span><br><span class="line">1）、5G(20G),主分区,空间起始位置,Ext4日志文件系统,/</span><br><span class="line">2）、内存的大小,逻辑分区,空间起始位置,swap交换空间,无挂载点</span><br><span class="line">3）、200MB,逻辑分区,空间起始位置,Ext4日志文件系统,/boot</span><br><span class="line">4）、剩余的空间,逻辑分区,空间起始位置,Ext4日志文件系统,/home</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">主分区：ubuntu系统程序区域，包括日后的程序更新，安装软件等。</span><br><span class="line">交换分区：当物理内存不足时，可以取出这部分当做内存使用。</span><br><span class="line">启动分区：linux的grub启动数据区域</span><br><span class="line">用户数据目录：存放个人数据，当然也可以不给，因为ubuntu里面是可以操作windows空间的。</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">大概是：5G+8G+200M+5G=20G左右</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.jianshu.com/p/2eebd6ad284d" target="_blank" rel="noopener">Windows10+Ubuntu双系统安装[多图]</a><br><a href="http://blog.csdn.net/fesdgasdgasdg/article/details/54183577" target="_blank" rel="noopener">Ubuntu 16.04与Win10双系统双硬盘安装图解</a><br><a href="http://jingyan.baidu.com/article/656db918824e77e381249cac.html" target="_blank" rel="noopener">Windows10系统怎么安装,win10系统安装的方法</a><br><a href="http://tieba.baidu.com/p/1921063462#25238222438l" target="_blank" rel="noopener">windows无法安装到这个硬盘空间。必须安装在ntfs的分区</a><br><a href="http://tieba.baidu.com/p/1371438126" target="_blank" rel="noopener">windows7安装中使用diskpart为硬盘分区</a><br><a href="http://blog.csdn.net/d202x/article/details/53312210" target="_blank" rel="noopener">关于解决安装ubuntu双系统中出现的不能识别磁盘分区、空闲空间变不可用问题</a><br><a href="http://www.cnblogs.com/liufei88866/p/5619215.html" target="_blank" rel="noopener">MySQL修改root密码的多种方法</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ctrl+C不能结束程序进程</title>
      <link href="/2017/09/03/ctrl+c-cannot-kill-source/"/>
      <url>/2017/09/03/ctrl+c-cannot-kill-source/</url>
      
        <content type="html"><![CDATA[<p>重装系统了,出现几个bug。其中一个是在git bash中使用ctrl+c不能终止进程。</p><p>这就很蛋疼了,在写博客和node相关开发的时候十分不方便</p><hr><p>当然可以手动kill掉对用端口的PID</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">### 列出所有端口的情况</span><br><span class="line">netstat -ano</span><br><span class="line"></span><br><span class="line">### 查看被占用端口对应的PID</span><br><span class="line">netstat -aon|findstr &quot;xxxx&quot;</span><br><span class="line"></span><br><span class="line">### 终止进程</span><br><span class="line">taskkill (/f ) PID</span><br></pre></td></tr></table></figure><hr><p>这个问题的具体原因我还没找出,如果你知道,可以联系我。</p><p>后来我试了试cmder,一切正常。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/taozpwater/article/details/19242603" target="_blank" rel="noopener"> windows下taskkill命令简介</a></p>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>图片的响应式处理</title>
      <link href="/2017/08/29/responsive-image/"/>
      <url>/2017/08/29/responsive-image/</url>
      
        <content type="html"><![CDATA[<p><strong> 在这个暑假,有若干次需要对图片进行响应式处理,本文记录下我总结的方法,仅供参考。</strong></p><hr><p>这里我直接将图片作为整个页面的背景图</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">padding</span>: <span class="number">0</span>;</span><br><span class="line">    <span class="attribute">position</span>: relative;</span><br><span class="line">    <span class="attribute">background</span>: <span class="built_in">url</span>(<span class="string">"./background.jpg"</span>)<span class="built_in">no-repeat</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">max-width</span>: <span class="number">100%</span>;</span><br><span class="line">    <span class="attribute">background-position-x</span>:<span class="number">50%</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">1000px</span>)&#123;</span><br><span class="line">    <span class="selector-tag">html</span>,<span class="selector-tag">body</span>&#123;</span><br><span class="line">        <span class="attribute">background-size</span>: <span class="number">100%</span>;</span><br><span class="line">        <span class="attribute">background-position-x</span>:left;</span><br><span class="line">        <span class="attribute">width</span>: <span class="number">100vw</span>;</span><br><span class="line">        <span class="attribute">height</span>: <span class="number">100vh</span>;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 响应式(设计) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>docker容器中ifonfig not found</title>
      <link href="/2017/08/19/ifconfig-command-not-found-in-docker-container/"/>
      <url>/2017/08/19/ifconfig-command-not-found-in-docker-container/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>在docker容器中执行<code>ifconfig</code>,出现了<code>bash: ifconfig: command not found</code>的错误</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">### 拉取镜像</span><br><span class="line">docker pull ubuntu</span><br><span class="line"></span><br><span class="line">### 运行一个可交互的shell终端</span><br><span class="line">docker run -it ubuntu /bin/bash</span><br><span class="line">或者</span><br><span class="line">docker run -i -t ubuntu /bin/bash</span><br><span class="line"></span><br><span class="line">#-i 表示启动一个可交互的容器</span><br><span class="line">#–t表示使用pseudo-TTY，关联到容器的stdin和stdout</span><br><span class="line">#在终端中，如果输入exit命令将会停止当前容器；因此如果只是取消关联，可以键入ctrl-p或者ctrl-q</span><br><span class="line">#你可以在其他终端通过docker ps 查看已经运行的容器列表</span><br></pre></td></tr></table></figure><p>执行完以上命令后,执行了<code>ifconfig</code>,出现了<code>bash: ifconfig: command not found</code></p><p>这里我先安装了vim</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">apt-get update</span><br><span class="line">#这个命令的作用是：同步 /etc/apt/sources.list 和 /etc/apt/sources.list.d 中列出的源的索引，</span><br><span class="line">这样才能获取到最新的软件包。 </span><br><span class="line"></span><br><span class="line">apt-get install vim</span><br><span class="line"></span><br><span class="line">#如果是：bash:ping: command not found</span><br><span class="line">#apt-get install iputils-ping</span><br></pre></td></tr></table></figure><p>再执行</p><p><code>apt-get install net-tool</code></p><p>即可</p><hr><h3 id="补充命令"><a href="#补充命令" class="headerlink" title=" 补充命令 "></a><strong> 补充命令 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">$ docker ps # 查看运行中的容器</span><br><span class="line">$ docker ps -a # 查看所有容器</span><br><span class="line"></span><br><span class="line"># 创建并启动容器</span><br><span class="line">$ JOB=$(docker run -d ubuntu /bin/sh -c &quot;while true; do echo Hello world; sleep 1; done&quot;)</span><br><span class="line"></span><br><span class="line"># 停止一个容器</span><br><span class="line">$ docker stop $JOB</span><br><span class="line"></span><br><span class="line"># 启动一个已经创建的容器</span><br><span class="line">$ docker start $JOB</span><br><span class="line"></span><br><span class="line"># 重启一个容器</span><br><span class="line">$ docker restart $JOB</span><br><span class="line"></span><br><span class="line"># 停止一个容器</span><br><span class="line">$ docker kill $JOB</span><br><span class="line"></span><br><span class="line"># 删除一个容器</span><br><span class="line">$ docker stop $JOB # 必须先停止</span><br><span class="line">$ docker rm $JOB</span><br></pre></td></tr></table></figure><hr><h3 id="进入容器"><a href="#进入容器" class="headerlink" title=" 进入容器 "></a><strong> 进入容器 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker attach CONTAINER ID</span><br><span class="line"></span><br><span class="line">## eg</span><br><span class="line">docker attach a7f843f07886</span><br></pre></td></tr></table></figure><p>具体可以参考<a href="http://blog.csdn.net/u010397369/article/details/41045251" target="_blank" rel="noopener">这篇文章</a></p><p>如果这种方法失败</p><p>可以使用<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">docker exec </span><br><span class="line"></span><br><span class="line">##eg</span><br><span class="line">docker exec -it 775c7c9ee1e1 /bin/bash</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://serverfault.com/questions/613528/why-isnt-ifconfig-available-in-ubuntu-docker-container" target="_blank" rel="noopener">Why isn’t ifconfig available in Ubuntu Docker container?</a><br><a href="http://blog.csdn.net/silentwolfyh/article/details/52336007" target="_blank" rel="noopener">Docker：bash: vi: command not found</a></p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>childNodes</title>
      <link href="/2017/08/17/childNodes/"/>
      <url>/2017/08/17/childNodes/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>今天有同学向我问了在<a href="https://github.com/iamsail/killCube/" target="_blank" rel="noopener">killCube</a>中遇到的BUG。</p><p>最终的原因是有关<code>Node.childNodes</code>的使用不当造成的。</p><p>本文做些记录。</p><h3 id="重现BUG"><a href="#重现BUG" class="headerlink" title=" 重现BUG "></a><strong> 重现BUG </strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">main</span> <span class="attr">id</span>=<span class="string">"main"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line">    <span class="comment">&lt;!--   &lt;div class="row"&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell black"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell black"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell black"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;div class="row"&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">        &lt;div class="cell black"&gt;&lt;/div&gt;</span></span><br><span class="line"><span class="comment">    &lt;/div&gt;                                       --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">main</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"> </span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> con=$(<span class="string">'con'</span>);</span><br><span class="line">    <span class="keyword">var</span> top=<span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(con,<span class="literal">null</span>)[<span class="string">'top'</span>]);  </span><br><span class="line">    <span class="keyword">if</span>(speed+top&gt;<span class="number">0</span>)</span><br><span class="line">    &#123;top=<span class="number">0</span>;&#125;</span><br><span class="line">    <span class="keyword">else</span> &#123;</span><br><span class="line">        top+=speed;</span><br><span class="line">    &#125;</span><br><span class="line">    con.style.top=top+<span class="string">"px"</span>;</span><br><span class="line">    <span class="keyword">if</span> (top==<span class="number">0</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        creatrow();</span><br><span class="line">        con.style.top=<span class="string">'-100px'</span>;</span><br><span class="line">        delrow();</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span>(top==(<span class="number">-100</span> + speed ))&#123;</span><br><span class="line">        <span class="keyword">var</span> rows=con.childNodes;</span><br><span class="line">        <span class="keyword">if</span>((rows.length==<span class="number">5</span>)&amp;&amp;(rows[rows.length<span class="number">-1</span>].pass!==<span class="number">1</span>)) &#123;</span><br><span class="line">            fail();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在以上代码中,move()函数中其中一部分逻辑是指 <strong> 当 <code>&lt;div id=&quot;con&quot;&gt;</code>的子节点长度为5时,且另一个逻辑<code>rows[rows.length-1].pass!==1</code>为真时,调用<code>fail()</code>函数,游戏结束。</strong></p><p>可这位同学以上的代码,却不能让游戏正常结束。</p><p>问题就出现在那段注释上,会导致<code>con.childNodes.length</code>在游戏的一开始就40+,远远超过了5,所以游戏不会结束。</p><hr><h3 id="具体分析"><a href="#具体分析" class="headerlink" title=" 具体分析 "></a><strong> 具体分析 </strong></h3><p><strong> 分有注释和没有注释的两种情况进行讨论 </strong></p><h4 id="没有注释"><a href="#没有注释" class="headerlink" title=" 没有注释 "></a><strong> 没有注释 </strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">$</span>(<span class="params">id</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">document</span>.getElementById(id)</span><br><span class="line">    &#125;</span><br><span class="line"><span class="keyword">var</span> con =$(<span class="string">"con"</span>);</span><br><span class="line"><span class="keyword">var</span> rows=con.childNodes;</span><br><span class="line"><span class="built_in">console</span>.log(rows.length);</span><br><span class="line"><span class="built_in">console</span>.log(rows);</span><br></pre></td></tr></table></figure><p><img src="/img/JavaScript/childNodes/0.png" alt="0.png"></p><p>以上结果很容易理解,con节点并没有子节点</p><p>现在将HTML结构进行一些改变</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span> <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line">### 或者 </span><br><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/JavaScript/childNodes/1.png" alt="1.png"></p><p>这样就有了一个子节点了。<br><span class="under0"><strong> 因为childNode将(空格,tab,换行等也计算了进去) </strong></span></p><p><img src="/img/JavaScript/childNodes/2.png" alt="2.png"><br>当然具体到空格还是回车换行等具体节点,它们的<code>data</code>属性还是不同,这里不做介绍。</p><h4 id="引入注释"><a href="#引入注释" class="headerlink" title=" 引入注释 "></a><strong> 引入注释 </strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"> <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"con"</span>&gt;</span></span><br><span class="line">  <span class="comment">&lt;!--   &lt;div&gt;&lt;/div&gt; --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><p><img src="/img/JavaScript/childNodes/3.png" alt="3.png"></p><p><span class="under0"><strong> 这种情况下,con节点有了三个子节点,除了两处的换行,注释也成为了一个节点 </strong></span></p><hr><h4 id="问题总结"><a href="#问题总结" class="headerlink" title=" 问题总结 "></a><strong> 问题总结 </strong></h4><p>回到最初的问题我们可以得出结论</p><p><span class="under0"> <strong> 这位同学在HTML引入了空白以及换行符,导致子节点的个数远远增加,而不是预期的0,导致不能满足游戏结束的条件。而<a href="https://github.com/iamsail/killCube/" target="_blank" rel="noopener">killCube</a>中,子节点是通过脚本动态写入的,没有空格回车注释等,故不存在上述问题。</strong></span></p><p><span class="under0"> <strong> 有的时候,bug往往是因为HTML、CSS没写好造成的,导致需要写更多JS去维护。</strong></span></p><h3 id="childNodes与children"><a href="#childNodes与children" class="headerlink" title=" childNodes与children "></a><strong> childNodes与children </strong></h3><p><code>Node.childNodes</code>返回包含<span class="under0"> <strong> 指定节点的子节点的集合 </strong></span>，该集合为即时更新的集合<code>（live collection）</code>。</p><p><code>ParentNode.children</code>是一个只读属性，返回 一个<span class="under2"> <strong> <code>Node</code>的<code>子elements</code>的<code>活 HTMLCollection</code> </strong></span>。</p><p><code>ParentNode.children</code>只返回<strong> 元素 </strong>的集合,因此使用<code>ParentNode.children</code>可以避免之前的问题出现</p><p>有关<a href="http://www.w3school.com.cn/jsref/prop_node_nodetype.asp" target="_blank" rel="noopener">nodeType</a>可以看看这儿。</p><h3 id="封装"><a href="#封装" class="headerlink" title=" 封装 "></a><strong> 封装 </strong></h3><p><code>ParentNode.children</code>只适用于<code>nodeType</code>为1的节点。</p><p>我稍微封装了一下,可以根据自己的需求使用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span>  getXNodes = <span class="function">(<span class="params">parentNode</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">let</span> arrayNodes = <span class="built_in">Array</span>.from(parentNode.childNodes),</span><br><span class="line">            filterResult = arrayNodes.filter(<span class="function">(<span class="params">item,index,array</span>) =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> (item.nodeName !== <span class="string">"#text"</span>)</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.cnblogs.com/carazk/p/6802307.html" target="_blank" rel="noopener">js子节点children和childnodes的用法</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>hexo站内搜索</title>
      <link href="/2017/08/16/hexo-site-search/"/>
      <url>/2017/08/16/hexo-site-search/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>今天花了些时间为博客增加了站内搜索功能,并且对主题进行了较大幅度的修改。</p><p><img src="/img/codelife/hexo-site-search/1.png" alt="1.png"></p><p>大致看上去就是这样的,当然,因为是截图,看不到动画效果。</p><p>本文做些记录。</p><hr><h3 id="搜索"><a href="#搜索" class="headerlink" title=" 搜索 "></a><strong> 搜索 </strong></h3><p>之前<a href="https://blog.xgy666.cn/" target="_blank" rel="noopener">肖高阳</a>为我推荐了<a href="https://github.com/PaicHyperionDev/hexo-generator-search" target="_blank" rel="noopener">hexo-generator-search</a>.<br>他的hexo所用的主题是Next,该主题是自带了这个插件的,只需要改下配置文件即可。</p><p>也就是说倘若你的主题没有集成该插件,需要自己安装配置。</p><h4 id="Install"><a href="#Install" class="headerlink" title=" Install "></a><strong> Install </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">### npm</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line"></span><br><span class="line">### yarn</span><br><span class="line">yarn add hexo-generator-search  --dev</span><br></pre></td></tr></table></figure><h4 id="Options"><a href="#Options" class="headerlink" title=" Options "></a><strong> Options </strong></h4><p>修改根目录下的_config.yml</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  </span><br><span class="line">###</span><br><span class="line">path - 指定生成的索引数据的文件名。默认为 search.xml 。</span><br><span class="line">field - 指定索引数据的生成范围。可选值包括：</span><br><span class="line">    post - 只生成博客文章（post）的索引（默认）；</span><br><span class="line">    page - 只生成其他页面（page）的索引；</span><br><span class="line">    all - 生成所有文章和页面的索引。</span><br></pre></td></tr></table></figure><p>如果以上步骤都正确的话,会生成一个<code>search.xml</code>文件。<br>通过你的预览地址/search.xml即可以预览</p><h4 id="搜索框"><a href="#搜索框" class="headerlink" title=" 搜索框 "></a><strong> 搜索框 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;site_search&quot;&gt;</span><br><span class="line">  &lt;input type=&quot;text&quot; id=&quot;local-search-input&quot; name=&quot;q&quot; results=&quot;0&quot;</span><br><span class="line">   placeholder=&quot;search my blog...&quot; class=&quot;form-control&quot;/&gt;</span><br><span class="line">  &lt;div id=&quot;local-search-result&quot;&gt;&lt;/div&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>将搜索框放置在你需要插入的地方</p><h4 id="搜索函数"><a href="#搜索函数" class="headerlink" title=" 搜索函数 "></a><strong> 搜索函数 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: path,</span><br><span class="line">        dataType: <span class="string">"xml"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</span><br><span class="line">            <span class="comment">// get the contents from search data</span></span><br><span class="line">            <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    title: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</span><br><span class="line">                    content: $(<span class="string">"content"</span>,<span class="keyword">this</span>).text(),</span><br><span class="line">                    url: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;).get();</span><br><span class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</span><br><span class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</span><br><span class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> str=<span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;</span><br><span class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</span><br><span class="line">                $resultContent.innerHTML = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">// perform local searching</span></span><br><span class="line">                datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">var</span> content_index = [];</span><br><span class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</span><br><span class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line">                    <span class="keyword">var</span> data_url = data.url;</span><br><span class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</span><br><span class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></span><br><span class="line">                    <span class="keyword">if</span>(data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</span><br><span class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>) </span>&#123;</span><br><span class="line">                            index_title = data_title.indexOf(keyword);</span><br><span class="line">                            index_content = data_content.indexOf(keyword);</span><br><span class="line">                            <span class="keyword">if</span>( index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                                isMatch = <span class="literal">false</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    index_content = <span class="number">0</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                                    first_occur = index_content;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// show search results</span></span><br><span class="line">                    <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url +<span class="string">"' class='search-result-title'&gt;"</span>+ data_title +<span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</span><br><span class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// cut out 100 characters</span></span><br><span class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</span><br><span class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</span><br><span class="line">                            <span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                                start = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</span><br><span class="line">                                end = <span class="number">100</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(end &gt; content.length)&#123;</span><br><span class="line">                                end = content.length;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end);</span><br><span class="line">                            <span class="comment">// highlight all keywords</span></span><br><span class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword</span>)</span>&#123;</span><br><span class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</span><br><span class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span>+keyword+<span class="string">"&lt;/em&gt;"</span>);</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content +<span class="string">"...&lt;/p&gt;"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        str += <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                str += <span class="string">"&lt;/ul&gt;"</span>;</span><br><span class="line">                $resultContent.innerHTML = str;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">"&lt;%= config.root %&gt;"</span> + <span class="string">"search.xml"</span>;</span><br><span class="line">searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</span><br></pre></td></tr></table></figure><hr><p>以下是于18年3月3日对搜索函数的更新。今天发现了博客的搜索结果点击还是停留在当前页面,发现上面搜索函数中的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">url: $( <span class="string">"url"</span> , <span class="keyword">this</span>).text()</span><br></pre></td></tr></table></figure><p>没有获取到搜索结果的url,结果为空。我看了插件作者当初写的文章(本文末尾)的链接,确乎是上面的代码。不过已经不能工作了。</p><p>对这个搜索函数略做修改,又可以正常work了,贴下代码</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> searchFunc = <span class="function"><span class="keyword">function</span>(<span class="params">path, search_id, content_id</span>) </span>&#123;</span><br><span class="line"><span class="meta">    'use strict'</span>;</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        url: path,</span><br><span class="line">        dataType: <span class="string">"xml"</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params"> xmlResponse </span>) </span>&#123;</span><br><span class="line">            <span class="comment">// get the contents from search data</span></span><br><span class="line"></span><br><span class="line">            <span class="keyword">var</span> datas = $( <span class="string">"entry"</span>, xmlResponse ).map(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> &#123;</span><br><span class="line">                    title: $( <span class="string">"title"</span>, <span class="keyword">this</span> ).text(),</span><br><span class="line">                    content: $(<span class="string">"content"</span>,<span class="keyword">this</span>).text(),</span><br><span class="line">                    url: $( <span class="string">"link"</span> , <span class="keyword">this</span>).attr(<span class="string">"href"</span>)</span><br><span class="line">                &#125;;</span><br><span class="line">            &#125;).get();</span><br><span class="line">            <span class="keyword">var</span> $input = <span class="built_in">document</span>.getElementById(search_id);</span><br><span class="line">            <span class="keyword">var</span> $resultContent = <span class="built_in">document</span>.getElementById(content_id);</span><br><span class="line">            $input.addEventListener(<span class="string">'input'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">                <span class="keyword">var</span> str=<span class="string">'&lt;ul class=\"search-result-list\"&gt;'</span>;</span><br><span class="line">                <span class="keyword">var</span> keywords = <span class="keyword">this</span>.value.trim().toLowerCase().split(<span class="regexp">/[\s\-]+/</span>);</span><br><span class="line">                $resultContent.innerHTML = <span class="string">""</span>;</span><br><span class="line">                <span class="keyword">if</span> (<span class="keyword">this</span>.value.trim().length &lt;= <span class="number">0</span>) &#123;</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125;</span><br><span class="line"></span><br><span class="line">                <span class="comment">// perform local searching</span></span><br><span class="line">                datas.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</span><br><span class="line">                    <span class="keyword">var</span> isMatch = <span class="literal">true</span>;</span><br><span class="line">                    <span class="keyword">var</span> content_index = [];</span><br><span class="line">                    <span class="keyword">var</span> data_title = data.title.trim().toLowerCase();</span><br><span class="line">                    <span class="keyword">var</span> data_content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>).toLowerCase();</span><br><span class="line">                    <span class="keyword">var</span> data_url = data.url;</span><br><span class="line">                    <span class="keyword">var</span> index_title = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">var</span> index_content = <span class="number">-1</span>;</span><br><span class="line">                    <span class="keyword">var</span> first_occur = <span class="number">-1</span>;</span><br><span class="line">                    <span class="comment">// only match artiles with not empty titles and contents</span></span><br><span class="line">                    <span class="keyword">if</span>(data_title != <span class="string">''</span> &amp;&amp; data_content != <span class="string">''</span>) &#123;</span><br><span class="line">                        keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword, i</span>) </span>&#123;</span><br><span class="line">                            index_title = data_title.indexOf(keyword);</span><br><span class="line">                            index_content = data_content.indexOf(keyword);</span><br><span class="line">                            <span class="keyword">if</span>( index_title &lt; <span class="number">0</span> &amp;&amp; index_content &lt; <span class="number">0</span> )&#123;</span><br><span class="line">                                isMatch = <span class="literal">false</span>;</span><br><span class="line">                            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                                <span class="keyword">if</span> (index_content &lt; <span class="number">0</span>) &#123;</span><br><span class="line">                                    index_content = <span class="number">0</span>;</span><br><span class="line">                                &#125;</span><br><span class="line">                                <span class="keyword">if</span> (i == <span class="number">0</span>) &#123;</span><br><span class="line">                                    first_occur = index_content;</span><br><span class="line">                                &#125;</span><br><span class="line">                            &#125;</span><br><span class="line">                        &#125;);</span><br><span class="line">                    &#125;</span><br><span class="line">                    <span class="comment">// show search results</span></span><br><span class="line">                    <span class="keyword">if</span> (isMatch) &#123;</span><br><span class="line"></span><br><span class="line">                        str += <span class="string">"&lt;li&gt;&lt;a href='"</span>+ data_url  +<span class="string">"' class='search-result-title'&gt;"</span>+ data_title +<span class="string">"&lt;/a&gt;"</span>;</span><br><span class="line">                       <span class="built_in">console</span>.log(data_url);</span><br><span class="line">                        <span class="built_in">console</span>.log(<span class="string">"=====命中====="</span>, data);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">                        <span class="keyword">var</span> content = data.content.trim().replace(<span class="regexp">/&lt;[^&gt;]+&gt;/g</span>,<span class="string">""</span>);</span><br><span class="line">                        <span class="keyword">if</span> (first_occur &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                            <span class="comment">// cut out 100 characters</span></span><br><span class="line">                            <span class="keyword">var</span> start = first_occur - <span class="number">20</span>;</span><br><span class="line">                            <span class="keyword">var</span> end = first_occur + <span class="number">80</span>;</span><br><span class="line">                            <span class="keyword">if</span>(start &lt; <span class="number">0</span>)&#123;</span><br><span class="line">                                start = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(start == <span class="number">0</span>)&#123;</span><br><span class="line">                                end = <span class="number">100</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">if</span>(end &gt; content.length)&#123;</span><br><span class="line">                                end = content.length;</span><br><span class="line">                            &#125;</span><br><span class="line">                            <span class="keyword">var</span> match_content = content.substr(start, end);</span><br><span class="line">                            <span class="comment">// highlight all keywords</span></span><br><span class="line">                            keywords.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">keyword</span>)</span>&#123;</span><br><span class="line">                                <span class="keyword">var</span> regS = <span class="keyword">new</span> <span class="built_in">RegExp</span>(keyword, <span class="string">"gi"</span>);</span><br><span class="line">                                match_content = match_content.replace(regS, <span class="string">"&lt;em class=\"search-keyword\"&gt;"</span>+keyword+<span class="string">"&lt;/em&gt;"</span>);</span><br><span class="line">                            &#125;);</span><br><span class="line"></span><br><span class="line">                            str += <span class="string">"&lt;p class=\"search-result\"&gt;"</span> + match_content +<span class="string">"...&lt;/p&gt;"</span></span><br><span class="line">                        &#125;</span><br><span class="line">                        str += <span class="string">"&lt;/li&gt;"</span>;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;);</span><br><span class="line">                str += <span class="string">"&lt;/ul&gt;"</span>;</span><br><span class="line">                $resultContent.innerHTML = str;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> path = <span class="string">"&lt;%= config.root %&gt;"</span> + <span class="string">"search.xml"</span>;</span><br><span class="line">searchFunc(path, <span class="string">'local-search-input'</span>, <span class="string">'local-search-result'</span>);</span><br></pre></td></tr></table></figure><hr><p>将以上的搜索框和搜索函数放在适当的地方即可,我是放在<code>layout.ejs</code>文件中的。</p><p>这样就完成了搜索框的核心部分了。这里我给出我定制过后的CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*============搜索栏样式封装=============*/</span></span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">max-width:</span> <span class="number">1000px</span>) &#123;</span><br><span class="line">  <span class="selector-id">#site_search</span>&#123;</span><br><span class="line">   <span class="attribute">display</span>: none;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">@media</span> screen <span class="keyword">and</span> (<span class="attribute">min-width:</span> <span class="number">1000px</span>)&#123;</span><br><span class="line">  <span class="selector-id">#site_search</span>&#123;</span><br><span class="line">    <span class="attribute">position</span>:fixed;</span><br><span class="line">    <span class="attribute">z-index</span>:<span class="number">4</span>;</span><br><span class="line">    <span class="attribute">white-space</span>: normal;</span><br><span class="line">    <span class="attribute">word-break</span>: break-all;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#local-search-input</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.5</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-id">#local-search-input</span><span class="selector-pseudo">:focus</span>&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line">    <span class="attribute">animation</span>: car .<span class="number">5s</span> ease-in;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="selector-id">#local-search-result</span>&#123;</span><br><span class="line">    <span class="attribute">background</span>: white;</span><br><span class="line">    <span class="attribute">color</span>:black;</span><br><span class="line">    <span class="attribute">opacity</span>: .<span class="number">95</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">570px</span>;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">600px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: auto;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  <span class="selector-class">.search-result</span>&#123;</span><br><span class="line">    <span class="attribute">max-height</span>: <span class="number">140px</span>;</span><br><span class="line">    <span class="attribute">overflow</span>: hidden;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">@keyframes</span> car &#123;</span><br><span class="line">  0%&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">250px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  50%&#123;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">1000px</span>;</span><br><span class="line">  &#125;</span><br><span class="line"></span><br><span class="line">  100%&#123;</span><br><span class="line">    <span class="attribute">opacity</span>: <span class="number">0.8</span>;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">540px</span>;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*============搜索栏样式封装=============*/</span></span><br></pre></td></tr></table></figure><p><img src="/img/codelife/hexo-site-search/2.png" alt="2.png"></p><hr><h3 id="主题改造"><a href="#主题改造" class="headerlink" title=" 主题改造 "></a><strong> 主题改造 </strong></h3><p>在我的第一篇博文<a href="http://www.sail.name/2016/12/01/first/">叶尖滴落的星球</a>中,提到过本博客是使用的huno,它是为Hexo编写的一个响应式的主题，该主题基于Uno。</p><p>到此刻,已经大半年过去了,我也写下了接近90篇博文。中途也对huno主题进行了数次修改,以符合我的需求。</p><p>在修改的过程中,发现源码中的不少地方写得不够合理。现在我的博客和当初也已经相差挺大了。</p><p><spna class="under0"> <strong> 或许今后再优化更多过后,我会开源一个Suno的主题 </strong></spna></p><p>现在博客PC端和移动端差距挺大的。</p><p>考虑到看我博客的大多数是程序员,来自PC的访问更多。<br>再加之手机相比PC硬件上差距还是很大,移动端,动画除了chrome都有些卡顿,于是就克制了一下,在移动端删除了首页动画…</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.hahack.com/codes/local-search-engine-for-hexo/" target="_blank" rel="noopener">jQuery-based Local Search Engine for Hexo</a></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> hexo&amp;&amp;博客记录 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《JavaScript语言精粹》读书笔记(一)</title>
      <link href="/2017/08/14/the-note-one-of-javascript-the-good-parts/"/>
      <url>/2017/08/14/the-note-one-of-javascript-the-good-parts/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>本文是对《JavaScript语言精粹》的一些整理</p><hr><h3 id="内容"><a href="#内容" class="headerlink" title=" 内容 "></a><strong> 内容 </strong></h3><h4 id="级联形式继承"><a href="#级联形式继承" class="headerlink" title=" 级联形式继承 "></a><strong> 级联形式继承 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> Mammal = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Mammal.prototype.get_name = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.name;</span><br><span class="line">&#125;;;</span><br><span class="line"></span><br><span class="line">Mammal.prototype.says = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.saying || <span class="string">''</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params">name,func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.prototype[name])&#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype[name] = func;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">Function</span>.method(<span class="string">'inherits'</span>,<span class="function"><span class="keyword">function</span> (<span class="params">Parent</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype = <span class="keyword">new</span> Parent();</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> Cat = <span class="function"><span class="keyword">function</span> (<span class="params">name</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.name = name;</span><br><span class="line">    <span class="keyword">this</span>.saying = <span class="string">'meow'</span>;</span><br><span class="line">&#125;</span><br><span class="line">.inherits(Mammal)</span><br><span class="line">.method(<span class="string">'apple'</span>,<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"apple"</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> car = <span class="keyword">new</span> Cat(<span class="string">"sail"</span>);</span><br><span class="line">car.apple();</span><br></pre></td></tr></table></figure><p>这种方式隐藏了无所谓的<code>prototype</code>细节。</p><p>使用构造器函数存在一个严重的危害。如果在调用构造函数时忘记了在前面加new 前缀,那么this将不会被绑定到一个新对象。悲剧的是,this将被绑定到全局对象。不但没有扩充新对象,反而破坏了全局环境变量。</p><hr><h4 id="移除字符串首尾空白"><a href="#移除字符串首尾空白" class="headerlink" title=" 移除字符串首尾空白 "></a><strong> 移除字符串首尾空白 </strong></h4><p>如今的标准已经有了<code>String.prototype.trim()</code></p><p>trim() 方法会从一个字符串的两端删除空白字符。trim() 方法并不影响原字符串本身，它返回的是一个新的字符串。</p><p>以前没有这个方法,可以这样实现</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.method = <span class="function"><span class="keyword">function</span> (<span class="params">name,func</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">if</span>(!<span class="keyword">this</span>.prototype[name])&#123;</span><br><span class="line">        <span class="keyword">this</span>.prototype[name] = func;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="built_in">String</span>.method(<span class="string">'trim'</span>, <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.replace(<span class="regexp">/^\s+|\s+$/g</span>,<span class="string">''</span>);</span><br><span class="line">&#125;)</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">'"'</span> + <span class="string">"    neat    "</span>.trim() + <span class="string">'"'</span>);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Observer(观察者)模式</title>
      <link href="/2017/08/12/Observer-Pattern/"/>
      <url>/2017/08/12/Observer-Pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="定义"><a href="#定义" class="headerlink" title=" 定义 "></a><strong> 定义 </strong></h3><p>一个或多个观察者对目标的状态感兴趣,它们通过将自己依附在目标对象上以便注册感兴趣的内容。目标状态发生改变并且观察者可能对这些改变感兴趣,就会发送一个通知消息,调用每个观察者的更新方法。</p><p>当观察者不再对目标状态感兴趣时,它们可以简单地将自己从中分离。</p><p><code>Subject(目标)</code><br>维护一系列的观察者,方便添加或删除观察者</p><p><code>Observer(观察者)</code><br>为那些在状态发生改变时需获得通知的对象提供一个更新接口</p><p><code>ConcreteSubject(具体目标)</code><br>状态发生改变时,向<code>Observer</code>发出通知,储存<code>ConcreteObserver</code>的状态</p><p><code>ConcreteObserver(具体观察者)</code><br>存储一个指向<code>ConcreteSubject</code>的引用,实现<code>Observer</code>的更新接口,以使自身状态与目标的状态保持一致</p><hr><h3 id="实现"><a href="#实现" class="headerlink" title=" 实现 "></a><strong> 实现 </strong></h3><p><span class="under0">以下是ES5和ES6的各自实现</span></p><h4 id="ES5"><a href="#ES5" class="headerlink" title=" ES5 "></a><strong> ES5 </strong></h4><p>模拟一个目标可能拥有的一系列依赖Observer </p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">ObserverList</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observerList = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Add = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"666"</span>);</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.observerList.push(obj);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Empty = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observerList = [];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Count = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> <span class="keyword">this</span>.observerList.length;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Get = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index &gt; <span class="number">-1</span> &amp;&amp; index &lt; <span class="keyword">this</span>.observerList.length)&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.observerList[index];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.Insert = <span class="function"><span class="keyword">function</span> (<span class="params">obj, index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> pointer = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">if</span>(index === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.unshift(obj);</span><br><span class="line">    pointer = index;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> (index === <span class="keyword">this</span>.observerList.length)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.push(obj);</span><br><span class="line">    pointer = index;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.IndexOf = <span class="function"><span class="keyword">function</span> (<span class="params">obj, startIndex</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> i = startIndex, pointer = <span class="number">-1</span>;</span><br><span class="line"></span><br><span class="line">  <span class="keyword">while</span>(i &lt; <span class="keyword">this</span>.observerList.length)&#123;</span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">this</span>.observerList[i] === obj)&#123;</span><br><span class="line">      pointer = i;</span><br><span class="line">    &#125;</span><br><span class="line">    i++;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> pointer;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">ObserverList.prototype.RemoveIndexAt = <span class="function"><span class="keyword">function</span> (<span class="params">index</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">if</span>(index === <span class="number">0</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.shift();</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span>(index === <span class="keyword">this</span>.observerList.length - <span class="number">1</span>)&#123;</span><br><span class="line">    <span class="keyword">this</span>.observerList.pop();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">extend</span> (<span class="params">obj, extension</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">for</span>(<span class="keyword">var</span> key <span class="keyword">in</span> obj)&#123;</span><br><span class="line">    extension[key] = obj[key];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>模拟目标(Subject)和在观察者列表上添加、删除或通知观察者的能力</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Subject</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="keyword">this</span>.observers = <span class="keyword">new</span> ObserverList();</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject.prototype.AddObserver = <span class="function"><span class="keyword">function</span> (<span class="params">observer</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.Add(observer);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject.prototype.RemoveObserver = <span class="function"><span class="keyword">function</span> (<span class="params">observer</span>)</span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.observers.RemoveIndexAt(<span class="keyword">this</span>.observers.IndexOf(observer,<span class="number">0</span>));</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Subject.prototype.Notify = <span class="function"><span class="keyword">function</span> (<span class="params">context</span>) </span>&#123;</span><br><span class="line">    <span class="built_in">console</span>.log(<span class="string">"1111111111111111"</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> observerCount = <span class="keyword">this</span>.observers.Count;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; observerCount; i++)&#123;</span><br><span class="line">      <span class="keyword">this</span>.observers.Get(I).Update(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建新的Observer</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Observer</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.Update = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><span class="under0">实例</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">button</span> <span class="attr">id</span>=<span class="string">"addNewObserver"</span>&gt;</span>Add New Observer checkbox<span class="tag">&lt;/<span class="name">button</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">id</span>=<span class="string">"mainCheckbox"</span> <span class="attr">type</span>=<span class="string">"checkbox"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"observersContainer"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> controlCheckbox = <span class="built_in">document</span>.getElementById(<span class="string">"mainCheckbox"</span>),</span><br><span class="line">    addBtn = <span class="built_in">document</span>.getElementById(<span class="string">"addNewObserver"</span>),</span><br><span class="line">    container = <span class="built_in">document</span>.getElementById(<span class="string">"observersContainer"</span>);</span><br><span class="line"></span><br><span class="line">extend(<span class="keyword">new</span> Subject(), controlCheckbox);</span><br><span class="line"></span><br><span class="line">controlCheckbox[<span class="string">"onclick"</span>] = <span class="keyword">new</span> <span class="built_in">Function</span>(<span class="string">"controlCheckbox.Notify(controlCheckbox.checked)"</span>);</span><br><span class="line"></span><br><span class="line">addBtn[<span class="string">"onclick"</span>] = AddNewObserver;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">AddNewObserver</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> check = <span class="built_in">document</span>.createElement(<span class="string">"input"</span>);</span><br><span class="line">    check.type = <span class="string">"checkbox"</span>;</span><br><span class="line"></span><br><span class="line">    extend(<span class="keyword">new</span> Observer(), check);</span><br><span class="line"></span><br><span class="line">    check.Update = <span class="function"><span class="keyword">function</span> (<span class="params">value</span>) </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.checked = value;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    controlCheckbox.AddObserver(check);</span><br><span class="line"></span><br><span class="line">    container.appendChild(check);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="ES6"><a href="#ES6" class="headerlink" title=" ES6 "></a><strong> ES6 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> person = observable(&#123;</span><br><span class="line">  name: <span class="string">'张三'</span>,</span><br><span class="line">  age: <span class="number">20</span></span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">print</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">  <span class="built_in">console</span>.log(<span class="string">`<span class="subst">$&#123;person.name&#125;</span>, <span class="subst">$&#123;person.age&#125;</span>`</span>)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">observe(print);</span><br><span class="line">person.name = <span class="string">'李四'</span>;</span><br></pre></td></tr></table></figure><p>上面代码中，数据对象<code>person</code>是观察目标，函数<code>print</code>是观察者。一旦数据对象发生变化，<code>print</code>就会自动执行</p><p>下面，使用 <code>Proxy</code> 写一个观察者模式的最简单实现，即实现<code>observable</code>和<code>observe</code>这两个函数。思路是<code>observable</code>函数返回一个原始对象的 <code>Proxy</code> 代理，拦截赋值操作，触发充当观察者的各个函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> queuedObservers = <span class="keyword">new</span> <span class="built_in">Set</span>();</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> observe = <span class="function"><span class="params">fn</span> =&gt;</span> queuedObservers.add(fn);</span><br><span class="line"><span class="keyword">const</span> observable = <span class="function"><span class="params">obj</span> =&gt;</span> <span class="keyword">new</span> <span class="built_in">Proxy</span>(obj, &#123;<span class="keyword">set</span>&#125;);</span><br><span class="line"></span><br><span class="line">function <span class="keyword">set</span>(target, key, value, receiver) &#123;</span><br><span class="line">  <span class="keyword">const</span> result = <span class="built_in">Reflect</span>.set(target, key, value, receiver);</span><br><span class="line">  queuedObservers.forEach(<span class="function"><span class="params">observer</span> =&gt;</span> observer());</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>上面代码中，先定义了一个<code>Set</code>集合，所有观察者函数都放进这个集合。然后，<code>observable</code>函数返回原始对象的代理，拦截赋值操作。拦截函数<code>set</code>之中，会自动执行所有观察者。</p><hr><h3 id="以下是18年8月21更新"><a href="#以下是18年8月21更新" class="headerlink" title=" 以下是18年8月21更新 "></a><strong> 以下是18年8月21更新 </strong></h3><h4 id="观察者模式实践"><a href="#观察者模式实践" class="headerlink" title=" 观察者模式实践 "></a><strong> 观察者模式实践 </strong></h4><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>观察者模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>观察者模式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> salesOffices = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    salesOffices.clientList = []; <span class="comment">//　缓存</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    salesOffices.listen = <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.clientList[key] = [];</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">this</span>.clientList[key].push(fn); <span class="comment">//增加订阅者</span></span></span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    salesOffices.trigger = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span></span><br><span class="line"><span class="javascript">            fns = <span class="keyword">this</span>.clientList[key];</span></span><br><span class="line"></span><br><span class="line">        if (!fns || fns.length === 0) &#123;</span><br><span class="line"><span class="javascript">            <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">        <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span></span><br><span class="line"><span class="javascript">            fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 小明订阅88平方米房子的消息</span></span></span><br><span class="line"><span class="javascript">    salesOffices.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 小红订阅110平方米房子的消息</span></span></span><br><span class="line"><span class="javascript">    salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    salesOffices.trigger(<span class="string">'squareMeter88'</span>, <span class="number">88</span>);</span></span><br><span class="line"><span class="javascript">    salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">110</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong> 把发布–订阅功能提取出来,放在一个独立的对象 </strong></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;!doctype <span class="meta-keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">"en"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">"UTF-8"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">"viewport"</span></span></span><br><span class="line"><span class="tag">          <span class="attr">content</span>=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">http-equiv</span>=<span class="string">"X-UA-Compatible"</span> <span class="attr">content</span>=<span class="string">"ie=edge"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>观察者模式<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">h1</span>&gt;</span>观察者模式<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> event = &#123;</span></span><br><span class="line">        clientList: [],</span><br><span class="line"><span class="javascript">        listen: <span class="function"><span class="keyword">function</span> (<span class="params">key, fn</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">if</span> (!<span class="keyword">this</span>.clientList[key]) &#123;</span></span><br><span class="line"><span class="javascript">                <span class="keyword">this</span>.clientList[key] = [];</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">this</span>.clientList[key].push(fn); <span class="comment">//增加订阅者</span></span></span><br><span class="line">        &#125;,</span><br><span class="line"><span class="javascript">        trigger: <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">            <span class="keyword">var</span> key = <span class="built_in">Array</span>.prototype.shift.call(<span class="built_in">arguments</span>),</span></span><br><span class="line"><span class="javascript">                fns = <span class="keyword">this</span>.clientList[key];</span></span><br><span class="line"></span><br><span class="line">            if (!fns || fns.length === 0) &#123;</span><br><span class="line"><span class="javascript">                <span class="keyword">return</span> <span class="literal">false</span>;</span></span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line"><span class="javascript">            <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, fn; fn = fns[i++];) &#123;</span></span><br><span class="line"><span class="javascript">                fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>);</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> installEvent = <span class="function"><span class="keyword">function</span> (<span class="params">obj</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">      <span class="keyword">for</span> (<span class="keyword">var</span> i <span class="keyword">in</span> event) &#123;</span></span><br><span class="line">          obj[i] = event[i];</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="keyword">var</span> salesOffices = &#123;&#125;;</span></span><br><span class="line"><span class="javascript">    installEvent(salesOffices); <span class="comment">//　缓存</span></span></span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 小明订阅88平方米房子的消息</span></span></span><br><span class="line"><span class="javascript">    salesOffices.listen(<span class="string">'squareMeter88'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    <span class="comment">// 小红订阅110平方米房子的消息</span></span></span><br><span class="line"><span class="javascript">    salesOffices.listen(<span class="string">'squareMeter110'</span>, <span class="function"><span class="keyword">function</span> (<span class="params">price</span>) </span>&#123;</span></span><br><span class="line"><span class="javascript">        <span class="built_in">console</span>.log(<span class="string">'价格= '</span> + price);</span></span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line"><span class="javascript">    salesOffices.trigger(<span class="string">'squareMeter88'</span>, <span class="number">88</span>);</span></span><br><span class="line"><span class="javascript">    salesOffices.trigger(<span class="string">'squareMeter110'</span>, <span class="number">110</span>);</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p>JavaScript设计模式<br>ECMAScript 6 入门</p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Anaconda</title>
      <link href="/2017/08/11/Anaconda/"/>
      <url>/2017/08/11/Anaconda/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>因为开始接触机器学习,重拾了Python。<br><span class="under0"> <strong> 这次我选择了<code>Anaconda</code>,因为看重了其内置了常用的科学计算包。</strong> </span></p><hr><h3 id="Anaconda"><a href="#Anaconda" class="headerlink" title=" Anaconda "></a><strong> Anaconda </strong></h3><p><a href="https://www.continuum.io/downloads" target="_blank" rel="noopener">Anaconda</a>是一个用于科学计算的Python发行版，支持 Linux, Mac, Windows系统，提供了包管理与环境管理的功能，可以很方便地解决多版本python并存、切换以及各种第三方包安装问题。</p><p>Anaconda利用工具/命令conda来进行package和environment的管理，并且已经包含了Python和相关的配套工具。</p><h3 id="Conda"><a href="#Conda" class="headerlink" title=" Conda "></a><strong> Conda </strong></h3><p>conda 是 Anaconda 下用于包管理和环境管理的工具，功能上类似 pip 和 vitualenv 的组合。安装成功后 conda 会默认加入到环境变量中，因此可直接在命令行窗口运行命令 conda。</p><h4 id="多版本python"><a href="#多版本python" class="headerlink" title=" 多版本python "></a><strong> 多版本python </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><span class="line"># 查看帮助</span><br><span class="line">conda -h </span><br><span class="line"></span><br><span class="line"># 基于python3.6版本创建一个名字为python36的环境</span><br><span class="line">conda create --name python36 python=3.6 </span><br><span class="line"></span><br><span class="line">****** 如果创建新的python环境，比如3.4，运行conda create -n python36 python=3.6之后，</span><br><span class="line">conda仅安装python 3.6相关的必须项，如python, pip等，如果希望该环境像默认环境那样，安装anaconda集合包</span><br><span class="line"></span><br><span class="line"># 在当前环境下安装anaconda包集合</span><br><span class="line">conda install anaconda</span><br><span class="line"> </span><br><span class="line"># 结合创建环境的命令，以上操作可以合并为</span><br><span class="line">conda create -n python36 python=3.4 anaconda</span><br><span class="line"># 也可以不用全部安装，根据需求安装自己需要的package即可</span><br><span class="line"></span><br><span class="line">******</span><br><span class="line"></span><br><span class="line"># 激活此环境</span><br><span class="line">activate python36   # for Windows</span><br><span class="line">source activate python36 # linux/mac</span><br><span class="line"></span><br><span class="line"># 再来检查python版本，显示是 3.6</span><br><span class="line">python -V  </span><br><span class="line"></span><br><span class="line"># 退出当前环境</span><br><span class="line">deactivate python36 </span><br><span class="line">source deactivate python36 # for Linux &amp; Mac</span><br><span class="line"></span><br><span class="line"># 删除该环境</span><br><span class="line">conda remove -n python36 --all</span><br><span class="line"></span><br><span class="line"># 或者 </span><br><span class="line">conda env remove  -n python36</span><br><span class="line"></span><br><span class="line"># 查看所有安装的环境</span><br><span class="line">conda info -e</span><br><span class="line">python36              *  D:\Programs\Anaconda3\envs\python36</span><br><span class="line">root                     D:\Programs\Anaconda3</span><br></pre></td></tr></table></figure><h4 id="包管理"><a href="#包管理" class="headerlink" title=" 包管理 "></a><strong> 包管理 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"># 安装scipy</span><br><span class="line">conda install scipy</span><br><span class="line"># conda会从从远程搜索scipy的相关信息和依赖项目，对于python 3.6，conda会同时安装numpy和mkl（运算加速的库）</span><br><span class="line"> </span><br><span class="line"># 查看已经安装的packages</span><br><span class="line">conda list</span><br><span class="line"># 最新版的conda是从site-packages文件夹中搜索已经安装的包，不依赖于pip，因此可以显示出通过各种方式安装的包</span><br><span class="line"></span><br><span class="line"># 查看当前环境下已安装的包</span><br><span class="line">conda list</span><br><span class="line"> </span><br><span class="line"># 查看某个指定环境的已安装包</span><br><span class="line">conda list -n python36</span><br><span class="line"> </span><br><span class="line"># 查找package信息</span><br><span class="line">conda search numpy</span><br><span class="line"> </span><br><span class="line"># 安装package</span><br><span class="line">conda install -n python36 numpy</span><br><span class="line"># 如果不用-n指定环境名称，则被安装在当前活跃环境</span><br><span class="line"># 也可以通过-c指定通过某个channel安装</span><br><span class="line"> </span><br><span class="line"># 更新package</span><br><span class="line">conda update -n python36 numpy</span><br><span class="line"> </span><br><span class="line"># 删除package</span><br><span class="line">conda remove -n python36 numpy</span><br></pre></td></tr></table></figure><p>conda将conda、python等都视为package，因此，完全可以使用conda来管理conda和python的版本，例如</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 更新conda，保持conda最新</span><br><span class="line">conda update conda</span><br><span class="line"> </span><br><span class="line"># 更新anaconda</span><br><span class="line">conda update anaconda</span><br><span class="line"> </span><br><span class="line"># 更新python</span><br><span class="line">conda update python</span><br><span class="line"># 假设当前环境是python 3.6, conda会将python升级为3.6.x系列的当前最新版本</span><br></pre></td></tr></table></figure><h4 id="设置镜像"><a href="#设置镜像" class="headerlink" title=" 设置镜像 "></a><strong> 设置镜像 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"># 添加Anaconda的TUNA镜像</span><br><span class="line">conda config --add channels https://mirrors.tuna.tsinghua.edu.cn/anaconda/pkgs/free/</span><br><span class="line"># TUNA的help中镜像地址加有引号，需要去掉</span><br><span class="line"> </span><br><span class="line"># 设置搜索时显示通道地址</span><br><span class="line">conda config --set show_channel_urls yes</span><br></pre></td></tr></table></figure><h3 id="踩坑"><a href="#踩坑" class="headerlink" title=" 踩坑 "></a><strong> 踩坑 </strong></h3><p>在跑我的第一个机器学习程序的时候,出现了以下的错误</p><p><img src="/img/python/Anaconda/1.png" alt="1.png"></p><p>在网上看了些解决方案,都不太靠谱</p><p>我的解决方案是</p><p><span class="under0"> <strong> 删除了自己在系统里安装的python,使用Anaconda中的python。当然我使用的Pycharm中的<code>Project Interpreter</code>也是Anaconda中的python. </strong></span></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://python.jobbole.com/86236/" target="_blank" rel="noopener">Anaconda使用总结</a><br><a href="https://foofish.net/anaconda-install.html" target="_blank" rel="noopener">Anaconda 入门安装教程</a><br><a href="https://www.zhihu.com/question/58033789" target="_blank" rel="noopener">初学python者自学anaconda的正确姿势是什么？？</a></p>]]></content>
      
      
      <categories>
          
          <category> Python </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>contain</title>
      <link href="/2017/08/10/contain/"/>
      <url>/2017/08/10/contain/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>本文是对<code>contain</code>属性的介绍。</p><p>2017年8月8日，W3C的CSS工作组发布了 CSS包含模块（CSS Containment Module Level 1）的候选推荐标准（Candidate Recommendation）。该模块定义了 ‘contain’ 属性，用于指出该元素的子树将独立于页面的其他部分。该规范可用于用户代理（如浏览器等）的重度优化（heavy optimizations）。</p><p>contain 属性允许开发者声明当前元素和它的内容尽可能的独立于其他部分的 Dom 树。这会让浏览器在重新计算布局、样式、绘图或它们的组合的时候，仅仅在有限的 Dom 区域中，并不是整个页面。这个属性常用在包含大量独立的 widgets 小部件的页面，这个 contain 属性可以防止某个小部件的 CSS 规则改变页面上的其他东西。</p><p>先看看兼容性</p><p><img src="/img/性能优化/contain/1.png" alt="1.png"></p><p>可以看出contain的兼容性,没错还相当糟糕。</p><hr><h3 id="API"><a href="#API" class="headerlink" title=" API "></a><strong> API </strong></h3><p><code>none</code><br>声明元素正常渲染，没有包含的应用。</p><p><code>strict</code><br>声明所有的包含规则应用于这个元素。这样写等价于 contain: size layout style paint。</p><p><code>content</code><br>声明这个元素上除了 size 的所有包含规则。等价于 contain: layout style paint。</p><p><code>size</code><br>声明这个元素可以被变换尺寸，不需要去检查它依赖尺寸变化。</p><p><code>layout</code><br>声明没有外部元素可以影响它内部的布局，反之亦然。</p><p><code>style</code><br>声明那些同时会影响这个元素和其子孙元素的属性，不会超出这个元素的包含范围。</p><p><code>paint</code><br>声明这个元素的子孙节点不会在它边缘外显示。如果一个元素在视窗外或其他原因不可见，则同样保证它的子孙节点不会被显示。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.chinaw3c.org/archives/1926/" target="_blank" rel="noopener">W3C 发布 CSS 包含模块（CSS Containment Module Level 1）的候选推荐标准 征集参考实现及审阅意见</a><br><a href="http://ms.csdn.net/geek/197519" target="_blank" rel="noopener">CSS性能优化新属性 contain 的语法、作用及使用场景</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 性能优化 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在win10升级npm</title>
      <link href="/2017/08/07/update-npm-in-win10/"/>
      <url>/2017/08/07/update-npm-in-win10/</url>
      
        <content type="html"><![CDATA[<h3 id="升级npm"><a href="#升级npm" class="headerlink" title=" 升级npm "></a><strong> 升级npm </strong></h3><p><span class="under0">以管理员身份运行PowerShell</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">npm install -g npm-windows-upgrade</span><br><span class="line">npm-windows-upgrade</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://stackoverflow.com/questions/18412129/how-do-i-update-node-and-npm-on-windows" target="_blank" rel="noopener">How do I update node and npm on windows?</a></p>]]></content>
      
      
      <categories>
          
          <category> npm&amp;&amp;yarn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Singleton(单例)模式</title>
      <link href="/2017/08/06/Singleton-Pattern/"/>
      <url>/2017/08/06/Singleton-Pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="概述"><a href="#概述" class="headerlink" title=" 概述 "></a><strong> 概述 </strong></h3><p>Singleton(单例)模式,限制了类的实例化次数只能一次。</p><p>在该实例不存在的情况下,可以通过一个方法创建一个类来实现创建类的实例;如果实例已经存在,它会简单返回该对象的引用。</p><hr><h3 id="具体实现"><a href="#具体实现" class="headerlink" title=" 具体实现 "></a><strong> 具体实现 </strong></h3><h4 id="ES5"><a href="#ES5" class="headerlink" title=" ES5 "></a><strong> ES5 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> mySingleton = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> instance;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">privateMethod</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="built_in">console</span>.log(<span class="string">"I am private"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> privateVariable = <span class="string">"Im also private"</span>;</span><br><span class="line">        <span class="keyword">var</span> privateRandomNumber = <span class="built_in">Math</span>.random();</span><br><span class="line">        <span class="keyword">return</span> &#123;</span><br><span class="line">            publicMethod : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="built_in">console</span>.log(<span class="string">"The public can see me!"</span>);</span><br><span class="line">            &#125;,</span><br><span class="line">            publicProperty : <span class="string">"I am also public"</span>,</span><br><span class="line">            getRandomNumber : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">return</span> privateRandomNumber;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">return</span> &#123;</span><br><span class="line">        getInstance : <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span> (!instance) &#123;</span><br><span class="line">                instance = init();</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> instance;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;)();</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> singleA = mySingleton.getInstance();</span><br><span class="line"><span class="keyword">var</span> singleB = mySingleton.getInstance();</span><br><span class="line"><span class="built_in">console</span>.log(singleA === singleB);</span><br></pre></td></tr></table></figure><h4 id="ES6"><a href="#ES6" class="headerlink" title=" ES6 "></a><strong> ES6 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Leader</span> </span>&#123;</span><br><span class="line">    <span class="keyword">constructor</span> () &#123;</span><br><span class="line">        <span class="keyword">if</span> (!Leader.single) &#123;</span><br><span class="line">            <span class="keyword">this</span>.level = <span class="string">'supreme'</span>;</span><br><span class="line">            Leader.single = <span class="keyword">this</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> Leader.single;</span><br><span class="line">    &#125;</span><br><span class="line">    toString() &#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'I am a leader.'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> leader  = <span class="keyword">new</span> Leader();</span><br><span class="line"><span class="keyword">const</span> leader1 = <span class="keyword">new</span> Leader();</span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.is(leader, leader1));    <span class="comment">// true</span></span><br></pre></td></tr></table></figure><hr><h3 id="18年8月21更新"><a href="#18年8月21更新" class="headerlink" title=" 18年8月21更新 "></a><strong> 18年8月21更新 </strong></h3><hr><h4 id="单例模式实践"><a href="#单例模式实践" class="headerlink" title=" 单例模式实践　"></a><strong> 单例模式实践　</strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;单例模式&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;单例模式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="loginBtn"&gt;登录&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> createLoginLayer = (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div;</span><br><span class="line">        <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(!div) &#123;</span><br><span class="line">                div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">                div.innerHTML = <span class="string">'我是登录悬浮窗'</span>;</span><br><span class="line">                div.style.display = <span class="string">'none'</span>;</span><br><span class="line">                <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> div;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)();</span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'inner'</span>);</span><br><span class="line">        <span class="keyword">var</span> loginLayer = createLoginLayer();</span><br><span class="line">        loginLayer.style.display = <span class="string">'block'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><hr><p><strong> 优化=&gt;把创建实例对象的职责和管理单例的职责分别放置在两个方法里 </strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=<span class="string">"en"</span>&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=<span class="string">"UTF-8"</span>&gt;</span><br><span class="line">    &lt;meta name=<span class="string">"viewport"</span></span><br><span class="line">          content=<span class="string">"width=device-width, user-scalable=no, initial-scale=1.0, maximum-scale=1.0, minimum-scale=1.0"</span>&gt;</span><br><span class="line">    &lt;meta http-equiv=<span class="string">"X-UA-Compatible"</span> content=<span class="string">"ie=edge"</span>&gt;</span><br><span class="line">    &lt;title&gt;单例模式&lt;<span class="regexp">/title&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;h1&gt;单例模式&lt;<span class="regexp">/h1&gt;</span></span><br><span class="line"><span class="regexp">&lt;button id="loginBtn"&gt;登录&lt;/</span>button&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">var</span> getSingle = <span class="function"><span class="keyword">function</span> (<span class="params">fn</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> result;</span><br><span class="line">       <span class="keyword">return</span> <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">           <span class="keyword">return</span> result || (result = fn.apply(<span class="keyword">this</span>, <span class="built_in">arguments</span>));</span><br><span class="line">       &#125;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createLoginLayer = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> div = <span class="built_in">document</span>.createElement(<span class="string">'div'</span>);</span><br><span class="line">        div.innerHTML = <span class="string">'我是登录悬浮窗'</span>;</span><br><span class="line">        div.style.display = <span class="string">'none'</span>;</span><br><span class="line">        <span class="built_in">document</span>.body.appendChild(div);</span><br><span class="line">        <span class="keyword">return</span> div;</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createSingleLoginLayer = getSingle(createLoginLayer);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">var</span> createSingleIframe = getSingle(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> iframe = <span class="built_in">document</span>.createElement(<span class="string">'iframe'</span>);</span><br><span class="line">       <span class="built_in">document</span>.body.appendChild(iframe);</span><br><span class="line">       <span class="keyword">return</span> iframe;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">    <span class="comment">// document.getElementById('loginBtn').onclick = function () &#123;</span></span><br><span class="line">    <span class="comment">//     var loginLayer = createSingleLoginLayer();</span></span><br><span class="line">    <span class="comment">//     loginLayer.style.display = 'block';</span></span><br><span class="line">    <span class="comment">// &#125;;</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    <span class="built_in">document</span>.getElementById(<span class="string">'loginBtn'</span>).onclick = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> loginLayer = createSingleIframe();</span><br><span class="line">        loginLayer.src = <span class="string">'http://baidu.com'</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br><span class="line"><span class="regexp">&lt;/</span>body&gt;</span><br><span class="line">&lt;<span class="regexp">/html&gt;</span></span><br></pre></td></tr></table></figure><hr><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title=" 推荐阅读 "></a><strong> 推荐阅读 </strong></h3><p><a href="https://segmentfault.com/q/1010000007116553/a-1020000007117024" target="_blank" rel="noopener">怎么使用es6 的class 优雅地写出单例模式？</a><br><a href="http://www.cnblogs.com/TomXu/archive/2012/02/20/2352817.html" target="_blank" rel="noopener">深入理解JavaScript系列（25）：设计模式之单例模式</a><br><a href="https://cnodejs.org/topic/5565b4a77d4c64752effb5dd" target="_blank" rel="noopener">ES6语法实践，用ES6重写《JavaScript Patterns》中的设计模式</a><br><a href="http://www.zcfy.cc/article/javascript-design-patterns-the-singleton-918.html" target="_blank" rel="noopener">JavaScript设计模式：单例模式</a><br><a href="http://www.alloyteam.com/2012/10/common-javascript-design-patterns/" target="_blank" rel="noopener">JavaScript设计模式–单例模式</a></p>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Uglifyjs失效?</title>
      <link href="/2017/08/04/is-Uglifyjs-cannot-work/"/>
      <url>/2017/08/04/is-Uglifyjs-cannot-work/</url>
      
        <content type="html"><![CDATA[<p>在昨天我发布了<a href="https://github.com/iamsail/killCube" target="_blank" rel="noopener">killCube v2.0.0</a></p><p>v2.0.0与v1.0.0相比</p><p>主要是用ES6重写,并为游戏增加了音效</p><hr><p>第一次打包完的<code>bundle.js</code>大概有2.8MB大小。首次加载简直是一个噩梦，半分钟也不一定能够加载出来。</p><p>于是今天开始做优化相关的工作,更多详细的优化在彻底完成或许会写博文记录</p><p>通过关闭<code>devtool</code>,将<code>bundle.js</code>减小到了1.2MB左右</p><p><strong> 这里记录下使用<code>Uglifyjs</code>遇见的问题 </strong></p><hr><p><img src="/img/webpack/is-Uglifyjs-cannot-work/1.png" alt="1.png"><br><img src="/img/webpack/is-Uglifyjs-cannot-work/2.png" alt="2.png"><br><img src="/img/webpack/is-Uglifyjs-cannot-work/3.png" alt="3.png"></p><p><span class="under0"><strong> 从上面的图片可以看出,引入<code>Uglifyjs</code>插件后,是1.21MB大小。问题在于引入插件前,终端显示也是1.21MB. </strong></span></p><p>于是我认为这个插件没有生效,百之谷之,都没有解决我的问题。翻看完官方文档依旧没有结果。</p><p>这一折腾就是五六个小时,最后意外的发现了原因。</p><p><img src="/img/webpack/is-Uglifyjs-cannot-work/4.png" alt="4.png"><br><img src="/img/webpack/is-Uglifyjs-cannot-work/5.png" alt="5.png"></p><hr><p>原来插件是生效的,但是整个文件只优化了4kb,相对1.21MB是忽略不计的,所以在终端上没有显示出来。</p><p><span class="under0"><strong> 给我一种插件没有生效的错觉。</strong></span></p><p>这里要解释下,<code>Uglifyjs</code>的压缩效果还是很强大的,可为什么这里只优化了4KB呢？</p><p><span class="under0"><strong> 我将44个时长为0.5的音频通过node脚本转码成了一个base64的数组。base64数组里面的内容本身间隙很小,几乎没有多余的空格,也就是没有压缩的空间了。</strong></span></p><p>有群友提到,可以使用mid格式进行优化。可以尝试下。</p>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>打字机动画</title>
      <link href="/2017/08/03/typing-animation/"/>
      <url>/2017/08/03/typing-animation/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>本文是对《CSS揭秘》中的打字机动画的记录,没有教程意义。</p><iframe src="http://www.sail.name/CSS_Demo/typing.html" style="width:500px;height:100px;"><br></iframe><hr><h3 id="相关"><a href="#相关" class="headerlink" title=" 相关 "></a><strong> 相关 </strong></h3><p>在<a href="http://flyingstudio.online/" target="_blank" rel="noopener">工作室首页</a>也有一个打字机的效果。该效果是由<a href="https://blog.xgy666.cn/" target="_blank" rel="noopener">肖高阳</a>编码实现的。</p><p>通过审查元素可以发现是通过JS脚本动态的写入字符实现的。</p><p>在secret一书中的方法只需要借助CSS就可以实现。</p><hr><h3 id="先行知识"><a href="#先行知识" class="headerlink" title=" 先行知识 "></a><strong> 先行知识 </strong></h3><h4 id="ch"><a href="#ch" class="headerlink" title=" ch "></a><strong> ch </strong></h4><p>ch是CSS中和字符相关的相对单位。</p><p>与ch相关的字符是0,也就是1ch便是1个0的宽度。该单位必须与等宽字体一起使用才有用。</p><p>等宽字体有<code>Consolas</code>,<code>Monaco</code>, <code>monospace</code>等等</p><h4 id="steps"><a href="#steps" class="headerlink" title=" steps() "></a><strong> steps() </strong></h4><p>请看我的博文<a href="http://www.sail.name/2017/04/21/steps-in-animation-timing-function/">animation-timing-function:steps</a></p><hr><h3 id="实现"><a href="#实现" class="headerlink" title=" 实现 "></a><strong> 实现 </strong></h3><p>HTML</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">id</span>=<span class="string">"h1"</span>&gt;</span>hello world66<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br></pre></td></tr></table></figure><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">@keyframes</span> typing &#123;</span><br><span class="line">        <span class="selector-tag">from</span>&#123;<span class="attribute">width </span>: <span class="number">0</span>&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">@keyframes</span> caret &#123;</span><br><span class="line">        50%&#123;<span class="attribute">border-color</span>: transparent;&#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="selector-tag">h1</span>&#123;</span><br><span class="line">        <span class="attribute">font-family</span>: <span class="string">"Consolas"</span>;</span><br><span class="line">        <span class="attribute">width</span>:<span class="number">11ch</span>;</span><br><span class="line">        <span class="attribute">white-space</span>: nowrap;</span><br><span class="line">        <span class="attribute">overflow</span>: hidden;</span><br><span class="line">        <span class="attribute">border-right</span>: .<span class="number">5em</span> solid;</span><br><span class="line">        <span class="attribute">animation</span>: typing <span class="number">6s</span> <span class="built_in">steps</span>(<span class="number">11</span>),</span><br><span class="line">                   caret <span class="number">1s</span>  <span class="built_in">steps</span>(<span class="number">1</span>) infinite;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>如果需要动态适配文字内容,加上以下脚本即可</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> h1 = <span class="built_in">document</span>.getElementById(<span class="string">"h1"</span>);</span><br><span class="line">   <span class="function"><span class="keyword">function</span> <span class="title">typing</span>(<span class="params">target</span>) </span>&#123;</span><br><span class="line">       <span class="keyword">var</span> len = target.textContent.length,</span><br><span class="line">           s  = target.style;</span><br><span class="line">       s.width = len + <span class="string">"ch"</span>;</span><br><span class="line">       s.animationTimingFunction = <span class="string">"steps("</span> + len + <span class="string">"),steps(1)"</span></span><br><span class="line">   &#125;</span><br><span class="line">   typing(h1);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS揭秘 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>重命名Git分支</title>
      <link href="/2017/08/03/rename-git-branch/"/>
      <url>/2017/08/03/rename-git-branch/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p><strong> 本文是对重命名Git分支名字方法的记录 </strong></p><hr><h3 id="方法"><a href="#方法" class="headerlink" title=" 方法 "></a><strong> 方法 </strong></h3><h4 id="思路"><a href="#思路" class="headerlink" title=" 思路 "></a><strong> 思路 </strong></h4><p>以下讨论均建立在本地分支和远程对应分支名称相同的前提下</p><p><span class="under0">先重命名本地分支,然后删除远程分支,最后重新提交一个远程分支。</span></p><p>重命名本地分支<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">Git branch -m oldBranchName newBranchName</span><br></pre></td></tr></table></figure></p><p>删除远程分支</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">git push origin --delete oldBranchName</span><br><span class="line"></span><br><span class="line">## 或者</span><br><span class="line"></span><br><span class="line">git push origin :oldBranchName</span><br></pre></td></tr></table></figure><p>提交<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git push origin newBranchName</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://blog.csdn.net/yy20071313/article/details/49930493" target="_blank" rel="noopener"> git 分支重命名</a><br><a href="https://blog.zengrong.net/post/1746.html" target="_blank" rel="noopener">Git查看、删除、重命名远程分支和tag</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>初学ESLint</title>
      <link href="/2017/08/01/begin-of-eslint/"/>
      <url>/2017/08/01/begin-of-eslint/</url>
      
        <content type="html"><![CDATA[<h3 id="前面"><a href="#前面" class="headerlink" title=" 前面 "></a><strong> 前面 </strong></h3><p><span class="under0"> <strong> 为了能够写出更优雅的代码,更好的拥抱社区,开始在实际项目中使用ESLint。</strong> </span></p><p>本文是初学的记录,仅作参考。</p><hr><h3 id="ESLint"><a href="#ESLint" class="headerlink" title=" ESLint "></a><strong> ESLint </strong></h3><h4 id="介绍"><a href="#介绍" class="headerlink" title=" 介绍 "></a><strong> 介绍 </strong></h4><p>ESLint最初是由Nicholas C. Zakas ( JavaScript 红宝书 作者)于2013年6月创建的开源项目。它的目标是提供一个插件化的javascript代码检测工具。</p><p>ESLint 的初衷是为了让程序员可以创建自己的检测规则。ESLint 的所有规则都被设计成可插入的。ESLint 的默认规则与其他的插件并没有什么区别，规则本身和测试可以依赖于同样的模式。为了便于人们使用，ESLint 内置了一些规则，当然，你可以在使用过程中自定义规则。</p><p>每条规则</p><ul><li>各自独立</li><li>可以开启或关闭（没有什么可以被认为“太重要所以不能关闭”）</li><li>可以将结果设置成警告或者错误</li></ul><p>另外</p><ul><li>ESLint 并不推荐任何编码风格，规则是自由的</li><li>所有内置规则都是泛化的</li></ul><h4 id="安装"><a href="#安装" class="headerlink" title=" 安装 "></a><strong> 安装 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">### yarn 全局</span><br><span class="line">yarn add -g eslint</span><br></pre></td></tr></table></figure><h4 id="初始化-配置文件"><a href="#初始化-配置文件" class="headerlink" title=" 初始化(配置文件)"></a><strong> 初始化(配置文件)</strong></h4><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">eslint --init</span><br><span class="line"></span><br><span class="line">## 生成 .eslintrc 文件</span><br></pre></td></tr></table></figure><h4 id="使用"><a href="#使用" class="headerlink" title=" 使用 "></a><strong> 使用 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint yourfile.js</span><br></pre></td></tr></table></figure><p>以上是使用的yarn安装,这里我介绍下npm的全局安装和局部安装姿势</p><h4 id="npm"><a href="#npm" class="headerlink" title=" npm "></a><strong> npm </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">## 局部</span><br><span class="line"></span><br><span class="line">npm install eslint --save-dev</span><br><span class="line"></span><br><span class="line">./node_modules/.bin/eslint --init</span><br><span class="line"></span><br><span class="line">./node_modules/.bin/eslint yourfile.js</span><br><span class="line"></span><br><span class="line">## 全局</span><br><span class="line"></span><br><span class="line">npm install -g eslint</span><br><span class="line"></span><br><span class="line">eslint --init</span><br><span class="line"></span><br><span class="line">eslint yourfile.js</span><br></pre></td></tr></table></figure><hr><h3 id="配置"><a href="#配置" class="headerlink" title=" 配置 "></a><strong> 配置 </strong></h3><p>可以通过以下三种方式配置 ESLint:</p><ul><li>使用 <code>.eslintrc</code> 文件（支持 JSON 和 YAML 两种语法）；</li><li>在 <code>package.json</code> 中添加 <code>eslintConfig</code> 配置块；</li><li>直接在代码文件中定义。</li></ul><h4 id="eslintrc-文件示例"><a href="#eslintrc-文件示例" class="headerlink" title=" .eslintrc 文件示例 "></a><strong> <code>.eslintrc</code> 文件示例 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"env"</span>: &#123;</span><br><span class="line">    <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"commonjs"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"es6"</span>: <span class="literal">true</span></span><br><span class="line">    </span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"globals"</span>: &#123;</span><br><span class="line">    <span class="string">"document"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"navigator"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"window"</span>: <span class="literal">true</span>,</span><br><span class="line">    <span class="string">"angular"</span>:<span class="literal">true</span> <span class="comment">//添加项目所需没有申明的全局变量</span></span><br><span class="line">  &#125;,</span><br><span class="line">  <span class="string">"rules"</span>: &#123;</span><br><span class="line">    <span class="string">"camelcase"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"curly"</span>: <span class="number">2</span>,</span><br><span class="line">    <span class="string">"brace-style"</span>: [<span class="number">2</span>, <span class="string">"1tbs"</span>],</span><br><span class="line">    <span class="string">"quotes"</span>: [<span class="number">2</span>, <span class="string">"single"</span>],</span><br><span class="line">    <span class="string">"semi"</span>: [<span class="number">2</span>, <span class="string">"always"</span>],</span><br><span class="line">    <span class="string">"space-in-brackets"</span>: [<span class="number">2</span>, <span class="string">"never"</span>],</span><br><span class="line">    <span class="string">"space-infix-ops"</span>: <span class="number">2</span>,</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>env:</code>你的脚本将要运行在什么环境中<br><code>globals:</code>额外的全局变量</p><p><code>rules:</code>开启规则和发生错误时报告的等级</p><p>规则的错误等级有三种：<br>0或’off’：关闭规则。<br>1或’warn’：打开规则，并且作为一个警告（并不会导致检查不通过）。<br>2或’error’：打开规则，并且作为一个错误 (退出码为1，检查不通过)。</p><p>参数说明：<br>参数1 ： 错误等级<br>参数2 ： 处理方式</p><p>更多<a href="http://eslint.cn/docs/rules/" target="_blank" rel="noopener">Rules</a></p><h4 id="package-json示例"><a href="#package-json示例" class="headerlink" title=" package.json示例 "></a><strong> <code>package.json</code>示例 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"name"</span>: <span class="string">"mypackage"</span>,</span><br><span class="line">  <span class="string">"version"</span>: <span class="string">"0.0.1"</span>,</span><br><span class="line">  <span class="string">"eslintConfig"</span>: &#123;</span><br><span class="line">    <span class="string">"env"</span>: &#123;</span><br><span class="line">      <span class="string">"browser"</span>: <span class="literal">true</span>,</span><br><span class="line">      <span class="string">"node"</span>: <span class="literal">true</span></span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="文件内配置"><a href="#文件内配置" class="headerlink" title=" 文件内配置 "></a><strong> 文件内配置 </strong></h4><p>代码文件内配置的规则会覆盖配置文件里的规则。</p><p>禁用 ESLint：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable */</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">key</span>: <span class="string">'value'</span>, &#125;; <span class="comment">// I don't care about IE8  </span></span><br><span class="line"><span class="comment">/* eslint-enable */</span></span><br></pre></td></tr></table></figure></p><p>禁用一条规则：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/*eslint-disable no-alert */</span></span><br><span class="line">alert(<span class="string">'doing awful things'</span>);  </span><br><span class="line"><span class="comment">/* eslint-enable no-alert */</span></span><br></pre></td></tr></table></figure></p><p>调整规则：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint no-comma-dangle:1 */</span></span><br><span class="line"><span class="comment">// Make this just a warning, not an error</span></span><br><span class="line"><span class="keyword">var</span> obj = &#123; <span class="attr">key</span>: <span class="string">'value'</span>, &#125;</span><br></pre></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title=" 其它 "></a><strong> 其它 </strong></h3><p>检查且修复</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">eslint xxx.js --fix</span><br></pre></td></tr></table></figure><hr><h3 id="尾声"><a href="#尾声" class="headerlink" title=" 尾声 "></a><strong> 尾声 </strong></h3><p>本文只是对ESLint的粗浅介绍,或许在使用一段时间后,会对本文做修改、补充,有或者另写一篇博文介绍心得。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://github.com/eslint/eslint" target="_blank" rel="noopener">eslint</a><br><a href="http://eslint.cn/" target="_blank" rel="noopener">eslint-cn</a><br><a href="https://cnodejs.org/topic/57c68052b4a3bca66bbddbdd" target="_blank" rel="noopener">利用ESLint检查代码质量</a><br><a href="https://github.com/Jocs/ESLint_docs" target="_blank" rel="noopener">ESLint_docs</a><br><a href="https://csspod.com/getting-started-with-eslint/" target="_blank" rel="noopener">ESLint 使用入门</a><br><a href="http://blog.csdn.net/xueboren001/article/details/53389221" target="_blank" rel="noopener">ESLint深入使用</a><br><a href="http://blog.csdn.net/walid1992/article/details/54633760" target="_blank" rel="noopener">Eslint 从入门到放弃</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ESLint </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Tow-Sum</title>
      <link href="/2017/08/01/two-sum/"/>
      <url>/2017/08/01/two-sum/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>本文是对<a href="https://github.com/barretlee/daily-algorithms" target="_blank" rel="noopener">daily-algorithms</a>第一题的记录</p><hr><h3 id="题目描述"><a href="#题目描述" class="headerlink" title=" 题目描述 "></a><strong> 题目描述 </strong></h3><blockquote><p>本题难度：★</p></blockquote><p> 给定一个整数数组，其中有两项之和为一个特定的数字，假设每次 input 只有一个唯一解，不允许两次使用同一个元素，返回这两个数的索引。</p><p> 比如：</p> <figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">给定 nums = [<span class="number">2</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">15</span>]，target = <span class="number">9</span></span><br><span class="line"></span><br><span class="line">由于 nums[<span class="number">0</span>] + nums[<span class="number">1</span>] = <span class="number">9</span></span><br><span class="line">所以返回 [<span class="number">0</span>, <span class="number">1</span>]</span><br></pre></td></tr></table></figure><hr><h3 id="答案"><a href="#答案" class="headerlink" title=" 答案 "></a><strong> 答案 </strong></h3><h4 id="解法一"><a href="#解法一" class="headerlink" title=" 解法一 "></a><strong> 解法一 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> resolveTwoSum = <span class="function">(<span class="params">nums, target</span>) =&gt;</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; nums.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; nums.length; j++) &#123; </span><br><span class="line">      <span class="keyword">if</span> (nums[i] + nums[j] === target) &#123;</span><br><span class="line">        <span class="keyword">return</span> [i,j]; </span><br><span class="line">      &#125;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这是很常规的解法,很容易就想出来了</p><h4 id="解法二"><a href="#解法二" class="headerlink" title=" 解法二 "></a><strong> 解法二 </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> twoSum = <span class="function"><span class="keyword">function</span>(<span class="params">nums, target</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">var</span> result = [];</span><br><span class="line">  <span class="keyword">var</span> map = &#123;&#125;;</span><br><span class="line">  <span class="keyword">var</span> temp;</span><br><span class="line">  <span class="keyword">for</span> (<span class="keyword">var</span> i = <span class="number">0</span>, len = nums.length; i &lt; len; i++) &#123;</span><br><span class="line">      temp = target - nums[i];</span><br><span class="line">      <span class="keyword">if</span> (map[temp] !== <span class="literal">undefined</span>) &#123;</span><br><span class="line">          result[<span class="number">0</span>] = map[temp] ;</span><br><span class="line">          result[<span class="number">1</span>] = i;</span><br><span class="line">          <span class="keyword">return</span> result;</span><br><span class="line">      &#125;</span><br><span class="line">      map[nums[i]] = i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> <span class="number">-1</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p>借用对象字面量，对 ‘“是否存在另一个数” 与 “当前遍历的数” 之和为 target’ 这个问题进行判断。化 O(n^2) 为 O(n)。<br>其实就是HashMap</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> hashMap = &#123;   </span><br><span class="line">    <span class="built_in">Set</span> : <span class="function"><span class="keyword">function</span>(<span class="params">key,value</span>)</span>&#123;<span class="keyword">this</span>[key] = value&#125;,   </span><br><span class="line">    Get : <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>[key]&#125;,   </span><br><span class="line">    Contains : <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;<span class="keyword">return</span> <span class="keyword">this</span>.Get(key) === <span class="literal">null</span>?<span class="literal">false</span>:<span class="literal">true</span>&#125;,   </span><br><span class="line">    Remove : <span class="function"><span class="keyword">function</span>(<span class="params">key</span>)</span>&#123;<span class="keyword">delete</span> <span class="keyword">this</span>[key]&#125;   </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="推荐阅读"><a href="#推荐阅读" class="headerlink" title=" 推荐阅读 "></a><strong> 推荐阅读 </strong></h3><p><a href="http://www.cnblogs.com/dolphin0520/archive/2012/09/28/2700000.html" target="_blank" rel="noopener">Hash表</a><br><a href="http://blog.csdn.net/yaya_soft/article/details/8696779" target="_blank" rel="noopener">HashMap的JavaScript简洁实现</a></p>]]></content>
      
      
      <categories>
          
          <category> 水题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>yarn</title>
      <link href="/2017/07/31/yarn/"/>
      <url>/2017/07/31/yarn/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>今天从老家回来后,开始着手重构<a href="https://github.com/iamsail/killCube" target="_blank" rel="noopener">killCube</a>。</p><p>主要是准备用ES6重写,并在之前基础上,为游戏增加音效。</p><p>在这次重构中,我也从npm转移到了<a href="https://github.com/yarnpkg/yarn" target="_blank" rel="noopener">yarn</a>。</p><p>本文做些相关介绍和记录。</p><hr><h3 id="什么是yarn"><a href="#什么是yarn" class="headerlink" title=" 什么是yarn "></a><strong> 什么是yarn </strong></h3><p>Fast, reliable, and secure dependency management.</p><p>Yarn是一个新的 JS 包管理工具,由Facebook、Google、Exponent 和 Tilde 联合推出。</p><p>在这之前已经有了npm。而yarn就是对npm存在的一些缺陷进行了完善,这也是我从npm转向yarn的原因。大概如下</p><h4 id="更快"><a href="#更快" class="headerlink" title=" 更快 "></a><strong> 更快 </strong></h4><p>无论 npm 还是 Yarn 在执行包的安装时，都会执行一系列任务。npm 是按照队列执行每个 package，也就是说必须要等到当前 package 成功安装之后，才能继续后面的安装。而 Yarn 是同步执行所有任务，提高了性能。</p><p>yarn 缓存了每次你下载的模块，所以同样模块同样的版本不会发送第二次下载请求，对于没有缓存的模块， yarn 也可以通过并行的网络请求最大限度利用网络资源。</p><h4 id="yarn-lock"><a href="#yarn-lock" class="headerlink" title=" yarn.lock "></a><strong> yarn.lock </strong></h4><p>npm 和 Yarn 都是通过 package.json 记录项目需要拉取的依赖模块，不过在使用时，往往 package.json 中模块的版本号不太会写得非常确切，通常是定个版本范围。这样你就能自行选择使用模块的大版本或者小版本，也允许 npm 拉取模块最新的修复了 bug 的版本。</p><p>在理想的语义化版本世界中，新版是不会有颠覆旧版本的改变，然而现实并非如此。这就导致了使用 npm 拉取依赖时，即使用的是相同的 package.json，在不同的设备上拉到的 packages 版本不一，这就可能为项目引入 bug。</p><p>为了防止拉取到不同的版本，Yarn 有一个锁定文件 (lock file) 记录了被确切安装上的模块的版本号。每次只要新增了一个模块，Yarn 就会创建（或更新）yarn.lock 这个文件。这么做就保证了，每一次拉取同一个项目依赖时，使用的都是一样的模块版本。</p><h4 id="安全"><a href="#安全" class="headerlink" title=" 安全 "></a><strong> 安全 </strong></h4><p>yarn 在开始安装一个包之前会先用 checksums 来验证，你不用担心本地的缓存的包被破坏了导致安装失败。</p><h4 id="依旧是npm库"><a href="#依旧是npm库" class="headerlink" title=" 依旧是npm库 "></a><strong> 依旧是npm库 </strong></h4><p>Yarn 没想要完全替代 npm，它只是一个新的 CLI 工具，拉取的 packages 依然来自 npm 仓库。仓库本身不会变，所以获取或者发布模块的时候和原来一样</p><hr><h3 id="常见命令"><a href="#常见命令" class="headerlink" title=" 常见命令 "></a><strong> 常见命令 </strong></h3><p>开始新项目</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn init</span><br></pre></td></tr></table></figure><p>添加依赖包</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add [package]</span><br><span class="line">yarn add [package]@[version]</span><br><span class="line">yarn add [package]@[tag]</span><br></pre></td></tr></table></figure><p>分别添加到 devDependencies、peerDependencies 和 optionalDependencies<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn add [package] --dev</span><br><span class="line">yarn add [package] --peer </span><br><span class="line">yarn add [package] --optional</span><br></pre></td></tr></table></figure></p><p>升级依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn upgrade [package]</span><br><span class="line">yarn upgrade [package]@[version]</span><br><span class="line">yarn upgrade [package]@[tag]</span><br></pre></td></tr></table></figure></p><p>移除依赖包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn remove [package]</span><br></pre></td></tr></table></figure></p><p>安装项目的全部依赖<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yarn</span><br><span class="line">## 或者</span><br><span class="line">yarn install</span><br></pre></td></tr></table></figure></p><p>安装依赖项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn install</span><br></pre></td></tr></table></figure></p><p>安装选项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">安装所有依赖：yarn 或 yarn install</span><br><span class="line">安装一个包的单一版本：yarn install --flat</span><br><span class="line">强制重新下载所有包：yarn install --force</span><br><span class="line">只安装生产环境依赖：yarn install --production</span><br></pre></td></tr></table></figure></p><hr><h3 id="更换镜像"><a href="#更换镜像" class="headerlink" title=" 更换镜像 "></a><strong> 更换镜像 </strong></h3><p>查看下载源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yarn config get registry</span><br></pre></td></tr></table></figure></p><p>更换为淘宝源<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">yarn config set registry https://registry.npm.taobao.org</span><br><span class="line"></span><br><span class="line">## 默认镜像源</span><br><span class="line">https://registry.yarnpkg.com</span><br></pre></td></tr></table></figure></p><hr><h3 id="其他"><a href="#其他" class="headerlink" title=" 其他 "></a><strong> 其他 </strong></h3><p>这里我顺便记录下,今天重构发现的问题</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 让黑块动起来</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">move</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="keyword">var</span> con = $(<span class="string">'con'</span>);</span><br><span class="line">    <span class="keyword">var</span> top = <span class="built_in">parseInt</span>(<span class="built_in">window</span>.getComputedStyle(con, <span class="literal">null</span>)[<span class="string">'top'</span>]);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(speed + top &gt; <span class="number">0</span>)&#123;</span><br><span class="line">        top = <span class="number">0</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        top += speed;</span><br><span class="line">    &#125;</span><br><span class="line">    con.style.top = top + <span class="string">'px'</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(top === <span class="number">0</span>)&#123;</span><br><span class="line">        createrow();</span><br><span class="line">        con.style.top = <span class="string">'-100px'</span>;</span><br><span class="line">        delrow();</span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(top === (<span class="number">-100</span> + speed))&#123;</span><br><span class="line">        <span class="keyword">var</span> rows = con.childNodes;</span><br><span class="line">        <span class="keyword">if</span>((rows.length === <span class="number">5</span>) &amp;&amp; (rows[rows.length<span class="number">-1</span>].pass !== <span class="number">1</span>) )&#123;</span><br><span class="line">            fail();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">init</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">    <span class="comment">// 定时器 每30毫秒调用一次move()</span></span><br><span class="line">    <span class="comment">// clock = window.setInterval("move()", 30);</span></span><br><span class="line">    clock = <span class="built_in">window</span>.setInterval(<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">        move();</span><br><span class="line">    &#125;, <span class="number">30</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>在上面这段代码中,init()函数,关于setInterval,提供了两种写法。</p><p>分别是注释的,记作A,非注释的,记作B。</p><p>这里我直接给结论,两种写法都是对的,但B更好。</p><p><span class="under0"><strong> A中用字符串作为第一个参数,十分低效。从系统的角度来说,当用字符串的时候,它会被传进构造函数,并且重新调用另一个函数。这样会拖慢程序的进度。</strong></span></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://zhuanlan.zhihu.com/p/23493436" target="_blank" rel="noopener">Yarn vs npm：你需要知道的一切</a><br><a href="https://zhuanlan.zhihu.com/p/22892675" target="_blank" rel="noopener">yarn, 不是又一个 npm 第三方客户端</a><br><a href="https://yarnpkg.com/zh-Hans/" target="_blank" rel="noopener">yarnpkg</a><br><a href="http://www.bubuko.com/infodetail-1919297.html" target="_blank" rel="noopener">npm和yarn更改为淘宝镜像</a></p>]]></content>
      
      
      <categories>
          
          <category> npm&amp;&amp;yarn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Constructor(构造器)模式</title>
      <link href="/2017/07/29/Constructor-Pattern/"/>
      <url>/2017/07/29/Constructor-Pattern/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title=" 前言 "></a><strong> 前言 </strong></h3><p>之前零星的学了点设计模式,趁着假期,开始看《JavaScript 设计模式》系统的学习下,并写写博文做记录。</p><hr><h3 id="分类"><a href="#分类" class="headerlink" title=" 分类 "></a><strong> 分类 </strong></h3><p>在《JavaScript 设计模式》一书中,讲了以下这三种类别的设计模式</p><h4 id="创建型设计模式"><a href="#创建型设计模式" class="headerlink" title=" 创建型设计模式 "></a><strong> 创建型设计模式 </strong></h4><p>创建型设计模式专注于处理对象创建机制,以适合给定情况的方式来创建对象。</p><p>属于这个类别的模式包括:Constructor(构造器)、Factory(工厂)、Abstract(抽象)、Prototype(原型)、Singleton(单例)和Builder(生成器)。</p><h4 id="结构型设计模式"><a href="#结构型设计模式" class="headerlink" title=" 结构型设计模式 "></a><strong> 结构型设计模式 </strong></h4><p>结构型模式与对象组合有关,通常可以用于找出在不同对象之间建立关系的简单方法。</p><p>属于这个类别的模式包括:Decorator(装饰者)、Facade(外观)、Flyweight(享元)、Adapter(适配器)和Proxy(代理)</p><h4 id="行为设计模式"><a href="#行为设计模式" class="headerlink" title=" 行为设计模式 "></a><strong> 行为设计模式 </strong></h4><p>行为设计模式专注于改善或简化系统中不同对象之间的通信</p><p>行为模式包括:Iterator(迭代器模式)、Mediator(中介者)、Observer(观察者)和Visitor(访问者)</p><hr><h3 id="Constructor-构造器-模式"><a href="#Constructor-构造器-模式" class="headerlink" title=" Constructor(构造器) 模式 "></a><strong> Constructor(构造器) 模式 </strong></h3><h4 id="基本Constructor-构造器"><a href="#基本Constructor-构造器" class="headerlink" title=" 基本Constructor(构造器) "></a><strong> 基本Constructor(构造器) </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)  </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sail = <span class="keyword">new</span> Car(<span class="string">"sail"</span>,<span class="number">2017</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">let</span> Sail = <span class="keyword">new</span> Car(<span class="string">"Sail"</span>,<span class="number">2017</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sail.toString());</span><br><span class="line"><span class="built_in">console</span>.log(Sail.toString());</span><br></pre></td></tr></table></figure><p>该版本存在一定的问题,它使得继承变得困难。另外,这种实现方式,toString()这样的函数是为每个使用Car构造器创建的新对象而分别重新定义的。</p><hr><h4 id="带原型的Constructor-构造器"><a href="#带原型的Constructor-构造器" class="headerlink" title=" 带原型的Constructor(构造器) "></a><strong> 带原型的Constructor(构造器) </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Car.prototype.toString = <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> sail = <span class="keyword">new</span> Car(<span class="string">"sail"</span>,<span class="number">2017</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">var</span> Sail = <span class="keyword">new</span> Car(<span class="string">"Sail"</span>,<span class="number">2017</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sail.toString());</span><br><span class="line"><span class="built_in">console</span>.log(Sail.toString());</span><br></pre></td></tr></table></figure><p>通过这种方式,可以创建的多个Car对象,并访问相同的原型。</p><hr><p><span class="under0">我用ES6重写了以上两段代码,却出现了一些问题。代码依次如下</span></p><h4 id="基本Constructor-构造器-1"><a href="#基本Constructor-构造器-1" class="headerlink" title=" 基本Constructor(构造器) "></a><strong> 基本Constructor(构造器) </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sail = <span class="keyword">new</span> Car(<span class="string">"sail"</span>,<span class="number">2017</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">let</span> Sail = <span class="keyword">new</span> Car(<span class="string">"Sail"</span>,<span class="number">2017</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sail.toString());</span><br><span class="line"><span class="built_in">console</span>.log(Sail.toString());</span><br></pre></td></tr></table></figure><h4 id="运行结果"><a href="#运行结果" class="headerlink" title=" 运行结果 "></a><strong> 运行结果 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">sail has done 6666 miles</span><br><span class="line">Sail has done 9999 miles</span><br></pre></td></tr></table></figure><hr><h4 id="带原型的Constructor-构造器-1"><a href="#带原型的Constructor-构造器-1" class="headerlink" title=" 带原型的Constructor(构造器) "></a><strong> 带原型的Constructor(构造器) </strong></h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Car.prototype.toString = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="keyword">let</span> sail = <span class="keyword">new</span> Car(<span class="string">"sail"</span>,<span class="number">2017</span>,<span class="number">6666</span>);</span><br><span class="line"><span class="keyword">let</span> Sail = <span class="keyword">new</span> Car(<span class="string">"Sail"</span>,<span class="number">2017</span>,<span class="number">9999</span>);</span><br><span class="line"></span><br><span class="line"><span class="built_in">console</span>.log(sail.toString());</span><br><span class="line"><span class="built_in">console</span>.log(Sail.toString());</span><br></pre></td></tr></table></figure><h4 id="运行结果-1"><a href="#运行结果-1" class="headerlink" title=" 运行结果 "></a><strong> 运行结果 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">undefined has done undefined miles</span><br><span class="line">undefined has done undefined miles</span><br></pre></td></tr></table></figure><p><span class="under0">前一段代码能够正常运行,而后一段代码 <code>this.model</code> 、<code>this.miles</code> 皆是 <code>undefined</code></span></p><p>这里就涉及到有关箭头函数的使用问题了。在我的博文<a href="http://www.sail.name/2017/05/15/Array-like-to-Array-in-JavaScript/">JS类数组转数组</a>曾提到过。</p><h4 id="箭头函数有几个使用注意点"><a href="#箭头函数有几个使用注意点" class="headerlink" title=" 箭头函数有几个使用注意点 "></a><strong> 箭头函数有几个使用注意点 </strong></h4><p>（1）函数体内的this对象，就是定义时所在的对象，而不是使用时所在的对象。</p><p>（2）不可以当作构造函数，也就是说，不可以使用new命令，否则会抛出一个错误。</p><p>（3）不可以使用arguments对象，该对象在函数体内不存在。如果要用，可以用 rest 参数代替。</p><p>（4）不可以使用yield命令，因此箭头函数不能用作 Generator 函数。</p><hr><p>在基本Constructor(记作A)中的那段代码能够正常运行是因为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line">    <span class="keyword">this</span>.toString = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">    &#125;;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>toString</code>方法中的this是父级作用域的this,即函数Car的this.</p><p><span class="under0"> <strong> 箭头函数本身是没有this,arguments的 </strong> </span> </p><p>而在带原型的Constructor(记作B)中的这段代码undefined是因为</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Car</span>(<span class="params">model, year, miles</span>) </span>&#123;</span><br><span class="line">    <span class="keyword">this</span>.model = model;</span><br><span class="line">    <span class="keyword">this</span>.year = year;</span><br><span class="line">    <span class="keyword">this</span>.miles = miles;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">Car.prototype.toString = <span class="function"><span class="params">()</span> =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">this</span>.model + <span class="string">" has done "</span> + <span class="keyword">this</span>.miles + <span class="string">" miles"</span>;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> 箭头函数中的this不是指向Car,而是指向了全局作用域。</strong></span>普通函数则没这个问题。</p><p>另一个容易犯的错误是使用箭头函数定义对象的方法<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> a = &#123;</span><br><span class="line">  foo: <span class="number">1</span>,</span><br><span class="line">  bar: <span class="function"><span class="params">()</span> =&gt;</span> <span class="built_in">console</span>.log(<span class="keyword">this</span>.foo)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a.bar()  <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure></p><p>以上代码中,箭头函数中的this并不是指向a这个对象。对象a并不能构成一个作用域,所以再往上到达全局作用域，this就指向全局作用域。如果我们使用普通函数的定义方法，输出结果就符合预期，这是因为a.bar()函数执行时作用域绑定到了a对象。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li>《JavaScript 设计模式》</li><li><a href="https://cnodejs.org/topic/584a207a3ebad99b336b1ede" target="_blank" rel="noopener">少年，不要滥用箭头函数啊</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 设计模式 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>再谈旋转的立方体</title>
      <link href="/2017/07/28/talk-rotary-cube-again/"/>
      <url>/2017/07/28/talk-rotary-cube-again/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title=" 背景 "></a><strong> 背景 </strong></h3><p>之前写过一篇博文<a href="http://www.sail.name/2017/02/16/rotary-cube/">旋转的立方体</a></p><p>昨天有朋友说,<a href="https://github.com/iamsail/websocket-animation" target="_blank" rel="noopener">websocket-animation</a>项目中能把旋转原点设置在正方体中心就更好了</p><p>以下是旋转原点不在正方体中心</p><iframe src="http://www.sail.name/CSS_Demo/rotary-cube.html" style="width:500px;height:500px;"><br></iframe><p>以下是旋转原点在正方体中心</p><iframe src="http://www.sail.name/CSS_Demo/rotary-cube-1.html" style="width:500px;height:400px;"><br></iframe><p>当时说明天修改。</p><p>今天看代码的时候,一时却没有搞定。<span class="under0">一番研究过后,发现让立方体旋转起来有两个思路,不同的思路会导致在旋转原点上不同的效果。</span></p><p>本文对两种实现方式做些记录。</p><hr><p>以下是旋转原点不在立方体中心(记作A)的部分CSS代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-id">#face1</span>  &#123;</span><br><span class="line">      &#125;</span><br><span class="line"><span class="selector-id">#face2</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-transform-origin</span>:right;</span><br><span class="line">     <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(-<span class="number">90deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#face3</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-transform-origin</span>:left;</span><br><span class="line">     <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#face4</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-transform-origin</span>:top;</span><br><span class="line">     <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateX</span>(-<span class="number">90deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#face5</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-transform-origin</span>:bottom;</span><br><span class="line">     <span class="attribute">-webkit-transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-id">#face6</span> &#123;</span><br><span class="line">     <span class="attribute">-webkit-transform</span>: <span class="built_in">translateZ</span>(-<span class="number">200px</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.sail.name/CSS_Demo/rotary-cube.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/rotary-cube.html" target="_blank" rel="noopener">demo源码</a></p><hr><p>以下是旋转原点在立方体中心((记作B)的部分CSS代码</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.inner1</span>&#123;</span><br><span class="line">    <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">111</span>,<span class="number">222</span>,<span class="number">222</span>,<span class="number">0.5</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.inner2</span>&#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">211</span>,<span class="number">122</span>,<span class="number">322</span>,<span class="number">0.5</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">translateZ</span>(-<span class="number">100px</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.inner3</span>&#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">211</span>,<span class="number">120</span>, <span class="number">22</span>,<span class="number">0.5</span>);</span><br><span class="line">    <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.inner4</span>&#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">311</span>,<span class="number">320</span>, <span class="number">122</span>,<span class="number">0.5</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotateY</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(-<span class="number">100px</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.inner5</span>&#123;<span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">322</span>,<span class="number">1</span>, <span class="number">222</span>,<span class="number">0.5</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(-<span class="number">100px</span>);</span><br><span class="line"> &#125;</span><br><span class="line"> <span class="selector-class">.inner6</span> &#123;</span><br><span class="line">     <span class="attribute">background-color</span>: <span class="built_in">rgba</span>(<span class="number">211</span>, <span class="number">000</span>, <span class="number">000</span>, <span class="number">0.5</span>);</span><br><span class="line">     <span class="attribute">transform</span>: <span class="built_in">rotateX</span>(<span class="number">90deg</span>) <span class="built_in">translateZ</span>(<span class="number">100px</span>);</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><p><a href="http://www.sail.name/CSS_Demo/rotary-cube.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/rotary-cube.html" target="_blank" rel="noopener">demo源码</a></p><hr><p>A与B的不同在于,<span class="under0"><strong> A的具体实现的时候借助了<code>transform-origin</code>,改变了其中四个面的变形原点,此时A有了多个原点,且原点不再位于每个面的中心,即主对角线与次对角线的交点; </strong></span></p><p><strong> 而B的实现完全依赖<code>transform</code>中的<code>rotate</code>和<code>translate</code>来改变立方体的每一个面在空间中的位置,六个面的变形原点都处于该面主对角线与次对角线的交点。</strong></p><p><strong> <span class="under0">对一个立方体来说,六个面,两个相对的面的旋转中心叠加位于整个立方体的中心,所以旋转原点在立方体中心。</span></strong></p><hr><p>我的<a href="https://github.com/iamsail/websocket-animation" target="_blank" rel="noopener">websocket-animation</a>中立方体的旋转不在中心便是因为上述原因,因此只需要改下立方体的CSS实现代码即可。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端click事件的300ms延迟</title>
      <link href="/2017/07/25/click-event-delay-300ms-in-mobile-web/"/>
      <url>/2017/07/25/click-event-delay-300ms-in-mobile-web/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title=" 背景 "></a><strong> 背景 </strong></h3><p>近期开发<a href="https://github.com/iamsail/killCube" target="_blank" rel="noopener">killCube</a>,了解到移动端click事件有一个300ms延迟。本文做些记录。</p><hr><h3 id="延迟由来"><a href="#延迟由来" class="headerlink" title=" 延迟由来 "></a><strong> 延迟由来 </strong></h3><p>这要追溯至 2007 年初。苹果公司在发布首款 iPhone 前夕，遇到一个问题：当时的网站都是为大屏幕设备所设计的。于是苹果的工程师们做了一些约定，应对 iPhone 这种小屏幕浏览桌面端站点的问题。</p><p>这当中最出名的，当属双击缩放(double tap to zoom)，这也是会有上述 300 毫秒延迟的主要原因。双击缩放，顾名思义，即用手指在屏幕上快速点击两次，iOS 自带的 Safari 浏览器会将网页缩放至原始比例。</p><p>那么这和 300 毫秒延迟有什么联系呢？</p><p>假定这么一个场景。用户在 iOS Safari 里边点击了一个链接。由于用户可以进行双击缩放或者双击滚动的操作，当用户一次点击屏幕之后，浏览器并不能立刻判断用户是确实要打开这个链接，还是想要进行双击操作。因此，iOS Safari 就等待 300 毫秒，以判断用户是否再次点击了屏幕。</p><p>鉴于iPhone的成功，其他移动浏览器都复制了 iPhone Safari 浏览器的多数约定，包括双击缩放，几乎现在所有的移动端浏览器都有这个功能。之前人们刚刚接触移动端的页面，在欣喜的时候往往不会care这个300ms的延时问题，可是如今touch端界面如雨后春笋，用户对体验的要求也更高，这300ms带来的卡顿慢慢变得让人难以接受。</p><p>而touchstart事件虽然响应很快,但如果用户只是想下滑滚动屏幕也会触发。</p><hr><p>这里介绍两种方法</p><h3 id="禁止缩放"><a href="#禁止缩放" class="headerlink" title=" 禁止缩放 "></a><strong> 禁止缩放 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;user-scalable=no, initial-scale=1.0, </span><br><span class="line">maximum-scale=1.0, minimum-scale=1.0&quot;&gt;</span><br></pre></td></tr></table></figure><p>表明这个页面是不可缩放的,双击缩放功能就没有意义,此时浏览器会禁用默认的双击缩放行为并且去掉300ms的延迟。</p><p>当然倘若想让页面能够缩放,那么这个方案就失效了</p><h3 id="更改默认的适口宽度"><a href="#更改默认的适口宽度" class="headerlink" title=" 更改默认的适口宽度 "></a><strong> 更改默认的适口宽度 </strong></h3><p>通过标签设置适口宽度为设备宽度<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;meta name=&quot;viewport&quot; content=&quot;width=device-width&quot;&gt;</span><br></pre></td></tr></table></figure></p><p>如果能够识别出一个网站是响应式网站,那么移动端浏览器就可以自动禁掉默认的双击缩放行为并且去掉300ms的点击延迟。因此设置了上述标签,浏览器就可以认为改网站对移动端做过了适配和优化,无需双击缩放的操作了。</p><p>至于其它使用第三方库的方法我就不做介绍了</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.cnblogs.com/shenjp/p/6433646.html" target="_blank" rel="noopener">移动端click事件延迟300ms到底是怎么回事，该如何解决？</a></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 移动web </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>.gitignore</title>
      <link href="/2017/07/25/gitignore/"/>
      <url>/2017/07/25/gitignore/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title=" 背景 "></a><strong> 背景 </strong></h3><p>本文是对<code>.gitignore</code>文件的一些介绍</p><p><code>.gitignore</code>文件可以通过写入一些规则指定尚未commit提交的文件被git忽略,使得与规则匹配的文件,不进行版本管理。粗暴的说,就是<code>.gitignore</code>可以使一些文件不被添加到github上。且已经commit的文件不受.gitignore影响。</p><p>当然这个我们是可以解决的,这个我在后面会介绍。</p><hr><h3 id="规范"><a href="#规范" class="headerlink" title=" 规范 "></a><strong> 规范 </strong></h3><p><code>#</code> 为注释<br><code>/</code> 以<code>/</code>开头表示(忽略)目录<br><code>!</code> 否定模式,任何由先前模式排除的匹配文件将被再次包含,即不忽略。如果该文件的父目录被排除，则不可能重新包含文件</p><p>可以使用shell所使用的正则表达式来进行模式匹配<br>如果模式不包含斜杠<code>/</code>,Git将其视为<code>shell glob</code>模式，并检查与<code>.gitignore</code>文件位置相对的路径名的匹配（相对于工作树的顶点，如果不是从<code>.gitignore</code>文件）</p><p><span class="under0"> 两个连续的 <code>**</code>与完整路径名匹配的模式可能有特殊含义 </span></p><p>尾随<code>/**</code>匹配内部的一切。例如<code>abc/**</code>匹配目录<code>abc</code>内的所有文件，相对于<code>.gitignore</code>文件的位置，具有无限深度</p><hr><h3 id="模式"><a href="#模式" class="headerlink" title=" 模式 "></a><strong> 模式 </strong></h3><p><code>.gitignore</code>文件过滤有两种模式,开放模式和保守模式</p><h4 id="开放模式"><a href="#开放模式" class="headerlink" title=" 开放模式 "></a><strong> 开放模式 </strong></h4><p>开放模式设置过滤哪些文件和文件夹</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 过滤文件夹</span><br><span class="line">/directoryName</span><br><span class="line"></span><br><span class="line">#指定过滤某种类型的文件</span><br><span class="line">*.zip</span><br><span class="line">*.rar</span><br><span class="line"></span><br><span class="line">#指定过滤某个具体文件</span><br><span class="line">/directoryName/fileName</span><br></pre></td></tr></table></figure><h4 id="保守模式"><a href="#保守模式" class="headerlink" title=" 保守模式 "></a><strong> 保守模式 </strong></h4><p>保守模式负责设置哪些文件不被过滤，也就是哪些文件要被跟踪。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"># 跟踪文件夹</span><br><span class="line">!/directoryName</span><br><span class="line"></span><br><span class="line">#跟踪某种类型的文件</span><br><span class="line">!*.zip</span><br><span class="line">！*.rar</span><br><span class="line"></span><br><span class="line">#跟踪某个具体文件</span><br><span class="line">！/directoryName/fileName</span><br></pre></td></tr></table></figure></p><h4 id="配置准则"><a href="#配置准则" class="headerlink" title=" 配置准则 "></a><strong> 配置准则 </strong></h4><p>共享模式与保守模式相结合。</p><p>比如,只想跟踪某个目录下的其中一个文件,可以先共享模式将整个目录设置为不跟踪,再通过保守模式把需要跟踪的文件设置为被跟踪</p><hr><h3 id="问题解决"><a href="#问题解决" class="headerlink" title=" 问题解决 "></a><strong> 问题解决 </strong></h3><p>开篇提到了如果在设置<code>.gitignore</code>之前,有的文件已经commit过,即已经被git管理了的,<code>.gitignore</code>的规则是不会起作用的</p><p>这个问题有一个解决方案</p><p>需要对已经提价的文件执行如下命令,即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git rm --cached FILENAME</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="https://git-scm.com/docs/gitignore" target="_blank" rel="noopener">gitignore</a><br><a href="https://help.github.com/articles/ignoring-files/" target="_blank" rel="noopener">Ignoring files</a><br><a href="http://blog.csdn.net/cscmaker/article/details/8553980" target="_blank" rel="noopener"> Github使用gitignore忽略增加指定文件</a><br><a href="http://www.cnblogs.com/kevingrace/p/5690241.html" target="_blank" rel="noopener">Git忽略规则.gitignore梳理</a><br><a href="http://blog.csdn.net/liuqiaoyu080512/article/details/8648266" target="_blank" rel="noopener">.gitignore</a></p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>dependencies与devDependencies</title>
      <link href="/2017/07/24/dependencies-devDependencies/"/>
      <url>/2017/07/24/dependencies-devDependencies/</url>
      
        <content type="html"><![CDATA[<p>在项目的<code>package.json</code>中有两个相似的键值对,分别是<code>dependencies</code>与<code>devDependencies</code></p><p>在使用npm安装node模块或者插件时,有两种命令参数将其信息写入<code>package.json</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">-- save dev</span><br><span class="line">-- save</span><br></pre></td></tr></table></figure><p>其中<code>-- save dev</code>安装的插件,依赖包名字被添加到<code>devDependencies</code>键下面,该键下面的模块依赖用于开发环境,不用于生产环境<br><code>-- save dev</code>安装的插件,依赖包名字被添加到<code>dependencies</code>键下面,该键下面的模块依赖于用于开发环境</p><hr><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install</span><br></pre></td></tr></table></figure></p><p>默认安装两种依赖</p><hr><p>如果只是单纯的使用这个包而不需要进行一些改动测试之类的,只安装dependencies而不安装devDependencies。<br>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install --production</span><br></pre></td></tr></table></figure></p><hr><p>执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure></p><p>只安装dependencies</p><hr><p>如需安装devDependencies<br>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install packagename</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.cnblogs.com/ayseeing/p/4128612.html" target="_blank" rel="noopener">devDependencies和dependencies的区别</a><br><a href="http://www.cnblogs.com/fewenjing/p/5892377.html" target="_blank" rel="noopener">dependencies与devDependencies的区别</a></p>]]></content>
      
      
      <categories>
          
          <category> npm&amp;&amp;yarn </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>flex垂直居中</title>
      <link href="/2017/07/22/vertical-center-by-flex/"/>
      <url>/2017/07/22/vertical-center-by-flex/</url>
      
        <content type="html"><![CDATA[<p>以前我们实现水平垂直居中,可以通过如下的代码段实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">position</span>: <span class="selector-tag">absolute</span>;</span><br><span class="line"><span class="selector-tag">top</span><span class="selector-pseudo">:50</span>%;</span><br><span class="line"><span class="selector-tag">left</span><span class="selector-pseudo">:50</span>%;</span><br><span class="line"><span class="selector-tag">transform</span>: <span class="selector-tag">translateX</span>(<span class="selector-tag">-50</span>%) <span class="selector-tag">translateY</span>(<span class="selector-tag">-50</span>%);</span><br></pre></td></tr></table></figure><p>实现文本垂直居中也可以借助以下代码段实现</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">display</span>: <span class="selector-tag">table-cell</span>;</span><br><span class="line"><span class="selector-tag">vertical-align</span>: <span class="selector-tag">middle</span>;</span><br></pre></td></tr></table></figure><hr><p>而使用flex可以更加简单的实现</p><p>若对flex不了解,可以看看我的博文<a href="http://www.sail.name/2017/07/09/the-base-of-flex/">Flex基础</a></p><p>这里介绍两种方式</p><h3 id="HTML结构"><a href="#HTML结构" class="headerlink" title=" HTML结构 "></a><strong> HTML结构 </strong></h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></span><br><span class="line">   <span class="tag">&lt;<span class="name">p</span>&gt;</span></span><br><span class="line">       1111111 </span><br><span class="line">   <span class="tag">&lt;/<span class="name">p</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></table></figure><h3 id="方法一"><a href="#方法一" class="headerlink" title=" 方法一 "></a><strong> 方法一 </strong></h3><p>CSS</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">border</span>: <span class="number">10px</span> solid red;</span><br><span class="line">   &#125;</span><br><span class="line"></span><br><span class="line"><span class="selector-tag">p</span>&#123;</span><br><span class="line">    <span class="attribute">margin</span>: auto;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="方法二"><a href="#方法二" class="headerlink" title=" 方法二 "></a><strong> 方法二 </strong></h3><p>CSS<br><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">div</span>&#123;</span><br><span class="line">    <span class="attribute">display</span>: flex;</span><br><span class="line">    <span class="attribute">width</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">height</span>: <span class="number">200px</span>;</span><br><span class="line">    <span class="attribute">background</span>: red;</span><br><span class="line">    <span class="attribute">justify-content</span>: center;</span><br><span class="line">    <span class="attribute">align-items</span>: center;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>方法二可以去掉p标签</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SSH Could not resolve hostname ssh.github.com</title>
      <link href="/2017/07/22/ssh-Could-not-resolve-hostname-ssh-github-com/"/>
      <url>/2017/07/22/ssh-Could-not-resolve-hostname-ssh-github-com/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title=" 问题 "></a><strong> 问题 </strong></h3><p>昨天提交github,出现了如下的错误</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">ssh: Could not resolve hostname ssh.github.com: Name or service not known </span><br><span class="line">fatal: Could not read from remote repository.</span><br><span class="line"></span><br><span class="line">Please make sure you have the correct access rights </span><br><span class="line">and the repository exists.</span><br></pre></td></tr></table></figure><hr><h3 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h3><h5 id="环境"><a href="#环境" class="headerlink" title=" 环境: "></a><strong> 环境: </strong></h5><p>Win10<br>Git bash</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ping github.com</span><br></pre></td></tr></table></figure><p>获取到github.com的ip为192.30.255.113</p><p><span class="under0">注意,这个ip不是稳定不变的,以自己电脑ping出来的为准确</span></p><p>进入/etc目录修改hosts文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/hosts</span><br></pre></td></tr></table></figure><p>文件末尾添加 ip   github.com</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">192.30.255.113  github.com</span><br></pre></td></tr></table></figure><hr><h3 id="更新"><a href="#更新" class="headerlink" title=" 更新 "></a><strong> 更新 </strong></h3><p>现在是9月3日,前几天装了win10+unbuntu的双系统。装完过后在win10下又出现了这个问题。本文一开始写的方法不在生效,我又尝试了一些其他方案,有时候可以有时候不可以,原因未知。</p><p>稳妥起见,大部分项目都是使用https连接了,不得已放弃了ssh。希望过段时间可以解决。把尝试方案的参考链接更新下</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><p><a href="http://www.cnblogs.com/thqy39/p/5341911.html" target="_blank" rel="noopener">Push to GitHub：could not resolve host: github.com</a><br><a href="https://www.iwwenbo.com/git-connection-refused/" target="_blank" rel="noopener">ssh connect to host github.com port 22 Connection refused</a><br><a href="http://www.shenyanchao.cn/blog/2013/09/16/git-ssh-connection/" target="_blank" rel="noopener">提交代码到GitHub SSH错误解决方案</a></p>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>妙用switch</title>
      <link href="/2017/07/21/ingenious-use-of-switch/"/>
      <url>/2017/07/21/ingenious-use-of-switch/</url>
      
        <content type="html"><![CDATA[<p>在某个交流群看到这样一个问题</p><p><strong> 给定变量X,判断X值落在哪个区间[0,10],[10,50],[50,100],[100,+++],只能使用switch </strong></p><hr><p>一般我们写switch都是这样写的</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (foo)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'hehe'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'xixi'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'momo'</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>其实像还可以这样</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">switch</span> (<span class="literal">true</span>)&#123;</span><br><span class="line">    <span class="keyword">case</span> foo &gt; <span class="number">0</span> &amp;&amp; foo &lt;=<span class="number">3</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'HTML'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">case</span> foo &gt; <span class="number">3</span> &amp;&amp; foo &lt;=<span class="number">100</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">'CSS'</span>);</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">default</span>:</span><br><span class="line">        <span class="built_in">console</span>.log(<span class="string">"JavaScript"</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p>开篇的问题就很容易解决了</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 奇技淫巧 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>腾讯阅文前端面试记录(大二)</title>
      <link href="/2017/07/20/an-FE-interview-of-tencent-yuewen-in-my-sophomore-class/"/>
      <url>/2017/07/20/an-FE-interview-of-tencent-yuewen-in-my-sophomore-class/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p>在3月份,我写了一篇<span class="under0"><a href="http://www.sail.name/2017/03/25/the-spring-in-2017/">这是二零一七年的春天</a></span>,里面有提到百度前端技术部面试的一面和二面。</p><p>当时二面结果还没出来。</p><p>当然,后来二面通过了,不过三面却不是我想象中的hr面,应该是技术总监面了。第三面,面得很差,在本文后面我会继续提到。</p><p>五月上旬,收到了来自腾讯阅文hr的电话,去上海面试。</p><p>这里多说一点,当时hr电话里告诉我,当天会面完一、二技术面和hr面。可实际面试的时候,只面了技术面,hr面是需要等技术面结果才进行的。对这位hr告诉我错误的信息有些不满。</p><p><strong> 当然整个面试还是很愉快的。 </strong></p><hr><h3 id="面试简记"><a href="#面试简记" class="headerlink" title=" 面试简记 "></a><strong> 面试简记 </strong></h3><h4 id="百度三面"><a href="#百度三面" class="headerlink" title=" 百度三面 "></a><strong> 百度三面 </strong></h4><ul><li>设计一个日历组件</li><li>VUE</li><li>关于node的问题,涉及三个文件的操作(具体忘了)</li><li>平时开发如何调试</li><li>有什么想问的问题</li></ul><p>百度三面时间比较久远了,且没有记录,大概只能想起这几个。</p><p>面试我的是一个小姐姐,面试持续了接近一个小时。问了不少问题,不过较之前两面来说,问题不算多。</p><p><strong> 三面很灵活,结合实际项目开发聊得比较多。问题问得很深入,往往一个问题,会不断深入提问,一般连续提问两三个就很有难度了。</strong>有关node的问题问得不少,不过我这方面比较薄弱。虽然面试中有表示node方面不太熟悉,但是还是问了不少这方面的问题。组件的设计回答得很糟糕。</p><p>三面最终虽然挂掉了,但也收到了面试官的电话通知。</p><p>百度的三场面试都是电话面试,每场时长均在40分钟+。都是呆在工作室面试的。</p><p>不得不说,我所遇到的百度的三位面试官都很nice。</p><hr><h4 id="腾讯一面"><a href="#腾讯一面" class="headerlink" title=" 腾讯一面 "></a><strong> 腾讯一面 </strong></h4><ul><li>CSS动画</li><li>304请求，具体讲解，很深入</li><li>布局，QQ邮箱，不用calc如何实现</li><li>兴趣爱好</li><li>自我介绍</li><li>repaint,reflow</li><li>如果朋友在北京，打开页面很慢，如何优化</li><li>如何定位怎么优化</li><li>看了我的博客，知乎</li><li>性能优化</li><li>未来的学习/规划</li><li>HTTP状态码</li><li>git</li><li>知道张鑫旭吗</li><li>有什么想问的</li></ul><h4 id="腾讯二面"><a href="#腾讯二面" class="headerlink" title=" 腾讯二面 "></a><strong> 腾讯二面 </strong></h4><ul><li>自我介绍</li><li>arguments转数组，不用ES6,如何高效实现</li><li>ES6</li><li>模块化编程，AMD,CMD</li><li>组件</li><li>闭包</li><li>node</li><li>this</li><li>原型链</li><li>VUE，数据绑定的源码实现</li><li>性能优化</li><li>CSS预处理器</li><li>position，结合了宽度百分比考察</li><li>语义化</li><li>jQuery如何显示所有子节点</li><li>数组去重</li><li>未来的规划/学习</li><li>有什么想问的</li></ul><hr><p>腾讯面试完的那天晚上有在酒店用手机记录面试内容,以上腾讯相关的面试问题,都是从我手机备忘录里复制的。</p><p>腾讯是现场面试的,面试的环境很好。</p><p><img src="/img/codelife/fe-yuewen/yuewen0.jpg" alt="yuewen0.jpg"><br><img src="/img/codelife/fe-yuewen/yuewen1.jpg" alt="yuewen1.jpg"></p><p>一面和二面大概相隔了半个小时。</p><p>两场技术面试,面试官都是拿着电脑和我聊的,中途有共同看着电脑进行面试。</p><p>因为是现场面试,一面的时候有手写代码。</p><p>腾讯的面试,自我感觉还不错。不过二面面试官说,他们更想培养大三,大四的实习生,可以今后留下来工作的那种。</p><p>最后被pass了,没有收到hr电话。</p><p>自身实力还有待加强。</p><p><strong> 两场面试都十分愉快 </strong></p><hr><h3 id="游玩"><a href="#游玩" class="headerlink" title=" 游玩 "></a><strong> 游玩 </strong></h3><p>腾讯的面试地点在上海。</p><p>然然和尹力两天热情招待,逛了逛复旦,浦东新区,外滩,七龙珠展。</p><p><img src="/img/codelife/fe-yuewen/longzhu0.jpg" alt="longzhu0.jpg"><br><img src="/img/codelife/fe-yuewen/longzhu1.jpg" alt="longzhu1.jpg"></p><hr><h3 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><strong> 总结 </strong></h3><p>本学期过得十分匆忙,却感觉长进不大。</p><p>二月下旬开学,三月百度面试,持续了很多天。四月弄coalball项目,准备考试。五月腾讯面试。六月已经期末了。</p><p>不过面试的经历还是很不错,也暴露了自己的不足。</p><p>即将大三了,希望明年春招秋招多收割几个offer。</p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vue-router实现选项卡</title>
      <link href="/2017/07/10/Tab-Control-with-Vue-Router/"/>
      <url>/2017/07/10/Tab-Control-with-Vue-Router/</url>
      
        <content type="html"><![CDATA[<p>本文是对通过 <code>Vue+vue-router</code> 实现的选项卡记录</p><p>该demo使用的是单文件组件实现。demo去掉了多余的部分,使代码尽可能简单。</p><hr><h3 id="项目结构"><a href="#项目结构" class="headerlink" title=" 项目结构 "></a><strong> 项目结构 </strong></h3><p><img src="/img/Vue/Tab-Control-with-Vue-Route.png" alt="Tab-Control-with-Vue-Route"></p><hr><h3 id="源代码"><a href="#源代码" class="headerlink" title=" 源代码 "></a><strong> 源代码 </strong></h3><p><span class="under0">main.js</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> App <span class="keyword">from</span> <span class="string">'./App.vue'</span></span><br><span class="line"><span class="keyword">import</span> router <span class="keyword">from</span> <span class="string">'./router'</span></span><br><span class="line"></span><br><span class="line">Vue.config.productionTip = <span class="literal">false</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span>,</span><br><span class="line">  components: &#123; App &#125;</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><span class="under0">./router/index.js</span></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> Vue <span class="keyword">from</span> <span class="string">'vue'</span></span><br><span class="line"><span class="keyword">import</span> Router <span class="keyword">from</span> <span class="string">'vue-router'</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> header <span class="keyword">from</span> <span class="string">'@/components/header'</span></span><br><span class="line"><span class="keyword">import</span> footer <span class="keyword">from</span> <span class="string">'@/components/footer'</span></span><br><span class="line"></span><br><span class="line">Vue.use(Router)</span><br><span class="line"></span><br><span class="line"><span class="keyword">export</span> <span class="keyword">default</span> <span class="keyword">new</span> Router(&#123;</span><br><span class="line">  routes: [</span><br><span class="line">    &#123;</span><br><span class="line">      path: <span class="string">'/header'</span>,</span><br><span class="line">      name: <span class="string">'header'</span>,</span><br><span class="line">      component: header</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        path: <span class="string">'/footer'</span>,</span><br><span class="line">        name: <span class="string">'footer'</span>,</span><br><span class="line">        component: footer</span><br><span class="line">    &#125;</span><br><span class="line">  ]</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><span class="under0">App.vue</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">div</span> <span class="attr">id</span>=<span class="string">"app"</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">h1</span>&gt;</span>&#123;&#123;msg&#125;&#125;<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/header"</span>&gt;</span>/header<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-link</span> <span class="attr">to</span>=<span class="string">"/footer"</span>&gt;</span>/footer<span class="tag">&lt;/<span class="name">router-link</span>&gt;</span></span><br><span class="line">      <span class="tag">&lt;<span class="name">router-view</span>&gt;</span><span class="tag">&lt;/<span class="name">router-view</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        name: app,</span><br><span class="line">        data () &#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                msg: <span class="string">"hello world"</span></span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><p><span class="under0">./components/header.vue</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"header"</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[0]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[1]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[2]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[3]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">  <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">  <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">    data()&#123;</span><br><span class="line">      <span class="keyword">return</span>&#123;</span><br><span class="line">        msg:[<span class="string">"HTML"</span>,<span class="string">"CSS"</span>,<span class="string">"JS"</span>,<span class="string">"VUE"</span>]</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">  &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style lang=<span class="string">"stylus"</span> scoped&gt;</span><br><span class="line">  li</span><br><span class="line">    <span class="attribute">float</span>  left</span><br><span class="line">    <span class="attribute">list-style</span> none</span><br><span class="line">    <span class="attribute">font-size</span> <span class="number">18px</span></span><br><span class="line">    <span class="attribute">margin-left</span>  <span class="number">8px</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><span class="under0">./components/footer.vue</span></p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">template</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">ul</span> <span class="attr">id</span>=<span class="string">"footer"</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[0]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[1]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[2]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">        <span class="tag">&lt;<span class="name">li</span>&gt;</span>&#123;&#123;msg[3]&#125;&#125;<span class="tag">&lt;/<span class="name">li</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;/<span class="name">ul</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">template</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;</span><br><span class="line">    <span class="keyword">export</span> <span class="keyword">default</span>&#123;</span><br><span class="line">        data()&#123;</span><br><span class="line">            <span class="keyword">return</span>&#123;</span><br><span class="line">                msg:[<span class="string">"1"</span>,<span class="string">"2"</span>,<span class="string">"3"</span>,<span class="string">"4"</span>]</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;,</span><br><span class="line">    &#125;</span><br><span class="line">&lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight stylus"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">&lt;!-- Add <span class="string">"scoped"</span> attribute to limit CSS to this component only --&gt;</span><br><span class="line">&lt;style lang=<span class="string">"stylus"</span> scoped&gt;</span><br><span class="line">    li</span><br><span class="line">        <span class="attribute">float</span>  left</span><br><span class="line">        <span class="attribute">list-style</span> none</span><br><span class="line">        <span class="attribute">font-size</span> <span class="number">18px</span></span><br><span class="line">        <span class="attribute">margin-left</span>  <span class="number">8px</span></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="演示"><a href="#演示" class="headerlink" title=" 演示 "></a><strong> 演示 </strong></h3><p><img src="/img/Vue/Tab-Control-with-Vue-Route.gif" alt="Tab-Control-with-Vue-Route"></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>stylus在phpstorm中不能自动补全</title>
      <link href="/2017/07/09/stylus-cannot-auto-complete-in-phpstorm/"/>
      <url>/2017/07/09/stylus-cannot-auto-complete-in-phpstorm/</url>
      
        <content type="html"><![CDATA[<h3 id="问题"><a href="#问题" class="headerlink" title=" 问题 "></a><strong> 问题 </strong></h3><p>今天在phpstorm中开发VUE应用,发现一个问题</p><p>在开发单页面组件时,style部分</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style  scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>写原生的CSS会有代码提示和自动补全</p><p>可如果使用预处理器stylus</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p>不会有代码提示和自动补全</p><p>至于less和sass我是没有测试的</p><hr><h3 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h3><p><strong> 原来是phpstorm没有升级到最新(目前最新是2017.1),在最新版中已经修复了这个bug </strong></p><p>当然前提是要装上VUE和stylus插件,否则哪怕是最新版也无能为力</p><hr><h3 id="福利"><a href="#福利" class="headerlink" title=" 福利 "></a><strong> 福利 </strong></h3><p><strong> jetbrains旗下的产品学生是可以免费使用的 </strong></p><p>这里我给出参考链接</p><p><span class="under0"><a href="https://sales.jetbrains.com/hc/zh-cn/articles/207154369-%E5%AD%A6%E7%94%9F%E6%8E%88%E6%9D%83%E7%94%B3%E8%AF%B7%E6%96%B9%E5%BC%8F" target="_blank" rel="noopener">学生授权申请方式 </a></span></p>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CSS预处理器 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Flex基础</title>
      <link href="/2017/07/09/the-base-of-flex/"/>
      <url>/2017/07/09/the-base-of-flex/</url>
      
        <content type="html"><![CDATA[<p>本文是对flex基础知识的一些记录,参考的是阮一峰<a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></p><p>除了传统的 <code>display  + position + float</code>,flex现在也更多被大家用在项目中</p><p>先看一下兼容性</p><p><img src="/img/htmlcss/the-base-of-flex-0.png" alt="the-base-of-flex-0"></p><p>算是挺不错了的,如果受众群体都是学生的话,可以大胆使用了</p><hr><p>任何一个容器都可以指定为<code>Flex</code>布局,行内元素也可以使用<code>Flex</code>布局。设为<code>Flex</code>布局以后，子元素的<code>float、clear</code>和<code>vertical-align</code>属性将失效。</p><p><strong> 设置Flex的元素,是Flex容器,子元素称为Flex项目 </strong></p><p><span class="under0">容器默认存在两根轴：水平的主轴（main axis）和垂直的交叉轴（cross axis）。</span></p><p>主轴的开始位置（与边框的交叉点）叫做main start，结束位置叫做main end；<br>交叉轴的开始位置叫做cross start，结束位置叫做cross end。<br><img src="/img/htmlcss/the-base-of-flex-1.png" alt="the-base-of-flex-1"></p><p>项目默认沿主轴排列。单个项目占据的主轴空间叫做main size，占据的交叉轴空间叫做cross size。</p><hr><h3 id="容器属性"><a href="#容器属性" class="headerlink" title=" 容器属性 "></a><strong> 容器属性 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">flex-direction</span><br><span class="line">flex-wrap</span><br><span class="line">flex-flow</span><br><span class="line">justify-content</span><br><span class="line">align-items</span><br><span class="line">align-content</span><br></pre></td></tr></table></figure><hr><h4 id="flex-direction"><a href="#flex-direction" class="headerlink" title=" flex-direction "></a><strong> flex-direction </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">row | row-reverse | column | column-reverse</span><br><span class="line"></span><br><span class="line">row</span><br><span class="line">flex容器的主轴被定义为与文本方向相同。 主轴起点和主轴终点与内容方向相同。</span><br><span class="line"></span><br><span class="line">row-reverse</span><br><span class="line">表现和row相同，但是置换了主轴起点和主轴终点</span><br><span class="line"></span><br><span class="line">column</span><br><span class="line">flex容器的主轴和块轴相同。主轴起点与主轴终点和书写模式的前后点相同</span><br><span class="line"></span><br><span class="line">column-reverse</span><br><span class="line">表现和column相同，但是置换了主轴起点和主轴终点</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_flex_direction.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/flex/demo_flex_direction.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="flex-wrap"><a href="#flex-wrap" class="headerlink" title=" flex-wrap "></a><strong> flex-wrap </strong></h4><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">nowrap | wrap | wrap-reverse</span><br><span class="line"></span><br><span class="line">nowrap</span><br><span class="line">flex 的元素被摆放到到一行，这可能导致溢出 flex 容器。</span><br><span class="line">cross-start  会根据 flex-direction 的值 相当于 start 或 before。</span><br><span class="line"></span><br><span class="line">wrap</span><br><span class="line">flex 元素 被打断到多个行中。</span><br><span class="line">cross-start 会根据 flex-direction 的值选择等于start 或before。</span><br><span class="line">cross-end 为确定的 cross-start 的另一端。</span><br><span class="line"></span><br><span class="line">wrap-reverse</span><br><span class="line">和 wrap 的行为一样，但是 cross-start 和 cross-end 互换。</span><br></pre></td></tr></table></figure><p><a href="http://www.sail.name/CSS_Demo/flex/demo_flex_wrap.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/flex/demo_flex_wrap.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="flex-flow"><a href="#flex-flow" class="headerlink" title=" flex-flow "></a><strong> flex-flow </strong></h4><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">## CSS flex-flow 属性是 flex-direction 和 flex-wrap 的简写。</span><br><span class="line"></span><br><span class="line">Formal syntax: &lt;&apos;flex-direction&apos;&gt; || &lt;&apos;flex-wrap&apos;&gt;</span><br></pre></td></tr></table></figure><p><a href="http://www.sail.name/CSS_Demo/flex/demo_flex_flow.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/flex/demo_flex_flow.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="justify-content"><a href="#justify-content" class="headerlink" title=" justify-content "></a><strong> justify-content </strong></h4><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line">flex-start | flex-end | center | space-between | space-around</span><br><span class="line"></span><br><span class="line">flex-start</span><br><span class="line">从行首开始排列。每行第一个弹性元素与行首对齐，同时所有后续的弹性元素与前一个对齐。</span><br><span class="line"></span><br><span class="line">flex-end</span><br><span class="line">从行尾开始排列。每行最后一个弹性元素与行尾对齐，其他元素将与后一个对齐。</span><br><span class="line"></span><br><span class="line">center</span><br><span class="line">伸缩元素向每行中点排列。每行第一个元素到行首的距离将与每行最后一个元素到行尾的距离相同。</span><br><span class="line"></span><br><span class="line">space-between</span><br><span class="line">在每行上均匀分配弹性元素。相邻元素间距离相同。每行第一个元素与行首对齐，每行最后一个元素与行尾对齐。</span><br><span class="line"></span><br><span class="line">space-around</span><br><span class="line">在每行上均匀分配弹性元素。相邻元素间距离相同。</span><br><span class="line">每行第一个元素到行首的距离和每行最后一个元素到行尾的距离将会是相邻元素之间距离的一半。</span><br></pre></td></tr></table></figure><p><a href="http://www.sail.name/CSS_Demo/flex/demo_justify_content.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/flex/demo_justify_content.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="align-items"><a href="#align-items" class="headerlink" title=" align-items "></a><strong> align-items </strong></h4><p>取值</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">flex-start | flex-end | center | baseline | stretch</span><br><span class="line"></span><br><span class="line">flex-start</span><br><span class="line">元素向侧轴起点对齐。</span><br><span class="line"></span><br><span class="line">flex-end</span><br><span class="line">元素向侧轴终点对齐。</span><br><span class="line"></span><br><span class="line">center</span><br><span class="line">元素在侧轴居中。如果元素在侧轴上的高度高于其容器，那么在两个方向上溢出距离相同。</span><br><span class="line"></span><br><span class="line">baseline</span><br><span class="line">项目的第一行文字的基线对齐。</span><br><span class="line"></span><br><span class="line">stretch</span><br><span class="line">弹性元素被在侧轴方向被拉伸到与容器相同的高度或宽度。</span><br></pre></td></tr></table></figure><p><a href="http://www.sail.name/CSS_Demo/flex/demo_align_items.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/flex/demo_align_items.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="align-content"><a href="#align-content" class="headerlink" title=" align-content "></a><strong> align-content </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">flex-start | flex-end | center | space-between | space-around | stretch</span><br><span class="line"></span><br><span class="line">flex-start</span><br><span class="line">所有行从垂直轴起点开始填充。第一行的垂直轴起点边和容器的垂直轴起点边对齐。接下来的每一行紧跟前一行。</span><br><span class="line"></span><br><span class="line">flex-end</span><br><span class="line">所有弹性元素从垂直轴末尾开始填充。最后一个弹性元素的垂直轴终点和容器的垂直轴终点对齐。</span><br><span class="line">同时所有后续元素与前一个对齐。</span><br><span class="line"></span><br><span class="line">center</span><br><span class="line">所有行朝向容器的中心填充。每行互相紧挨，相对于容器居中对齐。</span><br><span class="line">容器的垂直轴起点边和第一行的距离相等于容器的垂直轴终点边和最后一行的距离。</span><br><span class="line"></span><br><span class="line">space-between</span><br><span class="line">所有行在容器中平均分布。相邻两行间距相等。</span><br><span class="line">容器的垂直轴起点边和终点边分别与第一行和最后一行的边对齐。</span><br><span class="line"></span><br><span class="line">space-around</span><br><span class="line">所有行在容器中平均分布，相邻两行间距相等。</span><br><span class="line">容器的垂直轴起点边和终点边分别与第一行和最后一行的距离是相邻两行间距的一半。</span><br><span class="line"></span><br><span class="line">stretch</span><br><span class="line">拉伸所有行来填满剩余空间。剩余空间平均的分配给每一行</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_align_content.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/flex/demo_align_content.html" target="_blank" rel="noopener">demo源码</a></p><hr><h3 id="项目属性"><a href="#项目属性" class="headerlink" title=" 项目属性 "></a><strong> 项目属性 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">order</span><br><span class="line">flex-grow</span><br><span class="line">flex-shrink</span><br><span class="line">flex-basis</span><br><span class="line">flex</span><br><span class="line">align-self</span><br></pre></td></tr></table></figure><hr><h4 id="order"><a href="#order" class="headerlink" title=" order "></a><strong> order </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;integer&gt;</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_item_property_order.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/flex/demo_item_property_order.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="flex-grow"><a href="#flex-grow" class="headerlink" title=" flex-grow "></a><strong> flex-grow </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;integer&gt;,负值无效</span><br><span class="line"></span><br><span class="line">默认为0，即如果存在剩余空间，也不放大。</span><br><span class="line">如果所有项目的flex-grow属性都为1，则它们将等分剩余空间（如果有的话）。</span><br><span class="line">如果一个项目的flex-grow属性为2，其他项目都为1，则前者占据的剩余空间将比其他项多一倍。</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_item_property_flex_grow.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/flex/demo_item_property_flex_grow.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="flex-shrink"><a href="#flex-shrink" class="headerlink" title=" flex-shrink "></a><strong> flex-shrink </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;integer&gt;,负值无效</span><br><span class="line"></span><br><span class="line">定义了项目的缩小比例，默认为1，即如果空间不足，该项目将缩小。</span><br><span class="line">如果所有项目的flex-shrink属性都为1，当空间不足时，都将等比例缩小。</span><br><span class="line">如果一个项目的flex-shrink属性为0，其他项目都为1，则空间不足时，前者不缩小。</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_item_property_flex_shrink.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/flex/demo_item_property_flex_shrink.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="flex-basis"><a href="#flex-basis" class="headerlink" title=" flex-basis "></a><strong> flex-basis </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;length&gt; | auto; /* default auto */</span><br><span class="line"></span><br><span class="line">定义了在分配多余空间之前，项目占据的主轴空间（main size）。</span><br><span class="line">浏览器根据这个属性，计算主轴是否有多余空间。它的默认值为auto，即项目的本来大小。</span><br><span class="line"></span><br><span class="line">它可以设为跟width或height属性一样的值（比如350px），则项目将占据固定空间。</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_item_property_flex_basis.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/flex/demo_item_property_flex_basis.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="flex"><a href="#flex" class="headerlink" title=" flex "></a><strong> flex </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">none | [ &lt;&apos;flex-grow&apos;&gt; &lt;&apos;flex-shrink&apos;&gt;? || &lt;&apos;flex-basis&apos;&gt; ]</span><br><span class="line"></span><br><span class="line">flex属性是flex-grow, flex-shrink 和 flex-basis的简写，默认值为0 1 auto。后两个属性可选。</span><br><span class="line"></span><br><span class="line">该属性有两个快捷值：auto (1 1 auto) 和 none (0 0 auto)。</span><br><span class="line">建议优先使用这个属性，而不是单独写三个分离的属性，因为浏览器会推算相关值。</span><br></pre></td></tr></table></figure></p><p><a href="http://www.sail.name/CSS_Demo/flex/demo_item_property_flex.html">demo</a><br><a href="https://github.com/iamsail/CSS_Demo/blob/master/flex/demo_item_property_flex.html" target="_blank" rel="noopener">demo源码</a></p><hr><h4 id="align-self"><a href="#align-self" class="headerlink" title=" align-self "></a><strong> align-self </strong></h4><p>取值<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">auto | flex-start | flex-end | center | baseline | stretch</span><br><span class="line"></span><br><span class="line">auto</span><br><span class="line">设置为父元素的 align-items 值，如果该元素没有父元素的话，就设置为 stretch。</span><br><span class="line"></span><br><span class="line">flex-start</span><br><span class="line">flex 元素会对齐到 cross-axis 的首端。</span><br><span class="line"></span><br><span class="line">flex-end</span><br><span class="line">flex 元素会对齐到 cross-axis 的尾端。</span><br><span class="line"></span><br><span class="line">center</span><br><span class="line">flex 元素会对齐到 cross-axis 的中间，</span><br><span class="line">如果该元素的 cross-size 的尺寸大于 flex 容器，将在两个方向均等溢出。</span><br><span class="line"></span><br><span class="line">baseline</span><br><span class="line">所有的 flex 元素会沿着基线对齐，</span><br><span class="line">The item with the largest distance between its cross-start margin edge and</span><br><span class="line">its baseline is flushed with the cross-start edge of the line。</span><br><span class="line"></span><br><span class="line">stretch</span><br><span class="line">flex 元素将会基于容器的宽和高，按照自身 margin box 的 cross-size 拉伸。</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="http://www.ruanyifeng.com/blog/2015/07/flex-grammar.html?utm_source=tuicool" target="_blank" rel="noopener">Flex 布局教程：语法篇</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>移动端真机调试</title>
      <link href="/2017/07/09/Mobile-debug/"/>
      <url>/2017/07/09/Mobile-debug/</url>
      
        <content type="html"><![CDATA[<p>移动应用开发初期可以使用chrome模拟器进行调试,<span class="under0"> <strong> 但模拟器毕竟是模拟器,与真机依旧有较大差距 </strong> </span></p><hr><h3 id="运行环境"><a href="#运行环境" class="headerlink" title=" 运行环境 "></a><strong> 运行环境 </strong></h3><p>Chrome 手机版<br>Chrome PC版<br>Android 版本&gt;4.0</p><hr><h3 id="调试"><a href="#调试" class="headerlink" title=" 调试 "></a><strong> 调试 </strong></h3><p>1.手机通过USB数据线与电脑相连<br>2.进入开发者模式,开发者选项中勾选USB调试</p><p>这里以我使用的OPPO R7 Plus讲解(其它手机应该大致相同)</p><p>初次: 设置 -&gt; 关于手机 -&gt; 多次点击开发者模式 -&gt; 返回上一级 -&gt; 更多 -&gt;开发者选项 -&gt; USB调试<br>非初次: 设置 -&gt; 关于手机 -&gt; 更多 -&gt;开发者选项 -&gt; USB调试</p><p>3.电脑在chrome浏览器地址栏输入 <code>chrome://inspect/#devices</code> 并勾选 <code>Discover USB devices</code> 选项</p><p><img src="/img/Developer-Tools/Mobile-debug-0.png" alt="Mobile-debug-0"></p><p>4.点击需要调试页面的 <code>inspect</code> 按钮即可进行调试</p><p>PS:使用 Chrome Inspect 查看页面时，Chrome 需要从 <a href="https://chrome-devtools-frontend.appspot.com" target="_blank" rel="noopener">https://chrome-devtools-frontend.appspot.com</a> 加载资源，<strong> 如果你得到的调试界面是一片空白，那你可能需要科学上网。 </strong></p><p><img src="/img/Developer-Tools/Mobile-debug-1.png" alt="Mobile-debug-1"></p><p><img src="/img/Developer-Tools/Mobile-debug-2.png" alt="Mobile-debug-2"></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://aotu.io/notes/2017/02/24/Mobile-debug/" target="_blank" rel="noopener">移动端真机调试指南</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>deviceorientation</title>
      <link href="/2017/07/08/deviceorientation/"/>
      <url>/2017/07/08/deviceorientation/</url>
      
        <content type="html"><![CDATA[<p>Web中有两个关于设备检测的API,一个是<code>DeviceMotionEvent</code>,它在加速度发生改变时触发;另一个是<code>DeviceOrientationEvent</code>,它在加速度传感器检测到设备在方向上变化时触发。</p><p>具体讲解之前,先要了解坐标系</p><h3 id="坐标系"><a href="#坐标系" class="headerlink" title=" 坐标系 "></a><strong> 坐标系 </strong></h3><p>坐标系是一种描述物体位置的系统，它包含三个轴(X,Y,Z)，三个轴共同描述了物体相对于参照物的位置信息。当我们使用<code>orientation</code>和<code>motion</code>事件时会接触到两种坐标系统。</p><h4 id="地球坐标系"><a href="#地球坐标系" class="headerlink" title=" 地球坐标系 "></a><strong> 地球坐标系 </strong></h4><p>地球坐标系是相对于地心的，也就是说，它的轴是基于重力方向和磁场北方向。我们使用大写的X,Y,Z来描述地球坐标系的轴。</p><p>X轴沿着地平面，垂直于Y轴，向东为正，向西为负。<br>Y轴沿着地平面，向北(北极，不是磁场北)为正，向南为负。<br>Z轴垂直于地平面，想象成一条线连接着设备跟地心。背对地心的方向为正，指向地心的方向为负。</p><h4 id="设备坐标系"><a href="#设备坐标系" class="headerlink" title=" 设备坐标系 "></a><strong> 设备坐标系 </strong></h4><p>设备坐标系是相对于设备中心的。我们使用小写的x,y,z来描述它的轴。</p><p><img src="/img/htmlcss/deviceorientation-0.png" alt="deviceorientation-0.png"></p><p>x轴沿着屏幕表面，向右为正，向左为负。<br>y轴沿着屏幕表面，向上为正，向下为负。<br>z轴垂直屏幕表面或键盘，远离屏幕的方向为正</p><hr><h3 id="API"><a href="#API" class="headerlink" title=" API "></a><strong> API </strong></h3><p><code>DeviceOrientationEvent</code>有以下五个属性</p><p><code>alpha</code> 围绕z轴旋转时(左右旋转),y轴的度数差;是一个介于0到360之间的浮点数</p><p><code>beta</code>  围绕x轴旋转时(前后旋转),z轴的度数差;是一个介于-180到180之间的浮点数</p><p><code>gamma</code> 围绕y轴旋转时(扭转设备),x轴的度数差;是一个介于-90到90之间的浮点数</p><p><code>absolute</code> 布尔值,表示设备是否返回一个绝对值</p><p><code>compassCalibrated</code> 布尔值,表示设备的指南针是否校准过</p><hr><h3 id="demo"><a href="#demo" class="headerlink" title=" demo "></a><strong> demo </strong></h3><h4 id="demo-1"><a href="#demo-1" class="headerlink" title=" demo-1 "></a><strong> <span class="under0">demo-1</span> </strong></h4><iframe src="http://www.sail.name/CSS_Demo/HtmlApiPractice/deviceorientation-one.html" style="width:260px;height:140px;"><br></iframe><h4 id="demo-2"><a href="#demo-2" class="headerlink" title=" demo-2 "></a><strong> <span class="under0">demo-2</span> </strong></h4><iframe src="http://www.sail.name/CSS_Demo/HtmlApiPractice/deviceorientation-tow.html" style="width:260px;height:280px;"><br></iframe><hr><h3 id="源码"><a href="#源码" class="headerlink" title=" 源码 "></a><strong> 源码 </strong></h3><ul><li><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/HtmlApiPractice/deviceorientation-one.html" target="_blank" rel="noopener">demo-1</a></li><li><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/HtmlApiPractice/deviceorientation-tow.html" target="_blank" rel="noopener">demo-2</a></li></ul><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/Events/Orientation_and_motion_data_explained" target="_blank" rel="noopener">Orientation 和 motion 数据解释</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>链接样式</title>
      <link href="/2017/07/08/link-talk/"/>
      <url>/2017/07/08/link-talk/</url>
      
        <content type="html"><![CDATA[<p>链接是万维网的基础,使得网页可以互相连接。</p><p>HTML中使用<code>&lt;a&gt;</code>标签定义超链接</p><p>本文谈谈<code>&lt;a&gt;</code>标签的样式</p><hr><p>在《精通CSS高级Web标准解决方案》一书中,是这样总结的</p><p>使用以下次序应用链接样式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">a:link a:visited a:hover a:focus a:active</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">:link伪类选择器是作用于没有访问过的链接</span><br><span class="line"></span><br><span class="line">:visited伪类选择器是作用于已访问的链接</span><br><span class="line"></span><br><span class="line">:hover伪类选择器是作用于鼠标悬浮状态</span><br><span class="line"></span><br><span class="line">:focus伪类选择器是作用于获得焦点时(比如通过键盘移动到该链接时)</span><br><span class="line"></span><br><span class="line">:active伪类选择器是作用于被激活的元素</span><br></pre></td></tr></table></figure><p><span class="under0">也就是LVHFA</span></p><hr><p>或许是因为Web在不断变化,我实践的时候有一些发现,做点记录</p><h3 id="demo-1"><a href="#demo-1" class="headerlink" title=" demo-1 "></a><strong> demo-1 </strong></h3><p><span class="under0"><strong> 代码如下: </strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">## style</span><br><span class="line"></span><br><span class="line">a&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:link&#123;</span><br><span class="line">    color: red;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:visited&#123;</span><br><span class="line">    color: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:hover&#123;</span><br><span class="line">    color: #00bcd7;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:focus&#123;</span><br><span class="line">    color: seagreen;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:active&#123;</span><br><span class="line">    color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">## html</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;https://github.com/bayi27&quot;&gt;1111111&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;2222222&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;3333333&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;4444444&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.sail.name/&quot;&gt;5555555&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;http://www.sail.name/&quot;&gt;6666666&lt;/a&gt;</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> 渲染如下: </strong></span></p><p><img src="/img/htmlcss/link-talk-0.png" alt="link-talk-0.png"></p><p>可以看出</p><p>1、5、6指向外部的链接,<code>:link</code>伪类选择器的样式没有生效<br>2、3、4指向内部的链接,<code>:visited</code>伪类选择器的样式生效</p><p><strong> 虽然这些链接都没有访问过 </strong></p><hr><h3 id="demo-2"><a href="#demo-2" class="headerlink" title=" demo-2 "></a><strong> demo-2 </strong></h3><p><span class="under0"><strong> 代码如下: </strong></span><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">## style</span><br><span class="line"></span><br><span class="line">a&#123;</span><br><span class="line">    display: block;</span><br><span class="line">    margin-top: 12px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a&#123;</span><br><span class="line">    color: gold;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">a:link&#123;</span><br><span class="line">    color: black;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">#a:visited&#123;</span><br><span class="line">#    color: green;</span><br><span class="line">#&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">## html</span><br><span class="line"></span><br><span class="line">&lt;a href=&quot;http://www.sail.name/&quot;&gt;aaaaaa&lt;/a&gt;</span><br><span class="line">&lt;a href=&quot;#&quot;&gt;bbbbbb&lt;/a&gt;</span><br></pre></td></tr></table></figure></p><p><span class="under0"><strong> 渲染如下: </strong></span></p><p><img src="/img/htmlcss/link-talk-1.png" alt="link-talk-1.png"></p><p>指向外部的链接,生效的样式是<code>&lt;a&gt;</code>标签的样式<br>指向内部的链接,生效的样式是<code>:link</code>伪类选择器的样式</p><p><strong> 同样这些链接也没有访问过 </strong></p><p>若取消注释,渲染如下</p><p><img src="/img/htmlcss/link-talk-2.png" alt="link-talk-2.png"></p><p>这是因为当两个规则具有相同的特殊性时,后定义的规则优先</p><hr><h3 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><strong> 总结 </strong></h3><p><strong> 指向内部的链接,<code>:link</code>选择器生效;指向外部的链接,<code>:link</code>选择器没有起作用 </strong></p><p>PS:这个指向外部的链接,域名必须是已经解析的,否则与指向内部的链接是同等的效果。读者可以自行尝试验证。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>HTTP 测验</title>
      <link href="/2017/06/24/HTTP-test-of-BE-Group/"/>
      <url>/2017/06/24/HTTP-test-of-BE-Group/</url>
      
        <content type="html"><![CDATA[<p>今天是本学期后端组的最后一次值班,<a href="http://blog.leanote.com/mclee" target="_blank" rel="noopener">明灿</a>进行了HTTP 测验,<span class="under0">测试的参考是《图解HTTP》</span></p><p>本文对部分测试内容做些记录</p><hr><h3 id="使用代理服务器的理由"><a href="#使用代理服务器的理由" class="headerlink" title=" 使用代理服务器的理由 "></a><strong> 使用代理服务器的理由 </strong></h3><ul><li>利用缓存技术减少网络带宽的流量</li><li>组织内部针对特定网站的访问控制</li><li>以获取访问日志为主要目的</li></ul><h3 id="代理的两种基准分类"><a href="#代理的两种基准分类" class="headerlink" title=" 代理的两种基准分类 "></a><strong> 代理的两种基准分类 </strong></h3><ul><li>是否使用缓存</li><li>是否会修改报文</li></ul><h4 id="缓存代理"><a href="#缓存代理" class="headerlink" title=" 缓存代理 "></a><strong> <span class="under0">缓存代理</span> </strong></h4><p>代理转发响应时,缓存代理(Caching Proxy)会预先将资源的副本(缓存)保存在代理服务器上</p><p>当代理再次接收到对相同资源的请求时,就可以不从源服务器那里获取资源,而是将之前缓存的资源作为响应返回</p><h4 id="透明代理"><a href="#透明代理" class="headerlink" title=" 透明代理 "></a><strong> <span class="under2">透明代理</span> </strong></h4><p>转发请求或响应时,不对报文做任何加工的代理类型被称为透明代理(Transparent Proxy)。反之,对报文内容进行加工的代理被称为非透明代理</p><h3 id="虚拟主机用来解决什么问题？怎么解决的？"><a href="#虚拟主机用来解决什么问题？怎么解决的？" class="headerlink" title=" 虚拟主机用来解决什么问题？怎么解决的？ "></a><strong> 虚拟主机用来解决什么问题？怎么解决的？ </strong></h3><ul><li><p>使用一台HTTP服务器搭建多个站点（比如为每位客户持有的域名运行各自不同的网站）</p></li><li><p>在相同的IP地址下,由于虚拟主机可以寄存多个不同主机名和域名的网站,因此在发送HTTP请求时,必须在Host首部内完整执行主机名或域名的URI</p></li></ul><h3 id="写出以下四行HTTP首部字段的分类标准-并说明各字段的作用"><a href="#写出以下四行HTTP首部字段的分类标准-并说明各字段的作用" class="headerlink" title=" 写出以下四行HTTP首部字段的分类标准,并说明各字段的作用 "></a><strong> 写出以下四行HTTP首部字段的分类标准,并说明各字段的作用 </strong></h3><ul><li>Cache-control Connection Data Via</li><li>Accept Host if-Modified-Since User-Agent</li><li>Age Location Server</li><li>Content-type Allow Last-Modified Expires</li></ul><p>这个问题过段时间会给出答案</p><h3 id="HTTP协议有哪些不足"><a href="#HTTP协议有哪些不足" class="headerlink" title=" HTTP协议有哪些不足 "></a><strong> HTTP协议有哪些不足 </strong></h3><ul><li>通信使用明文(不加密),内容可能会被窃听</li><li>不验证通信方的身份,因此有可能遭遇伪装</li><li>无法证明报文的完整性,所以有可能已遭篡改</li></ul><h3 id="Cookie的作用及其工作原理"><a href="#Cookie的作用及其工作原理" class="headerlink" title=" Cookie的作用及其工作原理 "></a><strong> Cookie的作用及其工作原理 </strong></h3><ul><li>保留HTTP协议无状态这个特征的同时,解决无状态协议的痛点(管理、控制客户端状态)</li><li>Cookie会根据从服务端发送的响应报文的一个叫做Set-Cookie的首部字段信息,通知客户端保存Cookie。当下次客户端再往该服务器发送请求时,客户端会自动在请求报文中加入Cookie值后发送出去</li></ul><h3 id="Cookie共享"><a href="#Cookie共享" class="headerlink" title=" Cookie共享 "></a><strong> Cookie共享 </strong></h3><ul><li><a href="http://www.cnblogs.com/mxmbk/articles/5671233.html" target="_blank" rel="noopener">占坑</a></li></ul><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><ul><li>《图解HTTP》是我很久以前看的,当时限于自身水平以及应用开发经验有限,理解十分粗浅</li><li>近期准备重看</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络(协议) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> HTTP(S) </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用drawImage不显示图片</title>
      <link href="/2017/06/22/don-not-show-image-when-use-drawImage/"/>
      <url>/2017/06/22/don-not-show-image-when-use-drawImage/</url>
      
        <content type="html"><![CDATA[<p><code>CanvasRenderingContext2D.drawImage()</code>方法可以在Canvas上绘制图像。</p><h3 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">void ctx.drawImage(image, dx, dy);</span><br><span class="line">void ctx.drawImage(image, dx, dy, dWidth, dHeight);</span><br><span class="line">void ctx.drawImage(image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);</span><br></pre></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title=" 参数 "></a><strong> 参数 </strong></h3><p><code>image</code></p><p><strong> 绘制到上下文的元素。允许任何的 canvas 图像源(CanvasImageSource)，例如：HTMLImageElement，HTMLVideoElement，或者 HTMLCanvasElement。</strong></p><p><code>dx</code></p><p><strong> 目标画布的左上角在目标canvas上 X 轴的位置。</strong><br><code>dy</code></p><p><strong> 目标画布的左上角在目标canvas上 Y 轴的位置。</strong></p><p><code>dWidth</code></p><p><strong> 在目标画布上绘制图像的宽度。 允许对绘制的图像进行缩放。 如果不说明， 在绘制时图片宽度不会缩放。</strong></p><p><code>dHeight</code></p><p><strong> 在目标画布上绘制图像的高度。 允许对绘制的图像进行缩放。 如果不说明， 在绘制时图片高度不会缩放。</strong><br><code>sx</code></p><p><strong> 需要绘制到目标上下文中的，源图像的矩形选择框的左上角 X 坐标。</strong></p><p><code>sy</code></p><p><strong> 需要绘制到目标上下文中的，源图像的矩形选择框的左上角 Y 坐标。</strong></p><p><code>sWidth</code></p><p><strong> 需要绘制到目标上下文中的，源图像的矩形选择框的宽度。如果不说明，整个矩形从坐标的sx和sy开始，到图像的右下角结束。</strong></p><p><code>sHeight</code></p><p><strong> 需要绘制到目标上下文中的，源图像的矩形选择框的高度。</strong></p><hr><h3 id="易错点"><a href="#易错点" class="headerlink" title=" 易错点 "></a><strong> 易错点 </strong></h3><p>需要注意的是,调用drawImage时,若图片没有加载完,什么也不会发生。<br><span class="under0">因此你应该用load时间来保证不会在加载完毕之前使用这个图片</span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">var img = new Image();   // 创建img元素</span><br><span class="line">img.onload = function()&#123;</span><br><span class="line">  // 执行drawImage语句</span><br><span class="line">&#125;</span><br><span class="line">img.src = &apos;myImage.png&apos;; // 设置图片源地址</span><br></pre></td></tr></table></figure><hr><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">&lt;body onload=&quot;draw();&quot;&gt;</span><br><span class="line">&lt;canvas id=&quot;canvas&quot; width=&quot;1000&quot; height=&quot;1000&quot;&gt;&lt;/canvas&gt;</span><br><span class="line">&lt;script&gt;</span><br><span class="line">    function draw() &#123;</span><br><span class="line">        var ctx = document.getElementById(&apos;canvas&apos;).getContext(&apos;2d&apos;);</span><br><span class="line">        var img = new Image();</span><br><span class="line">        img.onload = function()&#123;</span><br><span class="line">            ctx.drawImage(img,0,0,500,500);</span><br><span class="line">            ctx.beginPath();</span><br><span class="line">            ctx.moveTo(30,96);</span><br><span class="line">            ctx.lineTo(70,66);</span><br><span class="line">            ctx.lineTo(103,76);</span><br><span class="line">            ctx.lineTo(170,15);</span><br><span class="line">            ctx.closePath();</span><br><span class="line">            ctx.stroke();</span><br><span class="line">        &#125;;</span><br><span class="line">        img.src = &apos;./images/1.png&apos;;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br></pre></td></tr></table></figure><p>以上这段代码我在执行的时候，却没有加载出图片。</p><p>后来我将图片压缩了下,就可以正常工作了。</p><p><img src="/img/canvas/drawImage-0.png" alt="drawImage-0.png"></p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Canvas </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Web sockets基础知识</title>
      <link href="/2017/06/19/the-basic-knowledge-of-Web-Sockets/"/>
      <url>/2017/06/19/the-basic-knowledge-of-Web-Sockets/</url>
      
        <content type="html"><![CDATA[<p><span class="under0">Web sockets的目标是在一个单独的持久连接上提供全双工、双向的通信(<strong> 通信的双方可以同时发送和接受消息 </strong>)</span></p><p>Web sockets使用了自定义的协议。未加密的协议是ws://,加密的协议是wss://。</p><p>使用自定义协议而非HTTP协议的好处是,<strong> 能够在客户端和服务器之间发送非常少量的数据,而不必担心HTTP那样字节级的开销 </strong>。因此Web sockets非常适合移动应用</p><hr><h3 id="Web-Sockets-API"><a href="#Web-Sockets-API" class="headerlink" title=" Web Sockets API "></a><strong> Web Sockets API </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">var socket = new WebSocket(&quot;ws//www.example.com/server.php);</span><br></pre></td></tr></table></figure><ul><li>必须给WebSocket构造函数传入绝对URL。</li><li>同源策略对Web Sockets不适用,因此可以通过它打开任何站点的连接</li></ul><p>实例了对象后,浏览器会尝试立马建立连接。有一个表示当前状态的readyState属性,该属性是只读的,属性值如下</p><table><thead><tr><th>CONNECTING</th><th>0</th><th>连接还没开启</th></tr></thead><tbody><tr><td>OPEN</td><td>1</td><td>连接已开启并准备好进行通信</td></tr><tr><td>CLOSING</td><td>2</td><td>连接正在关闭的过程中</td></tr><tr><td>CLOSED</td><td>3</td><td>连接已经关闭，或者连接无法建立</td></tr></tbody></table><p>要关闭Web Sockets连接，可以在任何时候调用close()方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.close();</span><br></pre></td></tr></table></figure></p><hr><h3 id="发送和接收数据"><a href="#发送和接收数据" class="headerlink" title=" 发送和接收数据 "></a><strong> 发送和接收数据 </strong></h3><p>建立连接后,调用send()方法,可以向服务器发送数据<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">socket.send(&quot;xxxxxxxxxx&quot;);</span><br></pre></td></tr></table></figure></p><p>Web Sockets只能通过连接发送纯文本数据,所以对于复杂的数据结构,需要先将数据序列化为JSON字符串。</p><p>当服务器向客户端发送数据,WebSocket对象会触发message事件。返回的数据保存在event.data属性中。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.onmessage = function(event)&#123;</span><br><span class="line">   var data = event.data;</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><hr><h3 id="其他事件"><a href="#其他事件" class="headerlink" title=" 其他事件 "></a><strong> 其他事件 </strong></h3><p>WebSockets还有三个其它事件,在连接生命周期的不同阶段触发</p><ul><li>open:在连接成功时建立</li><li>error:在发生错误时触发,连接不能持续</li><li>close:在连接关闭时触发</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">socket.onopen/onerror/onclose()&#123;</span><br><span class="line">    alert(&quot;xxxxxx&quot;);</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li>JavaScript高级程序设计</li><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/API/WebSocket" target="_blank" rel="noopener">WebSocket</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机网络(协议) </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Websockets </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue中平级组件通信</title>
      <link href="/2017/06/17/Non-Parent-Child-Communication-in-vue/"/>
      <url>/2017/06/17/Non-Parent-Child-Communication-in-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="总述"><a href="#总述" class="headerlink" title=" 总述 "></a><strong> 总述 </strong></h3><p>Vue中如何实现非父子关系的两个组件进行通信,在不太复杂的场景下,可以通过<strong> 使用一个空的Vue实例作为中央事件总线 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">var bus = new Vue()</span><br><span class="line"></span><br><span class="line">// 触发组件 A 中的事件</span><br><span class="line">bus.$emit(&apos;id-selected&apos;, 1)</span><br><span class="line"></span><br><span class="line">// 在组件 B 创建的钩子中监听事件</span><br><span class="line">bus.$on(&apos;id-selected&apos;, function (id) &#123;</span><br><span class="line">  // ...</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><hr><h3 id="组件、总线代码"><a href="#组件、总线代码" class="headerlink" title=" 组件、总线代码 "></a><strong> 组件、总线代码 </strong></h3><p><span class="under0"> <strong> ./src/App.vue </strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;firstChild&gt;&lt;/firstChild&gt;</span><br><span class="line">    &lt;secondChild&gt;&lt;/secondChild&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import firstChild from &apos;./components/firstChild&apos;;</span><br><span class="line">  import secondChild from &apos;./components/secondChild&apos;;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;app&apos;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      firstChild,</span><br><span class="line">      secondChild</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> ./src/assets/eventBus.js </strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">import Vue from &apos;Vue&apos;</span><br><span class="line"></span><br><span class="line">export default new Vue;</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> ./src/components/firstChild.vue </strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;firstChild&quot;&gt;</span><br><span class="line">        &lt;h2&gt;firstChild组件&lt;/h2&gt;</span><br><span class="line">        &lt;button @click=&quot;sendMsg&quot;&gt;</span><br><span class="line">            向组件传值</span><br><span class="line">        &lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import bus from &apos;../assets/eventBus&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sendMsg:function()&#123;</span><br><span class="line">                bus.$emit(&quot;userDefinedEvent&quot;,&quot;this message is from firstChild&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> ./src/components/secondChild.vue </strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;secondChild&quot;&gt;</span><br><span class="line">        &lt;h2&gt;secondChild组件&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;从firstChild接收的字符串参数:&#123;&#123;msg&#125;&#125;&lt;/p&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    import bus from &apos;../assets/eventBus&apos;;</span><br><span class="line">    export default&#123;</span><br><span class="line">       data()&#123;</span><br><span class="line">           return &#123;</span><br><span class="line">               msg: &quot;默认值&quot;</span><br><span class="line">           &#125;</span><br><span class="line">       &#125;,</span><br><span class="line">        mounted()&#123;</span><br><span class="line">            var self = this;</span><br><span class="line">            bus.$on(&quot;userDefinedEvent&quot;,function(msg)&#123;</span><br><span class="line">                self.msg = msg;</span><br><span class="line">            &#125;);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="http://www.jianshu.com/p/d946bd7c26f4" target="_blank" rel="noopener">Vue2.0组件之间通信</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用live-server开发web应用</title>
      <link href="/2017/06/15/use-live-server-to-code/"/>
      <url>/2017/06/15/use-live-server-to-code/</url>
      
        <content type="html"><![CDATA[<p>在我的另一篇博文<a href="http://www.sail.name/2017/06/10/how-to-open-index-html-of-vue-over-file/">如何通过文件打开Vue中的index.html</a>提到了http-server</p><p>本文介绍的是<a href="https://github.com/tapio/live-server" target="_blank" rel="noopener">live-server</a>。</p><p><span class="under0">这是一个具有实时重新加载功能的小型开发服务器。是的,相比http-server来说,这个具备了实时刷新的功能。</span></p><p>当然使用http-server,我们也可以通过其它组件配合达到这个效果,比如supervisor。</p><hr><h3 id="live-server"><a href="#live-server" class="headerlink" title=" live-server "></a><strong> live-server </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"># 全局安装</span><br><span class="line">npm install -g live-server</span><br><span class="line"></span><br><span class="line"># 修改package.json中的script</span><br><span class="line">&quot;scripts&quot;: &#123;</span><br><span class="line">  &quot;server&quot;: &quot;live-server ./ --port=8080&quot;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"># 启动</span><br><span class="line"></span><br><span class="line">npm run server</span><br></pre></td></tr></table></figure><hr><h3 id="devserver"><a href="#devserver" class="headerlink" title=" devserver "></a><strong> devserver </strong></h3><p>当然devserver也可以构建本地服务器,且实时监听修改。</p><table><thead><tr><th>devserver配置选项</th><th>功能描述</th></tr></thead><tbody><tr><td>contentBase</td><td>默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</td></tr><tr><td>port</td><td>设置默认监听端口，如果省略，默认为”8080“</td></tr><tr><td>inline</td><td>设置为true，当源文件改变时会自动刷新页面</td></tr><tr><td>colors</td><td>设置为true，使终端输出的文件为彩色的</td></tr><tr><td>historyApiFallback</td><td>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</td></tr></tbody></table><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"># 修改webpack配置文件</span><br><span class="line">  devServer: &#123;</span><br><span class="line">    contentBase: &quot;./public&quot;,//本地服务器所加载的页面所在的目录</span><br><span class="line">    colors: true,//终端中输出结果为彩色</span><br><span class="line">    historyApiFallback: true,//不跳转</span><br><span class="line">    inline: true//实时刷新</span><br><span class="line">  &#125;</span><br></pre></td></tr></table></figure><p>更多可以参考我的另一篇博文<a href="http://www.sail.name/2017/05/17/can-not-load-css-in-webpack/">webpack加载不了样式</a></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="http://blog.csdn.net/witnessai1/article/details/52551362" target="_blank" rel="noopener">Markdown 语法手册 （完整整理版）</a></li><li><a href="https://juejin.im/post/5940dc1961ff4b006cb82c3d" target="_blank" rel="noopener">live-server 快速搭建服务</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Vue中父子组件通信</title>
      <link href="/2017/06/14/the-parent-child-communication-in-vue/"/>
      <url>/2017/06/14/the-parent-child-communication-in-vue/</url>
      
        <content type="html"><![CDATA[<h3 id="添加stylus-loader"><a href="#添加stylus-loader" class="headerlink" title=" 添加stylus-loader "></a><strong> 添加stylus-loader </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">npm install stylus-loader css-loader style-loader --save-dev</span><br></pre></td></tr></table></figure><hr><h3 id="父子组件代码"><a href="#父子组件代码" class="headerlink" title=" 父子组件代码 "></a><strong> 父子组件代码 </strong></h3><p><span class="under0"><strong> ./src/App.vue </strong><span></span></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">  &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">    &lt;child v-bind:message=&quot;parentMsg&quot; v-on:listenToChildEvent=&quot;showMsgFromChild&quot;&gt;&lt;/child&gt;</span><br><span class="line">  &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">  import child from &apos;./components/Child&apos;</span><br><span class="line">  export default &#123;</span><br><span class="line">    name: &apos;app&apos;,</span><br><span class="line">    data()&#123;</span><br><span class="line">      return&#123;</span><br><span class="line">        parentMsg:&quot;hello,child&quot;</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    methods:&#123;</span><br><span class="line">      showMsgFromChild:function(data)&#123;</span><br><span class="line">        console.log(data);</span><br><span class="line">      &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    components:&#123;</span><br><span class="line">      child</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style lang=&quot;stylus&quot; scoped&gt;</span><br><span class="line">div</span><br><span class="line">  font-size 500px</span><br><span class="line">  color green</span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><p><span class="under0"><strong> ./src/components/Child.vue </strong></span></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&lt;template&gt;</span><br><span class="line">    &lt;div id=&quot;app&quot;&gt;</span><br><span class="line">        &lt;h2&gt;child子组件部分&lt;/h2&gt;</span><br><span class="line">        &lt;p&gt;&#123;&#123;message&#125;&#125;&lt;/p&gt;</span><br><span class="line">        &lt;button v-on:click=&quot;sendMsgToParent&quot;&gt;向父组件传值&lt;/button&gt;</span><br><span class="line">    &lt;/div&gt;</span><br><span class="line">&lt;/template&gt;</span><br><span class="line"></span><br><span class="line">&lt;script&gt;</span><br><span class="line">    export default &#123;</span><br><span class="line">        props:[&quot;message&quot;],</span><br><span class="line">        methods:&#123;</span><br><span class="line">            sendMsgToParent: function () &#123;</span><br><span class="line">                this.$emit(&quot;listenToChildEvent&quot;,&quot;this message is from child&quot;);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&lt;/script&gt;</span><br><span class="line"></span><br><span class="line">&lt;style&gt;</span><br><span class="line"></span><br><span class="line">&lt;/style&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="http://www.jianshu.com/p/2670ca096cf8" target="_blank" rel="noopener">Vue2.0子父组件通信</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>二维数组中的查找</title>
      <link href="/2017/06/13/FindInPartiallySortedMatrix/"/>
      <url>/2017/06/13/FindInPartiallySortedMatrix/</url>
      
        <content type="html"><![CDATA[<h3 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h3><p><span class="under0">本文是对《剑指Offer》中的一道题的记录,仅作备忘。</span></p><hr><h3 id="题目"><a href="#题目" class="headerlink" title=" 题目 "></a><strong> 题目 </strong></h3><p><strong> 二维数组中的查找 </strong></p><p>在一个二维数组中,每一行都按照从左到右递增的顺序排序,每一列都按照从上到下递增的顺序排序。请完成一个函数,输入这样的一个二维数组和一个整数,判断数组中是否含有该整数。</p><hr><h3 id="思路"><a href="#思路" class="headerlink" title=" 思路 "></a><strong> 思路 </strong></h3><p><span class="under2">首先选取数组中右上角的数字。如果该数字大于要查找的数字,剔除这个数字所在的列;如果该数字小于要查找的数字,剔除这个数字所在的行。直到找到要查找的数字,或者查找的范围为空。</span></p><hr><h3 id="代码"><a href="#代码" class="headerlink" title=" 代码 "></a><strong> 代码 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br></pre></td><td class="code"><pre><span class="line">// FindInPartiallySortedMatrix.cpp : Defines the entry point for the console application.</span><br><span class="line">//</span><br><span class="line"></span><br><span class="line">// 《剑指Offer——名企面试官精讲典型编程题》代码</span><br><span class="line">// 著作权所有者：何海涛</span><br><span class="line"></span><br><span class="line">#include &quot;stdafx.h&quot;</span><br><span class="line"></span><br><span class="line">// 二维数组matrix中，每一行都从左到右递增排序，</span><br><span class="line">// 每一列都从上到下递增排序</span><br><span class="line">bool Find(int* matrix, int rows, int columns, int number)</span><br><span class="line">&#123;</span><br><span class="line">    bool found = false;</span><br><span class="line"></span><br><span class="line">    if(matrix != NULL &amp;&amp; rows &gt; 0 &amp;&amp; columns &gt; 0)</span><br><span class="line">    &#123;</span><br><span class="line">        int row = 0;</span><br><span class="line">        int column = columns - 1;</span><br><span class="line">        while(row &lt; rows &amp;&amp; column &gt;=0)</span><br><span class="line">        &#123;</span><br><span class="line">            if(matrix[row * columns + column] == number)</span><br><span class="line">            &#123;</span><br><span class="line">                found = true;</span><br><span class="line">                break;</span><br><span class="line">            &#125;</span><br><span class="line">            else if(matrix[row * columns + column] &gt; number)</span><br><span class="line">                -- column;</span><br><span class="line">            else</span><br><span class="line">                ++ row;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return found;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// ====================测试代码====================</span><br><span class="line">void Test(char* testName, int* matrix, int rows, int columns, int number, bool expected)</span><br><span class="line">&#123;</span><br><span class="line">    if(testName != NULL)</span><br><span class="line">        printf(&quot;%s begins: &quot;, testName);</span><br><span class="line"></span><br><span class="line">    bool result = Find(matrix, rows, columns, number);</span><br><span class="line">    if(result == expected)</span><br><span class="line">        printf(&quot;Passed.\n&quot;);</span><br><span class="line">    else</span><br><span class="line">        printf(&quot;Failed.\n&quot;);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  1   2   8   9</span><br><span class="line">//  2   4   9   12</span><br><span class="line">//  4   7   10  13</span><br><span class="line">//  6   8   11  15</span><br><span class="line">// 要查找的数在数组中</span><br><span class="line">void Test1()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[][4] = &#123;&#123;1, 2, 8, 9&#125;, &#123;2, 4, 9, 12&#125;, &#123;4, 7, 10, 13&#125;, &#123;6, 8, 11, 15&#125;&#125;;</span><br><span class="line">    Test(&quot;Test1&quot;, (int*)matrix, 4, 4, 7, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  1   2   8   9</span><br><span class="line">//  2   4   9   12</span><br><span class="line">//  4   7   10  13</span><br><span class="line">//  6   8   11  15</span><br><span class="line">// 要查找的数不在数组中</span><br><span class="line">void Test2()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[][4] = &#123;&#123;1, 2, 8, 9&#125;, &#123;2, 4, 9, 12&#125;, &#123;4, 7, 10, 13&#125;, &#123;6, 8, 11, 15&#125;&#125;;</span><br><span class="line">    Test(&quot;Test2&quot;, (int*)matrix, 4, 4, 5, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  1   2   8   9</span><br><span class="line">//  2   4   9   12</span><br><span class="line">//  4   7   10  13</span><br><span class="line">//  6   8   11  15</span><br><span class="line">// 要查找的数是数组中最小的数字</span><br><span class="line">void Test3()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[][4] = &#123;&#123;1, 2, 8, 9&#125;, &#123;2, 4, 9, 12&#125;, &#123;4, 7, 10, 13&#125;, &#123;6, 8, 11, 15&#125;&#125;;</span><br><span class="line">    Test(&quot;Test3&quot;, (int*)matrix, 4, 4, 1, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  1   2   8   9</span><br><span class="line">//  2   4   9   12</span><br><span class="line">//  4   7   10  13</span><br><span class="line">//  6   8   11  15</span><br><span class="line">// 要查找的数是数组中最大的数字</span><br><span class="line">void Test4()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[][4] = &#123;&#123;1, 2, 8, 9&#125;, &#123;2, 4, 9, 12&#125;, &#123;4, 7, 10, 13&#125;, &#123;6, 8, 11, 15&#125;&#125;;</span><br><span class="line">    Test(&quot;Test4&quot;, (int*)matrix, 4, 4, 15, true);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  1   2   8   9</span><br><span class="line">//  2   4   9   12</span><br><span class="line">//  4   7   10  13</span><br><span class="line">//  6   8   11  15</span><br><span class="line">// 要查找的数比数组中最小的数字还小</span><br><span class="line">void Test5()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[][4] = &#123;&#123;1, 2, 8, 9&#125;, &#123;2, 4, 9, 12&#125;, &#123;4, 7, 10, 13&#125;, &#123;6, 8, 11, 15&#125;&#125;;</span><br><span class="line">    Test(&quot;Test5&quot;, (int*)matrix, 4, 4, 0, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  1   2   8   9</span><br><span class="line">//  2   4   9   12</span><br><span class="line">//  4   7   10  13</span><br><span class="line">//  6   8   11  15</span><br><span class="line">// 要查找的数比数组中最大的数字还大</span><br><span class="line">void Test6()</span><br><span class="line">&#123;</span><br><span class="line">    int matrix[][4] = &#123;&#123;1, 2, 8, 9&#125;, &#123;2, 4, 9, 12&#125;, &#123;4, 7, 10, 13&#125;, &#123;6, 8, 11, 15&#125;&#125;;</span><br><span class="line">    Test(&quot;Test6&quot;, (int*)matrix, 4, 4, 16, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 鲁棒性测试，输入空指针</span><br><span class="line">void Test7()</span><br><span class="line">&#123;</span><br><span class="line">    Test(&quot;Test7&quot;, NULL, 0, 0, 16, false);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int _tmain(int argc, _TCHAR* argv[])</span><br><span class="line">&#123;</span><br><span class="line">    Test1();</span><br><span class="line">    Test2();</span><br><span class="line">    Test3();</span><br><span class="line">    Test4();</span><br><span class="line">    Test5();</span><br><span class="line">    Test6();</span><br><span class="line">    Test7();</span><br><span class="line"></span><br><span class="line">    return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li>《剑指Offer》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 剑指Offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Vue warn--Make sure to declare reactive data properties in the data option.</title>
      <link href="/2017/06/11/vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option/"/>
      <url>/2017/06/11/vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option/</url>
      
        <content type="html"><![CDATA[<h3 id="本文记录开发Vue应用时的一个BUG"><a href="#本文记录开发Vue应用时的一个BUG" class="headerlink" title=" 本文记录开发Vue应用时的一个BUG "></a><strong> 本文记录开发Vue应用时的一个BUG </strong></h3><p>错误大致如下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Property or method &quot;xxxxxxxxx&quot; is not defined on the instance but</span><br><span class="line">referenced during render.</span><br><span class="line">Make sure to declare reactive data properties in the data option.</span><br></pre></td></tr></table></figure></p><hr><h3 id="重现BUG"><a href="#重现BUG" class="headerlink" title=" 重现BUG "></a><strong> 重现BUG </strong></h3><ul><li><h4 id="以下是我重现问题的demo"><a href="#以下是我重现问题的demo" class="headerlink" title=" 以下是我重现问题的demo "></a><strong> 以下是我重现问题的demo </strong></h4></li></ul><p><img src="/img/Vue/vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option0.png" alt="vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option0.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;left&quot; &gt;</span><br><span class="line">    &lt;p id=&quot;text-left&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//    var leftImage = new Vue (&#123;</span><br><span class="line">//        el:&quot;#left&quot;</span><br><span class="line">//    &#125;);</span><br><span class="line"></span><br><span class="line">    var leftText = new Vue(&#123;</span><br><span class="line">        el:&quot;#text-left&quot;,</span><br><span class="line">        data:&#123;</span><br><span class="line">            message: &apos;前端&apos;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    &#125;);</span><br></pre></td></tr></table></figure><p>这种情况下页面是正常的,页面会显示前端两个字</p><hr><p>可如果我们取消掉注释,错误信息如下</p><p><img src="/img/Vue/vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option1.png" alt="vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option1.png"></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">[Vue warn]: Property or method &quot;message&quot; is not defined on the instance but</span><br><span class="line">referenced during render.</span><br><span class="line">Make sure to declare reactive data properties in the data option.</span><br></pre></td></tr></table></figure><p><img src="/img/Vue/vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option2.png" alt="vue-warn-make-sure-to-declare-reactive-data-properties-in-the-data-option2.png"></p><p><strong> 页面中没有了”前端”两字 </strong></p><hr><h3 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h3><p><span class="under0">这里我直接给出解释</span></p><p>去掉注释，有两个vue实例，p标签对应的实例是在div内部。这种情况message是挂载在p标签对应的实例的data属性里的。</p><p>根据报错信息的意思是，Property or method “message” is not defined on the instance but referenced during render。</p><p>message没有被定义，页面渲染的时候却存在。</p><p><span class="under2"> <strong> 文档里，data部分说，推荐在创建实例之前，就声明所有的根级响应式属性。</strong></span></p><p>所以data属性应该写在最外层的实例里面。如下</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">&lt;div id=&quot;left&quot; &gt;</span><br><span class="line">    &lt;p id=&quot;text-left&quot;&gt;&#123;&#123; message &#125;&#125;&lt;/p&gt;</span><br><span class="line">&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">var leftImage = new Vue (&#123;</span><br><span class="line">    el:&quot;#left&quot;,</span><br><span class="line">    data:&#123;</span><br><span class="line">        message: &apos;前端&apos;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">var leftText = new Vue(&#123;</span><br><span class="line">    el:&quot;#text-left&quot;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>通过文件网址使用vue-devtools</title>
      <link href="/2017/06/11/use-Vue-Devtools-over-file/"/>
      <url>/2017/06/11/use-Vue-Devtools-over-file/</url>
      
        <content type="html"><![CDATA[<h3 id="vue-devtools"><a href="#vue-devtools" class="headerlink" title=" vue-devtools "></a><strong> vue-devtools </strong></h3><p><a href="https://github.com/vuejs/vue-devtools" target="_blank" rel="noopener">vue-devtools</a>是chrome浏览器的一个扩展程序用于调试Vue.js应用程序</p><hr><p>vue-devtools默认是只有通过http/https打开文件才能检测,开发者工具才会出现VUE窗格<br><span class="under0"><strong> 如果要使通过file://协议打开的网页正常工作,需要在扩展程序中勾选允许访问文件网址才可以 </strong></span></p><hr><p>此外,如果页面使用Vue.js的生产/最小化构建，默认情况下将禁用devtools检查，因此Vue窗格将不会显示。</p><h4 id="如何在生产版本开启vue-devtools"><a href="#如何在生产版本开启vue-devtools" class="headerlink" title=" 如何在生产版本开启vue-devtools "></a><strong> 如何在生产版本开启vue-devtools </strong></h4><p>修改全局配置Vue.config,是一个对象，包含 Vue 的全局配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">#devtools</span><br><span class="line"></span><br><span class="line">#类型： boolean</span><br><span class="line">#默认值： true (生产版为 false)</span><br><span class="line"></span><br><span class="line">#用法：</span><br><span class="line">#务必在加载 Vue 之后，立即同步设置以下内容</span><br><span class="line">Vue.config.devtools = true</span><br><span class="line">#配置是否允许 vue-devtools 检查代码。开发版本默认为 true，生产版本默认为 false。</span><br><span class="line">#生产版本设为 true 可以启用检查。</span><br></pre></td></tr></table></figure><hr><h3 id="下载地址"><a href="#下载地址" class="headerlink" title=" 下载地址 "></a><strong> 下载地址 </strong></h3><p><a href="https://chrome.google.com/webstore/detail/vuejs-devtools/nhdogjmejiglipccpnnnanhbledajbpd?utm_source=chrome-app-launcher-info-dialog" target="_blank" rel="noopener">vue-devtools</a></p>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何通过文件打开Vue中的index.html</title>
      <link href="/2017/06/10/how-to-open-index-html-of-vue-over-file/"/>
      <url>/2017/06/10/how-to-open-index-html-of-vue-over-file/</url>
      
        <content type="html"><![CDATA[<h3 id="通过Vue构建项目有两种方式"><a href="#通过Vue构建项目有两种方式" class="headerlink" title=" 通过Vue构建项目有两种方式 "></a><strong> 通过Vue构建项目有两种方式 </strong></h3><p><strong> 一种是直接引入vue.js文件 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=&quot;https://unpkg.com/vue/dist/vue.js&quot;&gt;&lt;/script&gt;</span><br></pre></td></tr></table></figure><hr><p><strong> 一种是通过vue-cli </strong></p><p>Vue.js 提供一个官方命令行工具，可用于快速搭建大型单页应用。该工具提供开箱即用的构建工具配置，带来现代化的前端开发流程</p><p>CLI 工具假定用户对 Node.js 和相关构建工具有一定程度的了解</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$ npm install vue</span><br><span class="line"></span><br><span class="line"># 全局安装 vue-cli</span><br><span class="line">$ npm install --global vue-cli</span><br><span class="line"># 创建一个基于 webpack 模板的新项目</span><br><span class="line">$ vue init webpack my-project</span><br><span class="line"># 安装依赖，走你</span><br><span class="line">$ cd my-project</span><br><span class="line">$ npm install</span><br><span class="line">$ npm run dev</span><br></pre></td></tr></table></figure><p>执行</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ npm run build</span><br></pre></td></tr></table></figure><p>会对项目进行打包,并在根目录下生成一个dist文件</p><p>同时会给出提示</p><p>Tip: built files are meant to be served over an HTTP server.<br>Opening index.html over file:// won’t work.</p><p>它提示提示：建立文件是放在一个HTTP服务器。打开index.html文件：/ /不工作。当直接使用浏览器打开文件时，浏览器控制台会报错</p><p><strong> 因为vue-cli的默认配置中, publishPath是用绝对目录 </strong></p><hr><p>那如何执行在dist文件夹下执行打开index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">修改config\index.js中的build的对象</span><br><span class="line"></span><br><span class="line">assetsPublicPath: &apos;/&apos;,</span><br><span class="line"></span><br><span class="line">改为</span><br><span class="line"></span><br><span class="line">assetsPublicPath: &apos;./&apos;,</span><br><span class="line"></span><br><span class="line">即可</span><br></pre></td></tr></table></figure><p>这样dist目录就可以随意移动了</p><hr><p>当然也可以在</p><p>执行以下命令</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd dist</span><br><span class="line">npm install -g http-server</span><br><span class="line">hs</span><br></pre></td></tr></table></figure><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://segmentfault.com/q/1010000006868255" target="_blank" rel="noopener">关于 vue-cli 的疑惑</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Vue </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>coalball搬迁记录</title>
      <link href="/2017/06/05/the-record-of-coalball-move/"/>
      <url>/2017/06/05/the-record-of-coalball-move/</url>
      
        <content type="html"><![CDATA[<p>这两天开始部署coalball准备上线。</p><p>已经踩了不少坑,<strong> 当然现在也还有坑还没解决完。</strong></p><h3 id="先做些记录"><a href="#先做些记录" class="headerlink" title=" 先做些记录 "></a><strong> 先做些记录 </strong></h3><hr><ul><li><p>服务器重启后,因为某些服务还没设置成自动启动,所以还得手动开启。</p><p>nodebb项目重启,在目录下执行<code>./nodebb start</code></p></li><li><p>node项目之前肖高阳使用的是pm2,而我使用的是forever。需要学习下pm2</p></li></ul><hr><h3 id="搭PHP环境"><a href="#搭PHP环境" class="headerlink" title=" 搭PHP环境 "></a><strong> <a href="http://bbs.qcloud.com/thread-1316-1-1.html" target="_blank" rel="noopener">搭PHP环境</a> </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">安装搭建论坛必要的软件 apache  php  mysql</span><br><span class="line">yum install -y httpd php php-fpm mysql mysql-server php-mysql</span><br><span class="line"></span><br><span class="line">将相应服务启动</span><br><span class="line">service httpd start</span><br><span class="line">service mysqld start</span><br><span class="line">service php-fpm start</span><br><span class="line"></span><br><span class="line">检查服务的运行情况</span><br><span class="line">netstat -tunlp</span><br><span class="line"></span><br><span class="line">【可选？】给mysql设定一个初始的root密码，可以让root用户去访问数据库</span><br><span class="line">mysqladmin -u root password &quot;XXXXXXXX&quot;</span><br></pre></td></tr></table></figure><hr><h3 id="Mysql"><a href="#Mysql" class="headerlink" title=" Mysql "></a><strong> Mysql </strong></h3><p><strong> ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES) </strong></p><ul><li><p>背景:我自己的服务器是腾讯云centos7.x,所以数据库是mariadb,更多可以看我的博文<a href="http://www.sail.name/2017/04/15/a-removal/">一次搬迁</a>。而工作室的服务器是centos6.8,所以数据库是Mysql。</p></li><li><p>问题原因,<a href="http://www.cnblogs.com/kerrycode/p/4368312.html" target="_blank" rel="noopener">戳这儿</a></p></li><li><p><a href="https://stackoverflow.com/questions/21944936/error-1045-28000-access-denied-for-user-rootlocalhost-using-password-y" target="_blank" rel="noopener">解决方案</a></p></li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">#Stop MySQL</span><br><span class="line">$ service mysqld stop</span><br><span class="line"></span><br><span class="line">#Start it in safe mode:</span><br><span class="line">$ (sudo)mysqld_safe --skip-grant-tables</span><br><span class="line"></span><br><span class="line">#This will be an ongoing command until the process is finished so open another shell/terminal</span><br><span class="line">#window, log in without a password:</span><br><span class="line"></span><br><span class="line">$ mysql -u root</span><br><span class="line">mysql&gt; UPDATE mysql.user SET Password=PASSWORD(&apos;password&apos;) WHERE User=&apos;root&apos;;</span><br><span class="line"></span><br><span class="line">#Start MySQL</span><br><span class="line">$ service mysqld start</span><br><span class="line"></span><br><span class="line">#your new password is &apos;password&apos;.</span><br></pre></td></tr></table></figure><p>后来我在<a href="https://zhidao.baidu.com/question/1603863845338636507.html" target="_blank" rel="noopener">百度知道上看到一个回答</a>,也挺不错,可以参考着看</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">#1.停止mysql数据库</span><br><span class="line">/etc/init.d/mysqld stop</span><br><span class="line"> </span><br><span class="line">#2.执行如下命令</span><br><span class="line">mysqld_safe --user=mysql --skip-grant-tables --skip-networking &amp;</span><br><span class="line"> </span><br><span class="line">#3.使用root登录mysql数据库</span><br><span class="line">mysql -u root mysql</span><br><span class="line"> </span><br><span class="line">#4.更新root密码</span><br><span class="line">mysql&gt; UPDATE user SET Password=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos;;</span><br><span class="line">#最新版MySQL请采用如下SQL：</span><br><span class="line">mysql&gt; UPDATE user SET authentication_string=PASSWORD(&apos;newpassword&apos;) where USER=&apos;root&apos;;</span><br><span class="line"> </span><br><span class="line">#5.刷新权限 </span><br><span class="line">mysql&gt; FLUSH PRIVILEGES;</span><br><span class="line"> </span><br><span class="line">#6.退出mysql</span><br><span class="line">mysql&gt; quit</span><br><span class="line"> </span><br><span class="line">#7.重启mysql</span><br><span class="line">/etc/init.d/mysqld restart</span><br><span class="line"> </span><br><span class="line">#8.使用root用户重新登录mysql</span><br><span class="line">mysql -uroot -p </span><br><span class="line">Enter password: &lt;输入新设的密码newpassword&gt;</span><br></pre></td></tr></table></figure><h4 id="Can’t-connect-to-local-MySQL-server-through-socket"><a href="#Can’t-connect-to-local-MySQL-server-through-socket" class="headerlink" title=" Can’t connect to local MySQL server through socket "></a><strong> Can’t connect to local MySQL server through socket </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">yum install mysql-server</span><br><span class="line"></span><br><span class="line">更多[戳这儿](http://www.d5s.cn/archives/9)</span><br></pre></td></tr></table></figure><hr><h3 id="PHP"><a href="#PHP" class="headerlink" title=" PHP "></a><strong> PHP </strong></h3><ul><li><p>ThinkPHP上线记得删除掉<code>Runtime</code>目录</p></li><li><p>要注意权限问题,某些目录需要修改权限,<code>chomd -R</code>才是递归,否则没有递归效果</p></li><li><p>学会看日志,查找问题</p></li><li><p><span class="under0">修改服务器相关配置文件后,要重启服务器</span></p></li></ul><hr><h3 id="Nginx"><a href="#Nginx" class="headerlink" title="Nginx "></a><strong>Nginx </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">#nginx重启</span><br><span class="line">$ nginx -s  reload</span><br></pre></td></tr></table></figure><hr><h3 id="URL重写"><a href="#URL重写" class="headerlink" title=" URL重写 "></a><strong> URL重写 </strong></h3><p><span class="under0">现在是6月20号晚上,折腾了两周服务器(想哭),总算搞定</span></p><p>中途踩了很多坑,试了不少方法,做下记录</p><p><strong> 部署到工作室服务器(Linux和Win),均有一个test接口请求404,然而在自己的腾讯云服务器是正常的 </strong></p><p>解决办法</p><p>最后查看了<strong> ThinkPHP文档中的URL重写 </strong></p><p>可以通过URL重写隐藏应用的入口文件index.php,下面是相关服务器的配置参考：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">[ Apache ]</span><br><span class="line"></span><br><span class="line">    httpd.conf配置文件中加载了mod_rewrite.so模块</span><br><span class="line">    AllowOverride None 将None改为 All</span><br><span class="line">    把下面的内容保存为.htaccess文件放到应用入口文件的同级目录下</span><br><span class="line"></span><br><span class="line">&lt;IfModule mod_rewrite.c&gt;</span><br><span class="line"> RewriteEngine on</span><br><span class="line"> RewriteCond %&#123;REQUEST_FILENAME&#125; !-d</span><br><span class="line"> RewriteCond %&#123;REQUEST_FILENAME&#125; !-f</span><br><span class="line"> RewriteRule ^(.*)$ index.php/$1 [QSA,PT,L]</span><br><span class="line">&lt;/IfModule&gt;</span><br></pre></td></tr></table></figure><hr><h3 id="MySQL的乱码"><a href="#MySQL的乱码" class="headerlink" title=" MySQL的乱码 "></a><strong> MySQL的乱码 </strong></h3><p><strong> 默认都是latin编码,需要将各个项设置为utf8 </strong></p><p>网上有很多参考文章</p><hr><h3 id="升级PHP"><a href="#升级PHP" class="headerlink" title=" 升级PHP "></a><strong> 升级PHP </strong></h3><p>centos下升级php5.3到php5.6</p><p><a href="http://blog.csdn.net/na_beginning/article/details/53414122" target="_blank" rel="noopener">戳这儿</a><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yum install php56w-fpm</span><br></pre></td></tr></table></figure></p><hr><h3 id="vim-批量替换"><a href="#vim-批量替换" class="headerlink" title=" vim 批量替换 "></a><strong> vim 批量替换 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">#语法</span><br><span class="line">:[addr]s/源字符串/目的字符串/[option]</span><br><span class="line"></span><br><span class="line">#全局替换命令</span><br><span class="line">:%s/源字符串/目的字符串/g</span><br><span class="line"></span><br><span class="line">[addr] 表示检索范围，省略时表示当前行。</span><br><span class="line">“1,20” ：表示从第1行到20行；</span><br><span class="line">“%” ：表示整个文件，同“1,$”；</span><br><span class="line">“. ,$” ：从当前行到文件尾；</span><br><span class="line"></span><br><span class="line">s : 表示替换操作</span><br><span class="line"></span><br><span class="line">[option] : 表示操作类型</span><br><span class="line">g 表示全局替换;</span><br><span class="line">c 表示进行确认</span><br><span class="line">p 表示替代结果逐行显示（Ctrl + L恢复屏幕）;</span><br><span class="line">省略option时仅对每行第一个匹配串进行替换;</span><br><span class="line">如果在源字符串和目的字符串中出现特殊字符，需要用”\”转义 如 \t</span><br></pre></td></tr></table></figure><hr><h3 id="上传文件的服务器相关配置"><a href="#上传文件的服务器相关配置" class="headerlink" title=" 上传文件的服务器相关配置 "></a><strong> 上传文件的服务器相关配置 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">file_uploads </span><br><span class="line">## 设为On，允许通过HTTP上传文件 </span><br><span class="line"></span><br><span class="line">upload_tmp_dir </span><br><span class="line">## 文件上传至服务器时用于临时存储的目录，如果没指定，系统会使用默认的临时文件夹（我的机器是/tmp）。 </span><br><span class="line"></span><br><span class="line">upload_max_filesize </span><br><span class="line">## 允许上传文件大小的最大值，默认为2M。 </span><br><span class="line"></span><br><span class="line">post_max_size </span><br><span class="line">## Php可接收的post数据的最大值（包括表单里的所有值的总合），默认为8M。 </span><br><span class="line"></span><br><span class="line">memory_limit </span><br><span class="line">## 每个php所最占的最大内存数，这个值要大于允许上传的文件大小。 </span><br><span class="line"></span><br><span class="line">max_execution_time </span><br><span class="line">## 每个php运行的最长时间（秒），默认30秒。 </span><br><span class="line"></span><br><span class="line">## max_input_time </span><br><span class="line">Php解析POST/GET数据的最长时间（秒），默认60秒。This sets the maximum time in seconds a scripts </span><br><span class="line">is allowed to parse input data, like POST and GET.It is measured from the mement of receiving</span><br><span class="line"> all data on the server to the start of script execution.</span><br></pre></td></tr></table></figure><p>如果服务器上有装nginx,也需要对nginx进行配置</p><p>在<code>nginx.conf</code>文件的http模块中,增加<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">client_max_body_size xxm</span><br></pre></td></tr></table></figure></p><hr><h3 id="文件上传保存错误"><a href="#文件上传保存错误" class="headerlink" title=" 文件上传保存错误 "></a><strong> 文件上传保存错误 </strong></h3><p>如果在线上环境遇到这个问题,需要将文件的保存目录重新创建,创建之前记得保存文件。</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>这学期学习新技术,巩固基础的时间不是很多。这几天也折腾了四个服务器,仿佛变身运维工程师。</p><p><strong> 解决bug不要太急躁 </strong></p><p>希望在即将到来的暑假,不要颓废。</p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="http://www.jianshu.com/p/d2a640b8661c" target="_blank" rel="noopener">使用PM2来部署nodejs项目</a></li><li><a href="http://haoduoshipin.com/v/203.html" target="_blank" rel="noopener">使用 PM2 部署 Nodejs 项目</a></li><li><a href="https://stackoverflow.com/questions/21944936/error-1045-28000-access-denied-for-user-rootlocalhost-using-password-y" target="_blank" rel="noopener">ERROR 1045 (28000): Access denied for user ‘root‘@’localhost’ (using password: YES)</a></li><li><a href="http://www.cnblogs.com/beenoisy/p/4046074.html" target="_blank" rel="noopener">vim批量替换命令实践</a></li><li><a href="https://www.kancloud.cn/manual/thinkphp/1678" target="_blank" rel="noopener">ThinkPHP3.2.3完全开发</a></li><li><a href="http://www.cnblogs.com/52php/p/5665419.html" target="_blank" rel="noopener">配置php.ini实现PHP文件上传功能</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>添加到docker用户组</title>
      <link href="/2017/06/04/add-to-docker-user-group/"/>
      <url>/2017/06/04/add-to-docker-user-group/</url>
      
        <content type="html"><![CDATA[<h3 id="背景"><a href="#背景" class="headerlink" title=" 背景 "></a><strong> 背景 </strong></h3><p>如果没有将用户添加到docker用户组,需要每次切换到root权限（sudo su）。</p><p>这样很麻烦,可以将用户添加到docker用户组,来解决这个问题。</p><hr><h3 id="环境"><a href="#环境" class="headerlink" title=" 环境 "></a><strong> 环境 </strong></h3><ul><li><p>Ubuntu Trusty 14.04(TLS)</p></li><li><p>更多可以看我的博文<a href="http://www.sail.name/2017/03/05/how-to-install-docker/">如何安装/更新/卸载Docker</a></p></li></ul><hr><p><strong> 添加docker group(已经有了可以跳过) </strong></p><p><code>sudo groupadd docker</code></p><p><strong> 将用户加入该 group 内。然后退出并重新登录即生效。</strong></p><p><code>sudo <a href="http://man.linuxde.net/gpasswd" target="_blank" rel="noopener">gpasswd</a> -a ${USER} docker</code></p><p><strong> 重启 docker 服务 </strong></p><p><code>sudo service docker restart</code></p><p><strong> 切换当前会话到新 group 或者重启 X 会话 </strong><br><code>newgrp - docker</code><br>OR<br><code><a href="http://man.linuxde.net/pkill" target="_blank" rel="noopener">pkill</a> X</code></p><p>注意，最后一步是必须的，否则因为 groups 命令获取到的是缓存的组信息，刚添加的组信息未能生效，所以 docker images 执行时同样有错。</p><hr><h3 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h3><p>添加几个小tips,仅作备忘</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">虚拟机全屏: Ctrl+Alt+Enter</span><br><span class="line">打开终端:   Ctrl + Alt + T</span><br><span class="line">外部定位到虚拟机: Ctrl+ G</span><br><span class="line">虚拟机定位到外部: Ctrl + Alt</span><br></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li><a href="http://blog.csdn.net/qq_22841811/article/details/53447570" target="_blank" rel="noopener">Ubuntu16.04添加Docker用户组</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>cmder在WSL中方向键失灵</title>
      <link href="/2017/05/24/wsl-and-cmder/"/>
      <url>/2017/05/24/wsl-and-cmder/</url>
      
        <content type="html"><![CDATA[<h4 id="今天才知道WIN10已经内置了linux子系统-也就是WSL"><a href="#今天才知道WIN10已经内置了linux子系统-也就是WSL" class="headerlink" title=" 今天才知道WIN10已经内置了linux子系统,也就是WSL "></a><strong> 今天才知道WIN10已经内置了linux子系统,也就是<a href="https://msdn.microsoft.com/commandline/wsl/about" target="_blank" rel="noopener">WSL</a> </strong></h4><p>Bash on Windows provides developers with a familiar Bash shell and Linux environment in which you can run most Linux command-line tools, directly on Windows, UNMODIFIED, without needing an entire Linux virtual machine!</p><p>Bash/WSL allows you to:</p><p>Run common command-line utilities such as grep, sed, awk, etc.<br>Use the Linux-compatible filesystem &amp; hierarchy and access fixed Windows storage mounted under /mnt/…<br>Run Bash shell scripts and Linux command-line apps. including<br><strong> Tools: vim, emacs, tmux </strong><br><strong> Languages: Javascript/node.js, Ruby, Python, C/C++, C# &amp; F#, Rust, Go, etc. </strong><br><strong> Services: sshd, MySQL, Apache, lighttpd, </strong><br>Install additional Linux tools using apt<br>Invoke Windows applications from within Bash<br>Invoke Linux applications from within Windows!<br>Bash on Windows runs Ubuntu user-mode binaries provided by Canonical. This means the command-line utilities are the same as those that run within a native Ubuntu environment.</p><hr><p>作者向来是用cmder写命令的</p><p>中途遇到一个问题</p><h4 id="进入WSL后-上下键翻滚命令失效了"><a href="#进入WSL后-上下键翻滚命令失效了" class="headerlink" title=" 进入WSL后,上下键翻滚命令失效了 "></a><strong> 进入WSL后,上下键翻滚命令失效了 </strong></h4><p><strong> 由于cmder和bash.exe不兼容，如果你直接输入bash ~，那么进入子系统后将无法使用方向键和Home/PageUp/PageDown等键都无法使用 </strong></p><p>网上常见的配置</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%windir%\system32\bash.exe -cur_console:p1</span><br></pre></td></tr></table></figure><p>解决办法,进入setting-&gt;Startup-&gt;Command line,输入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">%windir%\system32\bash.exe ~ -cur_console:p:n</span><br></pre></td></tr></table></figure><p>cmder + WSL,对我来说很是完美,能满足大部分需求了</p><hr><h4 id="参考-资料"><a href="#参考-资料" class="headerlink" title=" 参考/资料 "></a><strong> 参考/资料 </strong></h4><ul><li><a href="https://msdn.microsoft.com/commandline/wsl/about" target="_blank" rel="noopener">WSL</a></li><li><a href="http://blog.csdn.net/qxoqx/article/details/54177891" target="_blank" rel="noopener">Linux Bash on Win10 (WSL)在cmder下使用vim时方向键失灵问题解决</a></li><li><a href="http://www.cnblogs.com/micro-chen/p/5437316.html" target="_blank" rel="noopener">深夜急报，Win10下的Linux子系统之Bash</a></li><li><a href="http://www.cnblogs.com/jadeboy/p/5132423.html" target="_blank" rel="noopener">Win下必备利器之Cmder</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一个div在页面下的布局</title>
      <link href="/2017/05/19/one-div-about-the-layout/"/>
      <url>/2017/05/19/one-div-about-the-layout/</url>
      
        <content type="html"><![CDATA[<h4 id="关于一个div在页面下的布局问题-已经困扰我很久很久了。"><a href="#关于一个div在页面下的布局问题-已经困扰我很久很久了。" class="headerlink" title=" 关于一个div在页面下的布局问题,已经困扰我很久很久了。"></a><strong> 关于一个div在页面下的布局问题,已经困扰我很久很久了。</strong></h4><p>当然此处换成span,section之类同样适用。</p><p>最近有了些新理解,在此做些记录。</p><hr><p><strong> 在开始阅读本文前,强烈建议读读garychang的<a href="http://garychang.cn/2016/08/16/widthheight/" target="_blank" rel="noopener">js获得浏览器宽高、屏幕宽高</a>。</strong></p><p>讲得十分清楚,以下做些摘录</p><h4 id="关于高度"><a href="#关于高度" class="headerlink" title=" 关于高度 "></a><strong> 关于高度 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">//浏览器窗口高度</span><br><span class="line">window.outerHeight</span><br><span class="line">//浏览器可视区域高（包括滚动条）</span><br><span class="line">window.innerHeight</span><br><span class="line">//ps：在部分版本QQ浏览器上innerHeight和outerHeight值相同</span><br><span class="line">//浏览器可视区域高（不包括滚动条）</span><br><span class="line">document.documentElement.clientHeight</span><br><span class="line">//网页总高度</span><br><span class="line">document.body.clientHeight</span><br><span class="line">//显示器可视高度</span><br><span class="line">window.screen.height</span><br><span class="line">//显示器可用高度（例如去除底部任务栏）</span><br><span class="line">window.screen.availHeight</span><br></pre></td></tr></table></figure><h4 id="关于宽度"><a href="#关于宽度" class="headerlink" title=" 关于宽度 "></a><strong> 关于宽度 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">//浏览器窗口宽度</span><br><span class="line">window.outerWidth</span><br><span class="line">//浏览器可视区域宽度（包括滚动条）</span><br><span class="line">window.innerWidth</span><br><span class="line">//浏览器可视区域宽度（不包括滚动条）</span><br><span class="line">document.documentElement.clientWidth</span><br><span class="line">//网页总宽度</span><br><span class="line">document.body.clientWidth</span><br><span class="line">//显示器可视宽度</span><br><span class="line">window.screen.width</span><br><span class="line">//显示器可用宽度（例如去除侧边任务栏）</span><br><span class="line">window.screen.availWidth</span><br></pre></td></tr></table></figure><hr><p>哪怕只有一个div,布局也是涉及很多知识。对CSS没有一定的研究是很难讲清楚的。</p><p>限于自身水平,从</p><ul><li>position值为relative(主要讲这个)</li><li>position值为absolute</li><li>页面有滚动条</li></ul><p>这三方面进行讲解</p><hr><h4 id="相关环境"><a href="#相关环境" class="headerlink" title=" 相关环境 "></a><strong> 相关环境 </strong></h4><ul><li>屏幕分辨率 1920 * 960</li><li>测试环境 chrome 浏览器</li><li>如果未特殊说明,浏览器是窗口最大化的</li></ul><hr><h4 id="position值为relative"><a href="#position值为relative" class="headerlink" title=" position值为relative "></a><strong> position值为relative </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">html</span><br><span class="line">&lt;div&gt;one&lt;/div&gt;</span><br><span class="line"></span><br><span class="line">css</span><br><span class="line"> div&#123;</span><br><span class="line">     position: relative;</span><br><span class="line">     width: 200px;</span><br><span class="line">     height: 200px;</span><br><span class="line">     top: 10%;</span><br><span class="line">     left: 10%;</span><br><span class="line">     /*top: 100px;*/</span><br><span class="line">     /*left: 100px;*/</span><br><span class="line">     text-align: center;</span><br><span class="line">     line-height:200px;</span><br><span class="line">     border: 2px solid salmon;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure><h5 id="当top-left的值为100px时-会相对正常的位置在水平和垂直方向移动100px。如下"><a href="#当top-left的值为100px时-会相对正常的位置在水平和垂直方向移动100px。如下" class="headerlink" title=" 当top,left的值为100px时 ,会相对正常的位置在水平和垂直方向移动100px。如下"></a><strong> 当top,left的值为100px时 </strong>,会相对正常的位置在水平和垂直方向移动100px。如下</h5><p><img src="/img/htmlcss/oneDivLayout-0.png" alt="oneDivLayout-0.png"><br><img src="/img/htmlcss/oneDivLayout-1.png" alt="oneDivLayout-1.png"></p><h5 id="当top-left的值为10-时"><a href="#当top-left的值为10-时" class="headerlink" title=" 当top,left的值为10%时 "></a><strong> 当top,left的值为10%时 </strong></h5><p><img src="/img/htmlcss/oneDivLayout-2.png" alt="oneDivLayout-2.png"><br><img src="/img/htmlcss/oneDivLayout-3.png" alt="oneDivLayout-3.png"></p><p>chrome浏览器下默认margin为8px等,这些细枝末节抛开不讲。</p><p>这里有一个有意思的问题</p><p><strong> 第二个盒子模型中,top方向的值为20.391px,可实际页面上盒子在top方面并没有移动(那一个小空白是body的margin值) </strong></p><p><strong> <code>left = (1920 - 8 * 2) x 0.1 ~ 190.391</code> </strong><br><strong> <code>top  = (200 + 2 * 2 ) x 0.1 ~ 20.391</code> </strong></p><p>用明白为什么20.391px的计算值为什么在页面没有效果,需要对CSS有一定了解。</p><p>就不慢慢科普了,直接上我的结论</p><p><strong> div的盒子在body盒子内部,此处的div的百分比依据body的值来计算的。</strong><br><strong> div的盒子在body盒子内部,此处的div的百分比依据body的值来计算的。</strong><br><strong> div的盒子在body盒子内部,此处的div的百分比依据body的值来计算的。</strong></p><p><strong>移动的参考点也是body形成的盒子的左上方第一个点来进行移动的 </strong></p><p><strong> body的样式这里使用的是user agent stylesheet(这里可以参考我的另一篇博文<a href="http://www.sail.name/2017/05/18/the-cascade-priority-in-style-sheet/">CSS中的层叠优先级</a>)。也就是display取值为block。 </strong></p><p><strong> 所以这里body形成的是block级别的盒子,宽度为document.body.clientWidth,而高度为div撑起来的高度也就是div盒子的高度 </strong></p><p><strong> 这儿就很明白了。</strong></p><p><strong>body本身是没有高度,有宽度的 </strong><br><strong>body本身是没有高度,有宽度的 </strong><br><strong>body本身是没有高度,有宽度的 </strong></p><p><strong> 0 x 0.1 = 0 </strong></p><p>如果想进一步体会,可以把div去掉或者top值改为px单位,仔细观察下。</p><hr><h4 id="position值为absolute"><a href="#position值为absolute" class="headerlink" title=" position值为absolute "></a><strong> position值为absolute </strong></h4><p>这种情况,盒子脱离文档流。</p><p>百分比情况下,是相对于html定位的。因为body是static。</p><p>html宽度值为document.documentElement.clientWidth</p><hr><h4 id="页面有滚动条"><a href="#页面有滚动条" class="headerlink" title=" 页面有滚动条 "></a><strong> 页面有滚动条 </strong></h4><p>这里又可以细分为水平方向,垂直方向的滚动条了</p><p>我粗暴的总结下</p><p><strong> 此时html的宽度就是document.documentElement.clientHeight。所有值的计算要先减去滚动条宽度再进行计算 </strong></p><hr><h4 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h4><p>一直困扰我的就是position值为relative的情况。</p><p>网上也没查到相关资料。</p><p>好在通过这段时间的学习,搞定了。</p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>CSS中的层叠优先级</title>
      <link href="/2017/05/18/the-cascade-priority-in-style-sheet/"/>
      <url>/2017/05/18/the-cascade-priority-in-style-sheet/</url>
      
        <content type="html"><![CDATA[<h4 id="以前我对CSS中的样式优先级别理解是这样的"><a href="#以前我对CSS中的样式优先级别理解是这样的" class="headerlink" title=" 以前我对CSS中的样式优先级别理解是这样的 "></a><strong> 以前我对CSS中的样式优先级别理解是这样的 </strong></h4><p><strong> 从高到低 </strong></p><ul><li>属性后跟!important的样式</li><li>作为style属性写在元素标签的内联样式</li><li>id选择器</li><li>类选择器</li><li>伪类选择器</li><li>属性选择器</li><li>标签选择器</li><li>通配符选择器</li><li>浏览器自定义</li></ul><hr><p>最近看绿皮书,书中这样写到</p><p><strong> 层叠采用以下重要次序 </strong></p><ul><li>标有!important的用户样式</li><li>标有!important的作者样式</li><li>作者样式</li><li>用户样式</li><li>浏览器/用户代理应用的样式</li></ul><hr><p>作者样式既是开发者编写的。</p><p>这个用户样式,就是用户自己写的样式文件,导入浏览器。在chrome中叫做<code>custom.css</code></p><p><strong> 不过自从33版本后,chrome便取消了对<code>custom.css</code>文件的支持 </strong></p><p>时代变迁呀,Web也在不断发展233333</p><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li><a href="http://blog.csdn.net/ruoyiqing/article/details/38959045" target="_blank" rel="noopener">CSS样式表来源以及“！important”规则</a></li><li><a href="http://www.cnblogs.com/xesam/archive/2011/12/08/2280707.html" target="_blank" rel="noopener">添加浏览器的用户样式表</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何克隆某个分支</title>
      <link href="/2017/05/17/how-to-clone-branch-in-git/"/>
      <url>/2017/05/17/how-to-clone-branch-in-git/</url>
      
        <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h4><p>今天网易云音乐推送了刘德华的<mark>《十七岁》</mark></p><p>第一次听这歌还是当年尹力在寝室放。那时还在念初中,二外,南山巅。</p><p>转眼尹力已经二十,我离二十岁也就半年罢了。</p><p>似水流年,太匆匆。</p><hr><h4 id="如何克隆仓库中的某一个分支"><a href="#如何克隆仓库中的某一个分支" class="headerlink" title=" 如何克隆仓库中的某一个分支 "></a><strong> 如何克隆仓库中的某一个分支 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git clone -b &lt;branch&gt; &lt;remote_repo&gt;</span><br></pre></td></tr></table></figure><p>例如： git clone -b 指定的分支名字 仓库地址</p><hr><h4 id="拉取远程分支到本地"><a href="#拉取远程分支到本地" class="headerlink" title=" 拉取远程分支到本地 "></a><strong> 拉取远程分支到本地 </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">git fetch origin 远程分支名x:本地分支名x</span><br></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li><a href="https://segmentfault.com/a/1190000006064850" target="_blank" rel="noopener">如何克隆git仓库中某一个分支？</a></li><li><a href="http://www.jianshu.com/p/bfeb43289ab3" target="_blank" rel="noopener">Git – 提交本地分支到远端分支/拉取远程分支</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>webpack加载不了样式</title>
      <link href="/2017/05/17/can-not-load-css-in-webpack/"/>
      <url>/2017/05/17/can-not-load-css-in-webpack/</url>
      
        <content type="html"><![CDATA[<p>今天碰到一个问题,花费了很久的时间,最后在<a href="https://blog.xgy666.cn/" target="_blank" rel="noopener">肖神</a>和<a href="http://garychang.cn/" target="_blank" rel="noopener">garychang</a>的帮助下解决了。</p><p><strong> 问题是打开localhost:8080没有加载出样式 </strong></p><hr><p>因为我的项目目录结构不对,也就是index.html放的位置不对。</p><p>当然这只是表象。</p><p>以下面这个目录结构为例子进行讲解</p><hr><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title=" 项目目录结构 "></a><strong> 项目目录结构 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">online-talk</span><br><span class="line">        app</span><br><span class="line">            config.json</span><br><span class="line">            main.css</span><br><span class="line">            main.js</span><br><span class="line">            Greeter.js</span><br><span class="line"></span><br><span class="line">        node_modules</span><br><span class="line">             略</span><br><span class="line"></span><br><span class="line">        public</span><br><span class="line">            bundle.js</span><br><span class="line">            index.html</span><br><span class="line"></span><br><span class="line">        package.json</span><br><span class="line"></span><br><span class="line">        postcss.config.js</span><br><span class="line"></span><br><span class="line">        webpack.config.js</span><br></pre></td></tr></table></figure><hr><p>可以看到public/index.html</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&lt;!doctype html&gt;</span><br><span class="line">           &lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">           &lt;head&gt;</span><br><span class="line">               &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">               &lt;title&gt;online-talk&lt;/title&gt;</span><br><span class="line">           &lt;/head&gt;</span><br><span class="line">           &lt;body&gt;</span><br><span class="line">           &lt;!--&lt;div id=&apos;root&apos;&gt;--&gt;</span><br><span class="line">           &lt;!--&lt;/div&gt;--&gt;</span><br><span class="line">           &lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">           &lt;/body&gt;</span><br><span class="line">           &lt;/html&gt;</span><br></pre></td></tr></table></figure><p>通过public/index.html来加载bundle.js</p><hr><p>其实默认情况下index.html是需要放在项目根目录下的,也就是<code>online-talk</code></p><p>那如何让index.html在public下呢</p><p><strong> 需要在devserver中设置<code>contentBase: “./public”</code> </strong></p><p>devserver作为webpack配置选项中的一项，具有以下配置选项</p><p><code>contentBase</code></p><p><strong> 默认webpack-dev-server会为根文件夹提供本地服务器，如果想为另外一个目录下的文件提供本地服务器，应该在这里设置其所在目录（本例设置到“public”目录）</strong></p><p><code>port</code></p><p>设置默认监听端口，如果省略，默认为”8080“</p><p><code>inline</code></p><p>设置为true，当源文件改变时会自动刷新页面</p><p><code>colors</code></p><p>设置为true，使终端输出的文件为彩色的</p><p><code>historyApiFallback</code></p><p>在开发单页应用时非常有用，它依赖于HTML5 history API，如果设置为true，所有的跳转将指向index.html</p><hr><p>然而仅仅是设置<strong> <code>contentBase: “./public”</code> </strong>,执行<code>npm start</code>,依然没有样式</p><p><strong> 因为启动脚本中也需要配置目录 </strong><br><strong> 因为启动脚本中也需要配置目录 </strong><br><strong> 因为启动脚本中也需要配置目录 </strong></p><pre><code>&quot;scripts&quot;: {    &quot;start&quot;: &quot;webpack-dev-server --inline --content-base public/ --history-api-fallback&quot;  },</code></pre><hr><p>最后附上配置文件,也算是备份</p><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title=" webpack.config.js "></a><strong> webpack.config.js </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var autoprefixer = require(&apos;autoprefixer&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    devtool: &apos;eval-source-map&apos;,//配置生成Source Maps,选择合适的选项</span><br><span class="line">    entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class="line">        filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;//在配置文件里添加JSON loader</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.json$/,</span><br><span class="line">                loader: &quot;json-loader&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: &quot;babel-loader&quot;,</span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [&apos;es2015&apos;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                loader: &apos;style-loader!css-loader!postcss-loader&apos;//添加对样式表的处理</span><br><span class="line">                //loader: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;postcss-loader&apos;]//添加对样式表的处理</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                postcss: function () &#123;</span><br><span class="line">                    return [precss, autoprefixer];</span><br><span class="line">                &#125;,</span><br><span class="line">                devServer: &#123;</span><br><span class="line">                    contentBase: &quot;./public&quot;, //本地服务器所加载的页面所在的目录</span><br><span class="line">                    port: &quot;8080&quot;,</span><br><span class="line">                    colors: true, //终端中输出结果为彩色</span><br><span class="line">                    historyApiFallback: true, //不跳转</span><br><span class="line">                    inline: true //实时刷新</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="package-json"><a href="#package-json" class="headerlink" title=" package.json "></a><strong> package.json </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;online-talk&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack-dev-server --inline --content-base public/ --history-api-fallback&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^7.1.0&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^0.28.1&quot;,</span><br><span class="line">    &quot;json-loader&quot;: &quot;^0.5.4&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^2.0.5&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^0.17.0&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^2.5.1&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^2.4.5&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;dependencies&quot;: &#123;</span><br><span class="line">    &quot;ws&quot;: &quot;^2.3.1&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li><a href="https://segmentfault.com/q/1010000004957130" target="_blank" rel="noopener">关于WEBPACK DEV SERVER</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些webpack相关配置文件</title>
      <link href="/2017/05/16/some-configs-in-webpack/"/>
      <url>/2017/05/16/some-configs-in-webpack/</url>
      
        <content type="html"><![CDATA[<p>本文仅为作者记录一些配置文件,不具有教程意义.</p><p><strong> 工具更新太快蛋疼 </strong></p><hr><h3 id="项目目录结构"><a href="#项目目录结构" class="headerlink" title=" 项目目录结构 "></a><strong> 项目目录结构 </strong></h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">online-talk</span><br><span class="line">    app</span><br><span class="line">        config.json</span><br><span class="line">        main.css</span><br><span class="line">        main.js</span><br><span class="line">        Greeter.js</span><br><span class="line"></span><br><span class="line">    node_modules</span><br><span class="line">         略</span><br><span class="line"></span><br><span class="line">    public</span><br><span class="line">        bundle.js</span><br><span class="line">        index.html</span><br><span class="line"></span><br><span class="line">    package.json</span><br><span class="line"></span><br><span class="line">    postcss.config.js</span><br><span class="line"></span><br><span class="line">    webpack.config.js</span><br></pre></td></tr></table></figure><hr><h3 id="文件内容"><a href="#文件内容" class="headerlink" title=" 文件内容 "></a><strong> 文件内容 </strong></h3><h4 id="postcss-config-js"><a href="#postcss-config-js" class="headerlink" title=" postcss.config.js "></a><strong> postcss.config.js </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">module.exports = &#123;&#125;;</span><br></pre></td></tr></table></figure><h4 id="webpack-config-js"><a href="#webpack-config-js" class="headerlink" title=" webpack.config.js "></a><strong> webpack.config.js </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></td><td class="code"><pre><span class="line">var path = require(&apos;path&apos;);</span><br><span class="line">var webpack = require(&apos;webpack&apos;);</span><br><span class="line">var autoprefixer = require(&apos;autoprefixer&apos;);</span><br><span class="line"></span><br><span class="line">module.exports = &#123;</span><br><span class="line">    devtool: &apos;eval-source-map&apos;,//配置生成Source Maps,选择合适的选项</span><br><span class="line">    entry:  __dirname + &quot;/app/main.js&quot;,//已多次提及的唯一入口文件</span><br><span class="line">    output: &#123;</span><br><span class="line">        path: __dirname + &quot;/public&quot;,//打包后的文件存放的地方</span><br><span class="line">        filename: &quot;bundle.js&quot;//打包后输出文件的文件名</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    module: &#123;//在配置文件里添加JSON loader</span><br><span class="line">        loaders: [</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.json$/,</span><br><span class="line">                loader: &quot;json-loader&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.js$/,</span><br><span class="line">                exclude: /node_modules/,</span><br><span class="line">                loader: &quot;babel-loader&quot;,</span><br><span class="line">                query: &#123;</span><br><span class="line">                    presets: [&apos;es2015&apos;]</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                test: /\.css$/,</span><br><span class="line">                //loader: &apos;style-loader!css-loader?modules!postcss-loader&apos;//添加对样式表的处理</span><br><span class="line">                loader: [&apos;style-loader&apos;,&apos;css-loader&apos;,&apos;postcss-loader&apos;]//添加对样式表的处理</span><br><span class="line">            &#125;,</span><br><span class="line">        ]</span><br><span class="line">    &#125;,</span><br><span class="line"></span><br><span class="line">    plugins: [</span><br><span class="line">        new webpack.LoaderOptionsPlugin(&#123;</span><br><span class="line">            options: &#123;</span><br><span class="line">                postcss: function () &#123;</span><br><span class="line">                    return [precss, autoprefixer];</span><br><span class="line">                &#125;,</span><br><span class="line">                devServer: &#123;</span><br><span class="line">                    contentBase: &quot;./public&quot;, //本地服务器所加载的页面所在的目录</span><br><span class="line">                    colors: true, //终端中输出结果为彩色</span><br><span class="line">                    historyApiFallback: true, //不跳转</span><br><span class="line">                    inline: true //实时刷新</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="public-index-html"><a href="#public-index-html" class="headerlink" title=" public/index.html "></a><strong> public/index.html </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">&lt;!doctype html&gt;</span><br><span class="line">&lt;html lang=&quot;en&quot;&gt;</span><br><span class="line">&lt;head&gt;</span><br><span class="line">    &lt;meta charset=&quot;UTF-8&quot;&gt;</span><br><span class="line">    &lt;title&gt;online-talk&lt;/title&gt;</span><br><span class="line">&lt;/head&gt;</span><br><span class="line">&lt;body&gt;</span><br><span class="line">&lt;!--&lt;div id=&apos;root&apos;&gt;--&gt;</span><br><span class="line">&lt;!--&lt;/div&gt;--&gt;</span><br><span class="line">&lt;script src=&quot;bundle.js&quot;&gt;&lt;/script&gt;</span><br><span class="line">&lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure><h4 id="package-json"><a href="#package-json" class="headerlink" title=" package.json "></a><strong> package.json </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;name&quot;: &quot;online-talk&quot;,</span><br><span class="line">  &quot;version&quot;: &quot;1.0.0&quot;,</span><br><span class="line">  &quot;description&quot;: &quot;&quot;,</span><br><span class="line">  &quot;main&quot;: &quot;index.js&quot;,</span><br><span class="line">  &quot;scripts&quot;: &#123;</span><br><span class="line">    &quot;start&quot;: &quot;webpack&quot;</span><br><span class="line">  &#125;,</span><br><span class="line">  &quot;author&quot;: &quot;&quot;,</span><br><span class="line">  &quot;license&quot;: &quot;ISC&quot;,</span><br><span class="line">  &quot;devDependencies&quot;: &#123;</span><br><span class="line">    &quot;autoprefixer&quot;: &quot;^7.1.0&quot;,</span><br><span class="line">    &quot;babel-core&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;babel-loader&quot;: &quot;^7.0.0&quot;,</span><br><span class="line">    &quot;babel-preset-es2015&quot;: &quot;^6.24.1&quot;,</span><br><span class="line">    &quot;css-loader&quot;: &quot;^0.28.1&quot;,</span><br><span class="line">    &quot;json-loader&quot;: &quot;^0.5.4&quot;,</span><br><span class="line">    &quot;postcss-loader&quot;: &quot;^2.0.5&quot;,</span><br><span class="line">    &quot;style-loader&quot;: &quot;^0.17.0&quot;,</span><br><span class="line">    &quot;webpack&quot;: &quot;^2.5.1&quot;,</span><br><span class="line">    &quot;webpack-dev-server&quot;: &quot;^2.4.5&quot;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="app-config-json"><a href="#app-config-json" class="headerlink" title=" app/config.json "></a><strong> app/config.json </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;greetText&quot;: &quot;Hello JSON&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="app-main-js"><a href="#app-main-js" class="headerlink" title=" app/main.js "></a><strong> app/main.js </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">require(&apos;./main.css&apos;);//使用require导入css文件</span><br><span class="line">document.write(12345);</span><br><span class="line">let config = require(&apos;./config.json&apos;);</span><br><span class="line">document.write(config.greetText);</span><br></pre></td></tr></table></figure><h4 id="app-main-css"><a href="#app-main-css" class="headerlink" title=" app/main.css "></a><strong> app/main.css </strong></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></td><td class="code"><pre><span class="line">html &#123;</span><br><span class="line">    box-sizing: border-box;</span><br><span class="line">    -ms-text-size-adjust: 100%;</span><br><span class="line">    -webkit-text-size-adjust: 100%;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">*, *:before, *:after &#123;</span><br><span class="line">    box-sizing: inherit;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">body &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    font-family: &apos;Helvetica Neue&apos;, Helvetica, Arial, sans-serif;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">h1, h2, h3, h4, h5, h6, p, ul &#123;</span><br><span class="line">    margin: 0;</span><br><span class="line">    padding: 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li><a href="http://www.css88.com/doc/webpack2/" target="_blank" rel="noopener">webpack2</a></li><li><a href="https://github.com/akveo/ng2-admin/issues/604" target="_blank" rel="noopener">No PostCSS Config found with build:prod #604</a></li><li><a href="https://segmentfault.com/q/1010000006987956/a-1020000006995647" target="_blank" rel="noopener">关于webpack 使用postcss的问题</a></li><li><a href="https://segmentfault.com/a/1190000006178770" target="_blank" rel="noopener">入门 Webpack，看这篇就够了</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> webpack </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS类数组转数组</title>
      <link href="/2017/05/15/Array-like-to-Array-in-JavaScript/"/>
      <url>/2017/05/15/Array-like-to-Array-in-JavaScript/</url>
      
        <content type="html"><![CDATA[<h4 id="JS类数组转数组"><a href="#JS类数组转数组" class="headerlink" title=" JS类数组转数组 "></a><strong> JS类数组转数组 </strong></h4><p>这个问题短短5天内,我已经遇见两次了。</p><p>第二次是,今天在一个交流群看见别人问。</p><p>第一次是,本月12号在上海面试阅文集团前端实习生。</p><p>二面面试官问<strong> 如何将arguments转为数组。</strong></p><p>我给了Array.from()方法</p><p>面试官说不用ES6呢</p><p>那就遍历,push进一个新数组。</p><p>这个效率有点低,有没有更高效的方法。</p><p>……</p><p>之所以还没写面试相关的博客,是因为在阅文只面试了一、二技术面。</p><p>还剩下hr面没面。据二面说hr面大概在一周后。</p><p><strong> 等面完hr面,最终面试结果出来,会对本次面试做些整理。</strong></p><hr><h4 id="首先要明确-什么是类数组-ArrayLike"><a href="#首先要明确-什么是类数组-ArrayLike" class="headerlink" title=" 首先要明确,什么是类数组(ArrayLike) "></a><strong> 首先要明确,什么是类数组(ArrayLike) </strong></h4><ul><li><p>拥有length属性，其它属性（索引）为非负整数(对象中的索引会被当做字符串来处理，这里你可以当做是个非负整数串来理解)</p></li><li><p>不具有数组所具有的方法</p></li></ul><h4 id="解决"><a href="#解决" class="headerlink" title=" 解决 "></a><strong> 解决 </strong></h4><p><strong> 方法一 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function list() &#123;</span><br><span class="line">    return Array.from(arguments);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong> 方法二 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let a = &#123;&apos;0&apos;:&apos;I&apos;,&apos;1&apos;:&apos;am&apos;,&apos;2&apos;:&apos;Sail&apos;,&apos;length&apos;:3&#125;;</span><br><span class="line">let c = &#123;&apos;1&apos;:&apos;I&apos;,&apos;2&apos;:&apos;am&apos;,&apos;4&apos;:&apos;Sail&apos;,&apos;length&apos;:3&#125;;</span><br><span class="line"></span><br><span class="line">let arrayLikeToArray = arrLike =&gt;&#123;</span><br><span class="line"></span><br><span class="line">    let newArray = [];</span><br><span class="line"></span><br><span class="line">    for(let i=0 ;i &lt; arrLike.length; i++)&#123;</span><br><span class="line">        newArray.push(arrLike[i]);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    return newArray;</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">arrayLikeToArray(a);</span><br></pre></td></tr></table></figure><p>关于这个函数,<strong> 如果传入的类数组的属性是从0到某个整数n依次递增的,是一切ok的。如果不是,会和预先的结果有区别。</strong></p><p>上面特意给出了两组测试数据,以便加深理解。</p><p><strong> 另外要特别强调的是,上面这段代码,是不适用于处理arguments的。(没错,我是故意这样写的)</strong></p><p>这里需要提下箭头函数几个需要注意的点</p><ul><li><p>函数体内的this对象,绑定定义时所在的对象,而不是使用时所在的对象</p></li><li><p>不可以当作构造函数,也就是说,不可以使用new命令,否则抛出一个错误</p></li><li><p>不可以使用arguments对象,该对象在函数体内不存在。</p></li><li><p>由于this在箭头函数中被绑定,所以不能使用call()、apply()、bind()这些方法去改变this的指向</p></li></ul><hr><p><strong> 方法三 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">function list() &#123;</span><br><span class="line">  return Array.prototype.slice.call(arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var list1 = list(1, 2, 3); // [1, 2, 3]</span><br></pre></td></tr></table></figure><hr><p><strong> 方法四 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">var unboundSlice = Array.prototype.slice;</span><br><span class="line">var slice = Function.prototype.call.bind(unboundSlice);</span><br><span class="line"></span><br><span class="line">function list() &#123;</span><br><span class="line">  return slice(arguments);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">var list1 = list(1, 2, 3); // [1, 2, 3]</span><br></pre></td></tr></table></figure><hr><h4 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h4><ul><li><a href="http://www.jianshu.com/p/f8466e83cef0" target="_blank" rel="noopener">js类数组转数组的方法</a></li><li><a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/slice?v=example" target="_blank" rel="noopener">Array.prototype.slice()</a></li><li><a href="http://www.cnblogs.com/guorange/p/6668440.html" target="_blank" rel="noopener">js类数组转数组的方法（ArrayLike）</a></li><li><a href="http://blog.csdn.net/liaozhongping/article/details/51075343" target="_blank" rel="noopener">js将类数组转成数组</a></li><li><a href="http://blog.csdn.net/warhin/article/details/50922314" target="_blank" rel="noopener">Array.prototype.slice应用和原理探析</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>姿势不对</title>
      <link href="/2017/05/15/the-posture-is-not-true/"/>
      <url>/2017/05/15/the-posture-is-not-true/</url>
      
        <content type="html"><![CDATA[<h4 id="昨天的吉他课受益匪浅"><a href="#昨天的吉他课受益匪浅" class="headerlink" title=" 昨天的吉他课受益匪浅 "></a><strong> 昨天的吉他课受益匪浅 </strong></h4><p>之前是郭同学教我。昨日他考试,另一个乐队成员负责教我。</p><p>像这位同学请教了F和弦的音弹出来不对,他指出了我的姿势上的一些问题。</p><p>并且细心的纠正了我的错误姿势。</p><p><strong> 很感谢。</strong></p><hr><p>错误主要在于,右手幅度太大。</p><p><strong> 拨弦的时候应该主要是由各个指节发力。</strong></p><p><strong> 其实之所以右手拨弦姿势不对,还是因为和弦按得不好,不容易拨响,导致需要更大的幅度给更大的力量来拨弦。</strong></p><hr><p><strong> 还需要努力提高姿势水平呀! </strong></p>]]></content>
      
      
      <categories>
          
          <category> 音乐 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 吉他 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>一翘到底</title>
      <link href="/2017/05/14/skip-class-all-the-time/"/>
      <url>/2017/05/14/skip-class-all-the-time/</url>
      
        <content type="html"><![CDATA[<pre><code>本文是我为《马克思主义基本原理》课程瞎写的课程演讲稿。</code></pre><h4 id="我们小组是围绕第二章第三节—从必然走向自由来进行讲解的。"><a href="#我们小组是围绕第二章第三节—从必然走向自由来进行讲解的。" class="headerlink" title=" 我们小组是围绕第二章第三节—从必然走向自由来进行讲解的。"></a><strong> 我们小组是围绕第二章第三节—从必然走向自由来进行讲解的。</strong></h4><p>自由很重要。</p><p>有句话是这样讲的:生命诚可贵，爱情价更高，若为自由故，两者皆可抛。<strong> 自由的重要性可见一般。</strong></p><p>但自由又是一个大而抽象的题目，我们小组把题目更具象一些。</p><h4 id="如何优雅地翘课？"><a href="#如何优雅地翘课？" class="headerlink" title=" 如何优雅地翘课？"></a><strong> 如何优雅地翘课？</strong></h4><hr><p>为什么说是优雅的翘课呢？</p><p>我有一个朋友，叫做A君。他几次对我说到，<strong>这个纪老师啊，每次我不来上马原，她就要点名，偏偏我来了，她就不点名了。我告诉她，她都不会相信。</strong></p><p>有的同学，偶尔会感慨一下，翘了这么多课，依然过不好这一生。偏偏有同学，翘了很多课，依然考高分。</p><p>希望通过我们小组的研究，给大家一点收获。</p><hr><h4 id="正确认识翘课"><a href="#正确认识翘课" class="headerlink" title=" 正确认识翘课 "></a><strong> 正确认识翘课 </strong></h4><p><strong>不要带着有色眼镜来看翘课这件事情，就像我们不应该带着有色眼睛看挂科这事一样，不要把他们看做妖魔鬼怪。翘课是很稀松平常的一件事，就像我们都要吃饭一样。只是有的人吃得多一点，有的人吃得少一些罢了。</strong></p><p>翘课的理由多样，一百个同学可能有一百个翘课的理由。但总结起来，无非是想翘课换取自由的时间，来做自己先做的事情。</p><p><strong> 话虽如此，但翘课也是有境界之分的。</strong>正如有的人被叫做饭桶，而另一批人被称为美食家。</p><p>有的同学翘课是为了体验那种冒险的感觉，因为你永远不知道下一堂课老师会不会点名。这一点，想必翘过课的同学都能明白。</p><p>有的同学仅仅是想多睡一会儿罢了。</p><p>有的同学一心想上王者，在荣耀的路上越走越远。</p><p>有的同学是因为玩了一整夜的手机。</p><p>有的同学是因为前一天晚上写了整夜的代码，或者是正在键盘上敲击下一段段程序。</p><p>有的同学是因为完全可以自学，没有必要来上课。</p><p><strong> 翘课的境界取决于为什么翘课，或者说翘课的时间用去干嘛了。</strong></p><p>倘若有了清楚的规划、目标，有计划的翘课是很好的。<strong> 哪怕退学也不无不可。</strong></p><hr><h4 id="如何翘课，这是一门很深的学问。"><a href="#如何翘课，这是一门很深的学问。" class="headerlink" title=" 如何翘课，这是一门很深的学问。"></a><strong> 如何翘课，这是一门很深的学问。</strong></h4><p>根据我们小组五人多年翘课的经历，总结了一些，仅供参考。</p><p>常规的方法有如下几种</p><ul><li><p><strong>寝室间互帮互助，建立起深厚的革命友谊，互相答到 </strong><br>这种方法常常在大规模点名的时候失效</p></li><li><p>通过理性分析，<strong>预测点名还是不点名</strong><br>比如上堂课点名了，下堂课很可能不点名<br>比如周一上午的第一节比较容易点名<br>比如假期前的最后一堂课容易点名<br>雷雨天气更容易点名</p></li></ul><p>这些方法虽然可以起到一定的帮助作用，但是比如我前面提到的A君，每逢他翘课，老师都点名了。他来的时候却不点名。</p><p>这说明了<strong>翘课是有风险的。</strong></p><hr><h4 id="这里有一个更加优雅的翘课方法"><a href="#这里有一个更加优雅的翘课方法" class="headerlink" title=" 这里有一个更加优雅的翘课方法 "></a><strong> 这里有一个更加优雅的翘课方法 </strong></h4><p><strong>那便是不要有选择性的翘课。也就是说要一翘到底。</strong></p><p>因为老师总是要点名的，倘若你想根据套路来规避老师点名，可以想象，几乎是必然会失败的。<strong>更何况女人心思难猜，更是难上加难了。</strong></p><p><strong>翘课的时候要大胆一点，要果断一点。</strong>既然决定了翘课，就要承担相应的后果。一翘到底在我看来是最好的办法，因为这样你不用忧心老师是否点名与否，你也不会去考虑下堂课老师是否点名。</p><p>就拿我们小组的柳安宇来说，大一的军事理论课，他不曾去上过一堂课，直到快要期末了，他才去上第一堂课。恰恰这堂课，老师问他几次没来上课了，两次还是三次还是几次。</p><p><strong>柳安宇回答到，这是我第一次来上课。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>transform失效了?</title>
      <link href="/2017/05/06/why-the-transform-cannot-work/"/>
      <url>/2017/05/06/why-the-transform-cannot-work/</url>
      
        <content type="html"><![CDATA[<style>    .underline{        border-bottom:2px ridge red;    }</style><h4 id="问题背景"><a href="#问题背景" class="headerlink" title=" 问题背景: "></a><strong> 问题背景: </strong></h4><p>昨晚在某个群，看到一个问题:<strong> 大概是CSS动画,color属性能够生效，transform属性却没能生效。 </strong></p><hr><p>作者写了个demo,重现了一下问题,<strong> 更多请戳<a href="http://www.sail.name/CSS_Demo/why-the-transform-cannot-work-test.html">demo</a> </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">.tow&#123;</span><br><span class="line">    width: 200px;</span><br><span class="line">    height: 200px;</span><br><span class="line">    border-radius: 50%;</span><br><span class="line">    background-color: red;</span><br><span class="line">    /*display: inline-block;*/</span><br><span class="line">    animation: test 5s 1s infinite;</span><br><span class="line">    text-align: center;</span><br><span class="line">    line-height:200px;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">@keyframes test &#123;</span><br><span class="line">    0%&#123;</span><br><span class="line">        transform: translateX(0px);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    100%&#123;</span><br><span class="line">        background-color: darkturquoise;</span><br><span class="line">        transform: translateX(500px);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">&lt;span class=&quot;tow&quot;&gt;tow&lt;/span&gt;</span><br></pre></td></tr></table></figure><p>上面这段代码只能看到背景颜色的转变,却看不到transform的变化</p><p>最后这位同学在样式中设置了<code>display:inline-block</code>就搞定了</p><hr><p>当时我正在复习概率论。今天查阅了些资料,大致弄明白其中的道理。</p><p><a href="https://www.w3.org/TR/css-transforms-1/#transform-property" target="_blank" rel="noopener">规范中有这样一段描述:</a></p><p><strong> transformable element </strong><br><strong> A transformable element is an element in one of these categories: </strong><br>an element whose layout is governed by the CSS box model<span class="underline"> which is either a block-level or atomic inline-level element,</span>or whose display property computes to table-row, table-row-group, table-header-group, table-footer-group, table-cell, or table-caption [CSS21]<br>an element in the SVG namespace and not governed by the CSS box model which has the attributes transform, ‘patternTransform‘ or gradientTransform [SVG11].</p><p>注意到下划线部分:<strong> which is either a block-level or atomic inline-level element </strong></p><p>transform适用的范围包括但不限于a block-level or atomic inline-level element</p><p>block-level本文并不讨论。这里我想谈谈Inline-level elements , inline boxes ,Inline-level boxes</p><p><strong> 依旧先看看规范 </strong></p><p><strong> Inline-level elements and inline boxes </strong></p><p><span class="underline">Inline-level elements are those elements of the source document that do not form new blocks of content; </span>the content is distributed in lines (e.g., emphasized pieces of text within a paragraph, inline images, etc.). <span class="underline">The following values of the ‘display’ property make an element inline-level: ‘inline’, ‘inline-table’, and ‘inline-block’. </span>Inline-level elements generate inline-level boxes, which are boxes that participate in an inline formatting context.</p><p>An inline box is one that is both inline-level and whose contents participate in its containing inline formatting context.<span class="underline"> A <strong> non-replaced </strong> element with a ‘display’ value of ‘inline’ generates an inline box. Inline-level boxes that are not inline boxes (such as replaced inline-level elements, inline-block elements, and inline-table elements) are called <strong> atomic inline-level boxes </strong> because they participate in their inline formatting context as a single opaque box.</span></p><hr><p>上面这两段我反复读了数十次,一直翻译不好。</p><p>最后在<a href="https://developer.mozilla.org/zh-CN/docs/Web/Guide/CSS/Visual_formatting_model" target="_blank" rel="noopener">MDN</a>上看到一段翻译,如下</p><p>行内级元素生成行内级盒(inline-level boxes)，参与行内格式化上下文(inline formatting context)。同时参与生成行内格式化上下文的行内级盒称为行内盒(Inline boxes)。所有display:inline 的非替换元素生成的盒是行内盒。而不参与生成行内格式化上下文的行内级盒称为原子行内级盒(atomic inline-level boxes)。这些盒由可替换行内元素，或 display 值为 inline-block 或 inline-table 的元素生成，不能拆分成多个盒</p><p><strong> 或许你会有些疑惑,为什么和你的翻译不一样。文末会进行解答 </strong></p><p>看看下图加深理解</p><p><img src="/img/htmlcss/inlines.png" alt="inlines.png"></p><p>当一个元素的display的值为inline,inline-table,inline-block时,这个元素是行内级元素/内联级元素(Inline-level elements)。这些行内级元素会生成一个行内级盒,即inline-level boxes。倘若这个盒子还同时参与生成行内格式化上下文(IFC),该行内级盒称为行内盒(Inline boxes)。而用inline-level boxes集合减去Inline boxes集合便是atomic inline-level boxes(原子行内级盒)。即是不参与生成行内格式化上下文的行内级盒。<strong> 这些盒由可替换行内元素，或 display 值为 inline-block 或 inline-table 的元素生成，不能拆分成多个盒。</strong></p><p>至于什么是可替换元素,什么是不可替换元素,<a href="https://www.w3.org/TR/CSS21/conform.html" target="_blank" rel="noopener">戳这儿</a></p><hr><p>回到最初,这位同学之所以在样式中设置了<code>display:inline-block</code>就解决了问题。</p><p><strong> 是因为transform作用于transformable element(作者在这里译为可变元素), </strong>有以下两种</p><p>1.an element whose layout is governed by the CSS box model<span class="underline"> which is either a block-level or atomic inline-level element, </span>or whose display property computes to table-row, table-row-group, table-header-group, table-footer-group, table-cell, or table-caption [CSS21]</p><p>2.an element in the SVG namespace and not governed by the CSS box model which has the attributes transform, ‘patternTransform‘ or gradientTransform [SVG11].</p><p><strong> span会形成inline boxes,而不会形成atomic inline-level boxes。span本身并不是可变元素,在设置<code>display:inline-block</code>就是atomic inline-level boxes。</strong></p><hr><p>在查阅文档过程中遇到几个问题</p><p>1.规范在对atomic inline-level boxes出现了 a single opaque box。single比较好理解,单个的,不可拆分的。而opaque是不透明的意思,MDN上的翻译,直接忽略了这个词。规范中确乎有一处进行了描述,<a href="https://www.w3.org/2009/07/B-and-B/border-image-shadow-combine.html" target="_blank" rel="noopener">戳这儿</a>。这里作者的理解就是从字面意思理解,不透明的。如果你有更好的理解,可以告诉我。</p><p>2.第二个问题,是规范中有处错误,导致我的走了一些弯路。这里指出</p><p><span class="underline">Inline-level boxes </span> that are not <span class="underline"> inline boxes </span>  (such as replaced inline-level elements, inline-block elements, and inline-table elements) are called atomic inline-level boxes because they participate in their inline formatting context as a single opaque box.</p><p>在上面这段中,有两处下滑线和一对括号。<strong> 括号是应该紧放在需要进行形容,具体说明的词的后方。 </strong>按照这段文字的表达,括号中的内容是对inline boxes进行说明的。而实际上括号中的内容是对inline-boxes的具体诠释。</p><p>作者便是在这儿疑惑不已,耽误了几个小时。<strong> 最后在高中同桌答谋锐的帮助下理清了思路。 </strong></p><hr><h4 id="写在最后"><a href="#写在最后" class="headerlink" title=" 写在最后 "></a><strong> 写在最后 </strong></h4><ul><li><strong> 感谢小志的赞赏 </strong>,虽然我只是提出了一个问题而已。</li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>border-radius</title>
      <link href="/2017/05/01/border-radius/"/>
      <url>/2017/05/01/border-radius/</url>
      
        <content type="html"><![CDATA[<p>虽然写了很久的border-radius,但也是近期才知道,<strong> border-radius每个值可以有两个长度,分别是椭圆的水平半径和垂直半径。</strong></p><p>有兴趣看demo,<a href="http://www.sail.name/CSS_Demo/border-radius.html">戳这儿</a></p><hr><p> border-radius 用来设置边框圆角</p><p><strong> 当使用一个半径时确定一个圆形；当使用两个半径时确定一个椭圆，这个(椭)圆与边框的交集形成圆角效果 </strong></p><p><img src="/img/htmlcss/border-radius-2.png" alt="border-radius-2.png"></p><p><img src="/img/htmlcss/border-radius-1.png" alt="border-radius-1.png"></p><hr><h3 id="语法"><a href="#语法" class="headerlink" title=" 语法 "></a><strong> 语法 </strong></h3><p><code>border-radius: 1-4 length|% / 1-4 length|%;</code></p><p>按此顺序设置每个 radii 的四个值。如果省略 bottom-left，则与 top-right 相同。如果省略 bottom-right，则与 top-left 相同。如果省略 top-right，则与 top-left 相同。</p><p><strong> 这里的顺序是指: 左上 右上 右下 左下 </strong></p><p><strong> length </strong></p><p>定义圆形半径或椭圆的半长轴，半短轴。不能用负值。</p><p><strong> percentage </strong></p><p>使用百分数定义圆形半径或椭圆的半长轴，半短轴。水平半轴相对于盒模型的宽度；垂直半轴相对于盒模型的高度。不能用负值。</p><p><strong> 半径的第一个语法取值可取1~4个值: </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">border-radius: radius</span><br><span class="line"></span><br><span class="line">border-radius: top-left-and-bottom-right top-right-and-bottom-left</span><br><span class="line"></span><br><span class="line">border-radius: top-left top-right-and-bottom-left bottom-right</span><br><span class="line"></span><br><span class="line">border-radius: top-left top-right bottom-right bottom-left</span><br></pre></td></tr></table></figure></p><p><strong> 半径的第二个语法取值也可取1~4个值 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">border-radius: (first radius values) / radius</span><br><span class="line"></span><br><span class="line">border-radius: (first radius values) / top-left-and-bottom-right top-right-and-bottom-left</span><br><span class="line"></span><br><span class="line">border-radius: (first radius values) / top-left top-right-and-bottom-left bottom-right</span><br><span class="line"></span><br><span class="line">border-radius: (first radius values) / top-left top-right bottom-right bottom-left</span><br><span class="line"></span><br><span class="line">border-radius: inherit</span><br></pre></td></tr></table></figure></p><hr><h3 id="参考"><a href="#参考" class="headerlink" title=" 参考 "></a><strong> 参考 </strong></h3><ul><li><a href="https://developer.mozilla.org/zh-CN/docs/Web/CSS/border-radius" target="_blank" rel="noopener">border-radius-MDN</a></li><li><a href="http://www.w3school.com.cn/cssref/pr_border-radius.asp" target="_blank" rel="noopener">border-radius-W3school</a></li><li><a href="https://www.w3.org/TR/2005/WD-css3-background-20050216/#the-border-radius" target="_blank" rel="noopener">border-radius-W3C</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>数的全排列</title>
      <link href="/2017/04/30/the-permutation-of-numbers/"/>
      <url>/2017/04/30/the-permutation-of-numbers/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><strong> 输入一个指定的数n(n为1-9之间的整数),输出1~n之间的全排列 </strong></p><p>比如输入3,输出123的全排列:123、132、213、231、312、321;输入4,输出1234的全排列:….</p><p><strong> 当然这个问题也可以这样描述: </strong>有编号1、2…n的n张扑克牌(n为1-9之间的整数),编号1、2…n的n个盒子。将这n张扑克牌分别放到这n个盒子里面,并且每个盒子有且只能放一张扑克牌。一共有多少种不同的放法？</p><hr><p>最简单的方法当然就是暴力枚举了,pass掉。</p><p>这里我们用<strong> 深度优先搜索(Depth First Search,DFS) </strong>解题.</p><p><strong> 深度优先搜索的关键在于解决”当下应该怎么做”。至于”下一步如何做”则与”当下该如何做”是一样的 </strong></p><p><strong> 以下的代码就是DFS的基本模型 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">void dfs(int step)</span><br><span class="line">&#123;</span><br><span class="line">    判断边界</span><br><span class="line">    尝试每一种可能</span><br><span class="line"></span><br><span class="line">    for(i=1; i&lt;n; i++)</span><br><span class="line">    &#123;</span><br><span class="line">        继续下一步</span><br><span class="line">        dfs(step+1);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    返回</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><strong> 上代码 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line"></span><br><span class="line">int a[10],book[10],n;//此处特别说明一下 ，C语言的全局变量在没有赋值以前默认为0，因此这里的book数组无需全部再次赋值为0</span><br><span class="line"></span><br><span class="line">void dfs(int step) // step表示现在站在第几个盒子前</span><br><span class="line">&#123;</span><br><span class="line">int i;</span><br><span class="line">if(step == n+1) // 如果站在第 n+1 个盒子前面，则表示前n个盒子已经放好扑克牌</span><br><span class="line">&#123;</span><br><span class="line">//输出一种排列 (1-n号盒子中的扑克牌编号)</span><br><span class="line">for(i=1; i&lt;=n; i++)&#123;</span><br><span class="line">printf(&quot;%d&quot;,a[i]);</span><br><span class="line">&#125;</span><br><span class="line">printf(&quot;\n&quot;);</span><br><span class="line"></span><br><span class="line">return; //返回之前的一步 (最近一次调用dfs函数的地方)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">//  此时站在第step个盒子前面,应该放哪张牌呢？</span><br><span class="line">//  按照1，2，3....n的顺序一一尝试</span><br><span class="line"></span><br><span class="line">for(i=1; i&lt;=n ; i++)</span><br><span class="line">&#123;</span><br><span class="line">//判断扑克牌 i 是否在手上</span><br><span class="line">if(book[i] == 0)    // book[i]等于0表示i号扑克牌在手上</span><br><span class="line">&#123;</span><br><span class="line">// 开始尝试使用扑克牌 i</span><br><span class="line">a[step] = i; // 将 i 号扑克牌放入到第 step 个盒子中</span><br><span class="line">book[i] = 1; //将 book[i] 设为 1 ，表示 i 号扑克牌已经不在手上</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">//  第 step 个盒子已经放好扑克牌，接下来需要走到下一个盒子面前</span><br><span class="line">dfs(step + 1); //这里通过函数的递归调用来实现 (自己调用自己)</span><br><span class="line">book[i] = 0;   // 这是非常重要的一步，一定要将刚才尝试的扑克牌收回，才能进行下一次尝试</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">return;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">scanf(&quot;%d&quot;,&amp;n); // 输入的时候要注意 n 为1-9之间的整数</span><br><span class="line">dfs(1);//首先站在 1 号小盒子面前</span><br><span class="line">//getchar();getchar();</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong> 参考 </strong></p><ul><li>《啊哈！算法》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> DFS </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从小星星到刷网课</title>
      <link href="/2017/04/25/from-small-star-star-to-skip-imooc-class/"/>
      <url>/2017/04/25/from-small-star-star-to-skip-imooc-class/</url>
      
        <content type="html"><![CDATA[<h4 id="写在前面"><a href="#写在前面" class="headerlink" title=" 写在前面 "></a><strong> 写在前面 </strong></h4><p><strong> 考试周来临,作者自然是在宿舍做十年考题(写代码)了 </strong></p><p>吃过晚饭,为了休息下眼睛,作者开始练习吉他,同时电脑自动播放网课</p><p>大概如下</p><p><img src="/img/codelife/small-star-star.jpg" alt="small-star-star.jpg"></p><p><strong> 没错,和弦按得手疼了,弹的就是最简单的小星星。</strong></p><hr><p>很快作者就发现了问题</p><p><strong> 吉他书的左半部分不时会碰到鼠标,导致光标跑出视频区域,网课停止播放了 </strong></p><p>在经过反复几次手动,点击鼠标,让视频继续播放后</p><p>作者想出了一个解决办法:</p><p><img src="/img/codelife/small-star-star-1.png" alt="small-star-star-1.png"></p><p>没错,就像图片中的那样</p><p><strong> 作者挺身而出,轻点鼠标右键 </strong></p><p><strong> 这个时候鼠标就可以随意移动了,哪怕移出视频区域,也不会导致视频暂停 </strong></p><hr><p>直到练习完吉他,作者才开始细细思考究竟发生了什么</p><p><img src="/img/codelife/small-star-star-2.png" alt="small-star-star.png"></p><p>在点击鼠标右键后,我们将光标移出视频区域,是没有问题的</p><p>可倘若我们在上图中的区域一,也就是左显示屏区域,点击鼠标,会发现视频再次暂停了</p><p><strong> 而在区域二,即右显示屏区域,随意点击,视频仍然正常播放 </strong></p><p><strong> 这样作者就能一边写HTML一边刷网课了 </strong></p><hr><p>但是还有很多同学不是双屏,如何单屏也能实现呢?</p><p>先分析下之前的操作</p><p><strong> 作者臆测: </strong></p><p><strong> 直接移动光标脱离视频区域,会被脚本检测到,所以视频暂停。可设若,你在视频区域点击鼠标右键,鼠标的焦点就停留在视频区域,所以这时可以随意移动鼠标 </strong></p><p><strong> 至于为什么再次点击鼠标,左屏停止播放,右屏能够正常播放 </strong></p><p>因为在左侧区域点击,焦点就重新回到了<strong> 页面其它地方 </strong>,就被检测到了。而在右侧屏幕播放,不会影响到<strong> 网页(页面) </strong>中的焦点。</p><p>看到这儿就比较清晰了,如果你注意了我的表述,应该可以想到在单屏中的解决办法了。</p><p><strong> 作者强调的是页面,网页,而不再是左右屏 </strong></p><p>单屏解决办法如下:</p><p><img src="/img/codelife/small-star-star-3.png" alt="small-star-star.png"></p><p><strong> 右键鼠标后,直接最小化就可以了0.0 </strong></p><p><strong> 因为那部分区域已经不属于页面了,所以可以大胆点击 </strong></p><hr><p>需要说明的是,<strong> 作者用于测试的系统是WIN10,浏览器是360安全浏览器 </strong>,因为chrome没有装什么flash之类的来着</p><p><strong> 倘若你用的是chrome浏览器,在点击鼠标右键过后,按 WIN+D 或者 WIN+M 即可 </strong></p><p>至于其它浏览器我倒是没有测试</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><strong> 总结 </strong></h4><p><strong> 用这个方法,只需要点击两次鼠标就OK了 </strong></p><p>哦,对了,是这个平台</p><p><img src="/img/codelife/small-star-star-4.png" alt="small-star-star.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>开发者工具网络面板size列有两个值</title>
      <link href="/2017/04/24/why-tow-values-in-network-performance/"/>
      <url>/2017/04/24/why-tow-values-in-network-performance/</url>
      
        <content type="html"><![CDATA[<p><strong> 写在前面 </strong></p><p>本文图片,倘若看不清,需要自动调节浏览器页面大小【PC用户】</p><hr><p><strong> 昨晚发现:开发者工具网络面板size列有两个值 </strong></p><p><img src="/img/Developer-Tools/why-tow-values-in-size1.png" alt="why-tow-values-in-size1.png"></p><p>很是纳闷</p><p>在网上没有查到具体的原因</p><p><strong> 或许是我太仔细(闲得蛋疼)吧 </strong></p><p>当然最后还是解决了</p><hr><p><strong> Network 面板由五个窗格组成：</strong></p><p><strong> Controls </strong></p><p>使用这些选项可以控制 Network 面板的外观和功能。</p><p><strong> Filters </strong></p><p>使用这些选项可以控制在 Requests Table 中显示哪些资源。提示：按住 Cmd (Mac) 或 Ctrl (Windows/Linux) 并点击过滤器可以同时选择多个过滤器。</p><p><strong> Overview </strong></p><p>此图表显示了资源检索时间的时间线。如果您看到多条竖线堆叠在一起，则说明这些资源被同时检索。</p><p><strong> Requests Table </strong></p><p>此表格列出了检索的每一个资源。 默认情况下，此表格按时间顺序排序，最早的资源在顶部。点击资源的名称可以显示更多信息。 提示：右键点击 Timeline 以外的任何一个表格标题可以添加或移除信息列。</p><p><strong> Summary </strong></p><p>此窗格可以一目了然地告诉您请求总数、传输的数据量和加载时间。</p><p><img src="/img/Developer-Tools/panes.png" alt="panes.png"></p><p><strong> 默认情况下，Requests Table 会显示以下列。</strong></p><p><strong> Name </strong></p><p>资源的名称</p><p><strong> Status HTTP </strong></p><p>状态代码</p><p><strong> Type </strong></p><p>已请求资源的 MIME 类型。</p><p><strong> Initiator </strong></p><p>发起请求的对象或进程。值为以下选项之一：</p><ul><li><p><strong> Parser </strong> Chrome 的 HTML 解析器发起请求。</p></li><li><p><strong> Redirect </strong> HTTP 重定向发起请求。</p></li><li><p><strong> Script </strong>脚本发起请求。</p></li><li><p><strong> Other </strong>某些其他进程或操作发起请求，例如用户通过链接或者在地址栏中输入网址导航到页面。</p></li><li><p><strong> Size。响应标头（通常为数百字节）加响应正文（由服务器提供）的组合大小。</strong></p></li><li><p><strong> Time </strong>从请求开始至在响应中接收到最终字节的总持续时间。</p></li><li><p><strong> Timeline </strong>Timeline 列可以显示所有网络请求的可视瀑布。 点击此列的标题可以显示一个包含更多排序字段的菜单。</p></li></ul><hr><p>已经知道</p><p><strong> Size。响应标头（通常为数百字节）加响应正文（由服务器提供）的组合大小。</strong></p><p>本文开篇的那张图，是在有缓存的情况下的</p><p><strong> 从图中可以看到，哪怕是请求不同的图片资源,上面一行的size都是在192B左右 </strong></p><p>据作者分析,这部分是 响应标头（通常为数百字节）的size大小。</p><p>这个断言实在是比较草率,难以让人信服</p><p>于是我<strong> 清空了缓存 </strong>,看下图</p><p><img src="/img/Developer-Tools/why-tow-values-in-size0.png" alt="why-tow-values-in-size0.png"></p><p>上图是在清空缓存后截的图</p><p>可以看到上一行的size值比下一行的size值大了不到一kb。</p><p>略作分析…先上结论</p><p><strong> 有两行size值 </strong></p><ul><li><p><strong> 上面一行size大小为响应标头（通常为数百字节）+ 响应正文（由服务器提供）的大小 </strong></p></li><li><p><strong> 下面一行响应正文（由服务器提供）的大小 </strong></p></li></ul><p>用这个结论解释下前面的疑惑</p><p><strong> 没有清空缓存前,上面一行size大小:响应正文（由服务器提供）的大小为0,只有响应标头（通常为数百字节）的大小为100多B的大小。</strong></p><hr><p><strong> 总结 </strong></p><p>network performance 中的size值,由两部分组成:响应标头（通常为数百字节）与 响应正文（由服务器提供）</p><ul><li><p>上面一行size大小为响应标头（通常为数百字节）+ 响应正文（由服务器提供）的大小</p></li><li><p>下面一行响应正文（由服务器提供）的大小</p></li></ul><p><strong> 因为没有在网上看到相关的文章,自己分析的,或许有疏漏,仅供参考。</strong></p>]]></content>
      
      
      <categories>
          
          <category> Developer Tools </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>365 contributions in the last year</title>
      <link href="/2017/04/22/365-contributions-in-the-last-year/"/>
      <url>/2017/04/22/365-contributions-in-the-last-year/</url>
      
        <content type="html"><![CDATA[<p>前几天提交代码,意外发现</p><p><img src="/img/prose/365-contributions-in-the-last-year.jpg" alt="365-contributions-in-the-last-year"></p><p><strong> 这是第一次contributions达到365,希望这也是最后一次。</strong></p><p>会努力保持在365以上的水准。</p><hr><p>现在对前端也有了更深的理解,对页面布局的掌握较之前亦是有了不小的进步。</p><p>看 <i> the Zen of CSS design</i>,亦是受益匪浅。</p><p><strong> 虽然偏好前端,但不止步于前端，也不止步于WEB。 </strong></p><p>比起社区中的大佬们,自己还是很渣。</p><p>但可以想象自己也能达到那个高度,并非遥不可及。</p><p>越来越多的时间放在了写代码上,多少是有些惶恐的。</p><p>正如 顾城所说的<strong> 技术是人生存所依赖的，却不是人的精神能依凭的；它是生存的方法，而不是生存的法则。科学是一个很小的东西，并不像人们所寄望的那样可以无所不能。</strong></p><p>除了阅读些有意思的书,最近开始涉略设计。</p><p>吉他上的进步十分缓慢,练习的时间太少了。</p><p>正在练习C和弦,挺难的,还需要大量的练习。</p><p>阿JAY在《手写的从前》中唱到</p><p><strong> 我看着你的脸 轻刷着和弦 </strong></p><p>我也要这样Orz</p><hr><p><strong> 长路漫漫,慢慢进步 </strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>animation-timing-function:steps</title>
      <link href="/2017/04/21/steps-in-animation-timing-function/"/>
      <url>/2017/04/21/steps-in-animation-timing-function/</url>
      
        <content type="html"><![CDATA[<p>在我的另一篇博文<a href="http://www.sail.name/2017/04/19/clock-with-CSS-and-JS/">JS撸一个时钟</a>,是用css和js写的一个时钟。</p><p><a href="http://garychang.cn/" target="_blank" rel="noopener">贯宇</a>之前也写过一篇<a href="http://garychang.cn/2017/01/08/canvasclock/" target="_blank" rel="noopener">使用canvas制作的的钟</a>。</p><p>有兴趣可以看看。</p><p>那么如何用纯CSS也写一个呢,比如下面这样</p><hr><iframe src="http://www.sail.name/CSS_Demo/css-clock-with-steps.html" style="width:400px;height:400px;"><br></iframe><hr><p>这是我在<a href="https://designmodo.com/demo/stepscss/index.html" target="_blank" rel="noopener">designmodo</a>上看到的demo,并自己重新实现了下。</p><p>有兴趣看源码,<a href="http://www.sail.name/CSS_Demo/css-clock-with-steps.html">狠戳这儿</a></p><p><strong> 主要利用的就是animation-timing-function:steps() </strong></p><hr><p>animation 有八个属性</p><p><code>animation-name</code></p><p>动画名称</p><p><code>animation-duration</code></p><p>动画时间</p><p><code>animation-timing-function</code></p><p>动画的过渡类型</p><p><code>animation-delay</code></p><p>动画延迟执行的时间(负数将截断动画)</p><p><code>animation-iteration-count</code></p><p>动画循环播放的次数</p><p><code>animation-direction</code></p><p>动画循环播放次数大于1次时，动画是否反向运动</p><p><code>animation-play-state</code></p><p>对象动画的状态</p><p><code>animation-fill-mode</code></p><p>对象动画时间之外的状态</p><hr><p><strong> 本文只讲解animation-timing-function 中与steps相关的部分 </strong></p><hr><p>animation-timing-function 的取值有如下几种情况</p><p><strong> ease </strong><br>缓解效果，等同于cubic-bezier(0.25,0.1,0.25,1.0)函数，既立方贝塞尔。</p><p><strong> linear </strong><br>线性效果，等同于cubic-bezier(0.0,0.0,1.0,1.0)函数。</p><p><strong> ease-in </strong><br>渐显效果，等同于cubic-bezier(0.42,0,1.0,1.0)函数。</p><p><strong> ease-out </strong><br>渐隐效果，等同于cubic-bezier(0,0,0.58,1.0)函数。</p><p><strong> ease-in-out </strong><br>渐显渐隐效果，等同于cubic-bezier(0.42,0,0.58,1.0)函数。</p><p><strong> step-start </strong><br>马上转跳到动画结束状态。</p><p><strong> step-end </strong><br>保持动画开始状态，直到动画执行时间结束，马上转跳到动画结束状态。</p><p><strong> steps(<number>[, [ start | end ] ]?) </number></strong><br>第一个参数number为指定的间隔数，即把动画分为n步阶段性展示，第二个参数默认为end，设置最后一步的状态，start为结束时的状态，end为开始时的状态，若设置与animation-fill-mode的效果冲突，而以animation-fill-mode的设置为动画结束的状态。</p><p><strong> cubic-bezier(<number>, <number>, <number>, <number>) </number></number></number></number></strong><br>特殊的立方贝塞尔曲线效果。</p><hr><p>让我们看看<a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-property-property" target="_blank" rel="noopener">规范</a>里是怎么描述的</p><p><strong> ease </strong><br>The ease function is equivalent to cubic-bezier(0.25, 0.1, 0.25, 1.0).</p><p><strong> linear </strong><br>The linear function is equivalent to cubic-bezier(0.0, 0.0, 1.0, 1.0).</p><p><strong> ease-in </strong><br>The ease-in function is equivalent to cubic-bezier(0.42, 0, 1.0, 1.0).</p><p><strong> ease-out </strong><br>The ease-out function is equivalent to cubic-bezier(0, 0, 0.58, 1.0).</p><p><strong> ease-in-out </strong><br>The ease-in-out function is equivalent to cubic-bezier(0.42, 0, 0.58, 1.0)</p><p><strong> step-start </strong><br>The step-start function is equivalent to steps(1, start).</p><p><strong> step-end </strong><br>The step-end function is equivalent to steps(1, end).</p><p><strong> steps </strong><br>Specifies a stepping function, described above, taking two parameters. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, is either the value ‘start’ or ‘end’, and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value ‘end’.</p><p><strong> cubic-bezier </strong><br>Specifies a cubic-bezier curve. The four values specify points P1 and P2 of the curve as (x1, y1, x2, y2). Both x values must be in the range [0, 1] or the definition is invalid. The y values can exceed this range.<br>2.4. The ‘transition-delay’ Property</p><p>从规范我们知道</p><p><strong> step-start 等价于  steps(1, start) </strong></p><p>动画分成1步，动画执行时为开始左侧端点的部分为开始</p><p><strong> step-end   等价于  steps(1, end) </strong></p><p>动画分成一步，动画执行时以结尾端点为开始</p><hr><p>那steps究竟是什么呢？规范中是这样描述的</p><p>Specifies a stepping function, described above, taking two parameters. The first parameter specifies the number of intervals in the function. It must be a positive integer (greater than 0). The second parameter, which is optional, is either the value ‘start’ or ‘end’, and specifies the point at which the change of values occur within the interval. If the second parameter is omitted, it is given the value ‘end’</p><p><strong> 试着翻译下: steps函数定义了一个阶梯(阶跃)函数,有两个参数。第一个参数指定了该函数中的间隔数量。它必须是正数,也就是要大于0。第二个参数是可选的,可以取 start 和 end。指定在每个间隔的起点或是终点发生阶跃变化。默认值是end. </strong></p><hr><p>可能对start,end 比较懵逼。让我们看看下图</p><p><img src="/img/htmlcss/step.png" alt="step.png"></p><p><strong> 通过上图,可以清晰的看到第二个参数为start时,动画在每个间隔的最初就执行了。而为end时,动画在每个间隔的末尾才执行。 </strong></p><p>通过下面这个<a href="http://www.sail.name/CSS_Demo/steps-test-one.html">demo</a>来加深下理解。</p><p>有兴趣看源码,<a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/steps-test-one.html" target="_blank" rel="noopener">狠戳这儿</a>。</p><p><img src="/img/htmlcss/steps1.gif" alt="steps1.gif"></p><p>不难观察到</p><p><strong> step-start / steps(1, start) 在动画一开始就走到了终点 </strong></p><p><strong> step-end / steps(1, end) 在动画末尾才到达终点 </strong></p><p><strong> steps(3,start) 始终领先 steps(3,end) </strong></p><p><strong> ease 的消失标志着整个动画的结束 </strong></p><p>到这儿我们对steps()已经有了大致的了解</p><hr><p>不得不提的是</p><p><strong> timing-function 作用于每两个关键帧之间，而不是整个动画 </strong></p><p>先看<a href="http://www.sail.name/CSS_Demo/steps-test-tow.html">demo</a></p><p>有兴趣看源码,<a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/steps-test-tow.html" target="_blank" rel="noopener">轻戳这儿</a>。</p><p><img src="/img/htmlcss/steps-tow.gif" alt="steps-tow.gif"></p><p>通过代码讲解下</p><pre><code> @keyframes test {   0%{     transform: translateX(0px);   }   50%{     transform: translateX(250px);   }   100%{     transform: translateX(600px);   }}</code></pre><p>上面代码中有3个关键帧,分别是在0%,50%,100%。</p><p>若</p><p><code> animation-timing-function:steps(3,start); </code></p><p>或者</p><p><code> animation-timing-function:steps(3,end); </code></p><p><strong> 也就是0%到50%，50%到100%,每两个关键帧之间各有三处动画跳跃。 </strong></p><p><strong> timing-function 作用于每两个关键帧之间，而不是整个动画 </strong></p><hr><p>上面的两个demo中的ease和liner过渡,会在每个关键帧之间插入补间动画。</p><p>有些效果不需要补间，只需要关键帧之间的跳跃，这时应该使用steps过渡方式。</p><p><strong> 关于实际场景中的应用,举个列子:用来切换雪碧图,实现状态切换。</strong></p><p>曾经写过一篇<a href="http://www.sail.name/2017/02/16/rotary-cube/">旋转的立方体</a>,感兴趣可以看看。</p><hr><p><strong> 参考 </strong></p><p><a href="https://www.w3.org/TR/2012/WD-css3-transitions-20120403/#transition-timing-function-property" target="_blank" rel="noopener">W3C CSS Transitions</a><br><a href="https://segmentfault.com/a/1190000007042048" target="_blank" rel="noopener">css动画里的steps()用法详解</a><br><a href="http://www.tuicool.com/articles/neqMVr" target="_blank" rel="noopener">CSS3 timing-function: steps() 详解</a><br><a href="http://www.cnblogs.com/aaronjs/p/4642015.html" target="_blank" rel="noopener">深入理解CSS3 Animation 帧动画</a><br><a href="https://www.zhihu.com/question/28962320" target="_blank" rel="noopener">动画如何识别关键帧和中间帧？</a></p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>煤球踩坑记</title>
      <link href="/2017/04/19/fix-the-bug-in-coalball/"/>
      <url>/2017/04/19/fix-the-bug-in-coalball/</url>
      
        <content type="html"><![CDATA[<p><strong> 最近不少心思都花在<a href="https://github.com/iamsail/coalball" target="_blank" rel="noopener">coalball</a>的推进和优化上。 </strong></p><p><img src="/img/codelife/coalball-mobile-1.png" alt="coalball-mobile-1"></p><p><img src="/img/codelife/coalball-mobile-2.png" alt="coalball-mobile-1"></p><p>记录遇到的几个bug。</p><p><strong> 有的花费了我不少(很多)时间。想想很是痛心,呜呼！ </strong></p><p>会陆续写成文档，放在工作室wiki。</p><p>项目完成后,亦会迁移到<a href="https://github.com/cumtflyingstudio" target="_blank" rel="noopener">工作室github</a>。</p><h3 id="路径问题"><a href="#路径问题" class="headerlink" title=" 路径问题 "></a><strong> 路径问题 </strong></h3><p>我在PC和chrome的模拟器上都是能够看到图片加载的,在移动端却看不到图片。</p><p>其实这本不是什么大问题，控制台看看就能发现了。</p><p>问题在于,服务器上的文件都是从我本机传上去的,所以本来我在自己电脑上是不能看到图片,不过因为本地有份代码，以及对应的图片文件。所以我控制台没有给出报错信息。</p><p><strong> 最后还是在他人电脑上看了看，才定位了bug所在。重新修改了路径。 </strong></p><p>那可能会想,从网站上传图片,这样本地不就没有对应的文件了吗。</p><p>看下一个问题</p><h3 id="网站上传图片失败"><a href="#网站上传图片失败" class="headerlink" title=" 网站上传图片失败 "></a><strong> 网站上传图片失败 </strong></h3><p>在线上传文件失败。这个问题困惑了两三天。</p><p>因为本地测试是一切ok的。路径也没有问题。</p><p>今早睡醒,猛然意识到,是用户对存放文件的目录只有读权限。</p><p>更改了权限就好了。</p><p><strong> 如何更改权限,<a href="http://man.linuxde.net/chmod" target="_blank" rel="noopener">轻戳这儿</a> </strong></p><h3 id="天坑"><a href="#天坑" class="headerlink" title=" 天坑 "></a><strong> 天坑 </strong></h3><p>这个就是天坑了。血泪史。</p><p>在移动端,QQ,chrome浏览器上看,一切正常。可是在手机自带,UC,手机百度之类的浏览器,没有数据。</p><p>最后在<a href="https://blog.xgy666.cn/" target="_blank" rel="noopener">肖神</a>的帮助下定位了BUG。</p><p><strong> 原来是前端开发人员写JS脚本的时候,定义变量用的let,而不是var。且没有转成ES5。</strong></p><p>目前还有不少浏览器不支持ES6。</p><p>肖神是在PC上从360浏览器定位到bug的。</p><p>不得不感慨一下,有的浏览器虽然不好用,并且对标准的支持也很缓慢,但不是毫无用处,比如用来定位下BUG。</p><p>最后使用<a href="https://babeljs.io/" target="_blank" rel="noopener">BABEL</a>将ES6的代码转成了ES5,就可以了。</p><hr><h4 id="总结"><a href="#总结" class="headerlink" title=" 总结 "></a><strong> 总结 </strong></h4><ul><li><p>定位BUG,比修改BUG更重要</p></li><li><p>有时候或许要换个设备看看情况</p></li><li><p>多装几个浏览器总是好的,哪怕你不用。毕竟很多用户用的不是最新的浏览器，也不是人人都用chrome,firefox。</p></li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS撸一个时钟</title>
      <link href="/2017/04/19/clock-with-CSS-and-JS/"/>
      <url>/2017/04/19/clock-with-CSS-and-JS/</url>
      
        <content type="html"><![CDATA[<p>这是我以前在慕课看的一个课程。</p><p>大概是叫《数学知识在CSS动画中的应用》。</p><p>也没什么要讲的,初中数学水平即可。</p><p><strong> 有兴趣看源码的话,<a href="https://github.com/iamsail/CSS_Demo/blob/master/clock.html" target="_blank" rel="noopener">狠戳这儿</a> </strong></p><hr><iframe src="http://www.sail.name/CSS_Demo/clock.html" style="width:400px;height:400px;"><br></iframe><hr><p><strong> 参考 </strong></p><ul><li><a href="http://www.imooc.com/learn/362" target="_blank" rel="noopener">数学知识在CSS动画中的应用</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一次搬迁</title>
      <link href="/2017/04/15/a-removal/"/>
      <url>/2017/04/15/a-removal/</url>
      
        <content type="html"><![CDATA[<p>前两日参加了中国大学生计算机设计大赛。</p><p>从选出队伍到部署提交作品只有两天，时间很紧。</p><p>中途遇到了一些问题，做些记录。</p><hr><h4 id="One"><a href="#One" class="headerlink" title="One"></a>One</h4><p>在Xshell中执行了reboot,再次访问站点，失败。</p><p>因为http服务不是自启动。其实机器已经跑起来了。</p><p>执行 <code>service httpd start</code></p><p>相关的还有</p><p><code>service mysqld start</code></p><p><code>service mariadb start</code></p><p><code>service php-fpm start</code></p><p>可以通过 <code>netstat -tunlp</code> 检查服务的运行情况</p><h4 id="Tow"><a href="#Tow" class="headerlink" title="Tow"></a>Tow</h4><p>紧接One,centos7.x,已经没有MySQL了,而是 MariaDB。centos7.x以下的版本仍然是MySQL。</p><p>MySQL之父Widenius先生离开了Sun之后，觉得依靠Sun/Oracle来发展MySQL，实在很不靠谱，于是决定另开分支，这个分支的名字叫做MariaDB。</p><p><strong> MariaDB跟MySQL在绝大多数方面是兼容的，对于开发者来说，几乎感觉不到任何不同。 </strong>目前MariaDB是发展最快的MySQL分支版本，新版本发布速度已经超过了Oracle官方的MySQL版本</p><p>更多请看文末的参考</p><h4 id="Three"><a href="#Three" class="headerlink" title="Three"></a>Three</h4><p><strong> apache的web根目录：/var/www/html , 不是/var/www </strong></p><p>我本地开发是wamp环境,web根目录是www</p><h4 id="Four"><a href="#Four" class="headerlink" title="Four"></a>Four</h4><p>Linux下导入SQL文件</p><p><code>mysql -u root -p dbname &lt; filename.sql</code></p><p>filename.sql处填写你的sql文件所在的路径</p><p>dbname是数据库名称,需要提前创建</p><h4 id="Five"><a href="#Five" class="headerlink" title="Five"></a>Five</h4><p>JS脚本中的;一开始用的是全角,导致乱码。应该使用半角的;。</p><h4 id="Six"><a href="#Six" class="headerlink" title="Six"></a>Six</h4><p>修改MariaDB的字符编码</p><p><code>vim /etc/my.cnf</code></p><p>在 [mysqld] 下添加：</p><p><code>character-set-server=utf8</code></p><h4 id="Seven"><a href="#Seven" class="headerlink" title="Seven"></a>Seven</h4><p><strong> <a href="http://man.linuxde.net/systemctl" target="_blank" rel="noopener">systemctl命令</a>是系统服务管理器指令，它实际上将 service 和 chkconfig 这两个命令组合到一起 </strong></p><h4 id="Eight"><a href="#Eight" class="headerlink" title="Eight"></a>Eight</h4><p>因为需要录制一个作品演示视频,使用了<a href="http://wander.leanote.com/" target="_blank" rel="noopener">嘉明</a>推荐的FSCapture</p><h4 id="Nine"><a href="#Nine" class="headerlink" title="Nine"></a>Nine</h4><p>之前不时会有Win10应用商店不能使用,有道也不能联网的问题。</p><p>前阵子在社区看到一个回答,大概是修改Edge/IE设置中的代理。</p><p>当时试了下,解决了我的问题。</p><p>具体记不清了,链接也忘记了保存。算是一个参考吧。</p><hr><p><strong> 参考 </strong></p><ul><li><a href="http://bbs.qcloud.com/forum.php?mod=viewthread&amp;tid=2387&amp;extra=page%3D1" target="_blank" rel="noopener">经验分享 腾讯云新手专区</a></li><li><a href="http://bbs.qcloud.com/thread-1316-1-1.html" target="_blank" rel="noopener">经验分享 CentOS 6.3 环境搭建discuz论坛</a></li><li><a href="http://www.oschina.net/translate/mariadb-vs-mysql-a-comparison" target="_blank" rel="noopener">MariaDB 和 MySQL 比较</a></li><li><a href="http://ask.chinaunix.net/question/556" target="_blank" rel="noopener">MySQL和mariadb区别</a></li><li><a href="https://segmentfault.com/a/1190000007092956?_ea=1234141" target="_blank" rel="noopener">MariaDB与MySQL官方版本的主要区别</a></li><li><a href="http://blog.csdn.net/wzqnls/article/details/53241183" target="_blank" rel="noopener">CentOS7安装MariaDB以及编码注意事项</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>括号匹配</title>
      <link href="/2017/04/14/brace-match/"/>
      <url>/2017/04/14/brace-match/</url>
      
        <content type="html"><![CDATA[<p><strong> 对括号匹配有着特别的感情。在一年多前,初学C++时，就遇见过此题。</strong></p><p><strong> 思想: 左括号进栈,右括号出栈。</strong></p><hr><p>代码中用到了C++,STL中的stack。当然也可以自己封装。</p><p>简要介绍下stack中的各个方法</p><p><code>s.push(x)</code></p><p><strong> 无返回值，将元素x压栈 </strong></p><p><code>s.pop()</code></p><p><strong> 退栈，无返回值 </strong></p><p><code>s.top()</code></p><p><strong> 取栈顶元素，返回栈顶元素 </strong></p><p><code>s.empty()</code></p><p><strong> 判断栈是否为空，如果是空，返回1，否则返回0 </strong></p><p><code>s.size()</code></p><p><strong> 返回栈中元素的个数 </strong></p><hr><p><strong> 实现代码 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;iostream&gt;</span><br><span class="line">#include &lt;stack&gt;</span><br><span class="line">using namespace std;</span><br><span class="line"></span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">stack&lt;char&gt; s;</span><br><span class="line">char a[101];</span><br><span class="line">gets(a);</span><br><span class="line">int flag=0,i,len =strlen(a); // 若flag为1，则不匹配</span><br><span class="line">for(i=0;i &lt; len; i++)&#123;</span><br><span class="line"></span><br><span class="line">switch(a[i])&#123;</span><br><span class="line">case &apos;(&apos;:</span><br><span class="line">case &apos;[&apos;:</span><br><span class="line">case &apos;&#123;&apos;: s.push(a[i]); break;</span><br><span class="line">case &apos;)&apos;:&#123;</span><br><span class="line">if(s.top() != &apos;(&apos;)&#123;</span><br><span class="line">flag = 1;</span><br><span class="line"></span><br><span class="line">&#125; else&#123;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case &apos;]&apos;:&#123;</span><br><span class="line">if(s.top() != &apos;[&apos;)&#123;</span><br><span class="line">flag = 1;</span><br><span class="line"></span><br><span class="line">&#125; else&#123;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">case &apos;&#125;&apos;:&#123;</span><br><span class="line">if(s.top() != &apos;&#123;&apos;)&#123;</span><br><span class="line">flag = 1;</span><br><span class="line"></span><br><span class="line">&#125; else&#123;</span><br><span class="line">s.pop();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">break;</span><br><span class="line">default:break;</span><br><span class="line">&#125;</span><br><span class="line">if(flag)</span><br><span class="line">break;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(!flag &amp;&amp; s.empty())&#123;</span><br><span class="line">cout&lt;&lt;&quot;括号匹配成功&quot;&lt;&lt;endl;</span><br><span class="line">&#125;else&#123;</span><br><span class="line">cout&lt;&lt;&quot;括号匹配失败&quot;&lt;&lt;endl;</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><p><strong> 参考 </strong></p><ul><li><a href="http://blog.csdn.net/sunquana/article/details/13095075" target="_blank" rel="noopener"> c++ STL中栈stack的用法</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> 水题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>is Palindrome</title>
      <link href="/2017/04/11/is-Palindrome-character-string/"/>
      <url>/2017/04/11/is-Palindrome-character-string/</url>
      
        <content type="html"><![CDATA[<p><strong> 判断字符串是否回文 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><span class="line">#include &lt;stdio.h&gt;</span><br><span class="line">int main(int argc, char *argv[])</span><br><span class="line">&#123;</span><br><span class="line">char a[101],s[101];</span><br><span class="line">int i,len,mid,next,top;</span><br><span class="line"></span><br><span class="line">gets(a);  //读入一行字符串</span><br><span class="line">len = strlen(a);  // 求字符串的长度</span><br><span class="line"> mid = len/2 - 1; // 求中点</span><br><span class="line">top = 0;    //栈初始化</span><br><span class="line">// mid 之前的字符依次入栈</span><br><span class="line"></span><br><span class="line">for(i = 0; i &lt;= mid; i++)&#123;</span><br><span class="line">s[++top] = a[i];</span><br><span class="line">&#125;</span><br><span class="line">if(len % 2 == 0)&#123;</span><br><span class="line">next = mid + 1;</span><br><span class="line"></span><br><span class="line">&#125;else&#123;</span><br><span class="line">next = mid + 2;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">// 开始匹配</span><br><span class="line"></span><br><span class="line">for(i = next;i &lt;= len - 1; i++)&#123;</span><br><span class="line">if(a[i] != s[top])</span><br><span class="line">break;</span><br><span class="line">top--;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">if(top == 0)&#123;</span><br><span class="line">printf(&quot;YES&quot;);</span><br><span class="line">&#125;else&#123;</span><br><span class="line">printf(&quot;NO&quot;);</span><br><span class="line">&#125;</span><br><span class="line">return 0;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p><strong> 参考 </strong></p><ul><li>《啊哈！算法》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 水题 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JS数组去重</title>
      <link href="/2017/04/06/array-duplicate/"/>
      <url>/2017/04/06/array-duplicate/</url>
      
        <content type="html"><![CDATA[<p><strong>数组去重,有很多实现的方法。最近学习ES6，发现一种十分简单的办法。</strong></p><p>先看一下比较常规的解决方法。</p><p>一、<strong> 遍历数组,建立新数组，利用indexOf判断是否存在于新数组中,不存在则push进新数组。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let dedupe = (arr) =&gt;&#123;</span><br><span class="line">    let ret = [];</span><br><span class="line">    for(let i = 0, j = arr.length; i &lt; j; i++)&#123;</span><br><span class="line">        if(ret.indexOf(arr[i]) === -1)&#123;</span><br><span class="line">            ret.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>二、<strong> 遍历数组,利用object对象保存数组值,判断数组值是否存在object中,未保存则push到新数组。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">let dedupe = (arr) =&gt; &#123;</span><br><span class="line">    let  j = arr.length,</span><br><span class="line">         i = 0,</span><br><span class="line">       tmp = &#123;&#125;,</span><br><span class="line">       ret = [];</span><br><span class="line"></span><br><span class="line">    for(; i &lt; j; i++)&#123;</span><br><span class="line">        if(!tmp[arr[i]])&#123;</span><br><span class="line">            tmp[arr[i]] = 1;</span><br><span class="line">            ret.push(arr[i]);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>三、<strong> 遍历数组，通过indexOf返回值判断与当前索引是否相当。相等则push入新数组。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">let dedupe = (arr) =&gt; &#123;</span><br><span class="line">    let ret = [];</span><br><span class="line">    arr.forEach(function(item, index ,array)&#123;</span><br><span class="line">        if(arr.indexOf(item) === index)&#123;</span><br><span class="line">            ret.push(item);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>四、<strong> 用到了一点桶排序的思想。以待去重数组的最大值+1为长度,新建数组,用来标记各个值出现的次数。遍历待去重数组,如果只出现一次,则push进入新数组。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">let dedupe = (arr) =&gt; &#123;</span><br><span class="line">    let i = 0,</span><br><span class="line">        maxLength = Math.max.apply(null,arr) + 1,</span><br><span class="line">        //ES6,利用扩展运算符</span><br><span class="line">        // maxLength = Math.max(...arr) + 1,</span><br><span class="line">        ret = new Array(maxLength).fill(0),</span><br><span class="line">        ret2 = [];</span><br><span class="line"></span><br><span class="line">    for(;i &lt; arr.length; i++)&#123;</span><br><span class="line">            ret[arr[i]]++;</span><br><span class="line">            if(ret[arr[i]] == 1)&#123;</span><br><span class="line">                ret2.push(arr[i]);</span><br><span class="line">            &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><hr><p>现在看一下,更简单的方法<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">function dedupe(array)&#123;</span><br><span class="line">    return Array.from(new Set(array));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>用到了两个知识点</p><ul><li><p>ES6中新的数据结构Set。<strong> 它类似于数组,只不过其成员值都是唯一的,没有重复值。</strong></p></li><li><p>Array.from()用于将两类对象转换成真正的数组:类似数组的对象(array-like object) 和可遍历(iterable)的对象,其中包括ES6新增的Set和Map结构</p></li></ul><hr><p><strong> 参考 </strong></p><ul><li>《ECMAScript6 入门》</li></ul>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一些Linux命令(一)</title>
      <link href="/2017/04/01/some-linux-command-one/"/>
      <url>/2017/04/01/some-linux-command-one/</url>
      
        <content type="html"><![CDATA[<p><strong> 切换到root权限 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo su</span><br></pre></td></tr></table></figure><p><strong> 查看系统安装了哪些shell </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chsh -l</span><br><span class="line">cat /etc/shells</span><br></pre></td></tr></table></figure><p><strong> 切换shell </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chsh -s /bin/</span><br></pre></td></tr></table></figure></p><p><strong> 移动/重命名文件 </strong></p><p><a href="http://man.linuxde.net/mv" target="_blank" rel="noopener"><code>mv</code></a></p><hr><p><strong> 显示电脑以及操作系统的相关信息 </strong></p><p><a href="http://man.linuxde.net/uname" target="_blank" rel="noopener">uname</a></p><p>该命令用于打印当前系统相关信息（内核版本号、硬件架构、主机名称和操作系统类型等）</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">-a或--all：显示全部的信息；</span><br><span class="line">-m或--machine：显示电脑类型；</span><br><span class="line">-n或-nodename：显示在网络上的主机名称；</span><br><span class="line">-r或--release：显示操作系统的发行编号；</span><br><span class="line">-s或--sysname：显示操作系统名称；</span><br><span class="line">-v：显示操作系统的版本；</span><br><span class="line">-p或--processor：输出处理器类型或&quot;unknown&quot;；</span><br><span class="line">-i或--hardware-platform：输出硬件平台或&quot;unknown&quot;；</span><br><span class="line">-o或--operating-system：输出操作系统名称；</span><br><span class="line">--help：显示帮助；</span><br><span class="line">--version：显示版本信息。</span><br></pre></td></tr></table></figure><p><strong> 正在运行的内核版本 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /proc/version</span><br></pre></td></tr></table></figure></p><p><strong> 发行版本信息 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat /etc/issue</span><br></pre></td></tr></table></figure></p><hr><p><strong> 检查当前开发的端口 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">netstat -an</span><br></pre></td></tr></table></figure><p><strong> 重新启动iptables </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">service iptables restart</span><br></pre></td></tr></table></figure><hr><h3 id="SELinux"><a href="#SELinux" class="headerlink" title=" SELinux "></a><strong> SELinux </strong></h3><p><strong> 查看现在的支持http的端口有哪些 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -l|grep http</span><br></pre></td></tr></table></figure><p><strong> 为http服务添加新的端xx </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -a -t http_port_t -p tcp 81</span><br></pre></td></tr></table></figure><p><strong> 为http服务删除端口xx </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">semanage port -d -t http_port_t -p tcp 81</span><br></pre></td></tr></table></figure><hr><p><strong> 参考 </strong></p><ul><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li><li><a href="https://yq.aliyun.com/ziliao/56702" target="_blank" rel="noopener">Centos端口关闭与打开命令</a>\</li><li><a href="http://blog.csdn.net/bjbs_270/article/details/6948074" target="_blank" rel="noopener">apache2.x修改默认端口后报 Starting httpd: (13)Permission denied: make_sock: could not bind to address</a></li><li><a href="http://bbs.chinaunix.net/thread-4147071-1-1.html" target="_blank" rel="noopener"> centos下 httpd 进程只有 ipv6的80端口开放，没有 ipv4的端口</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>SMTP Error Could not connect to SMTP host</title>
      <link href="/2017/04/01/PHPMailer-SMTP-connect-failed/"/>
      <url>/2017/04/01/PHPMailer-SMTP-connect-failed/</url>
      
        <content type="html"><![CDATA[<p><a href="https://github.com/iamsail/coalball/tree/gh-pages" target="_blank" rel="noopener">coalball</a>除了提供了QQ和易班第三方登录,还实现了邮件注册。</p><p>是通过<a href="https://github.com/PHPMailer/PHPMailer/" target="_blank" rel="noopener">PHPMailer</a>实现的。</p><p>用于测试的邮箱是163邮箱。</p><p>使用的时候遇到了一个错误,大致如下</p><p>  <strong> SMTP Error: Could not connect to SMTP host. </strong></p><p>于是我查询了官方<a href="https://github.com/PHPMailer/PHPMailer/wiki/Troubleshooting" target="_blank" rel="noopener">wiki</a></p><p><img src="/img/php/phpmailer-error.png" alt="phpmailer-error.png"></p><p>无果。</p><p>最后在thinkphp论坛的一个帖子发现问题所在</p><pre><code>$mail-&gt;Password = &apos;**********&apos;;</code></pre><p><strong> 这儿需要填写的不是邮箱的登录密码,而是独立管理密码[管理smtp协议的那个密码(授权码或者独立管理密码)] </strong></p><hr><p><strong> 参考 </strong></p><ul><li><a href="https://github.com/PHPMailer/PHPMailer/" target="_blank" rel="noopener">PHPMailer</a></li><li><a href="http://www.thinkphp.cn/code/1292.html" target="_blank" rel="noopener">关于phpmailer邮件发送失败以及解决办法</a></li><li><a href="http://mail.163.com/mailhelp/client.htm" target="_blank" rel="noopener">网易邮箱帮助中心</a></li><li><a href="http://help.163.com/10/0312/13/61J0LI3200752CLQ.html" target="_blank" rel="noopener">163邮箱如何开启POP3/SMTP/IMAP服务</a></li><li><a href="http://www.imooc.com/learn/721" target="_blank" rel="noopener">php+mysql模拟队列发送邮件</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> PHP </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>这是二零一七年的春天</title>
      <link href="/2017/03/25/the-spring-in-2017/"/>
      <url>/2017/03/25/the-spring-in-2017/</url>
      
        <content type="html"><![CDATA[<p><strong> 那是一九六九年的秋天,我快满二十岁的时候。</strong></p><p>这是村上春树的《挪威的森林》,第一页的最后一句。</p><p><strong> 那天是二零一七年三月九日。我再次意识到自己已经十九岁。</strong></p><hr><p><strong> 这段时间过得十分匆忙,有些筋疲力尽,心力憔悴。</strong></p><p><strong> 面试的确是一件高强度的事情。</strong></p><p>自上周五收到百度一面的电话,在本周一、三的分别进行了一面、二面。</p><p>一面考察的很宽泛,不过很多是点到为止。总共进行了41分钟。</p><p>二面不愧是压力面,一上来便是闭包、原型链。还有Vue,nodejs,项目优化,前后端分离,AMD,CMD,CommonJS,this的理解,移动端的实践,dom性能优化,repaint,reflow,以及从github上项目的源码考察…将近一个小时。</p><p>好在两面都面得不错。</p><p>二面末尾面试官让我提问,问了四个问题。其中一个是对我二面的评价,有哪些需要改进的地方。</p><p>不曾料想,面试官说,从整个面试过程以及他对我回答的问题所做的记录来看,没有暴露出什么缺点,所有问题的回答都符合他的期望,在对问题回答的时候,往能能谈到很多,说是涉猎很广。</p><p><strong> 作者虽然一向谦虚,但听罢顿觉天空更蓝了。哪怕徐州的天常常是灰蒙蒙的。</strong></p><p>也问了感觉自己学的东西太杂了,对此的担心。面试官亦很耐心的解答,受益匪浅。</p><p>还问了什么时候出二面结果。</p><p>他说,近期会通知我,无论面试结果如何,都还会收到电话。</p><p><strong> 等待是漫长而难熬的。</strong>今天是第三天。明天是周日,想来这电话得下周才能收到了。</p><hr><p><strong> 于是今早跑到图书馆读完了剩下的《挪威的森林》。以排遣这等待。</strong></p><p>相比村上春树,马尔克斯的作品更让我头疼。</p><p>初二读《百年孤独》,读了几十页半途而废。前阵子读《霍乱时期的爱情》,看完唏嘘不已。没领会太多。好书是需要反复读的。</p><p>我还记得,高一某堂英语课,陆冬林说最近他读了《霍乱时期的爱情》。至于课堂的内容是记不得了。</p><p><strong> 自我上幼儿园起,阅过的老师少说也有三百人。不对,是三十人。</strong></p><p><strong> Mr.Lu是很优秀的老师。讲课风趣,对问题的分析十分透彻,语法的讲解也有一套自己的理论。</strong></p><p>我这样讲不是因为我曾担任英语课代表。</p><p>一同担任课代表还有吴霜。</p><p><strong> 我曾几度把吴霜写成无双。此刻敲出wushuang,想起来还蛮好笑的。</strong></p><p>阿Jay有首歌是《无双》。</p><p><strong>《孔雀东南飞》里有句<mark>精妙世无双</mark>。早自习,每每念及此,就想到了霜霜。</strong></p><p>后来她念了文科。</p><p><strong> 对她的印象更多的停在了高一她留短发的日子。笑起来很好看。</strong></p><p>在没人回答问题的时候,Mr.Lu能自己唱着nobody。</p><p>英语报纸上的阅读有A、B、C、D、E篇,<strong> 他会告诉同学这周只看A片，一定要记得看哦。</strong></p><p>有一期的《21世纪英文报》,首版是乌龟的头,官圣沅低声道,龟头。Mr.Lu在讲台重复,是乌龟的头,不是龟头…</p><p>至于他的<mark>陆氏英语</mark>,我倒是记得不真切了。</p><p>但当年,凭借”陆氏英语”记住了不少零碎的东西。</p><p>于我,”撸氏英语”或许更为贴切些。写的C++,JAVA,JavaScript,CSS,PHP,shell,Python不都是英语字母嘛。</p><p><strong> 最好的语言是english,其次才是JavaScript/Python。</strong></p><p>一面发给我的那些资料,全是英文的….</p><p>他是这样讲的【其实看的不会太慢,有些没中文版的 you don’t know 系列好像有人在翻译 那本secret是jquery作者写的 里面有很多他的设计思想。我们不用每句都看懂呀,编程书看的真的不会很慢】</p><p>orz，我还是太菜了。</p><p><strong> 不过的确是得多看优秀的源码,领会他人的设计思想。</strong></p><hr><p>本意是买口琴。</p><p><strong> 毕竟做为一个程序猿,以后肯定是会辗转不少城市。</strong></p><p>口琴方便携带。</p><p>无奈前阵子感冒咳嗽,于是入了吉他。</p><p>近日看吉他书的时候,重新认识了八度。</p><p><strong> 两个相邻的同名音之间的音高距离为八度。</strong></p><p>《八度空间》是最喜爱的几张专辑之一。</p><p>前阵子在<a href="https://lutaonan.com/blog/piano-on-computer-keyboard/" target="_blank" rel="noopener">Randy</a>看到通过自己写的代码,能在键盘演奏钢琴。</p><p>明天就有第一堂吉他课了。</p><p><strong> 希望除了敲有意思的代码,还能弹遍Jay的曲子。</strong></p><hr><p><strong> 这是二零一七年的春天,风还裹挟着末冬的寒意,耳塞传来七里香。</strong></p><p><strong> 合上《挪威的森林》,我扬起脸,透过图书馆三楼的落地窗,望向晃荡在空中的橘黄色风筝,浮想联翩。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改github仓库的语言类型</title>
      <link href="/2017/03/25/alter-language-in-github/"/>
      <url>/2017/03/25/alter-language-in-github/</url>
      
        <content type="html"><![CDATA[<p>有个问题困惑了不久,github所有repo的语言类型都是html</p><p>可一些仓库明明css，js，php的代码更多…</p><p>今天查了下,发现<strong> github是使用 <a href="https://github.com/github/linguist" target="_blank" rel="noopener">Linguist</a> 来detect所使用的语言,会根据项目里文件数目最多的文件类型,识别项目类型。</strong></p><hr><ul><li>解决办法</li></ul><p>项目根目录添加 .gitattributes 文件</p><pre><code>*.languageA linguist-language=languageB</code></pre><p>作用就是把项目里的 languageA 文件, 识别成 languageB 语言。<br>可以修改多个语言，也就是</p><pre><code>*.languageA linguist-language=languageB*.languageC linguist-language=languageD</code></pre><hr><ul><li>windows系统中并不好直接创建名为 .gitattributes 的文件</li><li>会提示 必须键入文件名</li><li><p>通过命令创建文件</p><p>  <code>touch .gitattributes</code></p></li><li><p>如果对命令不熟悉,可以看下我的<a href="http://www.sail.name/2017/02/28/about-the-pin-ying-in-linux/">Ubuntu中的拼音问题</a></p></li></ul><hr><p><strong> 参考 </strong></p><ul><li><a href="https://www.zhihu.com/question/47249333/answer/129215637" target="_blank" rel="noopener">请教如何修改github上仓库的项目语言?</a></li><li><a href="http://www.tuicool.com/articles/bI7f6rE" target="_blank" rel="noopener">修改GitHub上项目语言显示的问题</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> github </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>解决冲突</title>
      <link href="/2017/03/16/resolve-conflict/"/>
      <url>/2017/03/16/resolve-conflict/</url>
      
        <content type="html"><![CDATA[<p>今天在<a href="https://github.com/iamsail/coalball" target="_blank" rel="noopener">coalball</a> merge其他开发人员的commit的时候，出现了冲突。</p><p>挑部分记录下。</p><p>比如执行命令</p><pre><code>git diff</code></pre><p>查看冲突如图</p><p><img src="/img/git/resolve-conflict.jpg" alt="resolve-conflict.jpg"></p><p>从图中我们可以看到</p><pre><code>&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt;&lt; HEAD    #########===========    %%%%%%%%&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;&gt;</code></pre><p>如何知道哪些是我们自己的代码，哪些是别人提交的呢。</p><p>以===========为分界线</p><p>因为HEAD指向的就是当前分支,所以</p><p>上面部分是我们自己的代码,即<code>#########</code><br>下面部分是别人提交的代码,即<code>%%%%%%%%%</code></p><hr><p>然后根据自己的实际情况，修改冲突就ok了。</p><p>vim中dd删除当前行,ndd删除n行。</p><p>更多的vim操作自行百度0.0</p>]]></content>
      
      
      <categories>
          
          <category> Git </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>吃的都是茄科</title>
      <link href="/2017/03/14/all-are-solanaceae/"/>
      <url>/2017/03/14/all-are-solanaceae/</url>
      
        <content type="html"><![CDATA[<p>今天是3月14日。</p><p>习惯性地键入biying,一张很熟悉的图。</p><p><img src="/img/prose/all-are-solanaceae.png" alt="松茎横截图"></p><p>在那些炎热的日子,大抵是下午三四点,赵红老师在讲台上反反复复地讲着植物的横切图,纵切图,以及更多植物分类学的知识。</p><p>我昏昏欲睡,强打着精神。角质膜、皮孔、叶柄、托叶什么的我都忘了。但还记得窗外的阳光着陆在她的黄色连衣裙上。也许不是黄色。</p><p>于我,植物解剖学难度远胜于人体解剖学,甚至是生物化学。</p><hr><p>参加生竞的同学,从一开始接近百人，最后只剩下我们几人。</p><p>那一两年的时间里,学了不少,什么动物分类学,动物行为学,微生物学，遗传学,人体解剖学,植物生理学啥的。</p><p>此刻想起来,所学的,几近忘光了。</p><hr><p>高一暑假,育才举办国际象棋青少年组比赛。作为东道主,年级各学科竞赛的同学都搬迁到分校区上课去了。</p><p>听说,前来参赛的外国友人,看到入住的房间(也就是我们的宿舍),哭着问爸妈为什么厕所没有马桶…后来出去住宾馆了。</p><p>在分校区,我与胖子、好人、曾毅还有另一个同学(忘了名字,且叫做Z君吧),同住一个房间。</p><p>曾毅是我同班同学，学的是物理竞赛。</p><p>胖子与好人同是学数学竞赛的。</p><p>据胖子讲,此前他曾在解一道几百年前某数学家证明的一题。</p><p>这题在书页偏底部。最后一行写着xxx年xxx数学家证明了这</p><p>这题很难,胖子前前后后解了一个月左右。也不肯看解析,试图证明出来以证明自己。</p><p>某日，好人偶然发现他在解这题,告诉他这题是错的。</p><p>胖子大惊,翻开下一页,第一行写着 题是错误的。</p><p>Z君搞的是信息学科竞赛,编程的。</p><p>那是我还不懂编程,更别提代码了。心里想的都是连锁与互换定律。世事难料，如今热爱上了编程。</p><hr><p>最后集训的日子,气氛已经很紧张了。</p><p>那是我这些年来，生物知识储备量的巅峰了。</p><p>有次下午，何媛，陈宇航、我三人一同吃饭。一盘干煸土豆(有辣椒),一份茄子,一份番茄炒蛋,或许还有别的菜。</p><p>吃着吃着,不知是我们中的谁说,哈哈,每道菜都有茄科的植物呢…</p><hr><p>如今,他们有的学了动物医学,有的学了法医,有的研究癌症领域…有的不清楚,而我还在搬砖。</p><p>虽然忘了很多知识,但还是很不错。</p><p>对动物、植物、微生物、生化、人体解剖都有所了解。比从前更留心观察花草。</p><p>闻到雨后扑鼻的泥土气息，心中了然是放线菌的功劳。</p><p>吃土豆的时候,偶尔也会想到,这是茄科呢，辣椒也是。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>使用访问器属性导致堆栈溢出</title>
      <link href="/2017/03/14/use-AccessorProperties-makes-Maximum-call-stack-size-exceeded/"/>
      <url>/2017/03/14/use-AccessorProperties-makes-Maximum-call-stack-size-exceeded/</url>
      
        <content type="html"><![CDATA[<p>最近宅在图书馆老老实实刷红宝书。</p><p>撸访问器属性的时候,自己修改了部分代码,导致堆栈溢出。<strong> 昨夜夜观天象,明白一二。</strong></p><p>以红宝书上的代码进行讲解</p><ul><li>因为我是在node环境下跑的代码,所以alert的语句都改用了console.log</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"> var book = &#123;</span><br><span class="line">        _year: 2004,</span><br><span class="line">        edition: 1</span><br><span class="line">    &#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(book, &quot;year&quot;,&#123;</span><br><span class="line">        get: function()&#123;</span><br><span class="line">            return this.year;</span><br><span class="line">        &#125;,</span><br><span class="line">        set: function(newValue)&#123;</span><br><span class="line"></span><br><span class="line">            if(newValue &gt; 2004)&#123;</span><br><span class="line">                this._year = newValue;</span><br><span class="line">                this.edition += newValue - 2004;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;);</span><br><span class="line"></span><br><span class="line">book.year = 2005;</span><br><span class="line">console.log(book.edition);  //2</span><br></pre></td></tr></table></figure><p>这段代码也就是书上的示例代码，是能够正常执行的,最后输出的结果是2</p><hr><p>然而我写代码的时候并不太规矩，常常改来改去的。现在把示例代码略作改动。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">        _year: 2004,</span><br><span class="line">        edition: 1</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">        year: 2004,</span><br><span class="line">        edition: 1</span><br><span class="line">    &#125;;</span><br></pre></td></tr></table></figure></p><p>且<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(book.edition);</span><br></pre></td></tr></table></figure></p><p>修改为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">console.log(book.year);</span><br></pre></td></tr></table></figure></p><p>现在代码变为<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">    year: 2004,</span><br><span class="line">    edition: 1</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line">Object.defineProperty(book, &quot;year&quot;,&#123;</span><br><span class="line">    get: function()&#123;</span><br><span class="line">        return this.year;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function(newValue)&#123;</span><br><span class="line"></span><br><span class="line">        if(newValue &gt; 2004)&#123;</span><br><span class="line">            this._year = newValue;</span><br><span class="line">            this.edition += newValue - 2004;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br><span class="line"></span><br><span class="line">book.year = 2005;</span><br><span class="line">console.log(book.year);</span><br></pre></td></tr></table></figure></p><hr><p>跑一下<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![stack-size-exceeded.png](/img/JavaScript/stack-size-exceeded.png)</span><br></pre></td></tr></table></figure></p><p>图示的错误就是说<strong> 堆栈溢出了 </strong>。<br>纳闷…</p><hr><p>解释:</p><ul><li><strong> 在ECMAScript中有两种属性:数据属性和访问器属性 </strong></li></ul><p>数据属性有4个描述其行为的特性,分别是</p><ul><li><strong> Configurable </strong>[表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，或者能否把属性修改为访问器属性。默认值为true]</li><li><strong> Enumerable </strong>[表示能否用for-in循环返回。默认值为true]</li><li><strong> Writable </strong>[表示能否修改属性的值。默认值为true]</li><li><strong> Value </strong>(包含这个属性的数据值) [包含这个属性的数据值。读取属性值的时候从这个位置读，写入属性值的时候更新到这个位置，默认值为undefined。]</li></ul><p>这个大家都是比较熟悉的。</p><p>而访问器属性不包含数据值,它们包含一对儿getter和setter函数(这两个函数不是必须的)<br>访问器属性的4个特性如下:</p><ul><li><strong> Configurable </strong>[表示是否能通过delete删除属性从而重新定义属性，能否修改属性的特性，能否把属性修改为访问器属性。默认值为true]</li><li><strong> Enumerable </strong>[表示能否用for-in循环返回。默认值为true]</li><li><strong> Get </strong>[在读取属性时调用的函数。默认值为Undefined]</li><li><strong> Set </strong>[在写入属性时调用的函数。默认值为Undefined]</li></ul><p>特别需要注意的是,<strong> 访问器属性不能直接定义,必须使用Object.defineProperty()来定义。</strong></p><p>有了这些知识，再来分析下上面那段代码.<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">var book = &#123;</span><br><span class="line">    year: 2004,</span><br><span class="line">    edition: 1</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></p><p>此处的year,是一个数据属性,并被赋值为2014。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Object.defineProperty(book, &quot;year&quot;,&#123;</span><br><span class="line">    get: function()&#123;</span><br><span class="line">        return this.year;</span><br><span class="line">    &#125;,</span><br><span class="line">    set: function(newValue)&#123;</span><br><span class="line"></span><br><span class="line">        if(newValue &gt; 2004)&#123;</span><br><span class="line">            this._year = newValue;</span><br><span class="line">            this.edition += newValue - 2004;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;);</span><br></pre></td></tr></table></figure></p><p>在这儿我们又通过<code>Object.defineProperty()</code>定义了一个访问器属性,且同样命名为year。</p><p><strong> 此时之前定义的数据属性year已经over了，被新定义的访问器属性year覆盖掉了。</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">book.year = 2005;</span><br><span class="line">console.log(book.year);</span><br></pre></td></tr></table></figure></p><p><strong> 最后两行代码分别触发了setter和getter函数。</strong></p><p><code>book.year = 2005;</code></p><p>写入属性,触发了setter。[第一段代码，也就是书上的示范代码，也是通过这一语句触发setter函数,修改了edition的值]</p><p>而导致堆栈溢出的就是下面这一句</p><p><code>console.log(book.year);</code></p><p><strong> 这一句的工作是读取访问器属性year,从而触发了getter函数。而getter函数的语句是<code>return this.year;</code><br>这个语句又是读取访问器属性year,再次触发了getter函数。递归无限循环下去,所以堆栈溢出。</strong></p><hr><p>其实仔细些看图片中报错的信息,是可以看出多次调用了Object.get[as year]导致堆栈溢出了。</p><p><strong> 有时bug解决起来费时,是因为对某些基础的地方还没掌握牢固。</strong></p><p><strong> 又或许是许久不曾看过星空了… </strong></p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>小谈盒子模型</title>
      <link href="/2017/03/12/Box-Model/"/>
      <url>/2017/03/12/Box-Model/</url>
      
        <content type="html"><![CDATA[<p>最近通过某前端交流群，讨论的一个问题，发现<strong> 对盒子模型的了解还很浅显。</strong></p><p>背景如下:<br>A君：为啥我设置的input的高度和实际显示的高度有0.8px的偏差。<br><img src="/img/htmlcss/box-sizing.jpg" alt="box-sizing.jpg"></p><p>从图片上的开发者工具，我们可以看到 <strong> style中height为31px,border有1px*2,然后实际的高度却是32.6px。分明是少了0.4px。 </strong></p><p>最终A君解决了这个问题，解决办法是:<strong> input元素的box-sizing默认是content-box，只需要改成border-box即可。</strong></p><hr><p>次日晚上,我在w3school看了下<a href="http://www.w3school.com.cn/cssref/pr_box-sizing.asp" target="_blank" rel="noopener">box-sizing</a></p><p>box-sizing 属性允许您以特定的方式定义匹配某个区域的特定元素。</p><pre><code>box-sizing: content-box|border-box|inherit;</code></pre><ul><li><p>content-box</p><ul><li>这是由 CSS2.1 规定的宽度高度行为。</li><li>宽度和高度分别应用到元素的内容框。</li><li>在宽度和高度之外绘制元素的内边距和边框。</li></ul></li><li><p>border-box</p><ul><li>为元素设定的宽度和高度决定了元素的边框盒。</li><li>就是说，为元素指定的任何内边距和边框都将在已设定的宽度和高度内进行绘制。</li><li>通过从已设定的宽度和高度分别减去边框和内边距才能得到内容的宽度和高度。</li></ul></li><li><p>inherit</p><ul><li>规定应从父元素继承 box-sizing 属性的值。</li></ul></li></ul><hr><p>看到这儿，虽然我没能弄清楚为什么少了0.4px(毕竟图片提供的信息十分有限),但应该能够明白为什么设置 <code>box-sizing:border-box</code>能够解决问题了。因为这种情况下，width的高度已经包括了边框和内边距的高度和宽度了，当然还有内容的宽度和高度了。</p><p>说到box-sizing就避不开了盒子模型了。因为<strong> box-sizing 是用来选择是标准(W3C)盒模型还是IE盒模型的 </strong></p><p><strong> 一个盒模型具备内容(content)、填充/内边距(padding)、边框(border)、边界/外边距(margin)。 </strong></p><p>我们一般所说的盒子模型都是指的标准盒模型。和标准(W3C)盒子模型不同的是:IE盒子模型的 content 部分包含了 border 和 pading。</p><p>也就是说标准盒子模型，width = content.width。IE盒模型 width = content.width + border.width +padding.width 【实际上并没有类似border.width这种写法】</p><p>可以看下这段代码和图片加以理解。</p><pre><code>&lt;style&gt;        .one{            box-sizing: content-box;            background-color: deepskyblue;            width: 150px;            height: 150px;            padding-left: 10px;            border:1px solid green;        }        .tow{            box-sizing: border-box;            background-color: red;            width: 150px;            height: 150px;            padding-left: 10px;            border:1px solid green;        }&lt;/style&gt; &lt;div class=&quot;one&quot;&gt;1&lt;/div&gt; &lt;div class=&quot;tow&quot;&gt;2&lt;/div&gt;</code></pre><hr><p><img src="/img/htmlcss/tow-box-model.png" alt="tow-box-model.png"></p><p>class = “one”<br><img src="/img/htmlcss/content-box.png" alt="content-box.png"></p><p>class = “tow”<br><img src="/img/htmlcss/border-box.png" alt="border-box.png"></p><hr><p>当然最后还是有些困惑的————开篇提到的为什么少了0.4px。于是,又看了看BFC,依然没能解决。</p><p>参考资料:</p><ul><li><a href="http://www.cnblogs.com/lhb25/p/inside-block-formatting-ontext.html" target="_blank" rel="noopener">BFC 神奇背后的原理</a></li><li><a href="http://www.w3school.com.cn/cssref/pr_box-sizing.asp" target="_blank" rel="noopener">box-sizing</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>局部还是全局变量</title>
      <link href="/2017/03/11/local-or-global-variable/"/>
      <url>/2017/03/11/local-or-global-variable/</url>
      
        <content type="html"><![CDATA[<p>在写js的时候，有时使用全局变量可以，局部变量也可以。<br><strong> 推荐使用局部变量 </strong></p><hr><p><strong> 1.访问局部变量比访问全局变量更快 </strong></p><ul><li><p>当在某个环境中为了读取和写入而引用一个标识符，搜索过程是从作用域的前端开始的，向上级逐步查询与给定名字匹配的标识符。</p></li><li><p>如果在局部环境中找到了该标识符，搜索过程停止，变量就绪。</p></li></ul><p><strong> 2.全局变量，需要手动解除 </strong></p><ul><li><p>确保占用更少的内存可以让页面获得更好的性能。而优化内存占用的最佳方式，就是为执行中的代码只保存必要的数据。</p></li><li><p>局部变量会在它们离开执行环境时，自动被解除引用。<strong> 而全局变量还需要手动的将其值设置为null来释放其引用。</strong></p></li><li><p>解除一个值的引用并不意味着自动回收该值所占用的内存。解除引用的真正作用是让值脱离执行环境，以便垃圾收集器下次运行时将其回收。</p></li></ul><hr><p>参考:《JavaScript高级程序设计》</p>]]></content>
      
      
      <categories>
          
          <category> Javascript </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>linux中一些有趣的命令</title>
      <link href="/2017/03/07/some-interesting-command-in-linux/"/>
      <url>/2017/03/07/some-interesting-command-in-linux/</url>
      
        <content type="html"><![CDATA[<p>花了几天时间学习了<a href="https://www.shiyanlou.com/courses/1" target="_blank" rel="noopener">Linux 基础入门(新版)</a><br>有不小的收获。尤其是讲解进程那部分，和正在学习的操作系统相互印证，受益匪浅。</p><p>本文仅仅记录几个有意思的命令</p><hr><ul><li>我的环境[Ubuntu Trusty 14.04(TLS)]</li></ul><h4 id="one"><a href="#one" class="headerlink" title="one"></a>one</h4><p>还记得小时候在小霸王上面玩的小蜜蜂游戏么？它的正统名字应该是Space Invaders:<a href="https://en.wikipedia.org/wiki/Space_Invaders" target="_blank" rel="noopener">太空侵略者</a>。</p><p><img src="/img/linux/SpaceInvaders1.png" alt="SpaceInvaders1.png"></p><p>执行以下命令即可</p><pre><code>sudo apt-get install ninvadersninvadersctrl+C【退出游戏】</code></pre><p><img src="/img/linux/SpaceInvaders2.png" alt="SpaceInvaders2.png"></p><h4 id="tow"><a href="#tow" class="headerlink" title="tow"></a>tow</h4><pre><code>sudo apt-get install bb</code></pre><h4 id="three"><a href="#three" class="headerlink" title="three"></a>three</h4><pre><code>sudo apt-get install libaa-binaafire</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>如何安装/更新/卸载Docker</title>
      <link href="/2017/03/05/how-to-install-docker/"/>
      <url>/2017/03/05/how-to-install-docker/</url>
      
        <content type="html"><![CDATA[<p>因为项目的驱动，开始学习Docker。<br>这里不讲解什么是Docker，只谈怎样安装,更新，卸载Docker。</p><hr><h3 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h3><ul><li>Docker只能运行在Linux环境中</li><li>Docker可以在Windows和Mac系统中使用(需要借助boot2Docker)</li><li>Docker要求必须为64位操作系统</li><li>Linux内核版本最小为3.10(3.10以下的内核存在一些bug,在某些特定场景中有可能会引起容器中的数据丢失)</li></ul><h3 id="安装步骤"><a href="#安装步骤" class="headerlink" title="安装步骤"></a>安装步骤</h3><ul><li><p>我的安装环境是Ubuntu Trusty 14.04(TLS)</p></li><li><p>关于如何查看本机的位数和内核版本</p></li></ul><p>位数：<br><strong> uname -m </strong><br>如果返回结果是i686, 说明是32位<br>如果返回结果是x86_64，说明是64位</p><p>内核版本：<br><strong> uname -r </strong><br>返回结果为形如3.13.0-93-generic，内核在3.10及以上即可</p><p><strong> sudo -s </strong><br>【切换到root】</p><p><strong> which wget </strong><br>【检查是否安装wget工具。如果安装了，将看到wget的路径。反之，会提示没有wget。倘若没有安装wget，则执行以下的命令安装wget<br><strong> sudo apt-get update </strong><br><strong> sudo apt-get install wget </strong>】</p><p><strong> wget -qO- htts://get.Docker.com/ | sh </strong><br>【安装完wget之后，我们就可以使用wget获取Docker安装包】</p><p><strong> (sudo) docker run hello-world </strong><br>【执行命令验证是否安装成功。成功将看到Hello from Docker…..<br>如果你安装失败，你可以看看上面的注意事项】</p><h3 id="更新Docker"><a href="#更新Docker" class="headerlink" title="更新Docker"></a>更新Docker</h3><p><strong> wget -qO- htts://get.Docker.com/ | sh </strong></p><h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><p><strong> sudo apt-get purge lxc-Docker </strong><br>【卸载Docker】</p><p><strong> sudo apt-get autoremove –purge lxc-Docker </strong><br>【卸载Docker安装包和Docker所有的依赖模块】</p><p>以上两条命令,仅仅是删除了安装包和依赖包，Docker所存储的image、container以及Docker所创建的配置文件,都还保留在系统目录下。执行下面的命令可以彻底清楚Docker所保留的数据</p><p><strong> rm -rf /var/lib/Docker </strong></p><hr><h1 id="更新"><a href="#更新" class="headerlink" title="更新"></a>更新</h1><p>今天是2017年9月18日,因为前段时间转为了双系统,win10 + ubuntu,在ubuntu中重新安装了docker。前文所记录的方法是在虚拟机中尝试的,在本机安装中发现该方法没有效果,特此记录下我在Ubuntu Xenial 16.04(TLS)的安装过程。</p><p><strong> 升级包信息，确保APT使用https的方法工作，与安装CA证书 </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update  </span><br><span class="line">  </span><br><span class="line">$ sudo apt-get install apt-transport-https ca-certificates</span><br></pre></td></tr></table></figure></p><p><strong> 添加新的GPG key </strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-key adv --keyserver hkp://p80.pool.sks-keyservers.net:80 --recv-keys 58118E89F3A912897C070ADBF76221572C52609D</span><br></pre></td></tr></table></figure></p><p><strong> 找到你的Ubuntu操作系统的条目，它决定了APT将搜索的包。可能的项 </strong></p><table><thead><tr><th>Ubuntu version</th><th>Repository</th></tr></thead><tbody><tr><td>Precise 12.04 (LTS)</td><td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-precise main</td></tr><tr><td>Trusty 14.04 (LTS)</td><td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-trusty main</td></tr><tr><td>Xenial 16.04 (LTS)</td><td>deb <a href="https://apt.dockerproject.org/repo" target="_blank" rel="noopener">https://apt.dockerproject.org/repo</a> ubuntu-xenial main</td></tr></tbody></table><p><strong> 运行以下命令,将占位符<repo>替换为您的操作系统的条目（Repository） </repo></strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">$ echo &quot;&lt;REPO&gt;&quot; | sudo tee /etc/apt/sources.list.d/docker.list  </span><br><span class="line"></span><br><span class="line">例如：Ubuntu 16.04使用如下命令：</span><br><span class="line">$ echo &quot;deb https://apt.dockerproject.org/repo ubuntu-xenial main&quot; | sudo tee /etc/apt/sources.list.d/docker.list</span><br></pre></td></tr></table></figure><p><strong> 升级APT包索引 </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p><strong> 验证APT从正确的库拉取。<br>   运行下面的命令时，将返回每个可供您安装的Docker版本的条目。每个条目应该有URL   <a href="https://apt.dockerproject.org/repo/" target="_blank" rel="noopener">https://apt.dockerproject.org/repo/</a> </strong></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">apt-cache policy docker-engine</span><br></pre></td></tr></table></figure><hr><h3 id="各Ubuntu版本的必备条件"><a href="#各Ubuntu版本的必备条件" class="headerlink" title="各Ubuntu版本的必备条件"></a>各Ubuntu版本的必备条件</h3><p>· Ubuntu Xenial 16.04 (LTS)<br>· Ubuntu Trusty 14.04 (LTS)<br>对于Ubuntu Trusty和Xenial，建议安装<code>linux-image-extra-*</code>内核包。这些<code>linux-image-extra-*</code>包允许你使用aufs存储驱动。</p><p>安装<code>linux-image-extra-*</code>包：</p><p> 1.在你的Ubuntu主机打开一个终端<br> 2.升级你的包管理器</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装建议的包<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install linux-image-extra-$(uname -r) linux-image-extra-virtual</span><br></pre></td></tr></table></figure></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>作为sudo特权用户登入你的Ubuntu进行安装<br>升级你的APT包索引</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get update</span><br></pre></td></tr></table></figure><p>安装Docker<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo apt-get install docker-engine</span><br></pre></td></tr></table></figure></p><p>启动docker守护进程</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo service docker start</span><br></pre></td></tr></table></figure><p>确认docker安装正确<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><p>该步如果失败,可能是没有权限,执行<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$ sudo -s</span><br><span class="line"></span><br><span class="line">$ sudo docker run hello-world</span><br></pre></td></tr></table></figure></p><p>又或者可以将当前用户添加到docker用户组,具体可以参考我的博文<a href="http://www.sail.name/2017/06/04/add-to-docker-user-group/">添加到docker用户组</a></p><hr><p><strong> 参考资料 </strong><br> <a href="http://blog.csdn.net/qq_25730711/article/details/53508780" target="_blank" rel="noopener">docker-ubuntu14.04下的安装</a><br>《Docker全攻略》ISBN 978-7-121-28238-6<br> <a href="http://blog.csdn.net/a787202867/article/details/53036866" target="_blank" rel="noopener">Ubuntu安装Docker（官方文档翻译）</a><br> <a href="http://www.cnblogs.com/lighten/p/6034984.html" target="_blank" rel="noopener">Ubuntu16.04安装docker</a><br> <a href="https://segmentfault.com/q/1010000008664120/a-1020000008799199" target="_blank" rel="noopener">Ubuntu安装docker run hello-world无法连接仓库？1</a>   </p>]]></content>
      
      
      <categories>
          
          <category> Docker </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>p标签不能嵌套块级元素</title>
      <link href="/2017/03/02/something-about-tag-p/"/>
      <url>/2017/03/02/something-about-tag-p/</url>
      
        <content type="html"><![CDATA[<p>今天周玥问了我一个问题。<br>问题解决的关键在于<strong> P标签不能嵌套其他块级元素。</strong></p><p>这个之前遇见过，却渐渐忘却了，今天记录下来。</p><hr><p>比如有这样一段代码</p><p> <img src="/img/htmlcss/p-qiantao-one.png" alt="p-qiantao1.png"></p><p>在浏览器中却会被渲染成</p><p> <img src="/img/htmlcss/p-qiantao-tow.png" alt="p-qiantao2.png"></p><hr><p>在对p写的样式中,和文本有关的样式都没有了作用的对象。<br>p标签不能嵌套其他的块级元素，导致解析出来的html与原本的有出入。</p><hr><ul><li>参考</li><li><a href="http://blog.csdn.net/dynadotwebb/article/details/17787355" target="_blank" rel="noopener">常见的块状元素与内联元素</a></li><li><a href="http://wuxy720.iteye.com/blog/2325985" target="_blank" rel="noopener">对p标签嵌套块级元素的思考</a></li></ul>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu中的拼音问题</title>
      <link href="/2017/02/28/about-the-pin-ying-in-linux/"/>
      <url>/2017/02/28/about-the-pin-ying-in-linux/</url>
      
        <content type="html"><![CDATA[<p><strong> 先分享两个资源[工具] </strong></p><ul><li><a href="http://man.linuxde.net/" target="_blank" rel="noopener">Linux命令大全</a></li><li><a href="http://www.linuxde.net" target="_blank" rel="noopener">linuxde.net</a></li></ul><hr><p>今天在Ubuntu,发现打汉字有问题,例如，输入gong却会出现guoneng</p><p><img src="/img/linux/pinying.png" alt="pinying.png"></p><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li><a href="http://www.xitongzhijia.net/xtjc/20160229/68044.html" target="_blank" rel="noopener">参考</a></li><li>在终端输入ibus-daemon -drx 即可</li><li>解决完毕</li></ul>]]></content>
      
      
      <categories>
          
          <category> Linux </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>恢复启动项</title>
      <link href="/2017/02/25/recover-starting-items/"/>
      <url>/2017/02/25/recover-starting-items/</url>
      
        <content type="html"><![CDATA[<p><strong> 从本篇博文开始，使用云打赏，方便大家更好的支持我0.0<br>感谢康虹同学在去年博客初期的第一次打赏支持 </strong></p><p>近几个月，一直有两个问题困扰在心头，虽不要命，也颇有些郁闷。<br>两个问题分别是</p><ul><li>虚拟机的centos系统连不上网</li><li>win10的应用商店无法使用</li></ul><p>我陆陆续续的尝试去解决，试了很多种方法，一直没能成功。</p><p>机缘巧合下，昨天顺利解决了，特此记录下来。如果你也曾尝试了许多方法，没能成功，或许可以这一试。</p><hr><h4 id="虚拟机的centos系统连不上网"><a href="#虚拟机的centos系统连不上网" class="headerlink" title="虚拟机的centos系统连不上网"></a>虚拟机的centos系统连不上网</h4><p>在解决这个问题时，当然有两个问题卡住了我<br>一个就是网络和共享中心，连接网络的属性是一片空白。<br><img src="/img/codelife/wlan-is-blank.png" alt="wlan-is-blank.png"><br>另一个就是服务中的Network Setup Service,始终不能启动。</p><p><strong> 解决办法:卸载掉电脑中的什么金山毒霸，QQ管家，360管家之类的软件，且在卸载之前，在软件中恢复之前被禁掉的所有开机启动项 </strong></p><p><strong> 意外之喜 </strong></p><ul><li>应用商店，之前解决了很久，也不能正常使用的问题就好了</li><li>有道在使用ss不能查词的问题也好了</li></ul><p>就这样，恢复启动项解决了一系列问题</p><hr><p>不过跑在虚拟机的centos仍然不能上网。桥接和net都有尝试过。万般无奈，我重新下载了一个镜像，新装了一个就能上网了。不过新装的是Ubuntu，想来centos也是可以的。</p><p>这样也能充分利用我的DELLP2417H，一个屏幕跑win10，一个跑Ubuntu<br><img src="/img/codelife/desktop.png" alt="desktop.png"><br><img src="/img/codelife/lover.png" alt="lover.png"></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么webstorm点击设置无效</title>
      <link href="/2017/02/21/why-websotrm-can-not-set/"/>
      <url>/2017/02/21/why-websotrm-can-not-set/</url>
      
        <content type="html"><![CDATA[<p><strong> 之前我遇到一个问题，就是自己的webstorm点击”设置”无效,但是在phpstorm却可以。</strong></p><p>当时没解决，我也就搁置了这个问题，毕竟我的主力开发工具就是phpstorm。webstorm对我可有可无。</p><p>前几天写python，pycharm也遇到了点击设置无效的问题。</p><p>查资料发现，是因为 <strong> 软件的汉化包有问题，导致了点击设置无效 </strong>。</p><p>刚好，昨晚在一个技术交流群，看见其他人也遇到这个问题。故记录下来，后之来者，亦将有感于斯文。</p><hr><h4 id="汉化包的问题"><a href="#汉化包的问题" class="headerlink" title="汉化包的问题"></a>汉化包的问题</h4><ul><li>可能是汉化包版本和软件版本不一致导致的</li><li>作死，比如把phpstorm的汉化包拿到另一个webstorm用</li></ul><h4 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h4><ul><li>找到版本一致的汉化包</li><li>去掉lib目录下的汉化包，恢复英文的使用</li><li>重装软件，不要装汉化包了</li></ul>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>为什么行末是\</title>
      <link href="/2017/02/19/why-backslash-at-end/"/>
      <url>/2017/02/19/why-backslash-at-end/</url>
      
        <content type="html"><![CDATA[<p>假期初学VUE，写todolist的时候，发现字符串换行的时候，末尾有\。</p><p><img src="/img/codelife/backslash-1.jpg" alt="backslash-1.jpg"><br><img src="/img/codelife/backslash-2.jpg" alt="backslash-2.jpg"></p><p>别人给我的解释是，<strong> 表示字符串还没结束。</strong><br>这个说法是不太准确的。</p><hr><p>今天看python基础指南(第二版)明白了。</p><ul><li>普通字符串(py中还有长字符串,用三个引号代替普通引号)可以跨行，如果一行之中最后一个字符是反斜线，那么，换行符本身就”转义”了，也就是被忽略了。</li></ul><p>所以字符串换行的时候，末尾有\，是因为，转义掉行末的换行符。</p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>旋转的立方体</title>
      <link href="/2017/02/16/rotary-cube/"/>
      <url>/2017/02/16/rotary-cube/</url>
      
        <content type="html"><![CDATA[<h3 id="源码"><a href="#源码" class="headerlink" title="源码"></a><a href="https://github.com/iamsail/CSS_Demo/blob/gh-pages/rotary-cube.html" target="_blank" rel="noopener">源码</a></h3><h4 id="更多CSSdemo"><a href="#更多CSSdemo" class="headerlink" title="更多CSSdemo"></a><a href="https://github.com/iamsail/CSS_Demo/tree/gh-pages" target="_blank" rel="noopener">更多CSSdemo</a></h4><ul><li>参考:</li><li><a href="http://www.imooc.com/learn/77" target="_blank" rel="noopener">CSS3 3D 特效</a></li></ul><hr><iframe src="http://www.sail.name/CSS_Demo/rotary-cube.html" style="width:500px;height:500px;"><br></iframe>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>常用的cmd命令</title>
      <link href="/2017/02/07/common-cmd-command/"/>
      <url>/2017/02/07/common-cmd-command/</url>
      
        <content type="html"><![CDATA[<p>很少用到cmd命令。</p><p>把一些常用的记录下来，毕竟某些时候还是很有用的。比如<a href="http://www.sail.name/2017/01/22/shortcuts-not-know/">here…</a></p><p>更多请看<a href="http://baike.baidu.com/link?url=TPZ_0K086Z7KlDV6pjUgK5myUt34mlp87xV3OET_OUgUC0ZIRjSXGkVJB2HMceF9DUMj0WBTk0NkEkMdusX_j532v8wseaxNNkCLrB-ozMu" target="_blank" rel="noopener">CMD命令</a></p><hr><ul><li>tsshutdn——-60秒倒计时关机命令 </li><li>regedit.exe—-注册表 </li><li>ronon- ce -p —-15秒关机 </li><li>taskmgr——–任务管理器 </li><li>cmd.exe——–CMD命令提示符 </li><li>Clipbrd——–剪贴板查看器 </li><li>calc———–启动计算器 </li><li>cleanmgr——-垃圾整理</li><li>devmgmt.msc— 设备管理器</li><li>explorer——-打开资源管理器</li><li>notepad——–打开记事本</li><li>magnify——–放大镜实用程序</li><li>mspaint——–画图板</li><li>mstsc———-远程桌面连接</li><li>osk————打开屏幕键盘</li><li>regedt32——-注册表编辑器</li><li>del 删除文件</li><li>rd  删除空目录（目录中不能有子目录和文件）</li><li>deltree  删除目录并同时删除目录中的子目录以及文件</li><li>md　目录名 创建目录</li><li>type 文件名 显示文本文件的内容</li></ul><hr><h4 id="关于路径"><a href="#关于路径" class="headerlink" title="关于路径"></a>关于路径</h4><ol><li><p>当前盘符<br> cd 路径</p></li><li><p>不同盘符间<br> cd /d 路径</p></li><li><p>技巧<br><strong>拖拽文件进入CMD即可得到路径</strong></p></li></ol>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>两种拖延</title>
      <link href="/2017/02/07/tow-kind-of-procrastination/"/>
      <url>/2017/02/07/tow-kind-of-procrastination/</url>
      
        <content type="html"><![CDATA[<p>近日看了<a href="http://open.163.com/movie/2016/3/Q/E/MBHQSM52F_MBI15O7QE.html" target="_blank" rel="noopener">《你有拖延症吗》</a>。颇有感触。</p><p>什么东西都能分个类，带把的不带把的，带吧的不带吧的，拖延也不例外。</p><p>拖延有二，有deadline和没有deadline的。有deadline的，拖延的影响就会被限制在一定的日期内。因为后期惊慌怪兽会出现。另一种是没有deadline的。譬如，如果你想在某一个领域自学成才————比如学个艺术、创个业又或是烧得一手好菜————这些事情开始都是没有截止日期的，因为开始不会有什么变化。<strong> 直到你拼尽全力，辛勤投入，才会有一点起色，你才能看到进展。</strong></p><p>还有很多其他重要的事情，也是没有截止日期的。比如 <strong> 看望家(佳)人、锻炼身体、保持健康、维系感情。</strong></p><p>如果说拖延症患者处理这些困难的唯一机制是惊慌怪兽的话，那就有问题了。</p><p>因为在这些没有截止日期的情况下，惊慌怪兽是不会现身的，没有唤醒它的条件。所以这一类拖延的后果是没有限制的，它们会不断肆意延伸，和有截止日期的好笑的短期拖延相比，<strong> 这种长时期的拖延，更不易被人察觉，也更少被谈论到。它常常在无声无息中折磨人们，可以说，是大部分长期抑郁和悔恨的根源。</strong></p><p>在<a href="http://www.sail.name/2017/01/23/2016-summary/">《2016，啵啵啵》</a>,我曾写到<strong>“自我接触web以来，这种情况倒是很常见。不少时候所写的代码并非自己所想，因为项目的原因，迫使我去学习。跳出舒适区，的确带来很大的收获，而项目的推动，可以让自己在较短的时间，完成更多的工作。” </strong></p><p>现在看来，能够如此，也是因为有deadline这个惊慌怪兽。而到了寒假，这个效率，实在是惨不忍睹。</p><p>多少人,因为”舒适”,一拖再拖,蹉跎了岁月,埋葬了种种可能。<br><strong>让他们沮丧的不是没有实现梦想，而是他们甚至还没有开始追寻梦想。</strong></p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>2016，啵啵啵</title>
      <link href="/2017/01/23/2016-summary/"/>
      <url>/2017/01/23/2016-summary/</url>
      
        <content type="html"><![CDATA[<p><strong> 现在是2017年，1月份也走到了尾巴。</strong></p><p>因某些原因，写总结这事一拖再拖，写它的欲望几近消失殆尽。<strong> 但现在才是写总结的好时候，平静些审视自己总是好的。</strong></p><h4 id="2016年末"><a href="#2016年末" class="headerlink" title="2016年末"></a>2016年末</h4><p>预想元旦节放松一下，顺便学习VUE。可临时需要写一个易班的小项目(后台写了三天，前台写了一天，部署费了点功夫)。打乱了计划。</p><p>自我接触web以来，这种情况倒是很常见。不少时候所写的代码并非自己所想，因为项目的原因，迫使我去学习。跳出舒适区，的确带来很大的收获，而项目的推动，可以让自己在较短的时间，完成更多的工作。</p><h4 id="再往前"><a href="#再往前" class="headerlink" title="再往前"></a>再往前</h4><p>搭建了<a href="http://www.sail.name/2016/12/01/first/">自己的博客</a>，是hexo驱动的，huno主题。本拟打算自己搭建，但鉴于自己对设计知识的欠缺，以及对技术的一些考量，选择了hexo。虽然现在的不错，但可以更好。今年或许会自己写一个hexo主题，又或许搬迁博客，用VUE，Nodejs，mongodb从头搭建一个。</p><h4 id="十月"><a href="#十月" class="headerlink" title="十月"></a>十月</h4><p><strong> 那段每天早上七八点和<a href="blog.badwolfs.cn">谢心斌</a>钻进妓院办公室撸码，每晚十点多钟被保安大叔追出学院楼的日子让人怀念。入手了戴尔P2417H(23.8英寸)。还花了一周的晚上写了一个页面，赚了六百元。这是我撸码赚的第二桶金,虽然这桶确乎是小了些。</strong></p><h4 id="九月"><a href="#九月" class="headerlink" title="九月"></a>九月</h4><p>加入学生在线(翔工作室)后端组，在团队中学习，和一个人学习多少有些不同。自己还有很多不足。</p><h4 id="六月二十四日"><a href="#六月二十四日" class="headerlink" title="六月二十四日"></a>六月二十四日</h4><p>阿Jay的《周杰伦的床边故事》发行。《床边故事》、《土耳其冰淇淋》、《前世情人》依然很fantasy。《床边故事》电台版是六月十日上午十点十分首播的，插着耳机听完了。电台版音质不是太好的，但一如我十多年前，第一次听《龙拳》，就喜欢上。接下来几个月，《床边故事》听了上千次。其次是《告白气球》。从四岁左右，用表哥的复读机播放着卡带，到mp3，，PC，手机，听杰伦十四年了。无论是jay，小红帽，叶妈，还是惊叹号，小十三，十四，都是我心中的top。</p><h4 id="四月"><a href="#四月" class="headerlink" title="四月"></a>四月</h4><p>选修了张召浦老师的Web前端设计与开发。为我推开了一扇门。我也弃坑MFC，转向WEB。</p><h4 id="一月，又或者是二月"><a href="#一月，又或者是二月" class="headerlink" title="一月，又或者是二月"></a>一月，又或者是二月</h4><p>也就是大一的寒假，对计算机还很懵逼，在HDU刷了波水题。</p><hr><h4 id="2016，也有不少可以改进的地方"><a href="#2016，也有不少可以改进的地方" class="headerlink" title="2016，也有不少可以改进的地方"></a>2016，也有不少可以改进的地方</h4><ul><li>刷屏浪费了一些时间，效率可以更高些</li><li>看的课外书也比往年少了些</li><li>下半年常常晚睡,作息不规律</li><li>下半年几乎没怎么锻炼</li><li>读书笔记，有的书只做了一半，遗憾</li><li>Code Reviwe太少</li><li>技术上深度不够(和我学习的时间也有关系)</li></ul><h4 id="2017"><a href="#2017" class="headerlink" title="2017"></a>2017</h4><ul><li>写更多有意思的代码</li><li>多做些Code Reviwe</li><li>坚持写博客</li><li>多学习几道菜</li><li>多看看书</li><li>吹吹口琴</li></ul><hr><h4 id="手起键落，鸡年大吉吧"><a href="#手起键落，鸡年大吉吧" class="headerlink" title=" 手起键落，鸡年大吉吧 "></a><strong> 手起键落，鸡年大吉吧 </strong></h4>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 年度总结 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我不知道的快捷键</title>
      <link href="/2017/01/22/shortcuts-not-know/"/>
      <url>/2017/01/22/shortcuts-not-know/</url>
      
        <content type="html"><![CDATA[<h3 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h3><p>触控板不知道为什么失效，搞了半天不行。然后我准备禁用设备，再重启，结果把鼠标禁用了，导致<strong>鼠标和触控板</strong>都移动不了，win10又不能直接进入安全模式，不知如何解决？</p><hr><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h5 id="最后我在群里求助，在小志的指点下，很快解决了问题。"><a href="#最后我在群里求助，在小志的指点下，很快解决了问题。" class="headerlink" title="最后我在群里求助，在小志的指点下，很快解决了问题。"></a>最后我在群里求助，在<strong>小志</strong>的指点下，很快解决了问题。</h5><p><strong> 鼠标和触控板都失效，那就键盘操作 </strong></p><ul><li>运行(Win+R),输入”devmgmt.msc”,回车,打开“设备管理器”</li><li>tab键切换焦点，找到需要重启的设备</li><li><strong>shift-f10右键菜单</strong></li><li>方向键找到需要启动项,回车,完工。</li></ul><p><strong>感谢小志</strong><br><img src="/img/codelife/talk-with-linxz.png" alt="talk-with-linxz"></p><hr><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>这个问题卡住我的地方在于，不知道<strong> shift-f10右键菜单 </strong>，这快捷键。</p><p>然而,此前我一度认为对快捷键的使用已经有一定的水准了,撸起代码来，也是指尖生风。</p><hr><p><strong>前路漫漫,码在路上</strong></p>]]></content>
      
      
      <categories>
          
          <category> 代码人生 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>JSON必知必会</title>
      <link href="/2016/12/18/JSON1/"/>
      <url>/2016/12/18/JSON1/</url>
      
        <content type="html"><![CDATA[<p>最近看了《JSON必知必会》，做些记录。其实主要是想讲讲<strong>语法验证和一致性验证</strong>。</p><p><strong>文末亦有书籍的相关信息(书名，作者，ISBN)。</strong></p><h2 id="基础知识"><a href="#基础知识" class="headerlink" title="基础知识"></a>基础知识</h2><p><strong>老司机可以跳过这段</strong></p><p>什么是JSON。JSON是一种<strong>数据交换格式</strong>。数据交换格式是一种在不同平台间传递数据的文本格式。除JSON外，你也可能听说过XML这种数据交换格式。像XML和JSON这样的数据交换格式非常重要，我们需要它们来实现不同系统间的数据交换。</p><p>JSON是一种被许多系统用于交换数据格式的数据交换格式，但<strong>不是所有的系统都支持使用JSON来交换数据。</strong></p><p>JSON的全称是Javascript Object Notation(Javascript对象表示法)。JSON基于Javascript对象字面量。JSON独立于编程语言（你不必先学习JS）。</p><p>当然如果你会JS，那就再好不过了。</p><h4 id="什么是表示法"><a href="#什么是表示法" class="headerlink" title="什么是表示法"></a>什么是表示法</h4><p>一个用于表示诸如数字或单词等数据的字符系统</p><h4 id="什么是字面量"><a href="#什么是字面量" class="headerlink" title="什么是字面量"></a>什么是字面量</h4><p>所谓字面量，是对数据值的具体表示。<strong>它的字面意思与其想要表达的意思完全一致。</strong>    </p><pre><code>a=5a=a+5</code></pre><p>a的值是10，是一个变量。这里，5就是5，是字面量</p><p>JSON的表示形式是名称-值对。也叫键-值对，属性-值对，或者字段-值对。<br>JSON中使用冒号（：）来分隔名称和值。名称始终在左侧，值始终在右侧。</p><p><strong>比如，使用JSON来描述我的内裤</strong></p><pre><code>{    &quot;brand&quot;:&quot;CK&quot;,    &quot;Color&quot;:&quot;black&quot;,    &quot;size&quot;:23}</code></pre><p>JSON中的名称-值对列表被花括号包裹</p><p><strong>名称必须被双引号包裹，而值并不是总是需要被双引号包裹。</strong></p><p>当值是字符串时，必须使用双引号。而在json中，还有数字、布尔值、数组、对象、null等其他数据类型，而这些都不应该被双引号包裹。</p><p>双引号中的名称可以是任何有效的字符串，例如</p><pre><code>&quot;My animal&quot;:&quot;cat&quot;&quot;Sail&apos;s animal&quot;:&quot;dog&quot;</code></pre><p>在JSON中是完全合法的。但是最好不要这样做。</p><p>因为，JSON中的名称-值对是一种对许多系统都十分友好的数据结构，<strong>而使用空格和特殊字符（字母和数字以外）忽略了可移植性（以一种双方系统都兼容的方式在平台间传递信息）。如果我们这样做的话，会降低JSON数据的可移植性</strong></p><hr><h3 id="JSON文件"><a href="#JSON文件" class="headerlink" title="JSON文件"></a>JSON文件</h3><p>JSON这种数据交换格式是可以作为独立的文件存在于文件系统中的。它的文件扩展名非常好记.json。</p><h3 id="JSON的媒体类型"><a href="#JSON的媒体类型" class="headerlink" title="JSON的媒体类型"></a>JSON的媒体类型</h3><p>媒体类型也叫作，互联网媒体类型，内容类型，MIME类型<br>它使用“类型/子类型”这种格式来表示，比如text/html<br>JSON的MIME类型是application/json</p><h3 id="JSON中的布尔类型"><a href="#JSON中的布尔类型" class="headerlink" title="JSON中的布尔类型"></a>JSON中的布尔类型</h3><p><strong>只能使用小写 true或false，其他的TRUE/FALSE都是错误的</strong></p><p><strong>JSON中的null类型，也必须使用小写</strong></p><hr><h2 id="语法验证"><a href="#语法验证" class="headerlink" title="语法验证"></a>语法验证</h2><p>语法验证关注的是JSON的格式，检测我们的JSON语法是否正确（是否被被花括号包括，名称-值对是否以逗号分隔）。</p><p>JSON语法验证工具</p><ul><li><a href="https://jsonformatter.curiousconcept.com/" target="_blank" rel="noopener">JSON Formatter &amp; Validator</a></li></ul><p>这是一个带有配置选项、能够高亮错误且UI很棒的格式化工具。经过处理的JSON会显示在两个窗口，一个用于展示JSON的树/节点结构，类似于可视化工具，另一个用于复制/粘贴格式化后的代码</p><ul><li><a href="http://www.jsoneditoronline.org/" target="_blank" rel="noopener">JSON Editor Online</a></li></ul><p>这是一个集验证、格式化和可视化工具于一身的JSON工具。错误提示会显示在出错的那一行。除了验证以外，还会显示解析错误的详情，右边的可视化工具使用树/节点的形式来展示JSON。</p><ul><li><a href="http://jsonlint.com/" target="_blank" rel="noopener">JSONLint</a></li></ul><p>这是一个毫不花哨的JSON验证工具。简单的复制、粘贴、验证即可。也可以友好地格式化你的JSON。</p><p>以上都是语法验证工具。</p><p><strong>一致性验证关注的是其独特的数据结构，</strong>会检测我们的数据是否包含name，breed和age等信息。它还会检测<br>age的值是不是数字，name的值是不是字符串，等等……</p><hr><h2 id="一致性验证"><a href="#一致性验证" class="headerlink" title="一致性验证"></a>一致性验证</h2><p>JSON验证器负责验证语法错误，<strong>JSON Schema负责提供一致性验证。</strong></p><p>JSON Schema(Schema意为模式)，数据交换中的一种虚拟“合同”。<br>JSON Schema是数据接收方的第一道防线，也是数据发送方节约时间、保证数据正确的好工具。</p><p>JSON Schema可以解决以下有关一致性验证的问题</p><ul><li><p><strong>值的数据类型是否正确？</strong><br>可以具体规定一个值是数字、字符串类型</p></li><li><p><strong>是否包含数据所需要的数据？</strong><br>可以具体规定哪些数据是需要的，哪些是不需要的</p></li><li><p><strong>值的形式是不是我需要的？</strong><br>可以指定范围、最小值和最大值</p></li></ul><p>尽管JSON已经相当成熟，但JSON Schema仍在开发当中。截至2015年4月，JSON Schema最新版是草拟版本4。当然这并不意味着你现在不可以使用它，这仅仅说明了它仍旧在成长当中，且将来会做得更好。</p><p>JSON Schema使用JSON来书写，所以几步就能掌握它。<br>首先，需要在JSON第一个名称-值对中，声明一个schema文件。</p><pre><code>{    &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;}</code></pre><p>第二个名称-值对，应该是JSON Schema文件的标题</p><pre><code>{    &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,    &quot;title&quot;:&quot;cat&quot;}</code></pre><p>第三个名称-值对，要<strong>定义需要在JSON中包含的属性。</strong>“properties”的值实质上是我们想要的JSON的名称-值对的骨架。</p><pre><code>{    &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,    &quot;title&quot;:&quot;cat&quot;,    &quot;properties&quot;:{    &quot;name&quot;:{        &quot;type&quot;:&quot;string&quot;       },    &quot;age&quot;:{        &quot;type&quot;:&quot;number&quot;,        &quot;description&quot;:&quot;your cat&apos;s age in years.&quot;       },    &quot;declawed&quot;:{        &quot;type&quot;:&quot;boolean&quot;      },    &quot;description&quot;:{                &quot;type&quot;:&quot;string&quot;     }    }}</code></pre><p>如果想实现某些字段不能漏填，需要加上在”$schema”，”title”，”properties”后面加上第四个名称-值对，<strong>它的名称是<br>“required”,值为一个数组，数组中包含必填字段。</strong></p><p>假设”name”,”age”,”declawed”是必填字段，所以把它们加入数组。”description”不是必填字段，就不应加入数组</p><pre><code>{    &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,    &quot;title&quot;:&quot;cat&quot;,    &quot;properties&quot;:{    &quot;name&quot;:{        &quot;type&quot;:&quot;string&quot;       },    &quot;age&quot;:{        &quot;type&quot;:&quot;number&quot;,        &quot;description&quot;:&quot;your cat&apos;s age in years.&quot;       },    &quot;declawed&quot;:{        &quot;type&quot;:&quot;boolean&quot;      },    &quot;description&quot;:{                &quot;type&quot;:&quot;string&quot;     }    }，    &quot;required&quot;:[        &quot;name&quot;,        &quot;age&quot;,        &quot;declawed&quot;    ]}</code></pre><p>例如</p><pre><code>{    &quot;name&quot;:&quot;Fluffy&quot;,    &quot;age&quot;:2,    &quot;declawed&quot;:&quot;false&quot;,    &quot;description&quot;:&quot;hello world.&quot;}{    &quot;name&quot;:&quot;Fluffy&quot;,    &quot;age&quot;:2,    &quot;declawed&quot;:&quot;false&quot;}</code></pre><p>以上两个都是合法的JSON。</p><p>需要提一下的是，如果你JSON Schema中不包含”required”名称-值对，那么将不会有必填项。<strong>一个没有任何名称-值对的空JSON对象也被认为是合法的。</strong>例如</p><pre><code>{}</code></pre><p>也是合法的JSON。</p><p>现在还有一个问题，值的形式是不是我们所需要的？比如用户名不能超过30个字符，年龄不为负数等。</p><pre><code>{    &quot;$schema&quot;: &quot;http://json-schema.org/draft-04/schema#&quot;,    &quot;title&quot;:&quot;cat&quot;,    &quot;properties&quot;:{    &quot;name&quot;:{        &quot;type&quot;:&quot;string&quot;,        &quot;minLength&quot;:3,        &quot;maxLength&quot;:20       },    &quot;age&quot;:{        &quot;type&quot;:&quot;number&quot;,        &quot;description&quot;:&quot;your cat&apos;s age in years.&quot;,        &quot;minmum&quot;:0       },    &quot;declawed&quot;:{        &quot;type&quot;:&quot;boolean&quot;      },    &quot;description&quot;:{                &quot;type&quot;:&quot;string&quot;     }    }，    &quot;required&quot;:[        &quot;name&quot;,        &quot;age&quot;,        &quot;declawed&quot;    ]}</code></pre><p>以上只是JSON Schema的冰山一角，JSON Schema还支持正则表达式等。<br>如果你希望深入了解掌握JSON Schema，可以访问以下链接</p><ul><li><a href="http://json-schema.org/" target="_blank" rel="noopener">JSON Schema主页</a></li></ul><p>JSON Schema在线检测工具</p><ul><li><a href="http://jsonschemalint.com/#/version/draft-05/markup/json" target="_blank" rel="noopener">JSON Schema Lint</a></li><li><a href="http://www.jsonschemavalidator.net/" target="_blank" rel="noopener">JSON Schema Validator</a></li></ul><p>《JSON必知必会》一书还讲到了一些安全方面的问题，跨站请求伪造，注入攻击等。</p><p>有兴趣的话可以买来看看。</p><p><i>Introduction to Javascript Object Notation<i> by Lindsay Bassett(O’Reilly).<br>Copyright 2015 Lindsay Bassett,978-1-491-92948-3.</i></i></p><p><img src="/img/read/JSONbzbh.png" alt="《JSON必知必会》"></p>]]></content>
      
      
      <categories>
          
          <category> JSON </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>一行代码实现太极图(阴阳八卦)</title>
      <link href="/2016/12/09/yinyang/"/>
      <url>/2016/12/09/yinyang/</url>
      
        <content type="html"><![CDATA[<h3 id="用CSS实现太极图"><a href="#用CSS实现太极图" class="headerlink" title="用CSS实现太极图"></a>用CSS实现太极图</h3><p>之前有看别人用CSS实现太极图，写了老长的代码。<br>不过第一次见的时候，还是觉得挺好玩的。<br>CSS如下(<a href="http://www.sail.name/CSS_Demo/%E9%98%B4%E9%98%B3%E5%85%AB%E5%8D%A6.html">效果预览</a>):</p><pre><code> #yin-yang {    width: 96px;    height: 48px;    background: #eee;    border-color: red;    border-style: solid;    border-width: 2px 2px 50px 2px;    border-radius: 100%;    position: relative;}#yin-yang:before {    content: &quot;&quot;;    position: absolute;    top: 50%;    left: 0;    background: #eee;    border: 18px solid red;    border-radius: 100%;    width: 12px;    height: 12px;}#yin-yang:after {    content: &quot;&quot;;    position: absolute;    top: 50%;    left: 50%;    background: red;    border: 18px solid #eee;    border-radius:100%;    width: 12px;    height: 12px;}</code></pre><p>如果上面的代码，你看着还有问题，那需要补补CSS了</p><hr><h3 id="用HTML实现太极图"><a href="#用HTML实现太极图" class="headerlink" title="用HTML实现太极图"></a>用HTML实现太极图</h3><p>不过我发现用html实现这个太极图，只需要一行代码<br>代码如下(<a href="http://www.sail.name/CSS_Demo/%E4%B8%80%E8%A1%8C%E5%85%AB%E5%8D%A6.html">效果预览</a>):</p><pre><code>&lt;span class=&quot;Sail&quot;&gt;&amp;#9775;&lt;/span&gt;</code></pre><hr><p><strong> 这是什么原理呢？</strong><br>这个叫做<a href="https://unicode-table.com/en/" target="_blank" rel="noopener">Unicode字符</a>。<br>使用Unicode字符，需要在meta标签中将charset属性值设为utf-8<br>使用字符</p><ul><li>一、工作量更加少</li><li>二、是响应的</li><li>三、不需要像使用其他icon那样引入文件，页面性能更高</li><li>四、Unicode字符，实现了一万多种不同的字符</li></ul><p><strong> 很多工作别人已经帮我们做好了，只是我们不知道。</strong></p>]]></content>
      
      
      <categories>
          
          <category> HTML&amp;&amp;CSS </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>《哲思录》（一）</title>
      <link href="/2016/12/03/read_Zsl/"/>
      <url>/2016/12/03/read_Zsl/</url>
      
        <content type="html"><![CDATA[<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">这是顾城《哲思录》的相关笔记</span><br><span class="line">本篇博客是人生，中西部分的一些整理。</span><br><span class="line">有关阅读笔记的博客，我尽量不加入自己的想法。</span><br><span class="line">如果有必要，我会另写一篇。</span><br></pre></td></tr></table></figure><h1 id="人生"><a href="#人生" class="headerlink" title="人生"></a>人生</h1><ul><li>一个彻底诚实的人是从不面对选择的，那条路永远清楚无二地呈现在你面前，这和你的憧憬无关，就像你是一棵苹果树，你憧憬结橘子，但是你还是诚实地结出苹果一样</li></ul><ul><li>命运不是风来回吹，命运是大地，走到哪里你都在命中</li></ul><ul><li>人生不能有目的<br>因为目的是空的<br>人生不能没目的<br>因为人生是空的</li></ul><ul><li>遥远的地方是美丽的，因为它只存在于你心里</li></ul><ul><li>反叛和宿命——大海掀起无数反叛的海浪，却从没有升上天空</li></ul><ul><li>从叶到花，或从花到叶，于科研是一个过程，而于生命自身则永远只在此刻。花和叶都是一种记忆方式。果子同时也是种子<br>生命是闪耀的此刻，不是过程，就像芳香不需要道路一样。</li></ul><ul><li>人以为上树必须有梯子，他们忘了苹果并不是爬上去的</li></ul><ul><li>我信神 但不信神要我信它<br>神那么稀罕人信就不神了  有那么可怜的神吗</li></ul><ul><li>所有被风吹过的树<br>都显得有神</li></ul><ul><li>自由意味着什么？意味着体现自身的戒律</li></ul><ul><li>中国人差不多都可以感到一切皆虚幻，只是大都是在失意被动无奈之下去感的，做聊以自慰用；如果你处在上升主动看去前程远大的时刻，有这个心境，那便是真懂了。</li></ul><ul><li>对一般有目的的人讲，你也有目的，他以己度人能理解，也容易知道怎么对付，所以不会害怕；而碰上没目的的。他就不解了，他不能想象没目的是怎么回事儿，他就老猜你的目的，结果猜了半天，还是不觉得抓住你了，他就害怕了</li></ul><ul><li>高贵感是人人不同的。最高贵的人可以不在乎当奴隶，因为他不需要以别人的眼光肯定自己。越没高贵感的人才会越想高人一筹</li></ul><ul><li>真理是至简单的。<br>你只要干干净净，安安静静，便看得清清楚楚。</li></ul><ul><li>执者失之。我想当一个诗人的时候，我就失去了诗，我想当一个人的时候，我就失去了自我；在你什么也不想要的时候，一切如期而来。</li></ul><ul><li><p>句一：<br>人间无故土<br>小雨是家乡</p></li><li><p>句二：<br>园中无缘<br>雨中无雨<br>关山南麓<br>好风依依</p></li><li><p>句三：<br>生命如水<br>大地如梦<br>小路飘飘欲渡</p></li><li><p>句四：<br>若随春风去<br>如何没有花</p></li></ul><ul><li><em><br>树身上有许多圆环<br>转一转就会温暖</em><br>像三月的风扑击者明亮的草垛<br>春风在每个夜晚数她的花朵<br><em><br>生命细细地含着阳光<br>在一瞬间体会到大地的微妙之处</em><br>绿色<br>掩护着死亡<br>一次次在阳光中站起</li></ul><p><img src="/img/read/si.jpg" alt="顾城手书“思”字"></p><h1 id="中西"><a href="#中西" class="headerlink" title="中西"></a>中西</h1><ul><li><strong>技术是人生存所依赖的，却不是人的精神能依凭的；</strong>它是生存的方法，而不是生存的法则。科学是一个很小的东西，并不像人们所寄望的那样可以无所不能。</li></ul><ul><li>我以为知识分子和普通人的区别并不大。<br> 比如慧能算不算知识分子？他不识字。莎士比亚算不算知识分子？他在剧院门口拉车。<br> 所以这样的区分就没什么意思。是有掌握什么知识，掌握多少的不同，但它并不能用是否知识分子来体现，也同人的品性甚至智慧没多少关系，<strong>从来就不是一个教授必定比一个农夫品行高尚或德行完美或更加参透人生。</strong></li></ul><ul><li>民主是集体的个人主义<br> 独裁是个人的集体主义</li></ul><ul><li>我以为这个世界是盲目的，无论东方社会，还是西方社会。<br>所谓盲目不是说它放弃了目的，而是说它不断地制造目的。<br>或者说它制造了一个个不真实的目的。<br>将一切搞得极其复杂起来。</li></ul>]]></content>
      
      
      <categories>
          
          <category> 阅读笔记 </category>
          
      </categories>
      
      
    </entry>
    
    
    
    <entry>
      <title>叶尖滴落的星球</title>
      <link href="/2016/12/01/first/"/>
      <url>/2016/12/01/first/</url>
      
        <content type="html"><![CDATA[<pre><code>这是第一篇，第二篇或许就在明天又或许没有第二篇了。谁又能知道呢？</code></pre><p>之前是在CSDN写博客，几乎都是和技术相关的内容。产出也不高，大概一周一篇。</p><p>原想先在CSDN练上大半年，再搭建自己的博客。可工作室需要搭建博客，为了练手，我给自己也搭了一个。<strong> 所以这是一个意外的东西。</strong></p><p>我最初看博客的时候，还得追溯到初中时代。那时常看的有两个，一个是韩寒的个人博客，一个是《左岸读书》。2011年，APP《ONE》出来了，韩少的博客也很少更新了，我也就转战了《ONE》。后来因为文章质量的原因，《ONE》我也就放弃了。《左岸读书》有一个栏目叫《语不惊人死不休》，每周一期，很是不错。</p><p>其实进入移动互联网时代，博客的受众就越发的少了。现在更是人工智能时代。</p><p><strong>不过我还是得写博客</strong>，因为这个行动本身是对我有意义的。一是，可以让我跳出舒适区，我很懒。二是，写博可以将行动与反思结合起来。一味的行动是不够的，一味的反思也是不够的。三是，有助于我对自己所学进行更好的梳理。有时候为了讲清一个技术点，可能需要查阅很多文档资料，才能理解得更深刻。</p><p>说回博客本身，这个博客我是使用hexo搭建的。之所以用hexo，一来是因为，工作室要求使用开源的。二来是因为，hexo够轻便。hexo依赖的环境只有node，操作的话，git就ok了。如果之前就有学过node，git，那上手就很快了。哪怕没有学过，也不会太久，毕竟你只需要做一些简单的工作。</p><p>至于博客主题，在我看过不下30个主题后，最终选择了<a href="https://github.com/letiantian/huno" target="_blank" rel="noopener">huno</a>。<a href="https://github.com/letiantian/huno" target="_blank" rel="noopener">huno</a>是为Hexo编写的一个响应式的主题，该主题基于Uno。</p><p>这个主题整体来说很好，不过一些细节上还是有些问题。比如文章标题的大小，和字体没有响应式处理，移动端的导航栏很丑之类的。于是我自己又花了一些时间，修改了源码(主要是uno.css)。于是博客就是你现在看到的这样了。博客是放在github上的，可能国内用户访问比较慢。之前有听张老师讲，可以将博客放在github和coding上，然后dnspod,就可以解决国内用户访问的问题。回头再折腾下吧。</p><p>首页的图片是由<a href="http://weibo.com/fanxiangbei" target="_blank" rel="noopener">反向北</a>提供的。为了找到合适的图片，十分曲折。最后在反向北提供的几十张图片中，选中了两张。两张我都很喜欢，难以取舍，就差做随机来敲定了。后来在刘鹏学长的建议与指点下，选择了这张。</p><p>原图和博客首页图也有些细微的区别。原图右下角，有更多的小点点，考虑到实际的效果，后来被处理掉了。<strong>反向北说，『 右下角的那些点是故意的，故意提高了水滴和噪点的存在感，营造星际中星球的感觉。绿叶不是主题，水是打在叶子上溅开的，所以叫《叶尖滴落的星球》。 』</strong></p><p><img src="/img/one.jpg" alt="去掉的小点"></p><p><strong>搭建的时候也还是花费了一番功夫，比如我翘了几次毛概课。这是一个很意外的东西，比我预想的快了大半年。但，搭建过程中我还是饱含激情的(比如我又翘了几次形势与政策课)，我以为早一天搭建完，我就可以多写一篇博客。</strong>其实并非这样的，我现在也才开始写第一篇。钱老讲过，<strong>『 很多人都往往将自己的写作冲动当作写作才能 』</strong>。</p><p>不过胡代新说过，『 写作是需要酝酿的。 』的确如此。可这已经是往事了。《勇敢的心》至今也没有写出来，不过我已经领悟到其<a href="http://user.qzone.qq.com/865605793/311" target="_blank" rel="noopener">真谛</a>了。</p><p>世界上本就没有完全的准备充分。</p><p>希望自己写技术的文章少一些，非技术的内容多一些。正如顾城所说，<strong>技术是人生存所依赖的，却不是人的精神能依凭的；它是生存的方法，而不是生存的法则。科学是一个很小的东西，并不像人们所寄望的那样可以无所不能。</strong></p><p>挫万物于指尖。不负自己。</p>]]></content>
      
      
      <categories>
          
          <category> 杂文 </category>
          
      </categories>
      
      
    </entry>
    
    
  
  
</search>
